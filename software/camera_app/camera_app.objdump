
camera_app.elf:     file format elf32-littlenios2
camera_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001027c memsz 0x0001027c flags r-x
    LOAD off    0x0001129c vaddr 0x0001029c paddr 0x00011d88 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013874 vaddr 0x00013874 paddr 0x00013874 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fd4c  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000394  0000ff08  0000ff08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0001029c  00011d88  0001129c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00013874  00013874  00013874  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000139d0  000139d0  00012d88  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012d88  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d68  00000000  00000000  00012db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025dc0  00000000  00000000  00013b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000096d4  00000000  00000000  000398d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b7e5  00000000  00000000  00042fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002480  00000000  00000000  0004e794  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000337f  00000000  00000000  00050c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016f99  00000000  00000000  00053f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006af2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  0006af80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006f722  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006f725  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006f72a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006f72b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006f72c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006f735  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006f73e  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0006f747  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  0006f74d  2**0
                  CONTENTS, READONLY
 26 .jdi          000039ab  00000000  00000000  0006f76d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003de28  00000000  00000000  00073118  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0000ff08 l    d  .rodata	00000000 .rodata
0001029c l    d  .rwdata	00000000 .rwdata
00013874 l    d  .bss	00000000 .bss
000139d0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /data/workspace/ES/lab03/software/camera_app_bsp//obj/HAL/src/crt0.o
000001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 i2c.c
000009e4 l     F .text	00000030 i2c_usleep
00000a14 l     F .text	00000040 i2c_wait_end_of_transfer
00000a54 l     F .text	0000006c i2c_set_data_control
00000ac0 l     F .text	00000064 i2c_get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
000011dc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 impure.c
0001029c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000ffee l     O .rodata	00000010 zeroes.4181
0000fffe l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000046dc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000625c l     F .text	00000008 __fp_lock
00006264 l     F .text	00000008 __fp_unlock
00006278 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00010ae8 l     O .rwdata	00000020 lc_ctype_charset
00010ac8 l     O .rwdata	00000020 lc_message_charset
00010b08 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001002c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000893c l     F .text	000000fc __sprint_r.part.0
00010160 l     O .rodata	00000010 blanks.4125
00010150 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d6e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d808 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d834 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d934 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000da28 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000db0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000dce8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011d78 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000df74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e0bc l     F .text	00000038 alt_dev_reg
00010ce8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e394 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000e598 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ee6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f318 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f450 l     F .text	00000050 alt_get_errno
0000f4a0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008570 g     F .text	00000074 _mprec_log10
0000865c g     F .text	0000008c __any_on
0000a28c g     F .text	00000054 _isatty_r
00010038 g     O .rodata	00000028 __mprec_tinytens
0000dc30 g     F .text	00000078 alt_main
00001ca8 g     F .text	000000b8 _puts_r
000138d0 g     O .bss	00000100 alt_irq
0000a2e0 g     F .text	0000005c _lseek_r
00000758 g     F .text	00000140 dump_pcm_data
00011d88 g       *ABS*	00000000 __flash_rwdata_start
0000c250 g     F .text	00000084 .hidden __eqdf2
000139d0 g       *ABS*	00000000 __alt_heap_start
00001b04 g     F .text	0000003c printf
0000a398 g     F .text	0000009c _wcrtomb_r
00008834 g     F .text	0000005c __sseek
000065ac g     F .text	00000010 __sinit
0000443c g     F .text	00000154 __swbuf_r
00007024 g     F .text	0000007c _setlocale_r
00006418 g     F .text	00000064 __sfmoreglue
0000dcc8 g     F .text	00000020 __malloc_unlock
000074dc g     F .text	0000015c memmove
00006594 g     F .text	00000018 _cleanup
0000775c g     F .text	000000a8 _Balloc
0000c2d4 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00000c2c g     F .text	0000012c i2c_write
000005c0 g     F .text	00000034 camera_controller_read_done
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000a234 g     F .text	00000058 _fstat_r
00013880 g     O .bss	00000004 errno
000087b0 g     F .text	00000008 __seofread
00013894 g     O .bss	00000004 alt_argv
00019d48 g       *ABS*	00000000 _gp
0000df44 g     F .text	00000030 usleep
000006b8 g     F .text	00000048 dump_word
00010b68 g     O .rwdata	00000180 alt_fd_list
0000f880 g     F .text	00000090 alt_find_dev
000073a4 g     F .text	00000138 memcpy
0000626c g     F .text	0000000c _cleanup_r
0000d510 g     F .text	000000d0 .hidden __floatsidf
00000ea0 g     F .text	00000194 i2c_write_array
0000f3d8 g     F .text	00000078 alt_io_redirect
0000c3b4 g     F .text	000000e0 .hidden __ltdf2
0000ff08 g       *ABS*	00000000 __DTOR_END__
00001d60 g     F .text	00000014 puts
000086e8 g     F .text	00000074 __fpclassifyd
000084cc g     F .text	000000a4 __ratio
00009dac g     F .text	00000024 __vfiprintf_internal
0000e794 g     F .text	0000020c altera_avalon_jtag_uart_read
00001308 g     F .text	00000014 malloc
00001ad8 g     F .text	0000002c _printf_r
000012f8 g     F .text	00000008 .hidden __udivsi3
0000d984 g     F .text	000000a4 isatty
00010088 g     O .rodata	000000c8 __mprec_tens
00000700 g     F .text	00000058 dump_pcm_header
000070a0 g     F .text	0000000c __locale_charset
0000fad8 g     F .text	0000008c alt_icache_flush
0001387c g     O .bss	00000004 __malloc_top_pad
00011d58 g     O .rwdata	00000004 __mb_cur_max
000070d0 g     F .text	0000000c _localeconv_r
00007b5c g     F .text	0000003c __i2b
00006a10 g     F .text	000004a4 __sfvwrite_r
00002330 g     F .text	00000054 _sbrk_r
0000a33c g     F .text	0000005c _read_r
00011d70 g     O .rwdata	00000004 alt_max_fd
00009f44 g     F .text	00000100 _fclose_r
0000622c g     F .text	00000030 fflush
00013878 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b0e8 g     F .text	0000089c .hidden __adddf3
00008274 g     F .text	0000011c __b2d
0000ab58 g     F .text	00000590 .hidden __umoddi3
0000db5c g     F .text	000000d4 lseek
00011d48 g     O .rwdata	00000004 _global_impure_ptr
00001d90 g     F .text	000005a0 _realloc_r
000139d0 g       *ABS*	00000000 __bss_end
0000f228 g     F .text	000000f0 alt_iic_isr_register
0000f75c g     F .text	00000104 alt_tick
0000a598 g     F .text	000005c0 .hidden __udivdi3
0000a058 g     F .text	00000184 _fputwc_r
00010060 g     O .rodata	00000028 __mprec_bigtens
00007940 g     F .text	00000104 __s2b
0000d5e0 g     F .text	000000a4 .hidden __floatunsidf
0000801c g     F .text	00000060 __mcmp
000065cc g     F .text	00000018 __fp_lock_all
0000f1dc g     F .text	0000004c alt_ic_irq_enabled
0000f6c4 g     F .text	00000098 alt_alarm_stop
0001389c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
00010b40 g     O .rwdata	00000028 alt_dev_null
0000ee50 g     F .text	0000001c alt_dcache_flush_all
00007a44 g     F .text	00000068 __hi0bits
0000d488 g     F .text	00000088 .hidden __fixdfsi
00011d88 g       *ABS*	00000000 __ram_rwdata_end
00011d68 g     O .rwdata	00000008 alt_dev_list
0000dfc4 g     F .text	000000f8 write
00001b40 g     F .text	000000a0 _putc_r
0001029c g       *ABS*	00000000 __ram_rodata_end
0000d884 g     F .text	000000b0 fstat
00000654 g     F .text	00000064 sleep_ms
00000b24 g     F .text	0000002c i2c_inst
0000c3b4 g     F .text	000000e0 .hidden __ledf2
00007d94 g     F .text	00000140 __pow5mult
00008a50 g     F .text	0000135c ___vfiprintf_internal_r
0001388c g     O .bss	00000004 __nlocale_changed
00001300 g     F .text	00000008 .hidden __umodsi3
000139d0 g       *ABS*	00000000 end
0000e2d0 g     F .text	000000c4 altera_avalon_jtag_uart_init
0000ff08 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000d684 g     F .text	00000064 .hidden __clzsi2
0000e9a0 g     F .text	00000218 altera_avalon_jtag_uart_write
000065bc g     F .text	00000004 __sfp_lock_acquire
000072bc g     F .text	000000e8 memchr
0000241c g     F .text	00001ffc ___vfprintf_internal_r
00000394 g     F .text	00000040 camera_controller_destroy
00006720 g     F .text	000002f0 _free_r
000070ac g     F .text	00000010 __locale_mb_cur_max
0000fd40 g     F .text	00000194 __call_exitprocs
00013888 g     O .bss	00000004 __mlocale_changed
00011d50 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000003c _start
000138a0 g     O .bss	00000004 _alt_tick_rate
00007ed4 g     F .text	00000148 __lshift
000138a4 g     O .bss	00000004 _alt_nticks
0000dd38 g     F .text	000000fc read
0000e128 g     F .text	00000044 alt_sys_init
00000bb0 g     F .text	0000007c i2c_configure
0000fc2c g     F .text	00000114 __register_exitproc
00000624 g     F .text	00000030 camera_controller_read_ctrl_1
00007b98 g     F .text	000001fc __multiply
0000e640 g     F .text	00000068 altera_avalon_jtag_uart_close
0001029c g       *ABS*	00000000 __ram_rwdata_start
0000ff08 g       *ABS*	00000000 __ram_rodata_start
000138a8 g     O .bss	00000028 __malloc_current_mallinfo
00008390 g     F .text	0000013c __d2b
00001d74 g     F .text	0000001c realloc
0000e16c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000fa24 g     F .text	000000b4 alt_get_fd
0000ecf8 g     F .text	00000158 alt_busy_sleep
00009e2c g     F .text	00000054 _close_r
0000fbb0 g     F .text	0000007c memcmp
0000e22c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000139d0 g       *ABS*	00000000 __alt_stack_base
0000e27c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000045ac g     F .text	00000130 __swsetup_r
0000b984 g     F .text	000008cc .hidden __divdf3
0000647c g     F .text	00000118 __sfp
000085e4 g     F .text	00000078 __copybits
000106c0 g     O .rwdata	00000408 __malloc_av_
000065c8 g     F .text	00000004 __sinit_lock_release
0000c494 g     F .text	00000724 .hidden __muldf3
0000875c g     F .text	00000054 __sread
0000f910 g     F .text	00000114 alt_find_file
0000eebc g     F .text	000000a4 alt_dev_llist_insert
000001f8 g     F .text	00000084 trdb_d5m_write
0000dca8 g     F .text	00000020 __malloc_lock
0000de94 g     F .text	000000b0 sbrk
00006004 g     F .text	00000228 _fflush_r
00009e80 g     F .text	000000c4 _calloc_r
00013874 g       *ABS*	00000000 __bss_start
00007638 g     F .text	00000124 memset
00000898 g     F .text	0000014c main
00013898 g     O .bss	00000004 alt_envp
00013874 g     O .bss	00000004 __malloc_max_total_mem
0000e1cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000d58 g     F .text	00000148 i2c_read
00004590 g     F .text	0000001c __swbuf
00008890 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
0000a044 g     F .text	00000014 fclose
000048dc g     F .text	00001728 _dtoa_r
00001330 g     F .text	000007a8 _malloc_r
0000a50c g     F .text	00000030 __ascii_wctomb
00011d74 g     O .rwdata	00000004 alt_errno
00006eb4 g     F .text	000000b8 _fwalk
00001be0 g     F .text	000000c8 putc
00001248 g     F .text	00000054 .hidden __divsi3
000065fc g     F .text	00000124 _malloc_trim_r
0000ff08 g       *ABS*	00000000 __CTOR_END__
00008898 g     F .text	000000a4 strcmp
0000ff08 g       *ABS*	00000000 __flash_rodata_start
0000ff08 g       *ABS*	00000000 __DTOR_LIST__
0000c250 g     F .text	00000084 .hidden __nedf2
0000e0f4 g     F .text	00000034 alt_irq_init
0000de34 g     F .text	00000060 alt_release_fd
00010170 g     O .rodata	00000100 .hidden __clz_tab
00013884 g     O .bss	00000004 _PathLocale
0000fb64 g     F .text	00000014 atexit
00009dd0 g     F .text	0000005c _write_r
000070dc g     F .text	0000001c setlocale
00011d4c g     O .rwdata	00000004 _impure_ptr
00013890 g     O .bss	00000004 alt_argc
0000efbc g     F .text	0000005c _do_dtors
000070c8 g     F .text	00000008 __locale_cjk_lang
000005f4 g     F .text	00000030 camera_controller_read_current_frame
00000b50 g     F .text	00000060 i2c_init
00000020 g       .exceptions	00000000 alt_irq_entry
00008214 g     F .text	00000060 __ulp
000065e4 g     F .text	00000018 __fp_unlock_all
00011d60 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000070f8 g     F .text	0000000c localeconv
0000f048 g     F .text	00000050 alt_ic_isr_register
00000318 g     F .text	0000007c camera_controller_create
00011d88 g       *ABS*	00000000 _edata
000139d0 g       *ABS*	00000000 _end
0000058c g     F .text	00000034 camera_controller_stop
000001bc g       *ABS*	00000000 __ram_exceptions_end
0000e6a8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00000558 g     F .text	00000034 camera_controller_start
0000027c g     F .text	0000009c trdb_d5m_read
0000f138 g     F .text	000000a4 alt_ic_irq_disable
000087b8 g     F .text	0000007c __swrite
00011d54 g     O .rwdata	00000004 __malloc_trim_threshold
0000f860 g     F .text	00000020 altera_nios2_qsys_irq_init
000070bc g     F .text	0000000c __locale_msgcharset
0000fb78 g     F .text	00000038 exit
00006f6c g     F .text	000000b8 _fwalk_reent
0000807c g     F .text	00000198 __mdiff
0000129c g     F .text	0000005c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000065c0 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000003d4 g     F .text	00000184 camera_controller_configure
0000fed4 g     F .text	00000034 _exit
0000ebb8 g     F .text	00000140 alt_alarm_start
00007104 g     F .text	000001b8 __smakebuf_r
00001034 g     F .text	000001a8 i2c_read_array
00002384 g     F .text	00000098 strlen
0000f56c g     F .text	00000158 open
0000c2d4 g     F .text	000000e0 .hidden __gedf2
00011d5c g     O .rwdata	00000004 __wctomb
00008a38 g     F .text	00000018 __sprint_r
0000f018 g     F .text	00000030 alt_icache_flush_all
00011d7c g     O .rwdata	00000004 alt_priority_mask
0000f098 g     F .text	000000a0 alt_ic_irq_enable
00004418 g     F .text	00000024 __vfprintf_internal
0000a53c g     F .text	0000005c _wctomb_r
0000cbb8 g     F .text	000008d0 .hidden __subdf3
00007aac g     F .text	000000b0 __lo0bits
00011d80 g     O .rwdata	00000008 alt_alarm_list
0000ef60 g     F .text	0000005c _do_ctors
0000a434 g     F .text	000000d8 wcrtomb
0000d738 g     F .text	000000d0 close
0000da8c g     F .text	00000080 alt_load
0000a1dc g     F .text	00000058 fputwc
0000131c g     F .text	00000014 free
000065c4 g     F .text	00000004 __sinit_lock_acquire
0000782c g     F .text	00000114 __multadd
00007804 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	108e3404 	addi	r2,r2,14544
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	108e3404 	addi	r2,r2,14544
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d6a75214 	ori	gp,gp,40264
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d0:	108e1d14 	ori	r2,r2,14452

    movhi r3, %hi(__bss_end)
     1d4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d8:	18ce7414 	ori	r3,r3,14800

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1ec:	000da8c0 	call	da8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f0:	000dc300 	call	dc30 <alt_main>

000001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f4:	003fff06 	br	1f4 <alt_after_alt_main>

000001f8 <trdb_d5m_write>:
  // I2C stuff

  #define I2C_FREQ              (50000000) /* 50 MHz -- clock frequency driving the i2c core: 50 MHz */
  #define TRDB_D5M_I2C_ADDRESS  (0xba)

  bool trdb_d5m_write(i2c_dev *i2c, uint8_t register_offset, uint16_t data) {
     1f8:	defff804 	addi	sp,sp,-32
     1fc:	dfc00715 	stw	ra,28(sp)
     200:	df000615 	stw	fp,24(sp)
     204:	df000604 	addi	fp,sp,24
     208:	e13ffd15 	stw	r4,-12(fp)
     20c:	2807883a 	mov	r3,r5
     210:	3005883a 	mov	r2,r6
     214:	e0fffe05 	stb	r3,-8(fp)
     218:	e0bfff0d 	sth	r2,-4(fp)
      uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
     21c:	e0bfff0b 	ldhu	r2,-4(fp)
     220:	1004d23a 	srli	r2,r2,8
     224:	e0bffc05 	stb	r2,-16(fp)
     228:	e0bfff0b 	ldhu	r2,-4(fp)
     22c:	e0bffc45 	stb	r2,-15(fp)

      int success = i2c_write_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
     230:	e1bffe03 	ldbu	r6,-8(fp)
     234:	e0fffc04 	addi	r3,fp,-16
     238:	00800084 	movi	r2,2
     23c:	d8800015 	stw	r2,0(sp)
     240:	e13ffd17 	ldw	r4,-12(fp)
     244:	01402e84 	movi	r5,186
     248:	180f883a 	mov	r7,r3
     24c:	0000ea00 	call	ea0 <i2c_write_array>
     250:	e0bffb15 	stw	r2,-20(fp)

      if (success != I2C_SUCCESS) {
     254:	e0bffb17 	ldw	r2,-20(fp)
     258:	10000226 	beq	r2,zero,264 <trdb_d5m_write+0x6c>
          return false;
     25c:	0005883a 	mov	r2,zero
     260:	00000106 	br	268 <trdb_d5m_write+0x70>
      } else {
          return true;
     264:	00800044 	movi	r2,1
      }
  }
     268:	e037883a 	mov	sp,fp
     26c:	dfc00117 	ldw	ra,4(sp)
     270:	df000017 	ldw	fp,0(sp)
     274:	dec00204 	addi	sp,sp,8
     278:	f800283a 	ret

0000027c <trdb_d5m_read>:

  bool trdb_d5m_read(i2c_dev *i2c, uint8_t register_offset, uint16_t *data) {
     27c:	defff804 	addi	sp,sp,-32
     280:	dfc00715 	stw	ra,28(sp)
     284:	df000615 	stw	fp,24(sp)
     288:	df000604 	addi	fp,sp,24
     28c:	e13ffd15 	stw	r4,-12(fp)
     290:	2805883a 	mov	r2,r5
     294:	e1bfff15 	stw	r6,-4(fp)
     298:	e0bffe05 	stb	r2,-8(fp)
      uint8_t byte_data[2] = {0, 0};
     29c:	e03ffc05 	stb	zero,-16(fp)
     2a0:	e03ffc45 	stb	zero,-15(fp)

      int success = i2c_read_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
     2a4:	e1bffe03 	ldbu	r6,-8(fp)
     2a8:	e0fffc04 	addi	r3,fp,-16
     2ac:	00800084 	movi	r2,2
     2b0:	d8800015 	stw	r2,0(sp)
     2b4:	e13ffd17 	ldw	r4,-12(fp)
     2b8:	01402e84 	movi	r5,186
     2bc:	180f883a 	mov	r7,r3
     2c0:	00010340 	call	1034 <i2c_read_array>
     2c4:	e0bffb15 	stw	r2,-20(fp)

      if (success != I2C_SUCCESS) {
     2c8:	e0bffb17 	ldw	r2,-20(fp)
     2cc:	10000226 	beq	r2,zero,2d8 <trdb_d5m_read+0x5c>
          return false;
     2d0:	0005883a 	mov	r2,zero
     2d4:	00000b06 	br	304 <trdb_d5m_read+0x88>
      } else {
          *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
     2d8:	e0bffc03 	ldbu	r2,-16(fp)
     2dc:	10803fcc 	andi	r2,r2,255
     2e0:	1004923a 	slli	r2,r2,8
     2e4:	1007883a 	mov	r3,r2
     2e8:	e0bffc43 	ldbu	r2,-15(fp)
     2ec:	10803fcc 	andi	r2,r2,255
     2f0:	1885883a 	add	r2,r3,r2
     2f4:	1007883a 	mov	r3,r2
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	10c0000d 	sth	r3,0(r2)
          return true;
     300:	00800044 	movi	r2,1
      }
  }
     304:	e037883a 	mov	sp,fp
     308:	dfc00117 	ldw	ra,4(sp)
     30c:	df000017 	ldw	fp,0(sp)
     310:	dec00204 	addi	sp,sp,8
     314:	f800283a 	ret

00000318 <camera_controller_create>:
    i2c_dev i2c;
    uint16_t* buffer;
    void* addr;
  };

  struct Camera *camera_controller_create(void* addr) {
     318:	defffb04 	addi	sp,sp,-20
     31c:	dfc00415 	stw	ra,16(sp)
     320:	df000315 	stw	fp,12(sp)
     324:	dc000215 	stw	r16,8(sp)
     328:	df000304 	addi	fp,sp,12
     32c:	e13ffe15 	stw	r4,-8(fp)
    struct Camera *cam = malloc(sizeof(struct Camera));
     330:	01000304 	movi	r4,12
     334:	00013080 	call	1308 <malloc>
     338:	e0bffd15 	stw	r2,-12(fp)
    cam->addr = addr;
     33c:	e0bffd17 	ldw	r2,-12(fp)
     340:	e0fffe17 	ldw	r3,-8(fp)
     344:	10c00215 	stw	r3,8(r2)
    cam->i2c = i2c_inst((void *) I2C_0_BASE);
     348:	e43ffd17 	ldw	r16,-12(fp)
     34c:	01008034 	movhi	r4,512
     350:	21001404 	addi	r4,r4,80
     354:	0000b240 	call	b24 <i2c_inst>
     358:	80800015 	stw	r2,0(r16)
    i2c_init(&cam->i2c, I2C_FREQ);
     35c:	e0bffd17 	ldw	r2,-12(fp)
     360:	1009883a 	mov	r4,r2
     364:	0140bef4 	movhi	r5,763
     368:	297c2004 	addi	r5,r5,-3968
     36c:	0000b500 	call	b50 <i2c_init>
    cam->buffer = NULL;
     370:	e0bffd17 	ldw	r2,-12(fp)
     374:	10000115 	stw	zero,4(r2)
    return cam;
     378:	e0bffd17 	ldw	r2,-12(fp)
  }
     37c:	e6ffff04 	addi	sp,fp,-4
     380:	dfc00217 	ldw	ra,8(sp)
     384:	df000117 	ldw	fp,4(sp)
     388:	dc000017 	ldw	r16,0(sp)
     38c:	dec00304 	addi	sp,sp,12
     390:	f800283a 	ret

00000394 <camera_controller_destroy>:

  void camera_controller_destroy(struct Camera *cam) {
     394:	defffd04 	addi	sp,sp,-12
     398:	dfc00215 	stw	ra,8(sp)
     39c:	df000115 	stw	fp,4(sp)
     3a0:	df000104 	addi	fp,sp,4
     3a4:	e13fff15 	stw	r4,-4(fp)
    free(cam->buffer);
     3a8:	e0bfff17 	ldw	r2,-4(fp)
     3ac:	10800117 	ldw	r2,4(r2)
     3b0:	1009883a 	mov	r4,r2
     3b4:	000131c0 	call	131c <free>
    free(cam);
     3b8:	e13fff17 	ldw	r4,-4(fp)
     3bc:	000131c0 	call	131c <free>
  }
     3c0:	e037883a 	mov	sp,fp
     3c4:	dfc00117 	ldw	ra,4(sp)
     3c8:	df000017 	ldw	fp,0(sp)
     3cc:	dec00204 	addi	sp,sp,8
     3d0:	f800283a 	ret

000003d4 <camera_controller_configure>:

  int camera_controller_configure(struct Camera* cam, struct CameraConfig *conf) {
     3d4:	defffc04 	addi	sp,sp,-16
     3d8:	dfc00315 	stw	ra,12(sp)
     3dc:	df000215 	stw	fp,8(sp)
     3e0:	df000204 	addi	fp,sp,8
     3e4:	e13ffe15 	stw	r4,-8(fp)
     3e8:	e17fff15 	stw	r5,-4(fp)
    // Sample on rising edge
    trdb_d5m_write(&cam->i2c, 0x00a, 0x8000);
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	1009883a 	mov	r4,r2
     3f4:	01400284 	movi	r5,10
     3f8:	01a00014 	movui	r6,32768
     3fc:	00001f80 	call	1f8 <trdb_d5m_write>

    #ifdef TEST_PATTERN
      trdb_d5m_write(&cam->i2c, 0x0a0, (TEST_PATTERN << 3) | (0x1));
    #else
      trdb_d5m_write(&cam->i2c, 0x0a0, 0);
     400:	e0bffe17 	ldw	r2,-8(fp)
     404:	1009883a 	mov	r4,r2
     408:	01402804 	movi	r5,160
     40c:	000d883a 	mov	r6,zero
     410:	00001f80 	call	1f8 <trdb_d5m_write>
    #endif


    if ((cam->buffer = realloc(cam->buffer, sizeof(uint16_t)*CAM_NB_BUFFERS*conf->width*conf->height)) == NULL) {
     414:	e0bffe17 	ldw	r2,-8(fp)
     418:	10c00117 	ldw	r3,4(r2)
     41c:	e0bfff17 	ldw	r2,-4(fp)
     420:	10800017 	ldw	r2,0(r2)
     424:	1009883a 	mov	r4,r2
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800117 	ldw	r2,4(r2)
     430:	2085383a 	mul	r2,r4,r2
     434:	100490fa 	slli	r2,r2,3
     438:	1809883a 	mov	r4,r3
     43c:	100b883a 	mov	r5,r2
     440:	0001d740 	call	1d74 <realloc>
     444:	1007883a 	mov	r3,r2
     448:	e0bffe17 	ldw	r2,-8(fp)
     44c:	10c00115 	stw	r3,4(r2)
     450:	e0bffe17 	ldw	r2,-8(fp)
     454:	10800117 	ldw	r2,4(r2)
     458:	1000051e 	bne	r2,zero,470 <camera_controller_configure+0x9c>
  		printf("# Cannot allocate image buffer\n");
     45c:	01000074 	movhi	r4,1
     460:	213fc204 	addi	r4,r4,-248
     464:	0001d600 	call	1d60 <puts>
  		return 0;
     468:	0005883a 	mov	r2,zero
     46c:	00003506 	br	544 <camera_controller_configure+0x170>
  	}

    // trdb_d5m_write(&i2c, 0x00c, 8000); // Shutter delay (increases exposure)

    trdb_d5m_write(&cam->i2c, 0x003, (conf->height << 2) - 1);
     470:	e0fffe17 	ldw	r3,-8(fp)
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800117 	ldw	r2,4(r2)
     47c:	1085883a 	add	r2,r2,r2
     480:	1085883a 	add	r2,r2,r2
     484:	10bfffc4 	addi	r2,r2,-1
     488:	10bfffcc 	andi	r2,r2,65535
     48c:	1809883a 	mov	r4,r3
     490:	014000c4 	movi	r5,3
     494:	100d883a 	mov	r6,r2
     498:	00001f80 	call	1f8 <trdb_d5m_write>
    // Frame width
    trdb_d5m_write(&cam->i2c, 0x004, (conf->width << 2) - 1);
     49c:	e0fffe17 	ldw	r3,-8(fp)
     4a0:	e0bfff17 	ldw	r2,-4(fp)
     4a4:	10800017 	ldw	r2,0(r2)
     4a8:	1085883a 	add	r2,r2,r2
     4ac:	1085883a 	add	r2,r2,r2
     4b0:	10bfffc4 	addi	r2,r2,-1
     4b4:	10bfffcc 	andi	r2,r2,65535
     4b8:	1809883a 	mov	r4,r3
     4bc:	01400104 	movi	r5,4
     4c0:	100d883a 	mov	r6,r2
     4c4:	00001f80 	call	1f8 <trdb_d5m_write>
    // Row binning x4
    trdb_d5m_write(&cam->i2c, 0x022, 0x0011);
     4c8:	e0bffe17 	ldw	r2,-8(fp)
     4cc:	1009883a 	mov	r4,r2
     4d0:	01400884 	movi	r5,34
     4d4:	01800444 	movi	r6,17
     4d8:	00001f80 	call	1f8 <trdb_d5m_write>
    // Column binning x4
    trdb_d5m_write(&cam->i2c, 0x023, 0x0011);
     4dc:	e0bffe17 	ldw	r2,-8(fp)
     4e0:	1009883a 	mov	r4,r2
     4e4:	014008c4 	movi	r5,35
     4e8:	01800444 	movi	r6,17
     4ec:	00001f80 	call	1f8 <trdb_d5m_write>


    IOWR_32DIRECT(cam->addr, CAM_CTRL_1, CAM_RESET);
     4f0:	e0bffe17 	ldw	r2,-8(fp)
     4f4:	10800217 	ldw	r2,8(r2)
     4f8:	10800304 	addi	r2,r2,12
     4fc:	00c01004 	movi	r3,64
     500:	10c00035 	stwio	r3,0(r2)

  	// Set output buffer address
  	IOWR_32DIRECT(cam->addr, CAM_BUFFER_START, (int)cam->buffer);
     504:	e0bffe17 	ldw	r2,-8(fp)
     508:	10800217 	ldw	r2,8(r2)
     50c:	e0fffe17 	ldw	r3,-8(fp)
     510:	18c00117 	ldw	r3,4(r3)
     514:	10c00035 	stwio	r3,0(r2)
  	IOWR_32DIRECT(cam->addr, CAM_FRAME_LENGTH, conf->width * conf->height * 2);
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800217 	ldw	r2,8(r2)
     520:	10c00104 	addi	r3,r2,4
     524:	e0bfff17 	ldw	r2,-4(fp)
     528:	11000017 	ldw	r4,0(r2)
     52c:	e0bfff17 	ldw	r2,-4(fp)
     530:	10800117 	ldw	r2,4(r2)
     534:	2085383a 	mul	r2,r4,r2
     538:	1085883a 	add	r2,r2,r2
     53c:	18800035 	stwio	r2,0(r3)

    return 1;
     540:	00800044 	movi	r2,1
  }
     544:	e037883a 	mov	sp,fp
     548:	dfc00117 	ldw	ra,4(sp)
     54c:	df000017 	ldw	fp,0(sp)
     550:	dec00204 	addi	sp,sp,8
     554:	f800283a 	ret

00000558 <camera_controller_start>:

  inline void camera_controller_start(struct Camera *cam) {
     558:	defffe04 	addi	sp,sp,-8
     55c:	df000115 	stw	fp,4(sp)
     560:	df000104 	addi	fp,sp,4
     564:	e13fff15 	stw	r4,-4(fp)
  	IOWR_32DIRECT(cam->addr, CAM_CTRL_1, CAM_START);
     568:	e0bfff17 	ldw	r2,-4(fp)
     56c:	10800217 	ldw	r2,8(r2)
     570:	10800304 	addi	r2,r2,12
     574:	00c00404 	movi	r3,16
     578:	10c00035 	stwio	r3,0(r2)
  }
     57c:	e037883a 	mov	sp,fp
     580:	df000017 	ldw	fp,0(sp)
     584:	dec00104 	addi	sp,sp,4
     588:	f800283a 	ret

0000058c <camera_controller_stop>:

  inline void camera_controller_stop(struct Camera *cam) {
     58c:	defffe04 	addi	sp,sp,-8
     590:	df000115 	stw	fp,4(sp)
     594:	df000104 	addi	fp,sp,4
     598:	e13fff15 	stw	r4,-4(fp)
  	IOWR_32DIRECT(cam->addr, CAM_CTRL_1, CAM_STOP);
     59c:	e0bfff17 	ldw	r2,-4(fp)
     5a0:	10800217 	ldw	r2,8(r2)
     5a4:	10800304 	addi	r2,r2,12
     5a8:	00c00804 	movi	r3,32
     5ac:	10c00035 	stwio	r3,0(r2)
  }
     5b0:	e037883a 	mov	sp,fp
     5b4:	df000017 	ldw	fp,0(sp)
     5b8:	dec00104 	addi	sp,sp,4
     5bc:	f800283a 	ret

000005c0 <camera_controller_read_done>:

  inline void camera_controller_read_done(struct Camera *cam) {
     5c0:	defffe04 	addi	sp,sp,-8
     5c4:	df000115 	stw	fp,4(sp)
     5c8:	df000104 	addi	fp,sp,4
     5cc:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(cam->addr, CAM_CTRL_1, CAM_READ_DONE);
     5d0:	e0bfff17 	ldw	r2,-4(fp)
     5d4:	10800217 	ldw	r2,8(r2)
     5d8:	10800304 	addi	r2,r2,12
     5dc:	00c02004 	movi	r3,128
     5e0:	10c00035 	stwio	r3,0(r2)
  }
     5e4:	e037883a 	mov	sp,fp
     5e8:	df000017 	ldw	fp,0(sp)
     5ec:	dec00104 	addi	sp,sp,4
     5f0:	f800283a 	ret

000005f4 <camera_controller_read_current_frame>:

  inline uint16_t* camera_controller_read_current_frame(struct Camera *cam) {
     5f4:	defffe04 	addi	sp,sp,-8
     5f8:	df000115 	stw	fp,4(sp)
     5fc:	df000104 	addi	fp,sp,4
     600:	e13fff15 	stw	r4,-4(fp)
    return (uint16_t*)IORD_32DIRECT(cam->addr, CAM_CURRENT_FRAME);
     604:	e0bfff17 	ldw	r2,-4(fp)
     608:	10800217 	ldw	r2,8(r2)
     60c:	10800204 	addi	r2,r2,8
     610:	10800037 	ldwio	r2,0(r2)
  }
     614:	e037883a 	mov	sp,fp
     618:	df000017 	ldw	fp,0(sp)
     61c:	dec00104 	addi	sp,sp,4
     620:	f800283a 	ret

00000624 <camera_controller_read_ctrl_1>:

  inline uint32_t camera_controller_read_ctrl_1(struct Camera *cam) {
     624:	defffe04 	addi	sp,sp,-8
     628:	df000115 	stw	fp,4(sp)
     62c:	df000104 	addi	fp,sp,4
     630:	e13fff15 	stw	r4,-4(fp)
    return IORD_32DIRECT(cam->addr, CAM_CTRL_1);
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	10800217 	ldw	r2,8(r2)
     63c:	10800304 	addi	r2,r2,12
     640:	10800037 	ldwio	r2,0(r2)
  }
     644:	e037883a 	mov	sp,fp
     648:	df000017 	ldw	fp,0(sp)
     64c:	dec00104 	addi	sp,sp,4
     650:	f800283a 	ret

00000654 <sleep_ms>:

#include "../../CameraController/CameraController.h"


void sleep_ms(int milisec)
{
     654:	defffc04 	addi	sp,sp,-16
     658:	df000315 	stw	fp,12(sp)
     65c:	df000304 	addi	fp,sp,12
     660:	e13fff15 	stw	r4,-4(fp)
    int i;
    int k;
    for (i = 0; i < milisec; i++) {
     664:	e03ffd15 	stw	zero,-12(fp)
     668:	00000c06 	br	69c <sleep_ms+0x48>
        for (k = 0; k < 125; k++) {
     66c:	e03ffe15 	stw	zero,-8(fp)
     670:	00000406 	br	684 <sleep_ms+0x30>
             __asm("nop");
     674:	0001883a 	nop
void sleep_ms(int milisec)
{
    int i;
    int k;
    for (i = 0; i < milisec; i++) {
        for (k = 0; k < 125; k++) {
     678:	e0bffe17 	ldw	r2,-8(fp)
     67c:	10800044 	addi	r2,r2,1
     680:	e0bffe15 	stw	r2,-8(fp)
     684:	e0bffe17 	ldw	r2,-8(fp)
     688:	10801f50 	cmplti	r2,r2,125
     68c:	103ff91e 	bne	r2,zero,674 <sleep_ms+0x20>

void sleep_ms(int milisec)
{
    int i;
    int k;
    for (i = 0; i < milisec; i++) {
     690:	e0bffd17 	ldw	r2,-12(fp)
     694:	10800044 	addi	r2,r2,1
     698:	e0bffd15 	stw	r2,-12(fp)
     69c:	e0fffd17 	ldw	r3,-12(fp)
     6a0:	e0bfff17 	ldw	r2,-4(fp)
     6a4:	18bff116 	blt	r3,r2,66c <sleep_ms+0x18>
        for (k = 0; k < 125; k++) {
             __asm("nop");
        }
    }
}
     6a8:	e037883a 	mov	sp,fp
     6ac:	df000017 	ldw	fp,0(sp)
     6b0:	dec00104 	addi	sp,sp,4
     6b4:	f800283a 	ret

000006b8 <dump_word>:

void dump_word(const void *addr)
{
     6b8:	defffd04 	addi	sp,sp,-12
     6bc:	dfc00215 	stw	ra,8(sp)
     6c0:	df000115 	stw	fp,4(sp)
     6c4:	df000104 	addi	fp,sp,4
     6c8:	e13fff15 	stw	r4,-4(fp)
	printf("[%08x] %08x\n", (unsigned int)addr, IORD_32DIRECT(0, (unsigned int)addr));
     6cc:	e0ffff17 	ldw	r3,-4(fp)
     6d0:	e0bfff17 	ldw	r2,-4(fp)
     6d4:	10800037 	ldwio	r2,0(r2)
     6d8:	01000074 	movhi	r4,1
     6dc:	213fca04 	addi	r4,r4,-216
     6e0:	180b883a 	mov	r5,r3
     6e4:	100d883a 	mov	r6,r2
     6e8:	0001b040 	call	1b04 <printf>
}
     6ec:	e037883a 	mov	sp,fp
     6f0:	dfc00117 	ldw	ra,4(sp)
     6f4:	df000017 	ldw	fp,0(sp)
     6f8:	dec00204 	addi	sp,sp,8
     6fc:	f800283a 	ret

00000700 <dump_pcm_header>:

void dump_pcm_header(unsigned int width, unsigned int height) {
     700:	defffc04 	addi	sp,sp,-16
     704:	dfc00315 	stw	ra,12(sp)
     708:	df000215 	stw	fp,8(sp)
     70c:	df000204 	addi	fp,sp,8
     710:	e13ffe15 	stw	r4,-8(fp)
     714:	e17fff15 	stw	r5,-4(fp)
	printf("P3\n");
     718:	01000074 	movhi	r4,1
     71c:	213fce04 	addi	r4,r4,-200
     720:	0001d600 	call	1d60 <puts>
	printf("%d %d\n", width, height);
     724:	01000074 	movhi	r4,1
     728:	213fcf04 	addi	r4,r4,-196
     72c:	e17ffe17 	ldw	r5,-8(fp)
     730:	e1bfff17 	ldw	r6,-4(fp)
     734:	0001b040 	call	1b04 <printf>
	printf("255\n");
     738:	01000074 	movhi	r4,1
     73c:	213fd104 	addi	r4,r4,-188
     740:	0001d600 	call	1d60 <puts>
}
     744:	e037883a 	mov	sp,fp
     748:	dfc00117 	ldw	ra,4(sp)
     74c:	df000017 	ldw	fp,0(sp)
     750:	dec00204 	addi	sp,sp,8
     754:	f800283a 	ret

00000758 <dump_pcm_data>:

void dump_pcm_data(uint16_t *buffer, unsigned int width, unsigned int height)
{
     758:	defff604 	addi	sp,sp,-40
     75c:	dfc00915 	stw	ra,36(sp)
     760:	df000815 	stw	fp,32(sp)
     764:	dc400715 	stw	r17,28(sp)
     768:	dc000615 	stw	r16,24(sp)
     76c:	df000804 	addi	fp,sp,32
     770:	e13ffb15 	stw	r4,-20(fp)
     774:	e17ffc15 	stw	r5,-16(fp)
     778:	e1bffd15 	stw	r6,-12(fp)
	unsigned int i = 0;
     77c:	e03ff815 	stw	zero,-32(fp)

	for (i = 0 ; i < (width * height) ; i ++) {
     780:	e03ff815 	stw	zero,-32(fp)
     784:	00003806 	br	868 <dump_pcm_data+0x110>
		unsigned short px = buffer[i];
     788:	e0bff817 	ldw	r2,-32(fp)
     78c:	1085883a 	add	r2,r2,r2
     790:	1007883a 	mov	r3,r2
     794:	e0bffb17 	ldw	r2,-20(fp)
     798:	10c5883a 	add	r2,r2,r3
     79c:	1080000b 	ldhu	r2,0(r2)
     7a0:	e0bff90d 	sth	r2,-28(fp)


		unsigned char b = (px & 0x001f);
     7a4:	e0bff90b 	ldhu	r2,-28(fp)
     7a8:	108007cc 	andi	r2,r2,31
     7ac:	e0bff985 	stb	r2,-26(fp)
		unsigned char v = (px & 0x07e0) >> 5;
     7b0:	e0bff90b 	ldhu	r2,-28(fp)
     7b4:	1081f80c 	andi	r2,r2,2016
     7b8:	1005d17a 	srai	r2,r2,5
     7bc:	e0bff9c5 	stb	r2,-25(fp)
		unsigned char r = (px & 0xf800) >> 11; // bit 15 -> bit 8
     7c0:	e0bff90b 	ldhu	r2,-28(fp)
     7c4:	1004d2fa 	srli	r2,r2,11
     7c8:	e0bffa05 	stb	r2,-24(fp)

		printf("%03d %03d %03d  ", ((int)r * 255) / 0x1f, ((int)v * 255) / 0x3f, ((int)b * 255) / 0x1f);
     7cc:	e0bffa03 	ldbu	r2,-24(fp)
     7d0:	10803fe4 	muli	r2,r2,255
     7d4:	1009883a 	mov	r4,r2
     7d8:	014007c4 	movi	r5,31
     7dc:	00012480 	call	1248 <__divsi3>
     7e0:	1023883a 	mov	r17,r2
     7e4:	e0bff9c3 	ldbu	r2,-25(fp)
     7e8:	10803fe4 	muli	r2,r2,255
     7ec:	1009883a 	mov	r4,r2
     7f0:	01400fc4 	movi	r5,63
     7f4:	00012480 	call	1248 <__divsi3>
     7f8:	1021883a 	mov	r16,r2
     7fc:	e0bff983 	ldbu	r2,-26(fp)
     800:	10803fe4 	muli	r2,r2,255
     804:	1009883a 	mov	r4,r2
     808:	014007c4 	movi	r5,31
     80c:	00012480 	call	1248 <__divsi3>
     810:	01000074 	movhi	r4,1
     814:	213fd204 	addi	r4,r4,-184
     818:	880b883a 	mov	r5,r17
     81c:	800d883a 	mov	r6,r16
     820:	100f883a 	mov	r7,r2
     824:	0001b040 	call	1b04 <printf>
		// printf("%04x ", px);
		if ((i+1) % width == 0) {
     828:	e0bff817 	ldw	r2,-32(fp)
     82c:	10800044 	addi	r2,r2,1
     830:	1009883a 	mov	r4,r2
     834:	e17ffc17 	ldw	r5,-16(fp)
     838:	00013000 	call	1300 <__umodsi3>
     83c:	1000071e 	bne	r2,zero,85c <dump_pcm_data+0x104>
			putchar('\n');
     840:	00800074 	movhi	r2,1
     844:	10875304 	addi	r2,r2,7500
     848:	10800017 	ldw	r2,0(r2)
     84c:	10800217 	ldw	r2,8(r2)
     850:	01000284 	movi	r4,10
     854:	100b883a 	mov	r5,r2
     858:	0001be00 	call	1be0 <putc>

void dump_pcm_data(uint16_t *buffer, unsigned int width, unsigned int height)
{
	unsigned int i = 0;

	for (i = 0 ; i < (width * height) ; i ++) {
     85c:	e0bff817 	ldw	r2,-32(fp)
     860:	10800044 	addi	r2,r2,1
     864:	e0bff815 	stw	r2,-32(fp)
     868:	e0fffc17 	ldw	r3,-16(fp)
     86c:	e0bffd17 	ldw	r2,-12(fp)
     870:	1885383a 	mul	r2,r3,r2
     874:	e0fff817 	ldw	r3,-32(fp)
     878:	18bfc336 	bltu	r3,r2,788 <dump_pcm_data+0x30>
		if ((i+1) % width == 0) {
			putchar('\n');
		}
	}

}
     87c:	e6fffe04 	addi	sp,fp,-8
     880:	dfc00317 	ldw	ra,12(sp)
     884:	df000217 	ldw	fp,8(sp)
     888:	dc400117 	ldw	r17,4(sp)
     88c:	dc000017 	ldw	r16,0(sp)
     890:	dec00404 	addi	sp,sp,16
     894:	f800283a 	ret

00000898 <main>:


int main()
{
     898:	defff504 	addi	sp,sp,-44
     89c:	dfc00a15 	stw	ra,40(sp)
     8a0:	df000915 	stw	fp,36(sp)
     8a4:	df000904 	addi	fp,sp,36
  struct Camera *cam = camera_controller_create((void*)CAMERA_CONTROLLER_0_BASE);
     8a8:	01008034 	movhi	r4,512
     8ac:	21000804 	addi	r4,r4,32
     8b0:	00003180 	call	318 <camera_controller_create>
     8b4:	e0bff815 	stw	r2,-32(fp)

  int i = 0;
     8b8:	e03ff715 	stw	zero,-36(fp)

  int width = 160, height = 120; // VGA
     8bc:	00802804 	movi	r2,160
     8c0:	e0bff915 	stw	r2,-28(fp)
     8c4:	00801e04 	movi	r2,120
     8c8:	e0bffa15 	stw	r2,-24(fp)

	struct CameraConfig conf;
	conf.width = width;
     8cc:	e0bff917 	ldw	r2,-28(fp)
     8d0:	e0bffd15 	stw	r2,-12(fp)
	conf.height = height;
     8d4:	e0bffa17 	ldw	r2,-24(fp)
     8d8:	e0bffe15 	stw	r2,-8(fp)

	if(!camera_controller_configure(cam, &conf)) {
     8dc:	e0bffd04 	addi	r2,fp,-12
     8e0:	e13ff817 	ldw	r4,-32(fp)
     8e4:	100b883a 	mov	r5,r2
     8e8:	00003d40 	call	3d4 <camera_controller_configure>
     8ec:	1000021e 	bne	r2,zero,8f8 <main+0x60>
		return 0;
     8f0:	0005883a 	mov	r2,zero
     8f4:	00003606 	br	9d0 <main+0x138>
	}

	camera_controller_start(cam);
     8f8:	e13ff817 	ldw	r4,-32(fp)
     8fc:	00005580 	call	558 <camera_controller_start>

	for (i = 0 ; i < 10 ; i++) {
     900:	e03ff715 	stw	zero,-36(fp)
     904:	00002706 	br	9a4 <main+0x10c>
		puts("# == NEW FRAME \n");
     908:	01000074 	movhi	r4,1
     90c:	213fd704 	addi	r4,r4,-164
     910:	0001d600 	call	1d60 <puts>
		dump_pcm_header(width, height);
     914:	e0fff917 	ldw	r3,-28(fp)
     918:	e0bffa17 	ldw	r2,-24(fp)
     91c:	1809883a 	mov	r4,r3
     920:	100b883a 	mov	r5,r2
     924:	00007000 	call	700 <dump_pcm_header>
		int ctl;
		do {
			ctl = camera_controller_read_ctrl_1(cam);
     928:	e13ff817 	ldw	r4,-32(fp)
     92c:	00006240 	call	624 <camera_controller_read_ctrl_1>
     930:	e0bffb15 	stw	r2,-20(fp)
			printf("# CTRL: %08x\n", ctl);
     934:	01000074 	movhi	r4,1
     938:	213fdc04 	addi	r4,r4,-144
     93c:	e17ffb17 	ldw	r5,-20(fp)
     940:	0001b040 	call	1b04 <printf>
			sleep_ms(10000);
     944:	0109c404 	movi	r4,10000
     948:	00006540 	call	654 <sleep_ms>
		} while ( !(ctl & CAM_READ_AVAIL) );
     94c:	e0bffb17 	ldw	r2,-20(fp)
     950:	1080400c 	andi	r2,r2,256
     954:	103ff426 	beq	r2,zero,928 <main+0x90>

		uint16_t* addr = camera_controller_read_current_frame(cam);
     958:	e13ff817 	ldw	r4,-32(fp)
     95c:	00005f40 	call	5f4 <camera_controller_read_current_frame>
     960:	e0bffc15 	stw	r2,-16(fp)
		printf("# Buffer addr: %08x \n", (int)addr);
     964:	e0bffc17 	ldw	r2,-16(fp)
     968:	01000074 	movhi	r4,1
     96c:	213fe004 	addi	r4,r4,-128
     970:	100b883a 	mov	r5,r2
     974:	0001b040 	call	1b04 <printf>
		dump_pcm_data(addr, width, height);
     978:	e0fff917 	ldw	r3,-28(fp)
     97c:	e0bffa17 	ldw	r2,-24(fp)
     980:	e13ffc17 	ldw	r4,-16(fp)
     984:	180b883a 	mov	r5,r3
     988:	100d883a 	mov	r6,r2
     98c:	00007580 	call	758 <dump_pcm_data>
		camera_controller_read_done(cam);
     990:	e13ff817 	ldw	r4,-32(fp)
     994:	00005c00 	call	5c0 <camera_controller_read_done>
		return 0;
	}

	camera_controller_start(cam);

	for (i = 0 ; i < 10 ; i++) {
     998:	e0bff717 	ldw	r2,-36(fp)
     99c:	10800044 	addi	r2,r2,1
     9a0:	e0bff715 	stw	r2,-36(fp)
     9a4:	e0bff717 	ldw	r2,-36(fp)
     9a8:	10800290 	cmplti	r2,r2,10
     9ac:	103fd61e 	bne	r2,zero,908 <main+0x70>
		printf("# Buffer addr: %08x \n", (int)addr);
		dump_pcm_data(addr, width, height);
		camera_controller_read_done(cam);
	}

	camera_controller_stop(cam);
     9b0:	e13ff817 	ldw	r4,-32(fp)
     9b4:	000058c0 	call	58c <camera_controller_stop>
	printf("\n# Finished\n");
     9b8:	01000074 	movhi	r4,1
     9bc:	213fe604 	addi	r4,r4,-104
     9c0:	0001d600 	call	1d60 <puts>

	camera_controller_destroy(cam);
     9c4:	e13ff817 	ldw	r4,-32(fp)
     9c8:	00003940 	call	394 <camera_controller_destroy>
    return 0;
     9cc:	0005883a 	mov	r2,zero
}
     9d0:	e037883a 	mov	sp,fp
     9d4:	dfc00117 	ldw	ra,4(sp)
     9d8:	df000017 	ldw	fp,0(sp)
     9dc:	dec00204 	addi	sp,sp,8
     9e0:	f800283a 	ret

000009e4 <i2c_usleep>:
static void i2c_wait_end_of_transfer(i2c_dev *dev);
static void i2c_set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t i2c_get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
     9e4:	defffd04 	addi	sp,sp,-12
     9e8:	dfc00215 	stw	ra,8(sp)
     9ec:	df000115 	stw	fp,4(sp)
     9f0:	df000104 	addi	fp,sp,4
     9f4:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
     9f8:	e13fff17 	ldw	r4,-4(fp)
     9fc:	000df440 	call	df44 <usleep>
#endif
}
     a00:	e037883a 	mov	sp,fp
     a04:	dfc00117 	ldw	ra,4(sp)
     a08:	df000017 	ldw	fp,0(sp)
     a0c:	dec00204 	addi	sp,sp,8
     a10:	f800283a 	ret

00000a14 <i2c_wait_end_of_transfer>:

/*
 * Waits until the current i2c transfer is finished.
 */
static void i2c_wait_end_of_transfer(i2c_dev *dev) {
     a14:	defffe04 	addi	sp,sp,-8
     a18:	df000115 	stw	fp,4(sp)
     a1c:	df000104 	addi	fp,sp,4
     a20:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
     a24:	0001883a 	nop
     a28:	e0bfff17 	ldw	r2,-4(fp)
     a2c:	10800017 	ldw	r2,0(r2)
     a30:	10800084 	addi	r2,r2,2
     a34:	10800023 	ldbuio	r2,0(r2)
     a38:	10803fcc 	andi	r2,r2,255
     a3c:	1080020c 	andi	r2,r2,8
     a40:	103ff91e 	bne	r2,zero,a28 <i2c_wait_end_of_transfer+0x14>
}
     a44:	e037883a 	mov	sp,fp
     a48:	df000017 	ldw	fp,0(sp)
     a4c:	dec00104 	addi	sp,sp,4
     a50:	f800283a 	ret

00000a54 <i2c_set_data_control>:

/*
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void i2c_set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
     a54:	defffb04 	addi	sp,sp,-20
     a58:	dfc00415 	stw	ra,16(sp)
     a5c:	df000315 	stw	fp,12(sp)
     a60:	df000304 	addi	fp,sp,12
     a64:	e13ffd15 	stw	r4,-12(fp)
     a68:	2807883a 	mov	r3,r5
     a6c:	3005883a 	mov	r2,r6
     a70:	e0fffe05 	stb	r3,-8(fp)
     a74:	e0bfff05 	stb	r2,-4(fp)
    i2c_wait_end_of_transfer(dev);
     a78:	e13ffd17 	ldw	r4,-12(fp)
     a7c:	0000a140 	call	a14 <i2c_wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
     a80:	e0bffd17 	ldw	r2,-12(fp)
     a84:	10800017 	ldw	r2,0(r2)
     a88:	e0fffe03 	ldbu	r3,-8(fp)
     a8c:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
     a90:	e0bffd17 	ldw	r2,-12(fp)
     a94:	10800017 	ldw	r2,0(r2)
     a98:	10800044 	addi	r2,r2,1
     a9c:	e0ffff03 	ldbu	r3,-4(fp)
     aa0:	10c00025 	stbio	r3,0(r2)
    i2c_wait_end_of_transfer(dev);
     aa4:	e13ffd17 	ldw	r4,-12(fp)
     aa8:	0000a140 	call	a14 <i2c_wait_end_of_transfer>
}
     aac:	e037883a 	mov	sp,fp
     ab0:	dfc00117 	ldw	ra,4(sp)
     ab4:	df000017 	ldw	fp,0(sp)
     ab8:	dec00204 	addi	sp,sp,8
     abc:	f800283a 	ret

00000ac0 <i2c_get_data_set_control>:

/*
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t i2c_get_data_set_control(i2c_dev *dev, uint8_t control) {
     ac0:	defffc04 	addi	sp,sp,-16
     ac4:	dfc00315 	stw	ra,12(sp)
     ac8:	df000215 	stw	fp,8(sp)
     acc:	df000204 	addi	fp,sp,8
     ad0:	e13ffe15 	stw	r4,-8(fp)
     ad4:	2805883a 	mov	r2,r5
     ad8:	e0bfff05 	stb	r2,-4(fp)
    i2c_wait_end_of_transfer(dev);
     adc:	e13ffe17 	ldw	r4,-8(fp)
     ae0:	0000a140 	call	a14 <i2c_wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
     ae4:	e0bffe17 	ldw	r2,-8(fp)
     ae8:	10800017 	ldw	r2,0(r2)
     aec:	10800044 	addi	r2,r2,1
     af0:	e0ffff03 	ldbu	r3,-4(fp)
     af4:	10c00025 	stbio	r3,0(r2)
    i2c_wait_end_of_transfer(dev);
     af8:	e13ffe17 	ldw	r4,-8(fp)
     afc:	0000a140 	call	a14 <i2c_wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
     b00:	e0bffe17 	ldw	r2,-8(fp)
     b04:	10800017 	ldw	r2,0(r2)
     b08:	10800023 	ldbuio	r2,0(r2)
     b0c:	10803fcc 	andi	r2,r2,255
}
     b10:	e037883a 	mov	sp,fp
     b14:	dfc00117 	ldw	ra,4(sp)
     b18:	df000017 	ldw	fp,0(sp)
     b1c:	dec00204 	addi	sp,sp,8
     b20:	f800283a 	ret

00000b24 <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
     b24:	defffd04 	addi	sp,sp,-12
     b28:	df000215 	stw	fp,8(sp)
     b2c:	df000204 	addi	fp,sp,8
     b30:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
     b34:	e0bfff17 	ldw	r2,-4(fp)
     b38:	e0bffe15 	stw	r2,-8(fp)

    return dev;
     b3c:	e0bffe17 	ldw	r2,-8(fp)
}
     b40:	e037883a 	mov	sp,fp
     b44:	df000017 	ldw	fp,0(sp)
     b48:	dec00104 	addi	sp,sp,4
     b4c:	f800283a 	ret

00000b50 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
     b50:	defffb04 	addi	sp,sp,-20
     b54:	dfc00415 	stw	ra,16(sp)
     b58:	df000315 	stw	fp,12(sp)
     b5c:	dc000215 	stw	r16,8(sp)
     b60:	df000304 	addi	fp,sp,12
     b64:	e13ffd15 	stw	r4,-12(fp)
     b68:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
     b6c:	e0bffd17 	ldw	r2,-12(fp)
     b70:	10800017 	ldw	r2,0(r2)
     b74:	140000c4 	addi	r16,r2,3
     b78:	e0bffe17 	ldw	r2,-8(fp)
     b7c:	1009883a 	mov	r4,r2
     b80:	014001b4 	movhi	r5,6
     b84:	2946a004 	addi	r5,r5,6784
     b88:	00012f80 	call	12f8 <__udivsi3>
     b8c:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
     b90:	0104e204 	movi	r4,5000
     b94:	00009e40 	call	9e4 <i2c_usleep>
}
     b98:	e6ffff04 	addi	sp,fp,-4
     b9c:	dfc00217 	ldw	ra,8(sp)
     ba0:	df000117 	ldw	fp,4(sp)
     ba4:	dc000017 	ldw	r16,0(sp)
     ba8:	dec00304 	addi	sp,sp,12
     bac:	f800283a 	ret

00000bb0 <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
     bb0:	defffc04 	addi	sp,sp,-16
     bb4:	df000315 	stw	fp,12(sp)
     bb8:	df000304 	addi	fp,sp,12
     bbc:	e13ffe15 	stw	r4,-8(fp)
     bc0:	2805883a 	mov	r2,r5
     bc4:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
     bc8:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
     bcc:	e0bfff03 	ldbu	r2,-4(fp)
     bd0:	10000426 	beq	r2,zero,be4 <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
     bd4:	e0bffd17 	ldw	r2,-12(fp)
     bd8:	10800814 	ori	r2,r2,32
     bdc:	e0bffd15 	stw	r2,-12(fp)
     be0:	00000406 	br	bf4 <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
     be4:	e0fffd17 	ldw	r3,-12(fp)
     be8:	00bff7c4 	movi	r2,-33
     bec:	1884703a 	and	r2,r3,r2
     bf0:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     bf4:	e0bffe17 	ldw	r2,-8(fp)
     bf8:	10800017 	ldw	r2,0(r2)
     bfc:	10800044 	addi	r2,r2,1
     c00:	00c00084 	movi	r3,2
     c04:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
     c08:	e0bffe17 	ldw	r2,-8(fp)
     c0c:	10800017 	ldw	r2,0(r2)
     c10:	10800044 	addi	r2,r2,1
     c14:	e0fffd17 	ldw	r3,-12(fp)
     c18:	10c00025 	stbio	r3,0(r2)
}
     c1c:	e037883a 	mov	sp,fp
     c20:	df000017 	ldw	fp,0(sp)
     c24:	dec00104 	addi	sp,sp,4
     c28:	f800283a 	ret

00000c2c <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
     c2c:	defffa04 	addi	sp,sp,-24
     c30:	dfc00515 	stw	ra,20(sp)
     c34:	df000415 	stw	fp,16(sp)
     c38:	df000404 	addi	fp,sp,16
     c3c:	e13ffc15 	stw	r4,-16(fp)
     c40:	2809883a 	mov	r4,r5
     c44:	3007883a 	mov	r3,r6
     c48:	3805883a 	mov	r2,r7
     c4c:	e13ffd05 	stb	r4,-12(fp)
     c50:	e0fffe05 	stb	r3,-8(fp)
     c54:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     c58:	e0bffd03 	ldbu	r2,-12(fp)
     c5c:	10803f8c 	andi	r2,r2,254
     c60:	e13ffc17 	ldw	r4,-16(fp)
     c64:	100b883a 	mov	r5,r2
     c68:	01800504 	movi	r6,20
     c6c:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     c70:	e0bffc17 	ldw	r2,-16(fp)
     c74:	10800017 	ldw	r2,0(r2)
     c78:	10800084 	addi	r2,r2,2
     c7c:	10800023 	ldbuio	r2,0(r2)
     c80:	10803fcc 	andi	r2,r2,255
     c84:	1080004c 	andi	r2,r2,1
     c88:	10000726 	beq	r2,zero,ca8 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     c8c:	e0bffc17 	ldw	r2,-16(fp)
     c90:	10800017 	ldw	r2,0(r2)
     c94:	10800044 	addi	r2,r2,1
     c98:	00c00084 	movi	r3,2
     c9c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     ca0:	00800044 	movi	r2,1
     ca4:	00002706 	br	d44 <i2c_write+0x118>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
     ca8:	e0bffe03 	ldbu	r2,-8(fp)
     cac:	e13ffc17 	ldw	r4,-16(fp)
     cb0:	100b883a 	mov	r5,r2
     cb4:	01800404 	movi	r6,16
     cb8:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     cbc:	e0bffc17 	ldw	r2,-16(fp)
     cc0:	10800017 	ldw	r2,0(r2)
     cc4:	10800084 	addi	r2,r2,2
     cc8:	10800023 	ldbuio	r2,0(r2)
     ccc:	10803fcc 	andi	r2,r2,255
     cd0:	1080004c 	andi	r2,r2,1
     cd4:	10000726 	beq	r2,zero,cf4 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     cd8:	e0bffc17 	ldw	r2,-16(fp)
     cdc:	10800017 	ldw	r2,0(r2)
     ce0:	10800044 	addi	r2,r2,1
     ce4:	00c00084 	movi	r3,2
     ce8:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     cec:	00800084 	movi	r2,2
     cf0:	00001406 	br	d44 <i2c_write+0x118>
    }

    /* write register data to device */
    i2c_set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     cf4:	e0bfff03 	ldbu	r2,-4(fp)
     cf8:	e13ffc17 	ldw	r4,-16(fp)
     cfc:	100b883a 	mov	r5,r2
     d00:	01800484 	movi	r6,18
     d04:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     d08:	e0bffc17 	ldw	r2,-16(fp)
     d0c:	10800017 	ldw	r2,0(r2)
     d10:	10800084 	addi	r2,r2,2
     d14:	10800023 	ldbuio	r2,0(r2)
     d18:	10803fcc 	andi	r2,r2,255
     d1c:	1080004c 	andi	r2,r2,1
     d20:	10000726 	beq	r2,zero,d40 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     d24:	e0bffc17 	ldw	r2,-16(fp)
     d28:	10800017 	ldw	r2,0(r2)
     d2c:	10800044 	addi	r2,r2,1
     d30:	00c00084 	movi	r3,2
     d34:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     d38:	00800084 	movi	r2,2
     d3c:	00000106 	br	d44 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
     d40:	0005883a 	mov	r2,zero
}
     d44:	e037883a 	mov	sp,fp
     d48:	dfc00117 	ldw	ra,4(sp)
     d4c:	df000017 	ldw	fp,0(sp)
     d50:	dec00204 	addi	sp,sp,8
     d54:	f800283a 	ret

00000d58 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
     d58:	defffa04 	addi	sp,sp,-24
     d5c:	dfc00515 	stw	ra,20(sp)
     d60:	df000415 	stw	fp,16(sp)
     d64:	df000404 	addi	fp,sp,16
     d68:	e13ffc15 	stw	r4,-16(fp)
     d6c:	2807883a 	mov	r3,r5
     d70:	3005883a 	mov	r2,r6
     d74:	e1ffff15 	stw	r7,-4(fp)
     d78:	e0fffd05 	stb	r3,-12(fp)
     d7c:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     d80:	e0bffd03 	ldbu	r2,-12(fp)
     d84:	10803f8c 	andi	r2,r2,254
     d88:	e13ffc17 	ldw	r4,-16(fp)
     d8c:	100b883a 	mov	r5,r2
     d90:	01800504 	movi	r6,20
     d94:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     d98:	e0bffc17 	ldw	r2,-16(fp)
     d9c:	10800017 	ldw	r2,0(r2)
     da0:	10800084 	addi	r2,r2,2
     da4:	10800023 	ldbuio	r2,0(r2)
     da8:	10803fcc 	andi	r2,r2,255
     dac:	1080004c 	andi	r2,r2,1
     db0:	10000726 	beq	r2,zero,dd0 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     db4:	e0bffc17 	ldw	r2,-16(fp)
     db8:	10800017 	ldw	r2,0(r2)
     dbc:	10800044 	addi	r2,r2,1
     dc0:	00c00084 	movi	r3,2
     dc4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     dc8:	00800044 	movi	r2,1
     dcc:	00002f06 	br	e8c <i2c_read+0x134>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
     dd0:	e0bffe03 	ldbu	r2,-8(fp)
     dd4:	e13ffc17 	ldw	r4,-16(fp)
     dd8:	100b883a 	mov	r5,r2
     ddc:	01800404 	movi	r6,16
     de0:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     de4:	e0bffc17 	ldw	r2,-16(fp)
     de8:	10800017 	ldw	r2,0(r2)
     dec:	10800084 	addi	r2,r2,2
     df0:	10800023 	ldbuio	r2,0(r2)
     df4:	10803fcc 	andi	r2,r2,255
     df8:	1080004c 	andi	r2,r2,1
     dfc:	10000726 	beq	r2,zero,e1c <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     e00:	e0bffc17 	ldw	r2,-16(fp)
     e04:	10800017 	ldw	r2,0(r2)
     e08:	10800044 	addi	r2,r2,1
     e0c:	00c00084 	movi	r3,2
     e10:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     e14:	00800084 	movi	r2,2
     e18:	00001c06 	br	e8c <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    i2c_set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     e1c:	e0bffd03 	ldbu	r2,-12(fp)
     e20:	10800054 	ori	r2,r2,1
     e24:	10803fcc 	andi	r2,r2,255
     e28:	e13ffc17 	ldw	r4,-16(fp)
     e2c:	100b883a 	mov	r5,r2
     e30:	01800504 	movi	r6,20
     e34:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     e38:	e0bffc17 	ldw	r2,-16(fp)
     e3c:	10800017 	ldw	r2,0(r2)
     e40:	10800084 	addi	r2,r2,2
     e44:	10800023 	ldbuio	r2,0(r2)
     e48:	10803fcc 	andi	r2,r2,255
     e4c:	1080004c 	andi	r2,r2,1
     e50:	10000726 	beq	r2,zero,e70 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     e54:	e0bffc17 	ldw	r2,-16(fp)
     e58:	10800017 	ldw	r2,0(r2)
     e5c:	10800044 	addi	r2,r2,1
     e60:	00c00084 	movi	r3,2
     e64:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     e68:	00800044 	movi	r2,1
     e6c:	00000706 	br	e8c <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
     e70:	e13ffc17 	ldw	r4,-16(fp)
     e74:	014002c4 	movi	r5,11
     e78:	0000ac00 	call	ac0 <i2c_get_data_set_control>
     e7c:	1007883a 	mov	r3,r2
     e80:	e0bfff17 	ldw	r2,-4(fp)
     e84:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
     e88:	0005883a 	mov	r2,zero
}
     e8c:	e037883a 	mov	sp,fp
     e90:	dfc00117 	ldw	ra,4(sp)
     e94:	df000017 	ldw	fp,0(sp)
     e98:	dec00204 	addi	sp,sp,8
     e9c:	f800283a 	ret

00000ea0 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
     ea0:	defff904 	addi	sp,sp,-28
     ea4:	dfc00615 	stw	ra,24(sp)
     ea8:	df000515 	stw	fp,20(sp)
     eac:	df000504 	addi	fp,sp,20
     eb0:	e13ffc15 	stw	r4,-16(fp)
     eb4:	2807883a 	mov	r3,r5
     eb8:	3005883a 	mov	r2,r6
     ebc:	e1ffff15 	stw	r7,-4(fp)
     ec0:	e0fffd05 	stb	r3,-12(fp)
     ec4:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     ec8:	e0bffd03 	ldbu	r2,-12(fp)
     ecc:	10803f8c 	andi	r2,r2,254
     ed0:	e13ffc17 	ldw	r4,-16(fp)
     ed4:	100b883a 	mov	r5,r2
     ed8:	01800504 	movi	r6,20
     edc:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     ee0:	e0bffc17 	ldw	r2,-16(fp)
     ee4:	10800017 	ldw	r2,0(r2)
     ee8:	10800084 	addi	r2,r2,2
     eec:	10800023 	ldbuio	r2,0(r2)
     ef0:	10803fcc 	andi	r2,r2,255
     ef4:	1080004c 	andi	r2,r2,1
     ef8:	10000726 	beq	r2,zero,f18 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     efc:	e0bffc17 	ldw	r2,-16(fp)
     f00:	10800017 	ldw	r2,0(r2)
     f04:	10800044 	addi	r2,r2,1
     f08:	00c00084 	movi	r3,2
     f0c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     f10:	00800044 	movi	r2,1
     f14:	00004206 	br	1020 <i2c_write_array+0x180>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
     f18:	e0bffe03 	ldbu	r2,-8(fp)
     f1c:	e13ffc17 	ldw	r4,-16(fp)
     f20:	100b883a 	mov	r5,r2
     f24:	01800404 	movi	r6,16
     f28:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     f2c:	e0bffc17 	ldw	r2,-16(fp)
     f30:	10800017 	ldw	r2,0(r2)
     f34:	10800084 	addi	r2,r2,2
     f38:	10800023 	ldbuio	r2,0(r2)
     f3c:	10803fcc 	andi	r2,r2,255
     f40:	1080004c 	andi	r2,r2,1
     f44:	10000726 	beq	r2,zero,f64 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     f48:	e0bffc17 	ldw	r2,-16(fp)
     f4c:	10800017 	ldw	r2,0(r2)
     f50:	10800044 	addi	r2,r2,1
     f54:	00c00084 	movi	r3,2
     f58:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     f5c:	00800084 	movi	r2,2
     f60:	00002f06 	br	1020 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
     f64:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
     f68:	e03ffb15 	stw	zero,-20(fp)
     f6c:	00002806 	br	1010 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
     f70:	e0800217 	ldw	r2,8(fp)
     f74:	10bfffc4 	addi	r2,r2,-1
     f78:	e0fffb17 	ldw	r3,-20(fp)
     f7c:	18800a2e 	bgeu	r3,r2,fa8 <i2c_write_array+0x108>
            i2c_set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
     f80:	e0ffff17 	ldw	r3,-4(fp)
     f84:	e0bffb17 	ldw	r2,-20(fp)
     f88:	1885883a 	add	r2,r3,r2
     f8c:	10800003 	ldbu	r2,0(r2)
     f90:	10803fcc 	andi	r2,r2,255
     f94:	e13ffc17 	ldw	r4,-16(fp)
     f98:	100b883a 	mov	r5,r2
     f9c:	01800404 	movi	r6,16
     fa0:	0000a540 	call	a54 <i2c_set_data_control>
     fa4:	00000906 	br	fcc <i2c_write_array+0x12c>
        } else {
            i2c_set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     fa8:	e0ffff17 	ldw	r3,-4(fp)
     fac:	e0bffb17 	ldw	r2,-20(fp)
     fb0:	1885883a 	add	r2,r3,r2
     fb4:	10800003 	ldbu	r2,0(r2)
     fb8:	10803fcc 	andi	r2,r2,255
     fbc:	e13ffc17 	ldw	r4,-16(fp)
     fc0:	100b883a 	mov	r5,r2
     fc4:	01800484 	movi	r6,18
     fc8:	0000a540 	call	a54 <i2c_set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     fcc:	e0bffc17 	ldw	r2,-16(fp)
     fd0:	10800017 	ldw	r2,0(r2)
     fd4:	10800084 	addi	r2,r2,2
     fd8:	10800023 	ldbuio	r2,0(r2)
     fdc:	10803fcc 	andi	r2,r2,255
     fe0:	1080004c 	andi	r2,r2,1
     fe4:	10000726 	beq	r2,zero,1004 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     fe8:	e0bffc17 	ldw	r2,-16(fp)
     fec:	10800017 	ldw	r2,0(r2)
     ff0:	10800044 	addi	r2,r2,1
     ff4:	00c00084 	movi	r3,2
     ff8:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
     ffc:	00800084 	movi	r2,2
    1000:	00000706 	br	1020 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
    1004:	e0bffb17 	ldw	r2,-20(fp)
    1008:	10800044 	addi	r2,r2,1
    100c:	e0bffb15 	stw	r2,-20(fp)
    1010:	e0fffb17 	ldw	r3,-20(fp)
    1014:	e0800217 	ldw	r2,8(fp)
    1018:	18bfd536 	bltu	r3,r2,f70 <i2c_write_array+0xd0>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
    101c:	0005883a 	mov	r2,zero
}
    1020:	e037883a 	mov	sp,fp
    1024:	dfc00117 	ldw	ra,4(sp)
    1028:	df000017 	ldw	fp,0(sp)
    102c:	dec00204 	addi	sp,sp,8
    1030:	f800283a 	ret

00001034 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
    1034:	defff804 	addi	sp,sp,-32
    1038:	dfc00715 	stw	ra,28(sp)
    103c:	df000615 	stw	fp,24(sp)
    1040:	dc000515 	stw	r16,20(sp)
    1044:	df000604 	addi	fp,sp,24
    1048:	e13ffb15 	stw	r4,-20(fp)
    104c:	2807883a 	mov	r3,r5
    1050:	3005883a 	mov	r2,r6
    1054:	e1fffe15 	stw	r7,-8(fp)
    1058:	e0fffc05 	stb	r3,-16(fp)
    105c:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    1060:	e0bffc03 	ldbu	r2,-16(fp)
    1064:	10803f8c 	andi	r2,r2,254
    1068:	e13ffb17 	ldw	r4,-20(fp)
    106c:	100b883a 	mov	r5,r2
    1070:	01800504 	movi	r6,20
    1074:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    1078:	e0bffb17 	ldw	r2,-20(fp)
    107c:	10800017 	ldw	r2,0(r2)
    1080:	10800084 	addi	r2,r2,2
    1084:	10800023 	ldbuio	r2,0(r2)
    1088:	10803fcc 	andi	r2,r2,255
    108c:	1080004c 	andi	r2,r2,1
    1090:	10000726 	beq	r2,zero,10b0 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1094:	e0bffb17 	ldw	r2,-20(fp)
    1098:	10800017 	ldw	r2,0(r2)
    109c:	10800044 	addi	r2,r2,1
    10a0:	00c00084 	movi	r3,2
    10a4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
    10a8:	00800044 	movi	r2,1
    10ac:	00004506 	br	11c4 <i2c_read_array+0x190>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
    10b0:	e0bffd03 	ldbu	r2,-12(fp)
    10b4:	e13ffb17 	ldw	r4,-20(fp)
    10b8:	100b883a 	mov	r5,r2
    10bc:	01800404 	movi	r6,16
    10c0:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    10c4:	e0bffb17 	ldw	r2,-20(fp)
    10c8:	10800017 	ldw	r2,0(r2)
    10cc:	10800084 	addi	r2,r2,2
    10d0:	10800023 	ldbuio	r2,0(r2)
    10d4:	10803fcc 	andi	r2,r2,255
    10d8:	1080004c 	andi	r2,r2,1
    10dc:	10000726 	beq	r2,zero,10fc <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    10e0:	e0bffb17 	ldw	r2,-20(fp)
    10e4:	10800017 	ldw	r2,0(r2)
    10e8:	10800044 	addi	r2,r2,1
    10ec:	00c00084 	movi	r3,2
    10f0:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
    10f4:	00800084 	movi	r2,2
    10f8:	00003206 	br	11c4 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    i2c_set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    10fc:	e0bffc03 	ldbu	r2,-16(fp)
    1100:	10800054 	ori	r2,r2,1
    1104:	10803fcc 	andi	r2,r2,255
    1108:	e13ffb17 	ldw	r4,-20(fp)
    110c:	100b883a 	mov	r5,r2
    1110:	01800504 	movi	r6,20
    1114:	0000a540 	call	a54 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    1118:	e0bffb17 	ldw	r2,-20(fp)
    111c:	10800017 	ldw	r2,0(r2)
    1120:	10800084 	addi	r2,r2,2
    1124:	10800023 	ldbuio	r2,0(r2)
    1128:	10803fcc 	andi	r2,r2,255
    112c:	1080004c 	andi	r2,r2,1
    1130:	10000726 	beq	r2,zero,1150 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1134:	e0bffb17 	ldw	r2,-20(fp)
    1138:	10800017 	ldw	r2,0(r2)
    113c:	10800044 	addi	r2,r2,1
    1140:	00c00084 	movi	r3,2
    1144:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
    1148:	00800044 	movi	r2,1
    114c:	00001d06 	br	11c4 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
    1150:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
    1154:	e03ffa15 	stw	zero,-24(fp)
    1158:	00001606 	br	11b4 <i2c_read_array+0x180>
        if (i < size - 1) {
    115c:	e0800217 	ldw	r2,8(fp)
    1160:	10bfffc4 	addi	r2,r2,-1
    1164:	e0fffa17 	ldw	r3,-24(fp)
    1168:	1880082e 	bgeu	r3,r2,118c <i2c_read_array+0x158>
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
    116c:	e0fffe17 	ldw	r3,-8(fp)
    1170:	e0bffa17 	ldw	r2,-24(fp)
    1174:	18a1883a 	add	r16,r3,r2
    1178:	e13ffb17 	ldw	r4,-20(fp)
    117c:	01400204 	movi	r5,8
    1180:	0000ac00 	call	ac0 <i2c_get_data_set_control>
    1184:	80800005 	stb	r2,0(r16)
    1188:	00000706 	br	11a8 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
    118c:	e0fffe17 	ldw	r3,-8(fp)
    1190:	e0bffa17 	ldw	r2,-24(fp)
    1194:	18a1883a 	add	r16,r3,r2
    1198:	e13ffb17 	ldw	r4,-20(fp)
    119c:	014002c4 	movi	r5,11
    11a0:	0000ac00 	call	ac0 <i2c_get_data_set_control>
    11a4:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
    11a8:	e0bffa17 	ldw	r2,-24(fp)
    11ac:	10800044 	addi	r2,r2,1
    11b0:	e0bffa15 	stw	r2,-24(fp)
    11b4:	e0fffa17 	ldw	r3,-24(fp)
    11b8:	e0800217 	ldw	r2,8(fp)
    11bc:	18bfe736 	bltu	r3,r2,115c <i2c_read_array+0x128>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
    11c0:	0005883a 	mov	r2,zero
}
    11c4:	e6ffff04 	addi	sp,fp,-4
    11c8:	dfc00217 	ldw	ra,8(sp)
    11cc:	df000117 	ldw	fp,4(sp)
    11d0:	dc000017 	ldw	r16,0(sp)
    11d4:	dec00304 	addi	sp,sp,12
    11d8:	f800283a 	ret

000011dc <udivmodsi4>:
    11dc:	2900182e 	bgeu	r5,r4,1240 <udivmodsi4+0x64>
    11e0:	28001716 	blt	r5,zero,1240 <udivmodsi4+0x64>
    11e4:	00800804 	movi	r2,32
    11e8:	00c00044 	movi	r3,1
    11ec:	00000206 	br	11f8 <udivmodsi4+0x1c>
    11f0:	10001126 	beq	r2,zero,1238 <udivmodsi4+0x5c>
    11f4:	28000516 	blt	r5,zero,120c <udivmodsi4+0x30>
    11f8:	294b883a 	add	r5,r5,r5
    11fc:	10bfffc4 	addi	r2,r2,-1
    1200:	18c7883a 	add	r3,r3,r3
    1204:	293ffa36 	bltu	r5,r4,11f0 <udivmodsi4+0x14>
    1208:	18000b26 	beq	r3,zero,1238 <udivmodsi4+0x5c>
    120c:	0005883a 	mov	r2,zero
    1210:	21400236 	bltu	r4,r5,121c <udivmodsi4+0x40>
    1214:	2149c83a 	sub	r4,r4,r5
    1218:	10c4b03a 	or	r2,r2,r3
    121c:	1806d07a 	srli	r3,r3,1
    1220:	280ad07a 	srli	r5,r5,1
    1224:	183ffa1e 	bne	r3,zero,1210 <udivmodsi4+0x34>
    1228:	3000011e 	bne	r6,zero,1230 <udivmodsi4+0x54>
    122c:	f800283a 	ret
    1230:	2005883a 	mov	r2,r4
    1234:	f800283a 	ret
    1238:	0005883a 	mov	r2,zero
    123c:	003ffa06 	br	1228 <udivmodsi4+0x4c>
    1240:	00c00044 	movi	r3,1
    1244:	003ff106 	br	120c <udivmodsi4+0x30>

00001248 <__divsi3>:
    1248:	defffe04 	addi	sp,sp,-8
    124c:	dfc00115 	stw	ra,4(sp)
    1250:	dc000015 	stw	r16,0(sp)
    1254:	20000b16 	blt	r4,zero,1284 <__divsi3+0x3c>
    1258:	0021883a 	mov	r16,zero
    125c:	28000c16 	blt	r5,zero,1290 <__divsi3+0x48>
    1260:	000d883a 	mov	r6,zero
    1264:	00011dc0 	call	11dc <udivmodsi4>
    1268:	0407c83a 	sub	r3,zero,r16
    126c:	1884f03a 	xor	r2,r3,r2
    1270:	1405883a 	add	r2,r2,r16
    1274:	dfc00117 	ldw	ra,4(sp)
    1278:	dc000017 	ldw	r16,0(sp)
    127c:	dec00204 	addi	sp,sp,8
    1280:	f800283a 	ret
    1284:	0109c83a 	sub	r4,zero,r4
    1288:	04000044 	movi	r16,1
    128c:	283ff40e 	bge	r5,zero,1260 <__divsi3+0x18>
    1290:	014bc83a 	sub	r5,zero,r5
    1294:	8400005c 	xori	r16,r16,1
    1298:	003ff106 	br	1260 <__divsi3+0x18>

0000129c <__modsi3>:
    129c:	defffd04 	addi	sp,sp,-12
    12a0:	dfc00215 	stw	ra,8(sp)
    12a4:	dc400115 	stw	r17,4(sp)
    12a8:	dc000015 	stw	r16,0(sp)
    12ac:	20000c16 	blt	r4,zero,12e0 <__modsi3+0x44>
    12b0:	0023883a 	mov	r17,zero
    12b4:	0021883a 	mov	r16,zero
    12b8:	28000d16 	blt	r5,zero,12f0 <__modsi3+0x54>
    12bc:	01800044 	movi	r6,1
    12c0:	00011dc0 	call	11dc <udivmodsi4>
    12c4:	1404f03a 	xor	r2,r2,r16
    12c8:	8885883a 	add	r2,r17,r2
    12cc:	dfc00217 	ldw	ra,8(sp)
    12d0:	dc400117 	ldw	r17,4(sp)
    12d4:	dc000017 	ldw	r16,0(sp)
    12d8:	dec00304 	addi	sp,sp,12
    12dc:	f800283a 	ret
    12e0:	0109c83a 	sub	r4,zero,r4
    12e4:	04400044 	movi	r17,1
    12e8:	043fffc4 	movi	r16,-1
    12ec:	283ff30e 	bge	r5,zero,12bc <__modsi3+0x20>
    12f0:	014bc83a 	sub	r5,zero,r5
    12f4:	003ff106 	br	12bc <__modsi3+0x20>

000012f8 <__udivsi3>:
    12f8:	000d883a 	mov	r6,zero
    12fc:	00011dc1 	jmpi	11dc <udivmodsi4>

00001300 <__umodsi3>:
    1300:	01800044 	movi	r6,1
    1304:	00011dc1 	jmpi	11dc <udivmodsi4>

00001308 <malloc>:
    1308:	00800074 	movhi	r2,1
    130c:	10875304 	addi	r2,r2,7500
    1310:	200b883a 	mov	r5,r4
    1314:	11000017 	ldw	r4,0(r2)
    1318:	00013301 	jmpi	1330 <_malloc_r>

0000131c <free>:
    131c:	00800074 	movhi	r2,1
    1320:	10875304 	addi	r2,r2,7500
    1324:	200b883a 	mov	r5,r4
    1328:	11000017 	ldw	r4,0(r2)
    132c:	00067201 	jmpi	6720 <_free_r>

00001330 <_malloc_r>:
    1330:	defff504 	addi	sp,sp,-44
    1334:	dc800315 	stw	r18,12(sp)
    1338:	dfc00a15 	stw	ra,40(sp)
    133c:	df000915 	stw	fp,36(sp)
    1340:	ddc00815 	stw	r23,32(sp)
    1344:	dd800715 	stw	r22,28(sp)
    1348:	dd400615 	stw	r21,24(sp)
    134c:	dd000515 	stw	r20,20(sp)
    1350:	dcc00415 	stw	r19,16(sp)
    1354:	dc400215 	stw	r17,8(sp)
    1358:	dc000115 	stw	r16,4(sp)
    135c:	288002c4 	addi	r2,r5,11
    1360:	00c00584 	movi	r3,22
    1364:	2025883a 	mov	r18,r4
    1368:	18802a2e 	bgeu	r3,r2,1414 <_malloc_r+0xe4>
    136c:	047ffe04 	movi	r17,-8
    1370:	1462703a 	and	r17,r2,r17
    1374:	88009e16 	blt	r17,zero,15f0 <_malloc_r+0x2c0>
    1378:	89409d36 	bltu	r17,r5,15f0 <_malloc_r+0x2c0>
    137c:	000dca80 	call	dca8 <__malloc_lock>
    1380:	00807dc4 	movi	r2,503
    1384:	14402736 	bltu	r2,r17,1424 <_malloc_r+0xf4>
    1388:	8806d0fa 	srli	r3,r17,3
    138c:	04c00074 	movhi	r19,1
    1390:	9cc1b004 	addi	r19,r19,1728
    1394:	18c5883a 	add	r2,r3,r3
    1398:	1085883a 	add	r2,r2,r2
    139c:	1085883a 	add	r2,r2,r2
    13a0:	9885883a 	add	r2,r19,r2
    13a4:	14000317 	ldw	r16,12(r2)
    13a8:	80814a26 	beq	r16,r2,18d4 <_malloc_r+0x5a4>
    13ac:	80c00117 	ldw	r3,4(r16)
    13b0:	81000317 	ldw	r4,12(r16)
    13b4:	00bfff04 	movi	r2,-4
    13b8:	1884703a 	and	r2,r3,r2
    13bc:	81400217 	ldw	r5,8(r16)
    13c0:	8085883a 	add	r2,r16,r2
    13c4:	10c00117 	ldw	r3,4(r2)
    13c8:	29000315 	stw	r4,12(r5)
    13cc:	21400215 	stw	r5,8(r4)
    13d0:	18c00054 	ori	r3,r3,1
    13d4:	10c00115 	stw	r3,4(r2)
    13d8:	9009883a 	mov	r4,r18
    13dc:	000dcc80 	call	dcc8 <__malloc_unlock>
    13e0:	80800204 	addi	r2,r16,8
    13e4:	dfc00a17 	ldw	ra,40(sp)
    13e8:	df000917 	ldw	fp,36(sp)
    13ec:	ddc00817 	ldw	r23,32(sp)
    13f0:	dd800717 	ldw	r22,28(sp)
    13f4:	dd400617 	ldw	r21,24(sp)
    13f8:	dd000517 	ldw	r20,20(sp)
    13fc:	dcc00417 	ldw	r19,16(sp)
    1400:	dc800317 	ldw	r18,12(sp)
    1404:	dc400217 	ldw	r17,8(sp)
    1408:	dc000117 	ldw	r16,4(sp)
    140c:	dec00b04 	addi	sp,sp,44
    1410:	f800283a 	ret
    1414:	04400404 	movi	r17,16
    1418:	89407536 	bltu	r17,r5,15f0 <_malloc_r+0x2c0>
    141c:	000dca80 	call	dca8 <__malloc_lock>
    1420:	003fd906 	br	1388 <_malloc_r+0x58>
    1424:	8806d27a 	srli	r3,r17,9
    1428:	18007526 	beq	r3,zero,1600 <_malloc_r+0x2d0>
    142c:	00800104 	movi	r2,4
    1430:	10c0ef36 	bltu	r2,r3,17f0 <_malloc_r+0x4c0>
    1434:	8806d1ba 	srli	r3,r17,6
    1438:	19c00e04 	addi	r7,r3,56
    143c:	39cb883a 	add	r5,r7,r7
    1440:	04c00074 	movhi	r19,1
    1444:	294b883a 	add	r5,r5,r5
    1448:	9cc1b004 	addi	r19,r19,1728
    144c:	294b883a 	add	r5,r5,r5
    1450:	994b883a 	add	r5,r19,r5
    1454:	2c000317 	ldw	r16,12(r5)
    1458:	2c000e26 	beq	r5,r16,1494 <_malloc_r+0x164>
    145c:	80800117 	ldw	r2,4(r16)
    1460:	01bfff04 	movi	r6,-4
    1464:	010003c4 	movi	r4,15
    1468:	1184703a 	and	r2,r2,r6
    146c:	1447c83a 	sub	r3,r2,r17
    1470:	20c00716 	blt	r4,r3,1490 <_malloc_r+0x160>
    1474:	1800650e 	bge	r3,zero,160c <_malloc_r+0x2dc>
    1478:	84000317 	ldw	r16,12(r16)
    147c:	2c000526 	beq	r5,r16,1494 <_malloc_r+0x164>
    1480:	80800117 	ldw	r2,4(r16)
    1484:	1184703a 	and	r2,r2,r6
    1488:	1447c83a 	sub	r3,r2,r17
    148c:	20fff90e 	bge	r4,r3,1474 <_malloc_r+0x144>
    1490:	39ffffc4 	addi	r7,r7,-1
    1494:	38c00044 	addi	r3,r7,1
    1498:	01800074 	movhi	r6,1
    149c:	9c000417 	ldw	r16,16(r19)
    14a0:	3181b004 	addi	r6,r6,1728
    14a4:	32400204 	addi	r9,r6,8
    14a8:	82410326 	beq	r16,r9,18b8 <_malloc_r+0x588>
    14ac:	81000117 	ldw	r4,4(r16)
    14b0:	00bfff04 	movi	r2,-4
    14b4:	208e703a 	and	r7,r4,r2
    14b8:	3c45c83a 	sub	r2,r7,r17
    14bc:	010003c4 	movi	r4,15
    14c0:	2080ee16 	blt	r4,r2,187c <_malloc_r+0x54c>
    14c4:	32400515 	stw	r9,20(r6)
    14c8:	32400415 	stw	r9,16(r6)
    14cc:	1000510e 	bge	r2,zero,1614 <_malloc_r+0x2e4>
    14d0:	00807fc4 	movi	r2,511
    14d4:	11c0ce36 	bltu	r2,r7,1810 <_malloc_r+0x4e0>
    14d8:	3808d0fa 	srli	r4,r7,3
    14dc:	01c00044 	movi	r7,1
    14e0:	30800117 	ldw	r2,4(r6)
    14e4:	210b883a 	add	r5,r4,r4
    14e8:	294b883a 	add	r5,r5,r5
    14ec:	2009d0ba 	srai	r4,r4,2
    14f0:	294b883a 	add	r5,r5,r5
    14f4:	298b883a 	add	r5,r5,r6
    14f8:	2a000217 	ldw	r8,8(r5)
    14fc:	3908983a 	sll	r4,r7,r4
    1500:	81400315 	stw	r5,12(r16)
    1504:	82000215 	stw	r8,8(r16)
    1508:	2088b03a 	or	r4,r4,r2
    150c:	2c000215 	stw	r16,8(r5)
    1510:	31000115 	stw	r4,4(r6)
    1514:	44000315 	stw	r16,12(r8)
    1518:	1805d0ba 	srai	r2,r3,2
    151c:	01400044 	movi	r5,1
    1520:	288a983a 	sll	r5,r5,r2
    1524:	21404336 	bltu	r4,r5,1634 <_malloc_r+0x304>
    1528:	2144703a 	and	r2,r4,r5
    152c:	10000a1e 	bne	r2,zero,1558 <_malloc_r+0x228>
    1530:	00bfff04 	movi	r2,-4
    1534:	294b883a 	add	r5,r5,r5
    1538:	1886703a 	and	r3,r3,r2
    153c:	2144703a 	and	r2,r4,r5
    1540:	18c00104 	addi	r3,r3,4
    1544:	1000041e 	bne	r2,zero,1558 <_malloc_r+0x228>
    1548:	294b883a 	add	r5,r5,r5
    154c:	2144703a 	and	r2,r4,r5
    1550:	18c00104 	addi	r3,r3,4
    1554:	103ffc26 	beq	r2,zero,1548 <_malloc_r+0x218>
    1558:	023fff04 	movi	r8,-4
    155c:	01c003c4 	movi	r7,15
    1560:	18c5883a 	add	r2,r3,r3
    1564:	1085883a 	add	r2,r2,r2
    1568:	1085883a 	add	r2,r2,r2
    156c:	9895883a 	add	r10,r19,r2
    1570:	52c00304 	addi	r11,r10,12
    1574:	1819883a 	mov	r12,r3
    1578:	5c000017 	ldw	r16,0(r11)
    157c:	59bffd04 	addi	r6,r11,-12
    1580:	8180041e 	bne	r16,r6,1594 <_malloc_r+0x264>
    1584:	0000ce06 	br	18c0 <_malloc_r+0x590>
    1588:	2000d70e 	bge	r4,zero,18e8 <_malloc_r+0x5b8>
    158c:	84000317 	ldw	r16,12(r16)
    1590:	8180cb26 	beq	r16,r6,18c0 <_malloc_r+0x590>
    1594:	80800117 	ldw	r2,4(r16)
    1598:	1204703a 	and	r2,r2,r8
    159c:	1449c83a 	sub	r4,r2,r17
    15a0:	393ff90e 	bge	r7,r4,1588 <_malloc_r+0x258>
    15a4:	80800317 	ldw	r2,12(r16)
    15a8:	80c00217 	ldw	r3,8(r16)
    15ac:	89400054 	ori	r5,r17,1
    15b0:	81400115 	stw	r5,4(r16)
    15b4:	18800315 	stw	r2,12(r3)
    15b8:	10c00215 	stw	r3,8(r2)
    15bc:	8463883a 	add	r17,r16,r17
    15c0:	9c400515 	stw	r17,20(r19)
    15c4:	9c400415 	stw	r17,16(r19)
    15c8:	20800054 	ori	r2,r4,1
    15cc:	88800115 	stw	r2,4(r17)
    15d0:	8a400315 	stw	r9,12(r17)
    15d4:	8a400215 	stw	r9,8(r17)
    15d8:	8923883a 	add	r17,r17,r4
    15dc:	89000015 	stw	r4,0(r17)
    15e0:	9009883a 	mov	r4,r18
    15e4:	000dcc80 	call	dcc8 <__malloc_unlock>
    15e8:	80800204 	addi	r2,r16,8
    15ec:	003f7d06 	br	13e4 <_malloc_r+0xb4>
    15f0:	00800304 	movi	r2,12
    15f4:	90800015 	stw	r2,0(r18)
    15f8:	0005883a 	mov	r2,zero
    15fc:	003f7906 	br	13e4 <_malloc_r+0xb4>
    1600:	01401f84 	movi	r5,126
    1604:	01c00fc4 	movi	r7,63
    1608:	003f8d06 	br	1440 <_malloc_r+0x110>
    160c:	81000317 	ldw	r4,12(r16)
    1610:	003f6a06 	br	13bc <_malloc_r+0x8c>
    1614:	81c5883a 	add	r2,r16,r7
    1618:	10c00117 	ldw	r3,4(r2)
    161c:	9009883a 	mov	r4,r18
    1620:	18c00054 	ori	r3,r3,1
    1624:	10c00115 	stw	r3,4(r2)
    1628:	000dcc80 	call	dcc8 <__malloc_unlock>
    162c:	80800204 	addi	r2,r16,8
    1630:	003f6c06 	br	13e4 <_malloc_r+0xb4>
    1634:	9c000217 	ldw	r16,8(r19)
    1638:	00bfff04 	movi	r2,-4
    163c:	85800117 	ldw	r22,4(r16)
    1640:	b0ac703a 	and	r22,r22,r2
    1644:	b4400336 	bltu	r22,r17,1654 <_malloc_r+0x324>
    1648:	b445c83a 	sub	r2,r22,r17
    164c:	00c003c4 	movi	r3,15
    1650:	18805d16 	blt	r3,r2,17c8 <_malloc_r+0x498>
    1654:	05c00074 	movhi	r23,1
    1658:	00800074 	movhi	r2,1
    165c:	bdc75404 	addi	r23,r23,7504
    1660:	108e1f04 	addi	r2,r2,14460
    1664:	15400017 	ldw	r21,0(r2)
    1668:	b9000017 	ldw	r4,0(r23)
    166c:	00ffffc4 	movi	r3,-1
    1670:	858d883a 	add	r6,r16,r22
    1674:	8d6b883a 	add	r21,r17,r21
    1678:	20c0e426 	beq	r4,r3,1a0c <_malloc_r+0x6dc>
    167c:	ad4403c4 	addi	r21,r21,4111
    1680:	00fc0004 	movi	r3,-4096
    1684:	a8ea703a 	and	r21,r21,r3
    1688:	9009883a 	mov	r4,r18
    168c:	a80b883a 	mov	r5,r21
    1690:	d9800015 	stw	r6,0(sp)
    1694:	00023300 	call	2330 <_sbrk_r>
    1698:	00ffffc4 	movi	r3,-1
    169c:	1029883a 	mov	r20,r2
    16a0:	d9800017 	ldw	r6,0(sp)
    16a4:	10c0a426 	beq	r2,r3,1938 <_malloc_r+0x608>
    16a8:	1180a236 	bltu	r2,r6,1934 <_malloc_r+0x604>
    16ac:	07000074 	movhi	fp,1
    16b0:	e70e2a04 	addi	fp,fp,14504
    16b4:	e0c00017 	ldw	r3,0(fp)
    16b8:	a8c7883a 	add	r3,r21,r3
    16bc:	e0c00015 	stw	r3,0(fp)
    16c0:	3500da26 	beq	r6,r20,1a2c <_malloc_r+0x6fc>
    16c4:	b9000017 	ldw	r4,0(r23)
    16c8:	00bfffc4 	movi	r2,-1
    16cc:	2080e426 	beq	r4,r2,1a60 <_malloc_r+0x730>
    16d0:	a185c83a 	sub	r2,r20,r6
    16d4:	1885883a 	add	r2,r3,r2
    16d8:	e0800015 	stw	r2,0(fp)
    16dc:	a0c001cc 	andi	r3,r20,7
    16e0:	1800b526 	beq	r3,zero,19b8 <_malloc_r+0x688>
    16e4:	a0e9c83a 	sub	r20,r20,r3
    16e8:	00840204 	movi	r2,4104
    16ec:	a5000204 	addi	r20,r20,8
    16f0:	10c7c83a 	sub	r3,r2,r3
    16f4:	a545883a 	add	r2,r20,r21
    16f8:	1083ffcc 	andi	r2,r2,4095
    16fc:	18abc83a 	sub	r21,r3,r2
    1700:	9009883a 	mov	r4,r18
    1704:	a80b883a 	mov	r5,r21
    1708:	00023300 	call	2330 <_sbrk_r>
    170c:	00ffffc4 	movi	r3,-1
    1710:	10c0d026 	beq	r2,r3,1a54 <_malloc_r+0x724>
    1714:	1507c83a 	sub	r3,r2,r20
    1718:	a8c7883a 	add	r3,r21,r3
    171c:	18c00054 	ori	r3,r3,1
    1720:	e0800017 	ldw	r2,0(fp)
    1724:	9d000215 	stw	r20,8(r19)
    1728:	a0c00115 	stw	r3,4(r20)
    172c:	a887883a 	add	r3,r21,r2
    1730:	e0c00015 	stw	r3,0(fp)
    1734:	84c00e26 	beq	r16,r19,1770 <_malloc_r+0x440>
    1738:	018003c4 	movi	r6,15
    173c:	3580a02e 	bgeu	r6,r22,19c0 <_malloc_r+0x690>
    1740:	81400117 	ldw	r5,4(r16)
    1744:	013ffe04 	movi	r4,-8
    1748:	b0bffd04 	addi	r2,r22,-12
    174c:	1104703a 	and	r2,r2,r4
    1750:	2900004c 	andi	r4,r5,1
    1754:	1108b03a 	or	r4,r2,r4
    1758:	81000115 	stw	r4,4(r16)
    175c:	01400144 	movi	r5,5
    1760:	8089883a 	add	r4,r16,r2
    1764:	21400115 	stw	r5,4(r4)
    1768:	21400215 	stw	r5,8(r4)
    176c:	3080c036 	bltu	r6,r2,1a70 <_malloc_r+0x740>
    1770:	00800074 	movhi	r2,1
    1774:	108e1e04 	addi	r2,r2,14456
    1778:	11000017 	ldw	r4,0(r2)
    177c:	20c0012e 	bgeu	r4,r3,1784 <_malloc_r+0x454>
    1780:	10c00015 	stw	r3,0(r2)
    1784:	00800074 	movhi	r2,1
    1788:	108e1d04 	addi	r2,r2,14452
    178c:	11000017 	ldw	r4,0(r2)
    1790:	9c000217 	ldw	r16,8(r19)
    1794:	20c0012e 	bgeu	r4,r3,179c <_malloc_r+0x46c>
    1798:	10c00015 	stw	r3,0(r2)
    179c:	80c00117 	ldw	r3,4(r16)
    17a0:	00bfff04 	movi	r2,-4
    17a4:	1886703a 	and	r3,r3,r2
    17a8:	1c45c83a 	sub	r2,r3,r17
    17ac:	1c400236 	bltu	r3,r17,17b8 <_malloc_r+0x488>
    17b0:	00c003c4 	movi	r3,15
    17b4:	18800416 	blt	r3,r2,17c8 <_malloc_r+0x498>
    17b8:	9009883a 	mov	r4,r18
    17bc:	000dcc80 	call	dcc8 <__malloc_unlock>
    17c0:	0005883a 	mov	r2,zero
    17c4:	003f0706 	br	13e4 <_malloc_r+0xb4>
    17c8:	88c00054 	ori	r3,r17,1
    17cc:	80c00115 	stw	r3,4(r16)
    17d0:	8463883a 	add	r17,r16,r17
    17d4:	10800054 	ori	r2,r2,1
    17d8:	9c400215 	stw	r17,8(r19)
    17dc:	88800115 	stw	r2,4(r17)
    17e0:	9009883a 	mov	r4,r18
    17e4:	000dcc80 	call	dcc8 <__malloc_unlock>
    17e8:	80800204 	addi	r2,r16,8
    17ec:	003efd06 	br	13e4 <_malloc_r+0xb4>
    17f0:	00800504 	movi	r2,20
    17f4:	10c0482e 	bgeu	r2,r3,1918 <_malloc_r+0x5e8>
    17f8:	00801504 	movi	r2,84
    17fc:	10c06836 	bltu	r2,r3,19a0 <_malloc_r+0x670>
    1800:	8806d33a 	srli	r3,r17,12
    1804:	19c01b84 	addi	r7,r3,110
    1808:	39cb883a 	add	r5,r7,r7
    180c:	003f0c06 	br	1440 <_malloc_r+0x110>
    1810:	3804d27a 	srli	r2,r7,9
    1814:	01000104 	movi	r4,4
    1818:	2080422e 	bgeu	r4,r2,1924 <_malloc_r+0x5f4>
    181c:	01000504 	movi	r4,20
    1820:	20807c36 	bltu	r4,r2,1a14 <_malloc_r+0x6e4>
    1824:	110016c4 	addi	r4,r2,91
    1828:	210b883a 	add	r5,r4,r4
    182c:	294b883a 	add	r5,r5,r5
    1830:	294b883a 	add	r5,r5,r5
    1834:	994b883a 	add	r5,r19,r5
    1838:	28800217 	ldw	r2,8(r5)
    183c:	02000074 	movhi	r8,1
    1840:	4201b004 	addi	r8,r8,1728
    1844:	11406326 	beq	r2,r5,19d4 <_malloc_r+0x6a4>
    1848:	01bfff04 	movi	r6,-4
    184c:	11000117 	ldw	r4,4(r2)
    1850:	2188703a 	and	r4,r4,r6
    1854:	3900022e 	bgeu	r7,r4,1860 <_malloc_r+0x530>
    1858:	10800217 	ldw	r2,8(r2)
    185c:	28bffb1e 	bne	r5,r2,184c <_malloc_r+0x51c>
    1860:	11800317 	ldw	r6,12(r2)
    1864:	99000117 	ldw	r4,4(r19)
    1868:	81800315 	stw	r6,12(r16)
    186c:	80800215 	stw	r2,8(r16)
    1870:	34000215 	stw	r16,8(r6)
    1874:	14000315 	stw	r16,12(r2)
    1878:	003f2706 	br	1518 <_malloc_r+0x1e8>
    187c:	88c00054 	ori	r3,r17,1
    1880:	80c00115 	stw	r3,4(r16)
    1884:	8463883a 	add	r17,r16,r17
    1888:	34400515 	stw	r17,20(r6)
    188c:	34400415 	stw	r17,16(r6)
    1890:	10c00054 	ori	r3,r2,1
    1894:	8a400315 	stw	r9,12(r17)
    1898:	8a400215 	stw	r9,8(r17)
    189c:	88c00115 	stw	r3,4(r17)
    18a0:	88a3883a 	add	r17,r17,r2
    18a4:	88800015 	stw	r2,0(r17)
    18a8:	9009883a 	mov	r4,r18
    18ac:	000dcc80 	call	dcc8 <__malloc_unlock>
    18b0:	80800204 	addi	r2,r16,8
    18b4:	003ecb06 	br	13e4 <_malloc_r+0xb4>
    18b8:	31000117 	ldw	r4,4(r6)
    18bc:	003f1606 	br	1518 <_malloc_r+0x1e8>
    18c0:	63000044 	addi	r12,r12,1
    18c4:	608000cc 	andi	r2,r12,3
    18c8:	5ac00204 	addi	r11,r11,8
    18cc:	103f2a1e 	bne	r2,zero,1578 <_malloc_r+0x248>
    18d0:	00002106 	br	1958 <_malloc_r+0x628>
    18d4:	80800204 	addi	r2,r16,8
    18d8:	84000517 	ldw	r16,20(r16)
    18dc:	143eb31e 	bne	r2,r16,13ac <_malloc_r+0x7c>
    18e0:	18c00084 	addi	r3,r3,2
    18e4:	003eec06 	br	1498 <_malloc_r+0x168>
    18e8:	8085883a 	add	r2,r16,r2
    18ec:	10c00117 	ldw	r3,4(r2)
    18f0:	81000317 	ldw	r4,12(r16)
    18f4:	81400217 	ldw	r5,8(r16)
    18f8:	18c00054 	ori	r3,r3,1
    18fc:	10c00115 	stw	r3,4(r2)
    1900:	29000315 	stw	r4,12(r5)
    1904:	21400215 	stw	r5,8(r4)
    1908:	9009883a 	mov	r4,r18
    190c:	000dcc80 	call	dcc8 <__malloc_unlock>
    1910:	80800204 	addi	r2,r16,8
    1914:	003eb306 	br	13e4 <_malloc_r+0xb4>
    1918:	19c016c4 	addi	r7,r3,91
    191c:	39cb883a 	add	r5,r7,r7
    1920:	003ec706 	br	1440 <_malloc_r+0x110>
    1924:	3804d1ba 	srli	r2,r7,6
    1928:	11000e04 	addi	r4,r2,56
    192c:	210b883a 	add	r5,r4,r4
    1930:	003fbe06 	br	182c <_malloc_r+0x4fc>
    1934:	84ff5d26 	beq	r16,r19,16ac <_malloc_r+0x37c>
    1938:	9c000217 	ldw	r16,8(r19)
    193c:	00bfff04 	movi	r2,-4
    1940:	80c00117 	ldw	r3,4(r16)
    1944:	1886703a 	and	r3,r3,r2
    1948:	003f9706 	br	17a8 <_malloc_r+0x478>
    194c:	52800017 	ldw	r10,0(r10)
    1950:	18ffffc4 	addi	r3,r3,-1
    1954:	50805c1e 	bne	r10,r2,1ac8 <_malloc_r+0x798>
    1958:	190000cc 	andi	r4,r3,3
    195c:	50bffe04 	addi	r2,r10,-8
    1960:	203ffa1e 	bne	r4,zero,194c <_malloc_r+0x61c>
    1964:	98800117 	ldw	r2,4(r19)
    1968:	0146303a 	nor	r3,zero,r5
    196c:	1884703a 	and	r2,r3,r2
    1970:	98800115 	stw	r2,4(r19)
    1974:	294b883a 	add	r5,r5,r5
    1978:	117f2e36 	bltu	r2,r5,1634 <_malloc_r+0x304>
    197c:	283f2d26 	beq	r5,zero,1634 <_malloc_r+0x304>
    1980:	1146703a 	and	r3,r2,r5
    1984:	1800521e 	bne	r3,zero,1ad0 <_malloc_r+0x7a0>
    1988:	6007883a 	mov	r3,r12
    198c:	294b883a 	add	r5,r5,r5
    1990:	1148703a 	and	r4,r2,r5
    1994:	18c00104 	addi	r3,r3,4
    1998:	203ffc26 	beq	r4,zero,198c <_malloc_r+0x65c>
    199c:	003ef006 	br	1560 <_malloc_r+0x230>
    19a0:	00805504 	movi	r2,340
    19a4:	10c01336 	bltu	r2,r3,19f4 <_malloc_r+0x6c4>
    19a8:	8806d3fa 	srli	r3,r17,15
    19ac:	19c01dc4 	addi	r7,r3,119
    19b0:	39cb883a 	add	r5,r7,r7
    19b4:	003ea206 	br	1440 <_malloc_r+0x110>
    19b8:	00c40004 	movi	r3,4096
    19bc:	003f4d06 	br	16f4 <_malloc_r+0x3c4>
    19c0:	00800044 	movi	r2,1
    19c4:	a0800115 	stw	r2,4(r20)
    19c8:	a021883a 	mov	r16,r20
    19cc:	0007883a 	mov	r3,zero
    19d0:	003f7506 	br	17a8 <_malloc_r+0x478>
    19d4:	200bd0ba 	srai	r5,r4,2
    19d8:	01800044 	movi	r6,1
    19dc:	41000117 	ldw	r4,4(r8)
    19e0:	314a983a 	sll	r5,r6,r5
    19e4:	100d883a 	mov	r6,r2
    19e8:	2908b03a 	or	r4,r5,r4
    19ec:	41000115 	stw	r4,4(r8)
    19f0:	003f9d06 	br	1868 <_malloc_r+0x538>
    19f4:	00815504 	movi	r2,1364
    19f8:	10c01336 	bltu	r2,r3,1a48 <_malloc_r+0x718>
    19fc:	8806d4ba 	srli	r3,r17,18
    1a00:	19c01f04 	addi	r7,r3,124
    1a04:	39cb883a 	add	r5,r7,r7
    1a08:	003e8d06 	br	1440 <_malloc_r+0x110>
    1a0c:	ad400404 	addi	r21,r21,16
    1a10:	003f1d06 	br	1688 <_malloc_r+0x358>
    1a14:	01001504 	movi	r4,84
    1a18:	20801c36 	bltu	r4,r2,1a8c <_malloc_r+0x75c>
    1a1c:	3804d33a 	srli	r2,r7,12
    1a20:	11001b84 	addi	r4,r2,110
    1a24:	210b883a 	add	r5,r4,r4
    1a28:	003f8006 	br	182c <_malloc_r+0x4fc>
    1a2c:	3083ffcc 	andi	r2,r6,4095
    1a30:	103f241e 	bne	r2,zero,16c4 <_malloc_r+0x394>
    1a34:	99000217 	ldw	r4,8(r19)
    1a38:	ad85883a 	add	r2,r21,r22
    1a3c:	10800054 	ori	r2,r2,1
    1a40:	20800115 	stw	r2,4(r4)
    1a44:	003f4a06 	br	1770 <_malloc_r+0x440>
    1a48:	01403f04 	movi	r5,252
    1a4c:	01c01f84 	movi	r7,126
    1a50:	003e7b06 	br	1440 <_malloc_r+0x110>
    1a54:	00c00044 	movi	r3,1
    1a58:	002b883a 	mov	r21,zero
    1a5c:	003f3006 	br	1720 <_malloc_r+0x3f0>
    1a60:	00800074 	movhi	r2,1
    1a64:	10875404 	addi	r2,r2,7504
    1a68:	15000015 	stw	r20,0(r2)
    1a6c:	003f1b06 	br	16dc <_malloc_r+0x3ac>
    1a70:	9009883a 	mov	r4,r18
    1a74:	81400204 	addi	r5,r16,8
    1a78:	00067200 	call	6720 <_free_r>
    1a7c:	00800074 	movhi	r2,1
    1a80:	108e2a04 	addi	r2,r2,14504
    1a84:	10c00017 	ldw	r3,0(r2)
    1a88:	003f3906 	br	1770 <_malloc_r+0x440>
    1a8c:	01005504 	movi	r4,340
    1a90:	20800436 	bltu	r4,r2,1aa4 <_malloc_r+0x774>
    1a94:	3804d3fa 	srli	r2,r7,15
    1a98:	11001dc4 	addi	r4,r2,119
    1a9c:	210b883a 	add	r5,r4,r4
    1aa0:	003f6206 	br	182c <_malloc_r+0x4fc>
    1aa4:	01015504 	movi	r4,1364
    1aa8:	20800436 	bltu	r4,r2,1abc <_malloc_r+0x78c>
    1aac:	3804d4ba 	srli	r2,r7,18
    1ab0:	11001f04 	addi	r4,r2,124
    1ab4:	210b883a 	add	r5,r4,r4
    1ab8:	003f5c06 	br	182c <_malloc_r+0x4fc>
    1abc:	01403f04 	movi	r5,252
    1ac0:	01001f84 	movi	r4,126
    1ac4:	003f5906 	br	182c <_malloc_r+0x4fc>
    1ac8:	98800117 	ldw	r2,4(r19)
    1acc:	003fa906 	br	1974 <_malloc_r+0x644>
    1ad0:	6007883a 	mov	r3,r12
    1ad4:	003ea206 	br	1560 <_malloc_r+0x230>

00001ad8 <_printf_r>:
    1ad8:	defffd04 	addi	sp,sp,-12
    1adc:	dfc00015 	stw	ra,0(sp)
    1ae0:	d9800115 	stw	r6,4(sp)
    1ae4:	d9c00215 	stw	r7,8(sp)
    1ae8:	280d883a 	mov	r6,r5
    1aec:	21400217 	ldw	r5,8(r4)
    1af0:	d9c00104 	addi	r7,sp,4
    1af4:	000241c0 	call	241c <___vfprintf_internal_r>
    1af8:	dfc00017 	ldw	ra,0(sp)
    1afc:	dec00304 	addi	sp,sp,12
    1b00:	f800283a 	ret

00001b04 <printf>:
    1b04:	defffc04 	addi	sp,sp,-16
    1b08:	dfc00015 	stw	ra,0(sp)
    1b0c:	d9400115 	stw	r5,4(sp)
    1b10:	d9800215 	stw	r6,8(sp)
    1b14:	d9c00315 	stw	r7,12(sp)
    1b18:	00800074 	movhi	r2,1
    1b1c:	10875304 	addi	r2,r2,7500
    1b20:	10800017 	ldw	r2,0(r2)
    1b24:	200b883a 	mov	r5,r4
    1b28:	d9800104 	addi	r6,sp,4
    1b2c:	11000217 	ldw	r4,8(r2)
    1b30:	00044180 	call	4418 <__vfprintf_internal>
    1b34:	dfc00017 	ldw	ra,0(sp)
    1b38:	dec00404 	addi	sp,sp,16
    1b3c:	f800283a 	ret

00001b40 <_putc_r>:
    1b40:	defffc04 	addi	sp,sp,-16
    1b44:	dc000215 	stw	r16,8(sp)
    1b48:	dfc00315 	stw	ra,12(sp)
    1b4c:	2021883a 	mov	r16,r4
    1b50:	20000226 	beq	r4,zero,1b5c <_putc_r+0x1c>
    1b54:	20800e17 	ldw	r2,56(r4)
    1b58:	10001b26 	beq	r2,zero,1bc8 <_putc_r+0x88>
    1b5c:	30800217 	ldw	r2,8(r6)
    1b60:	10bfffc4 	addi	r2,r2,-1
    1b64:	30800215 	stw	r2,8(r6)
    1b68:	10000a16 	blt	r2,zero,1b94 <_putc_r+0x54>
    1b6c:	30800017 	ldw	r2,0(r6)
    1b70:	11400005 	stb	r5,0(r2)
    1b74:	30800017 	ldw	r2,0(r6)
    1b78:	10c00044 	addi	r3,r2,1
    1b7c:	30c00015 	stw	r3,0(r6)
    1b80:	10800003 	ldbu	r2,0(r2)
    1b84:	dfc00317 	ldw	ra,12(sp)
    1b88:	dc000217 	ldw	r16,8(sp)
    1b8c:	dec00404 	addi	sp,sp,16
    1b90:	f800283a 	ret
    1b94:	30c00617 	ldw	r3,24(r6)
    1b98:	10c00616 	blt	r2,r3,1bb4 <_putc_r+0x74>
    1b9c:	30800017 	ldw	r2,0(r6)
    1ba0:	00c00284 	movi	r3,10
    1ba4:	11400005 	stb	r5,0(r2)
    1ba8:	30800017 	ldw	r2,0(r6)
    1bac:	11400003 	ldbu	r5,0(r2)
    1bb0:	28fff11e 	bne	r5,r3,1b78 <_putc_r+0x38>
    1bb4:	8009883a 	mov	r4,r16
    1bb8:	dfc00317 	ldw	ra,12(sp)
    1bbc:	dc000217 	ldw	r16,8(sp)
    1bc0:	dec00404 	addi	sp,sp,16
    1bc4:	000443c1 	jmpi	443c <__swbuf_r>
    1bc8:	d9400015 	stw	r5,0(sp)
    1bcc:	d9800115 	stw	r6,4(sp)
    1bd0:	00065ac0 	call	65ac <__sinit>
    1bd4:	d9800117 	ldw	r6,4(sp)
    1bd8:	d9400017 	ldw	r5,0(sp)
    1bdc:	003fdf06 	br	1b5c <_putc_r+0x1c>

00001be0 <putc>:
    1be0:	defffc04 	addi	sp,sp,-16
    1be4:	dc400115 	stw	r17,4(sp)
    1be8:	04400074 	movhi	r17,1
    1bec:	8c475304 	addi	r17,r17,7500
    1bf0:	dc800215 	stw	r18,8(sp)
    1bf4:	2025883a 	mov	r18,r4
    1bf8:	89000017 	ldw	r4,0(r17)
    1bfc:	dc000015 	stw	r16,0(sp)
    1c00:	dfc00315 	stw	ra,12(sp)
    1c04:	2821883a 	mov	r16,r5
    1c08:	20000226 	beq	r4,zero,1c14 <putc+0x34>
    1c0c:	20c00e17 	ldw	r3,56(r4)
    1c10:	18001a26 	beq	r3,zero,1c7c <putc+0x9c>
    1c14:	80800217 	ldw	r2,8(r16)
    1c18:	10bfffc4 	addi	r2,r2,-1
    1c1c:	80800215 	stw	r2,8(r16)
    1c20:	10000c16 	blt	r2,zero,1c54 <putc+0x74>
    1c24:	80800017 	ldw	r2,0(r16)
    1c28:	14800005 	stb	r18,0(r2)
    1c2c:	80800017 	ldw	r2,0(r16)
    1c30:	10c00044 	addi	r3,r2,1
    1c34:	80c00015 	stw	r3,0(r16)
    1c38:	10800003 	ldbu	r2,0(r2)
    1c3c:	dfc00317 	ldw	ra,12(sp)
    1c40:	dc800217 	ldw	r18,8(sp)
    1c44:	dc400117 	ldw	r17,4(sp)
    1c48:	dc000017 	ldw	r16,0(sp)
    1c4c:	dec00404 	addi	sp,sp,16
    1c50:	f800283a 	ret
    1c54:	80c00617 	ldw	r3,24(r16)
    1c58:	10c00a16 	blt	r2,r3,1c84 <putc+0xa4>
    1c5c:	80800017 	ldw	r2,0(r16)
    1c60:	00c00284 	movi	r3,10
    1c64:	14800005 	stb	r18,0(r2)
    1c68:	80800017 	ldw	r2,0(r16)
    1c6c:	11400003 	ldbu	r5,0(r2)
    1c70:	28ffef1e 	bne	r5,r3,1c30 <putc+0x50>
    1c74:	89000017 	ldw	r4,0(r17)
    1c78:	00000406 	br	1c8c <putc+0xac>
    1c7c:	00065ac0 	call	65ac <__sinit>
    1c80:	003fe406 	br	1c14 <putc+0x34>
    1c84:	89000017 	ldw	r4,0(r17)
    1c88:	900b883a 	mov	r5,r18
    1c8c:	800d883a 	mov	r6,r16
    1c90:	dfc00317 	ldw	ra,12(sp)
    1c94:	dc800217 	ldw	r18,8(sp)
    1c98:	dc400117 	ldw	r17,4(sp)
    1c9c:	dc000017 	ldw	r16,0(sp)
    1ca0:	dec00404 	addi	sp,sp,16
    1ca4:	000443c1 	jmpi	443c <__swbuf_r>

00001ca8 <_puts_r>:
    1ca8:	defff604 	addi	sp,sp,-40
    1cac:	dc000715 	stw	r16,28(sp)
    1cb0:	2021883a 	mov	r16,r4
    1cb4:	2809883a 	mov	r4,r5
    1cb8:	dc400815 	stw	r17,32(sp)
    1cbc:	dfc00915 	stw	ra,36(sp)
    1cc0:	2823883a 	mov	r17,r5
    1cc4:	00023840 	call	2384 <strlen>
    1cc8:	00c00074 	movhi	r3,1
    1ccc:	18c75304 	addi	r3,r3,7500
    1cd0:	18c00017 	ldw	r3,0(r3)
    1cd4:	11000044 	addi	r4,r2,1
    1cd8:	d8800115 	stw	r2,4(sp)
    1cdc:	18c00217 	ldw	r3,8(r3)
    1ce0:	01400074 	movhi	r5,1
    1ce4:	297fea04 	addi	r5,r5,-88
    1ce8:	1880030b 	ldhu	r2,12(r3)
    1cec:	d9400215 	stw	r5,8(sp)
    1cf0:	d9000615 	stw	r4,24(sp)
    1cf4:	01400044 	movi	r5,1
    1cf8:	01000084 	movi	r4,2
    1cfc:	d9000515 	stw	r4,20(sp)
    1d00:	dc400015 	stw	r17,0(sp)
    1d04:	d9400315 	stw	r5,12(sp)
    1d08:	dec00415 	stw	sp,16(sp)
    1d0c:	1108000c 	andi	r4,r2,8192
    1d10:	2000061e 	bne	r4,zero,1d2c <_puts_r+0x84>
    1d14:	19401917 	ldw	r5,100(r3)
    1d18:	0137ffc4 	movi	r4,-8193
    1d1c:	10880014 	ori	r2,r2,8192
    1d20:	2908703a 	and	r4,r5,r4
    1d24:	1880030d 	sth	r2,12(r3)
    1d28:	19001915 	stw	r4,100(r3)
    1d2c:	81400217 	ldw	r5,8(r16)
    1d30:	8009883a 	mov	r4,r16
    1d34:	d9800404 	addi	r6,sp,16
    1d38:	0006a100 	call	6a10 <__sfvwrite_r>
    1d3c:	1000061e 	bne	r2,zero,1d58 <_puts_r+0xb0>
    1d40:	00800284 	movi	r2,10
    1d44:	dfc00917 	ldw	ra,36(sp)
    1d48:	dc400817 	ldw	r17,32(sp)
    1d4c:	dc000717 	ldw	r16,28(sp)
    1d50:	dec00a04 	addi	sp,sp,40
    1d54:	f800283a 	ret
    1d58:	00bfffc4 	movi	r2,-1
    1d5c:	003ff906 	br	1d44 <_puts_r+0x9c>

00001d60 <puts>:
    1d60:	00800074 	movhi	r2,1
    1d64:	10875304 	addi	r2,r2,7500
    1d68:	200b883a 	mov	r5,r4
    1d6c:	11000017 	ldw	r4,0(r2)
    1d70:	0001ca81 	jmpi	1ca8 <_puts_r>

00001d74 <realloc>:
    1d74:	00c00074 	movhi	r3,1
    1d78:	18c75304 	addi	r3,r3,7500
    1d7c:	2005883a 	mov	r2,r4
    1d80:	19000017 	ldw	r4,0(r3)
    1d84:	280d883a 	mov	r6,r5
    1d88:	100b883a 	mov	r5,r2
    1d8c:	0001d901 	jmpi	1d90 <_realloc_r>

00001d90 <_realloc_r>:
    1d90:	defff604 	addi	sp,sp,-40
    1d94:	dcc00315 	stw	r19,12(sp)
    1d98:	dc400115 	stw	r17,4(sp)
    1d9c:	dfc00915 	stw	ra,36(sp)
    1da0:	df000815 	stw	fp,32(sp)
    1da4:	ddc00715 	stw	r23,28(sp)
    1da8:	dd800615 	stw	r22,24(sp)
    1dac:	dd400515 	stw	r21,20(sp)
    1db0:	dd000415 	stw	r20,16(sp)
    1db4:	dc800215 	stw	r18,8(sp)
    1db8:	dc000015 	stw	r16,0(sp)
    1dbc:	2827883a 	mov	r19,r5
    1dc0:	3023883a 	mov	r17,r6
    1dc4:	2800bf26 	beq	r5,zero,20c4 <_realloc_r+0x334>
    1dc8:	2025883a 	mov	r18,r4
    1dcc:	000dca80 	call	dca8 <__malloc_lock>
    1dd0:	98ffff17 	ldw	r3,-4(r19)
    1dd4:	01bfff04 	movi	r6,-4
    1dd8:	890002c4 	addi	r4,r17,11
    1ddc:	01c00584 	movi	r7,22
    1de0:	9d7ffe04 	addi	r21,r19,-8
    1de4:	19a0703a 	and	r16,r3,r6
    1de8:	39003f2e 	bgeu	r7,r4,1ee8 <_realloc_r+0x158>
    1dec:	053ffe04 	movi	r20,-8
    1df0:	2528703a 	and	r20,r4,r20
    1df4:	a00f883a 	mov	r7,r20
    1df8:	a0008216 	blt	r20,zero,2004 <_realloc_r+0x274>
    1dfc:	a4408136 	bltu	r20,r17,2004 <_realloc_r+0x274>
    1e00:	81c03c0e 	bge	r16,r7,1ef4 <_realloc_r+0x164>
    1e04:	07000074 	movhi	fp,1
    1e08:	e701b004 	addi	fp,fp,1728
    1e0c:	e1000217 	ldw	r4,8(fp)
    1e10:	ac05883a 	add	r2,r21,r16
    1e14:	2080bf26 	beq	r4,r2,2114 <_realloc_r+0x384>
    1e18:	11000117 	ldw	r4,4(r2)
    1e1c:	023fff84 	movi	r8,-2
    1e20:	2210703a 	and	r8,r4,r8
    1e24:	1211883a 	add	r8,r2,r8
    1e28:	41400117 	ldw	r5,4(r8)
    1e2c:	2940004c 	andi	r5,r5,1
    1e30:	28004a1e 	bne	r5,zero,1f5c <_realloc_r+0x1cc>
    1e34:	017fff04 	movi	r5,-4
    1e38:	2148703a 	and	r4,r4,r5
    1e3c:	2409883a 	add	r4,r4,r16
    1e40:	21c0ad0e 	bge	r4,r7,20f8 <_realloc_r+0x368>
    1e44:	18c0004c 	andi	r3,r3,1
    1e48:	18007f1e 	bne	r3,zero,2048 <_realloc_r+0x2b8>
    1e4c:	9dfffe17 	ldw	r23,-8(r19)
    1e50:	adefc83a 	sub	r23,r21,r23
    1e54:	bd800117 	ldw	r22,4(r23)
    1e58:	b14a703a 	and	r5,r22,r5
    1e5c:	216d883a 	add	r22,r4,r5
    1e60:	b1c04516 	blt	r22,r7,1f78 <_realloc_r+0x1e8>
    1e64:	10c00317 	ldw	r3,12(r2)
    1e68:	10800217 	ldw	r2,8(r2)
    1e6c:	81bfff04 	addi	r6,r16,-4
    1e70:	bc400204 	addi	r17,r23,8
    1e74:	10c00315 	stw	r3,12(r2)
    1e78:	18800215 	stw	r2,8(r3)
    1e7c:	b9400217 	ldw	r5,8(r23)
    1e80:	b8c00317 	ldw	r3,12(r23)
    1e84:	00800904 	movi	r2,36
    1e88:	28c00315 	stw	r3,12(r5)
    1e8c:	19400215 	stw	r5,8(r3)
    1e90:	1180ef36 	bltu	r2,r6,2250 <_realloc_r+0x4c0>
    1e94:	008004c4 	movi	r2,19
    1e98:	1180da2e 	bgeu	r2,r6,2204 <_realloc_r+0x474>
    1e9c:	98800017 	ldw	r2,0(r19)
    1ea0:	b8800215 	stw	r2,8(r23)
    1ea4:	98800117 	ldw	r2,4(r19)
    1ea8:	b8800315 	stw	r2,12(r23)
    1eac:	008006c4 	movi	r2,27
    1eb0:	1180fc2e 	bgeu	r2,r6,22a4 <_realloc_r+0x514>
    1eb4:	98800217 	ldw	r2,8(r19)
    1eb8:	b8800415 	stw	r2,16(r23)
    1ebc:	98800317 	ldw	r2,12(r19)
    1ec0:	b8800515 	stw	r2,20(r23)
    1ec4:	00800904 	movi	r2,36
    1ec8:	3080421e 	bne	r6,r2,1fd4 <_realloc_r+0x244>
    1ecc:	98800417 	ldw	r2,16(r19)
    1ed0:	9cc00604 	addi	r19,r19,24
    1ed4:	b8c00804 	addi	r3,r23,32
    1ed8:	b8800615 	stw	r2,24(r23)
    1edc:	98bfff17 	ldw	r2,-4(r19)
    1ee0:	b8800715 	stw	r2,28(r23)
    1ee4:	00003d06 	br	1fdc <_realloc_r+0x24c>
    1ee8:	01c00404 	movi	r7,16
    1eec:	3829883a 	mov	r20,r7
    1ef0:	003fc206 	br	1dfc <_realloc_r+0x6c>
    1ef4:	9823883a 	mov	r17,r19
    1ef8:	850fc83a 	sub	r7,r16,r20
    1efc:	008003c4 	movi	r2,15
    1f00:	18c0004c 	andi	r3,r3,1
    1f04:	11c04336 	bltu	r2,r7,2014 <_realloc_r+0x284>
    1f08:	1c06b03a 	or	r3,r3,r16
    1f0c:	a8c00115 	stw	r3,4(r21)
    1f10:	ac21883a 	add	r16,r21,r16
    1f14:	80c00117 	ldw	r3,4(r16)
    1f18:	18c00054 	ori	r3,r3,1
    1f1c:	80c00115 	stw	r3,4(r16)
    1f20:	9009883a 	mov	r4,r18
    1f24:	000dcc80 	call	dcc8 <__malloc_unlock>
    1f28:	8805883a 	mov	r2,r17
    1f2c:	dfc00917 	ldw	ra,36(sp)
    1f30:	df000817 	ldw	fp,32(sp)
    1f34:	ddc00717 	ldw	r23,28(sp)
    1f38:	dd800617 	ldw	r22,24(sp)
    1f3c:	dd400517 	ldw	r21,20(sp)
    1f40:	dd000417 	ldw	r20,16(sp)
    1f44:	dcc00317 	ldw	r19,12(sp)
    1f48:	dc800217 	ldw	r18,8(sp)
    1f4c:	dc400117 	ldw	r17,4(sp)
    1f50:	dc000017 	ldw	r16,0(sp)
    1f54:	dec00a04 	addi	sp,sp,40
    1f58:	f800283a 	ret
    1f5c:	18c0004c 	andi	r3,r3,1
    1f60:	1800391e 	bne	r3,zero,2048 <_realloc_r+0x2b8>
    1f64:	9dfffe17 	ldw	r23,-8(r19)
    1f68:	00bfff04 	movi	r2,-4
    1f6c:	adefc83a 	sub	r23,r21,r23
    1f70:	b9400117 	ldw	r5,4(r23)
    1f74:	288a703a 	and	r5,r5,r2
    1f78:	2c2d883a 	add	r22,r5,r16
    1f7c:	b1c03216 	blt	r22,r7,2048 <_realloc_r+0x2b8>
    1f80:	b8800317 	ldw	r2,12(r23)
    1f84:	b8c00217 	ldw	r3,8(r23)
    1f88:	81bfff04 	addi	r6,r16,-4
    1f8c:	01000904 	movi	r4,36
    1f90:	18800315 	stw	r2,12(r3)
    1f94:	10c00215 	stw	r3,8(r2)
    1f98:	bc400204 	addi	r17,r23,8
    1f9c:	2180ac36 	bltu	r4,r6,2250 <_realloc_r+0x4c0>
    1fa0:	008004c4 	movi	r2,19
    1fa4:	1180972e 	bgeu	r2,r6,2204 <_realloc_r+0x474>
    1fa8:	98800017 	ldw	r2,0(r19)
    1fac:	b8800215 	stw	r2,8(r23)
    1fb0:	98800117 	ldw	r2,4(r19)
    1fb4:	b8800315 	stw	r2,12(r23)
    1fb8:	008006c4 	movi	r2,27
    1fbc:	1180b92e 	bgeu	r2,r6,22a4 <_realloc_r+0x514>
    1fc0:	98800217 	ldw	r2,8(r19)
    1fc4:	b8800415 	stw	r2,16(r23)
    1fc8:	98800317 	ldw	r2,12(r19)
    1fcc:	b8800515 	stw	r2,20(r23)
    1fd0:	313fbe26 	beq	r6,r4,1ecc <_realloc_r+0x13c>
    1fd4:	b8c00604 	addi	r3,r23,24
    1fd8:	9cc00404 	addi	r19,r19,16
    1fdc:	98800017 	ldw	r2,0(r19)
    1fe0:	b021883a 	mov	r16,r22
    1fe4:	b82b883a 	mov	r21,r23
    1fe8:	18800015 	stw	r2,0(r3)
    1fec:	98800117 	ldw	r2,4(r19)
    1ff0:	18800115 	stw	r2,4(r3)
    1ff4:	98800217 	ldw	r2,8(r19)
    1ff8:	18800215 	stw	r2,8(r3)
    1ffc:	b8c00117 	ldw	r3,4(r23)
    2000:	003fbd06 	br	1ef8 <_realloc_r+0x168>
    2004:	00800304 	movi	r2,12
    2008:	90800015 	stw	r2,0(r18)
    200c:	0005883a 	mov	r2,zero
    2010:	003fc606 	br	1f2c <_realloc_r+0x19c>
    2014:	1d06b03a 	or	r3,r3,r20
    2018:	ad0b883a 	add	r5,r21,r20
    201c:	a8c00115 	stw	r3,4(r21)
    2020:	38800054 	ori	r2,r7,1
    2024:	28800115 	stw	r2,4(r5)
    2028:	29cf883a 	add	r7,r5,r7
    202c:	38800117 	ldw	r2,4(r7)
    2030:	9009883a 	mov	r4,r18
    2034:	29400204 	addi	r5,r5,8
    2038:	10800054 	ori	r2,r2,1
    203c:	38800115 	stw	r2,4(r7)
    2040:	00067200 	call	6720 <_free_r>
    2044:	003fb606 	br	1f20 <_realloc_r+0x190>
    2048:	880b883a 	mov	r5,r17
    204c:	9009883a 	mov	r4,r18
    2050:	00013300 	call	1330 <_malloc_r>
    2054:	1023883a 	mov	r17,r2
    2058:	1000aa26 	beq	r2,zero,2304 <_realloc_r+0x574>
    205c:	98ffff17 	ldw	r3,-4(r19)
    2060:	113ffe04 	addi	r4,r2,-8
    2064:	00bfff84 	movi	r2,-2
    2068:	1884703a 	and	r2,r3,r2
    206c:	a885883a 	add	r2,r21,r2
    2070:	20808626 	beq	r4,r2,228c <_realloc_r+0x4fc>
    2074:	81bfff04 	addi	r6,r16,-4
    2078:	00800904 	movi	r2,36
    207c:	11807036 	bltu	r2,r6,2240 <_realloc_r+0x4b0>
    2080:	00c004c4 	movi	r3,19
    2084:	19805636 	bltu	r3,r6,21e0 <_realloc_r+0x450>
    2088:	8805883a 	mov	r2,r17
    208c:	9807883a 	mov	r3,r19
    2090:	19000017 	ldw	r4,0(r3)
    2094:	11000015 	stw	r4,0(r2)
    2098:	19000117 	ldw	r4,4(r3)
    209c:	11000115 	stw	r4,4(r2)
    20a0:	18c00217 	ldw	r3,8(r3)
    20a4:	10c00215 	stw	r3,8(r2)
    20a8:	980b883a 	mov	r5,r19
    20ac:	9009883a 	mov	r4,r18
    20b0:	00067200 	call	6720 <_free_r>
    20b4:	9009883a 	mov	r4,r18
    20b8:	000dcc80 	call	dcc8 <__malloc_unlock>
    20bc:	8805883a 	mov	r2,r17
    20c0:	003f9a06 	br	1f2c <_realloc_r+0x19c>
    20c4:	300b883a 	mov	r5,r6
    20c8:	dfc00917 	ldw	ra,36(sp)
    20cc:	df000817 	ldw	fp,32(sp)
    20d0:	ddc00717 	ldw	r23,28(sp)
    20d4:	dd800617 	ldw	r22,24(sp)
    20d8:	dd400517 	ldw	r21,20(sp)
    20dc:	dd000417 	ldw	r20,16(sp)
    20e0:	dcc00317 	ldw	r19,12(sp)
    20e4:	dc800217 	ldw	r18,8(sp)
    20e8:	dc400117 	ldw	r17,4(sp)
    20ec:	dc000017 	ldw	r16,0(sp)
    20f0:	dec00a04 	addi	sp,sp,40
    20f4:	00013301 	jmpi	1330 <_malloc_r>
    20f8:	11400317 	ldw	r5,12(r2)
    20fc:	10800217 	ldw	r2,8(r2)
    2100:	9823883a 	mov	r17,r19
    2104:	2021883a 	mov	r16,r4
    2108:	11400315 	stw	r5,12(r2)
    210c:	28800215 	stw	r2,8(r5)
    2110:	003f7906 	br	1ef8 <_realloc_r+0x168>
    2114:	21000117 	ldw	r4,4(r4)
    2118:	00bfff04 	movi	r2,-4
    211c:	a1800404 	addi	r6,r20,16
    2120:	2088703a 	and	r4,r4,r2
    2124:	2409883a 	add	r4,r4,r16
    2128:	2180380e 	bge	r4,r6,220c <_realloc_r+0x47c>
    212c:	18c0004c 	andi	r3,r3,1
    2130:	183fc51e 	bne	r3,zero,2048 <_realloc_r+0x2b8>
    2134:	9dfffe17 	ldw	r23,-8(r19)
    2138:	adefc83a 	sub	r23,r21,r23
    213c:	b9400117 	ldw	r5,4(r23)
    2140:	288a703a 	and	r5,r5,r2
    2144:	216d883a 	add	r22,r4,r5
    2148:	b1bf8b16 	blt	r22,r6,1f78 <_realloc_r+0x1e8>
    214c:	b8800317 	ldw	r2,12(r23)
    2150:	b8c00217 	ldw	r3,8(r23)
    2154:	81bfff04 	addi	r6,r16,-4
    2158:	01000904 	movi	r4,36
    215c:	18800315 	stw	r2,12(r3)
    2160:	10c00215 	stw	r3,8(r2)
    2164:	bc400204 	addi	r17,r23,8
    2168:	21805a36 	bltu	r4,r6,22d4 <_realloc_r+0x544>
    216c:	008004c4 	movi	r2,19
    2170:	1180562e 	bgeu	r2,r6,22cc <_realloc_r+0x53c>
    2174:	98800017 	ldw	r2,0(r19)
    2178:	b8800215 	stw	r2,8(r23)
    217c:	98800117 	ldw	r2,4(r19)
    2180:	b8800315 	stw	r2,12(r23)
    2184:	008006c4 	movi	r2,27
    2188:	11805636 	bltu	r2,r6,22e4 <_realloc_r+0x554>
    218c:	b8800404 	addi	r2,r23,16
    2190:	9cc00204 	addi	r19,r19,8
    2194:	98c00017 	ldw	r3,0(r19)
    2198:	10c00015 	stw	r3,0(r2)
    219c:	98c00117 	ldw	r3,4(r19)
    21a0:	10c00115 	stw	r3,4(r2)
    21a4:	98c00217 	ldw	r3,8(r19)
    21a8:	10c00215 	stw	r3,8(r2)
    21ac:	bd07883a 	add	r3,r23,r20
    21b0:	b505c83a 	sub	r2,r22,r20
    21b4:	e0c00215 	stw	r3,8(fp)
    21b8:	10800054 	ori	r2,r2,1
    21bc:	18800115 	stw	r2,4(r3)
    21c0:	b8800117 	ldw	r2,4(r23)
    21c4:	9009883a 	mov	r4,r18
    21c8:	1080004c 	andi	r2,r2,1
    21cc:	a0a8b03a 	or	r20,r20,r2
    21d0:	bd000115 	stw	r20,4(r23)
    21d4:	000dcc80 	call	dcc8 <__malloc_unlock>
    21d8:	8805883a 	mov	r2,r17
    21dc:	003f5306 	br	1f2c <_realloc_r+0x19c>
    21e0:	98c00017 	ldw	r3,0(r19)
    21e4:	88c00015 	stw	r3,0(r17)
    21e8:	98c00117 	ldw	r3,4(r19)
    21ec:	88c00115 	stw	r3,4(r17)
    21f0:	00c006c4 	movi	r3,27
    21f4:	19801d36 	bltu	r3,r6,226c <_realloc_r+0x4dc>
    21f8:	88800204 	addi	r2,r17,8
    21fc:	98c00204 	addi	r3,r19,8
    2200:	003fa306 	br	2090 <_realloc_r+0x300>
    2204:	8807883a 	mov	r3,r17
    2208:	003f7406 	br	1fdc <_realloc_r+0x24c>
    220c:	ad2b883a 	add	r21,r21,r20
    2210:	2505c83a 	sub	r2,r4,r20
    2214:	e5400215 	stw	r21,8(fp)
    2218:	10800054 	ori	r2,r2,1
    221c:	a8800115 	stw	r2,4(r21)
    2220:	98bfff17 	ldw	r2,-4(r19)
    2224:	9009883a 	mov	r4,r18
    2228:	1080004c 	andi	r2,r2,1
    222c:	a0a8b03a 	or	r20,r20,r2
    2230:	9d3fff15 	stw	r20,-4(r19)
    2234:	000dcc80 	call	dcc8 <__malloc_unlock>
    2238:	9805883a 	mov	r2,r19
    223c:	003f3b06 	br	1f2c <_realloc_r+0x19c>
    2240:	8809883a 	mov	r4,r17
    2244:	980b883a 	mov	r5,r19
    2248:	00074dc0 	call	74dc <memmove>
    224c:	003f9606 	br	20a8 <_realloc_r+0x318>
    2250:	8809883a 	mov	r4,r17
    2254:	980b883a 	mov	r5,r19
    2258:	00074dc0 	call	74dc <memmove>
    225c:	b8c00117 	ldw	r3,4(r23)
    2260:	b021883a 	mov	r16,r22
    2264:	b82b883a 	mov	r21,r23
    2268:	003f2306 	br	1ef8 <_realloc_r+0x168>
    226c:	98c00217 	ldw	r3,8(r19)
    2270:	88c00215 	stw	r3,8(r17)
    2274:	98c00317 	ldw	r3,12(r19)
    2278:	88c00315 	stw	r3,12(r17)
    227c:	30800c26 	beq	r6,r2,22b0 <_realloc_r+0x520>
    2280:	88800404 	addi	r2,r17,16
    2284:	98c00404 	addi	r3,r19,16
    2288:	003f8106 	br	2090 <_realloc_r+0x300>
    228c:	893fff17 	ldw	r4,-4(r17)
    2290:	00bfff04 	movi	r2,-4
    2294:	9823883a 	mov	r17,r19
    2298:	2084703a 	and	r2,r4,r2
    229c:	80a1883a 	add	r16,r16,r2
    22a0:	003f1506 	br	1ef8 <_realloc_r+0x168>
    22a4:	b8c00404 	addi	r3,r23,16
    22a8:	9cc00204 	addi	r19,r19,8
    22ac:	003f4b06 	br	1fdc <_realloc_r+0x24c>
    22b0:	99000417 	ldw	r4,16(r19)
    22b4:	88800604 	addi	r2,r17,24
    22b8:	98c00604 	addi	r3,r19,24
    22bc:	89000415 	stw	r4,16(r17)
    22c0:	99000517 	ldw	r4,20(r19)
    22c4:	89000515 	stw	r4,20(r17)
    22c8:	003f7106 	br	2090 <_realloc_r+0x300>
    22cc:	8805883a 	mov	r2,r17
    22d0:	003fb006 	br	2194 <_realloc_r+0x404>
    22d4:	8809883a 	mov	r4,r17
    22d8:	980b883a 	mov	r5,r19
    22dc:	00074dc0 	call	74dc <memmove>
    22e0:	003fb206 	br	21ac <_realloc_r+0x41c>
    22e4:	98800217 	ldw	r2,8(r19)
    22e8:	b8800415 	stw	r2,16(r23)
    22ec:	98800317 	ldw	r2,12(r19)
    22f0:	b8800515 	stw	r2,20(r23)
    22f4:	31000726 	beq	r6,r4,2314 <_realloc_r+0x584>
    22f8:	b8800604 	addi	r2,r23,24
    22fc:	9cc00404 	addi	r19,r19,16
    2300:	003fa406 	br	2194 <_realloc_r+0x404>
    2304:	9009883a 	mov	r4,r18
    2308:	000dcc80 	call	dcc8 <__malloc_unlock>
    230c:	0005883a 	mov	r2,zero
    2310:	003f0606 	br	1f2c <_realloc_r+0x19c>
    2314:	98c00417 	ldw	r3,16(r19)
    2318:	9cc00604 	addi	r19,r19,24
    231c:	b8800804 	addi	r2,r23,32
    2320:	b8c00615 	stw	r3,24(r23)
    2324:	98ffff17 	ldw	r3,-4(r19)
    2328:	b8c00715 	stw	r3,28(r23)
    232c:	003f9906 	br	2194 <_realloc_r+0x404>

00002330 <_sbrk_r>:
    2330:	defffd04 	addi	sp,sp,-12
    2334:	dc000015 	stw	r16,0(sp)
    2338:	04000074 	movhi	r16,1
    233c:	dc400115 	stw	r17,4(sp)
    2340:	840e2004 	addi	r16,r16,14464
    2344:	2023883a 	mov	r17,r4
    2348:	2809883a 	mov	r4,r5
    234c:	dfc00215 	stw	ra,8(sp)
    2350:	80000015 	stw	zero,0(r16)
    2354:	000de940 	call	de94 <sbrk>
    2358:	00ffffc4 	movi	r3,-1
    235c:	10c00526 	beq	r2,r3,2374 <_sbrk_r+0x44>
    2360:	dfc00217 	ldw	ra,8(sp)
    2364:	dc400117 	ldw	r17,4(sp)
    2368:	dc000017 	ldw	r16,0(sp)
    236c:	dec00304 	addi	sp,sp,12
    2370:	f800283a 	ret
    2374:	80c00017 	ldw	r3,0(r16)
    2378:	183ff926 	beq	r3,zero,2360 <_sbrk_r+0x30>
    237c:	88c00015 	stw	r3,0(r17)
    2380:	003ff706 	br	2360 <_sbrk_r+0x30>

00002384 <strlen>:
    2384:	208000cc 	andi	r2,r4,3
    2388:	10002026 	beq	r2,zero,240c <strlen+0x88>
    238c:	20800007 	ldb	r2,0(r4)
    2390:	10002026 	beq	r2,zero,2414 <strlen+0x90>
    2394:	2005883a 	mov	r2,r4
    2398:	00000206 	br	23a4 <strlen+0x20>
    239c:	10c00007 	ldb	r3,0(r2)
    23a0:	18001826 	beq	r3,zero,2404 <strlen+0x80>
    23a4:	10800044 	addi	r2,r2,1
    23a8:	10c000cc 	andi	r3,r2,3
    23ac:	183ffb1e 	bne	r3,zero,239c <strlen+0x18>
    23b0:	10c00017 	ldw	r3,0(r2)
    23b4:	01ffbff4 	movhi	r7,65279
    23b8:	39ffbfc4 	addi	r7,r7,-257
    23bc:	00ca303a 	nor	r5,zero,r3
    23c0:	01a02074 	movhi	r6,32897
    23c4:	19c7883a 	add	r3,r3,r7
    23c8:	31a02004 	addi	r6,r6,-32640
    23cc:	1946703a 	and	r3,r3,r5
    23d0:	1986703a 	and	r3,r3,r6
    23d4:	1800091e 	bne	r3,zero,23fc <strlen+0x78>
    23d8:	10800104 	addi	r2,r2,4
    23dc:	10c00017 	ldw	r3,0(r2)
    23e0:	19cb883a 	add	r5,r3,r7
    23e4:	00c6303a 	nor	r3,zero,r3
    23e8:	28c6703a 	and	r3,r5,r3
    23ec:	1986703a 	and	r3,r3,r6
    23f0:	183ff926 	beq	r3,zero,23d8 <strlen+0x54>
    23f4:	00000106 	br	23fc <strlen+0x78>
    23f8:	10800044 	addi	r2,r2,1
    23fc:	10c00007 	ldb	r3,0(r2)
    2400:	183ffd1e 	bne	r3,zero,23f8 <strlen+0x74>
    2404:	1105c83a 	sub	r2,r2,r4
    2408:	f800283a 	ret
    240c:	2005883a 	mov	r2,r4
    2410:	003fe706 	br	23b0 <strlen+0x2c>
    2414:	0005883a 	mov	r2,zero
    2418:	f800283a 	ret

0000241c <___vfprintf_internal_r>:
    241c:	defeb604 	addi	sp,sp,-1320
    2420:	dfc14915 	stw	ra,1316(sp)
    2424:	ddc14715 	stw	r23,1308(sp)
    2428:	dd814615 	stw	r22,1304(sp)
    242c:	282f883a 	mov	r23,r5
    2430:	202d883a 	mov	r22,r4
    2434:	d9812a15 	stw	r6,1192(sp)
    2438:	d9c12d15 	stw	r7,1204(sp)
    243c:	df014815 	stw	fp,1312(sp)
    2440:	dd414515 	stw	r21,1300(sp)
    2444:	dd014415 	stw	r20,1296(sp)
    2448:	dcc14315 	stw	r19,1292(sp)
    244c:	dc814215 	stw	r18,1288(sp)
    2450:	dc414115 	stw	r17,1284(sp)
    2454:	dc014015 	stw	r16,1280(sp)
    2458:	00070d00 	call	70d0 <_localeconv_r>
    245c:	10800017 	ldw	r2,0(r2)
    2460:	1009883a 	mov	r4,r2
    2464:	d8813515 	stw	r2,1236(sp)
    2468:	00023840 	call	2384 <strlen>
    246c:	d8813815 	stw	r2,1248(sp)
    2470:	b0000226 	beq	r22,zero,247c <___vfprintf_internal_r+0x60>
    2474:	b0800e17 	ldw	r2,56(r22)
    2478:	10010426 	beq	r2,zero,288c <___vfprintf_internal_r+0x470>
    247c:	b8c0030b 	ldhu	r3,12(r23)
    2480:	1908000c 	andi	r4,r3,8192
    2484:	1805883a 	mov	r2,r3
    2488:	2000071e 	bne	r4,zero,24a8 <___vfprintf_internal_r+0x8c>
    248c:	b9001917 	ldw	r4,100(r23)
    2490:	18880014 	ori	r2,r3,8192
    2494:	00f7ffc4 	movi	r3,-8193
    2498:	20c8703a 	and	r4,r4,r3
    249c:	b880030d 	sth	r2,12(r23)
    24a0:	1007883a 	mov	r3,r2
    24a4:	b9001915 	stw	r4,100(r23)
    24a8:	1100020c 	andi	r4,r2,8
    24ac:	2000a726 	beq	r4,zero,274c <___vfprintf_internal_r+0x330>
    24b0:	b9000417 	ldw	r4,16(r23)
    24b4:	2000a526 	beq	r4,zero,274c <___vfprintf_internal_r+0x330>
    24b8:	1080068c 	andi	r2,r2,26
    24bc:	01000284 	movi	r4,10
    24c0:	1100ab26 	beq	r2,r4,2770 <___vfprintf_internal_r+0x354>
    24c4:	dac10e04 	addi	r11,sp,1080
    24c8:	db010dc4 	addi	r12,sp,1079
    24cc:	d8800404 	addi	r2,sp,16
    24d0:	05000074 	movhi	r20,1
    24d4:	dac12815 	stw	r11,1184(sp)
    24d8:	5b17c83a 	sub	r11,r11,r12
    24dc:	a53ffb84 	addi	r20,r20,-18
    24e0:	db012915 	stw	r12,1188(sp)
    24e4:	d8811e15 	stw	r2,1144(sp)
    24e8:	d8012015 	stw	zero,1152(sp)
    24ec:	d8011f15 	stw	zero,1148(sp)
    24f0:	d8013315 	stw	zero,1228(sp)
    24f4:	d8013715 	stw	zero,1244(sp)
    24f8:	d8013915 	stw	zero,1252(sp)
    24fc:	d8013b15 	stw	zero,1260(sp)
    2500:	d8013a15 	stw	zero,1256(sp)
    2504:	d8012f15 	stw	zero,1212(sp)
    2508:	1011883a 	mov	r8,r2
    250c:	dac13c15 	stw	r11,1264(sp)
    2510:	db012a17 	ldw	r12,1192(sp)
    2514:	60800007 	ldb	r2,0(r12)
    2518:	1000df26 	beq	r2,zero,2898 <___vfprintf_internal_r+0x47c>
    251c:	00c00944 	movi	r3,37
    2520:	10c0dd26 	beq	r2,r3,2898 <___vfprintf_internal_r+0x47c>
    2524:	6021883a 	mov	r16,r12
    2528:	00000106 	br	2530 <___vfprintf_internal_r+0x114>
    252c:	10c08426 	beq	r2,r3,2740 <___vfprintf_internal_r+0x324>
    2530:	84000044 	addi	r16,r16,1
    2534:	80800007 	ldb	r2,0(r16)
    2538:	103ffc1e 	bne	r2,zero,252c <___vfprintf_internal_r+0x110>
    253c:	dac12a17 	ldw	r11,1192(sp)
    2540:	82e3c83a 	sub	r17,r16,r11
    2544:	88000f26 	beq	r17,zero,2584 <___vfprintf_internal_r+0x168>
    2548:	d8c12017 	ldw	r3,1152(sp)
    254c:	d8811f17 	ldw	r2,1148(sp)
    2550:	dac12a17 	ldw	r11,1192(sp)
    2554:	1c47883a 	add	r3,r3,r17
    2558:	10800044 	addi	r2,r2,1
    255c:	d8c12015 	stw	r3,1152(sp)
    2560:	42c00015 	stw	r11,0(r8)
    2564:	44400115 	stw	r17,4(r8)
    2568:	d8811f15 	stw	r2,1148(sp)
    256c:	00c001c4 	movi	r3,7
    2570:	1880b416 	blt	r3,r2,2844 <___vfprintf_internal_r+0x428>
    2574:	42000204 	addi	r8,r8,8
    2578:	db012f17 	ldw	r12,1212(sp)
    257c:	6459883a 	add	r12,r12,r17
    2580:	db012f15 	stw	r12,1212(sp)
    2584:	80800007 	ldb	r2,0(r16)
    2588:	1000b526 	beq	r2,zero,2860 <___vfprintf_internal_r+0x444>
    258c:	80800044 	addi	r2,r16,1
    2590:	84000047 	ldb	r16,1(r16)
    2594:	d8012785 	stb	zero,1182(sp)
    2598:	000d883a 	mov	r6,zero
    259c:	027fffc4 	movi	r9,-1
    25a0:	d8012e15 	stw	zero,1208(sp)
    25a4:	0023883a 	mov	r17,zero
    25a8:	01001604 	movi	r4,88
    25ac:	01400244 	movi	r5,9
    25b0:	02800a84 	movi	r10,42
    25b4:	01c01b04 	movi	r7,108
    25b8:	10c00044 	addi	r3,r2,1
    25bc:	80bff804 	addi	r2,r16,-32
    25c0:	2082f236 	bltu	r4,r2,318c <___vfprintf_internal_r+0xd70>
    25c4:	100490ba 	slli	r2,r2,2
    25c8:	02c00034 	movhi	r11,0
    25cc:	5ac97704 	addi	r11,r11,9692
    25d0:	12c5883a 	add	r2,r2,r11
    25d4:	10800017 	ldw	r2,0(r2)
    25d8:	1000683a 	jmp	r2
    25dc:	00002fd4 	movui	zero,191
    25e0:	0000318c 	andi	zero,zero,198
    25e4:	0000318c 	andi	zero,zero,198
    25e8:	00002ff4 	movhi	zero,191
    25ec:	0000318c 	andi	zero,zero,198
    25f0:	0000318c 	andi	zero,zero,198
    25f4:	0000318c 	andi	zero,zero,198
    25f8:	0000318c 	andi	zero,zero,198
    25fc:	0000318c 	andi	zero,zero,198
    2600:	0000318c 	andi	zero,zero,198
    2604:	00003150 	cmplti	zero,zero,197
    2608:	0000317c 	xorhi	zero,zero,197
    260c:	0000318c 	andi	zero,zero,198
    2610:	000028a0 	cmpeqi	zero,zero,162
    2614:	000028b0 	cmpltui	zero,zero,162
    2618:	0000318c 	andi	zero,zero,198
    261c:	000028f0 	cmpltui	zero,zero,163
    2620:	00002de4 	muli	zero,zero,183
    2624:	00002de4 	muli	zero,zero,183
    2628:	00002de4 	muli	zero,zero,183
    262c:	00002de4 	muli	zero,zero,183
    2630:	00002de4 	muli	zero,zero,183
    2634:	00002de4 	muli	zero,zero,183
    2638:	00002de4 	muli	zero,zero,183
    263c:	00002de4 	muli	zero,zero,183
    2640:	00002de4 	muli	zero,zero,183
    2644:	0000318c 	andi	zero,zero,198
    2648:	0000318c 	andi	zero,zero,198
    264c:	0000318c 	andi	zero,zero,198
    2650:	0000318c 	andi	zero,zero,198
    2654:	0000318c 	andi	zero,zero,198
    2658:	0000318c 	andi	zero,zero,198
    265c:	0000318c 	andi	zero,zero,198
    2660:	0000318c 	andi	zero,zero,198
    2664:	0000318c 	andi	zero,zero,198
    2668:	0000318c 	andi	zero,zero,198
    266c:	00002e18 	cmpnei	zero,zero,184
    2670:	00002900 	call	290 <trdb_d5m_read+0x14>
    2674:	0000318c 	andi	zero,zero,198
    2678:	00002900 	call	290 <trdb_d5m_read+0x14>
    267c:	0000318c 	andi	zero,zero,198
    2680:	0000318c 	andi	zero,zero,198
    2684:	0000318c 	andi	zero,zero,198
    2688:	0000318c 	andi	zero,zero,198
    268c:	000029a4 	muli	zero,zero,166
    2690:	0000318c 	andi	zero,zero,198
    2694:	0000318c 	andi	zero,zero,198
    2698:	000029b4 	movhi	zero,166
    269c:	0000318c 	andi	zero,zero,198
    26a0:	0000318c 	andi	zero,zero,198
    26a4:	0000318c 	andi	zero,zero,198
    26a8:	0000318c 	andi	zero,zero,198
    26ac:	0000318c 	andi	zero,zero,198
    26b0:	00002db0 	cmpltui	zero,zero,182
    26b4:	0000318c 	andi	zero,zero,198
    26b8:	0000318c 	andi	zero,zero,198
    26bc:	00002e60 	cmpeqi	zero,zero,185
    26c0:	0000318c 	andi	zero,zero,198
    26c4:	0000318c 	andi	zero,zero,198
    26c8:	0000318c 	andi	zero,zero,198
    26cc:	0000318c 	andi	zero,zero,198
    26d0:	0000318c 	andi	zero,zero,198
    26d4:	0000318c 	andi	zero,zero,198
    26d8:	0000318c 	andi	zero,zero,198
    26dc:	0000318c 	andi	zero,zero,198
    26e0:	0000318c 	andi	zero,zero,198
    26e4:	0000318c 	andi	zero,zero,198
    26e8:	00003054 	movui	zero,193
    26ec:	00003004 	movi	zero,192
    26f0:	00002900 	call	290 <trdb_d5m_read+0x14>
    26f4:	00002900 	call	290 <trdb_d5m_read+0x14>
    26f8:	00002900 	call	290 <trdb_d5m_read+0x14>
    26fc:	00003044 	movi	zero,193
    2700:	00003004 	movi	zero,192
    2704:	0000318c 	andi	zero,zero,198
    2708:	0000318c 	andi	zero,zero,198
    270c:	00002f4c 	andi	zero,zero,189
    2710:	0000318c 	andi	zero,zero,198
    2714:	00002f60 	cmpeqi	zero,zero,189
    2718:	00002f94 	movui	zero,190
    271c:	00003094 	movui	zero,194
    2720:	00002ebc 	xorhi	zero,zero,186
    2724:	0000318c 	andi	zero,zero,198
    2728:	000030dc 	xori	zero,zero,195
    272c:	0000318c 	andi	zero,zero,198
    2730:	00002ecc 	andi	zero,zero,187
    2734:	0000318c 	andi	zero,zero,198
    2738:	0000318c 	andi	zero,zero,198
    273c:	00002f0c 	andi	zero,zero,188
    2740:	db012a17 	ldw	r12,1192(sp)
    2744:	8323c83a 	sub	r17,r16,r12
    2748:	003f7e06 	br	2544 <___vfprintf_internal_r+0x128>
    274c:	b009883a 	mov	r4,r22
    2750:	b80b883a 	mov	r5,r23
    2754:	00045ac0 	call	45ac <__swsetup_r>
    2758:	10002d1e 	bne	r2,zero,2810 <___vfprintf_internal_r+0x3f4>
    275c:	b8c0030b 	ldhu	r3,12(r23)
    2760:	01000284 	movi	r4,10
    2764:	1805883a 	mov	r2,r3
    2768:	1080068c 	andi	r2,r2,26
    276c:	113f551e 	bne	r2,r4,24c4 <___vfprintf_internal_r+0xa8>
    2770:	b880038b 	ldhu	r2,14(r23)
    2774:	113fffcc 	andi	r4,r2,65535
    2778:	2120001c 	xori	r4,r4,32768
    277c:	21200004 	addi	r4,r4,-32768
    2780:	203f5016 	blt	r4,zero,24c4 <___vfprintf_internal_r+0xa8>
    2784:	bac01917 	ldw	r11,100(r23)
    2788:	ba800717 	ldw	r10,28(r23)
    278c:	ba400917 	ldw	r9,36(r23)
    2790:	d9812a17 	ldw	r6,1192(sp)
    2794:	d9c12d17 	ldw	r7,1204(sp)
    2798:	02010004 	movi	r8,1024
    279c:	18ffff4c 	andi	r3,r3,65533
    27a0:	d881078d 	sth	r2,1054(sp)
    27a4:	b009883a 	mov	r4,r22
    27a8:	d8800404 	addi	r2,sp,16
    27ac:	d9410404 	addi	r5,sp,1040
    27b0:	d8c1070d 	sth	r3,1052(sp)
    27b4:	dac11d15 	stw	r11,1140(sp)
    27b8:	da810b15 	stw	r10,1068(sp)
    27bc:	da410d15 	stw	r9,1076(sp)
    27c0:	d8810415 	stw	r2,1040(sp)
    27c4:	d8810815 	stw	r2,1056(sp)
    27c8:	da010615 	stw	r8,1048(sp)
    27cc:	da010915 	stw	r8,1060(sp)
    27d0:	d8010a15 	stw	zero,1064(sp)
    27d4:	000241c0 	call	241c <___vfprintf_internal_r>
    27d8:	1021883a 	mov	r16,r2
    27dc:	10000416 	blt	r2,zero,27f0 <___vfprintf_internal_r+0x3d4>
    27e0:	b009883a 	mov	r4,r22
    27e4:	d9410404 	addi	r5,sp,1040
    27e8:	00060040 	call	6004 <_fflush_r>
    27ec:	1006ee1e 	bne	r2,zero,43a8 <___vfprintf_internal_r+0x1f8c>
    27f0:	d881070b 	ldhu	r2,1052(sp)
    27f4:	1080100c 	andi	r2,r2,64
    27f8:	10000326 	beq	r2,zero,2808 <___vfprintf_internal_r+0x3ec>
    27fc:	b880030b 	ldhu	r2,12(r23)
    2800:	10801014 	ori	r2,r2,64
    2804:	b880030d 	sth	r2,12(r23)
    2808:	8005883a 	mov	r2,r16
    280c:	00000106 	br	2814 <___vfprintf_internal_r+0x3f8>
    2810:	00bfffc4 	movi	r2,-1
    2814:	dfc14917 	ldw	ra,1316(sp)
    2818:	df014817 	ldw	fp,1312(sp)
    281c:	ddc14717 	ldw	r23,1308(sp)
    2820:	dd814617 	ldw	r22,1304(sp)
    2824:	dd414517 	ldw	r21,1300(sp)
    2828:	dd014417 	ldw	r20,1296(sp)
    282c:	dcc14317 	ldw	r19,1292(sp)
    2830:	dc814217 	ldw	r18,1288(sp)
    2834:	dc414117 	ldw	r17,1284(sp)
    2838:	dc014017 	ldw	r16,1280(sp)
    283c:	dec14a04 	addi	sp,sp,1320
    2840:	f800283a 	ret
    2844:	b009883a 	mov	r4,r22
    2848:	b80b883a 	mov	r5,r23
    284c:	d9811e04 	addi	r6,sp,1144
    2850:	0008a380 	call	8a38 <__sprint_r>
    2854:	1000081e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    2858:	da000404 	addi	r8,sp,16
    285c:	003f4606 	br	2578 <___vfprintf_internal_r+0x15c>
    2860:	d8812017 	ldw	r2,1152(sp)
    2864:	10000426 	beq	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    2868:	b009883a 	mov	r4,r22
    286c:	b80b883a 	mov	r5,r23
    2870:	d9811e04 	addi	r6,sp,1144
    2874:	0008a380 	call	8a38 <__sprint_r>
    2878:	b880030b 	ldhu	r2,12(r23)
    287c:	1080100c 	andi	r2,r2,64
    2880:	103fe31e 	bne	r2,zero,2810 <___vfprintf_internal_r+0x3f4>
    2884:	d8812f17 	ldw	r2,1212(sp)
    2888:	003fe206 	br	2814 <___vfprintf_internal_r+0x3f8>
    288c:	b009883a 	mov	r4,r22
    2890:	00065ac0 	call	65ac <__sinit>
    2894:	003ef906 	br	247c <___vfprintf_internal_r+0x60>
    2898:	dc012a17 	ldw	r16,1192(sp)
    289c:	003f3906 	br	2584 <___vfprintf_internal_r+0x168>
    28a0:	1805883a 	mov	r2,r3
    28a4:	8c400114 	ori	r17,r17,4
    28a8:	1c000007 	ldb	r16,0(r3)
    28ac:	003f4206 	br	25b8 <___vfprintf_internal_r+0x19c>
    28b0:	1c000007 	ldb	r16,0(r3)
    28b4:	18800044 	addi	r2,r3,1
    28b8:	8286b326 	beq	r16,r10,4388 <___vfprintf_internal_r+0x1f6c>
    28bc:	82fff404 	addi	r11,r16,-48
    28c0:	1007883a 	mov	r3,r2
    28c4:	0013883a 	mov	r9,zero
    28c8:	2aff3c36 	bltu	r5,r11,25bc <___vfprintf_internal_r+0x1a0>
    28cc:	1c000007 	ldb	r16,0(r3)
    28d0:	4a4002a4 	muli	r9,r9,10
    28d4:	18c00044 	addi	r3,r3,1
    28d8:	5a53883a 	add	r9,r11,r9
    28dc:	82fff404 	addi	r11,r16,-48
    28e0:	2afffa2e 	bgeu	r5,r11,28cc <___vfprintf_internal_r+0x4b0>
    28e4:	483f350e 	bge	r9,zero,25bc <___vfprintf_internal_r+0x1a0>
    28e8:	027fffc4 	movi	r9,-1
    28ec:	003f3306 	br	25bc <___vfprintf_internal_r+0x1a0>
    28f0:	8c402014 	ori	r17,r17,128
    28f4:	1805883a 	mov	r2,r3
    28f8:	1c000007 	ldb	r16,0(r3)
    28fc:	003f2e06 	br	25b8 <___vfprintf_internal_r+0x19c>
    2900:	db012d17 	ldw	r12,1204(sp)
    2904:	dac12d17 	ldw	r11,1204(sp)
    2908:	d8c12a15 	stw	r3,1192(sp)
    290c:	63000017 	ldw	r12,0(r12)
    2910:	5ac00117 	ldw	r11,4(r11)
    2914:	d9812785 	stb	r6,1182(sp)
    2918:	6009883a 	mov	r4,r12
    291c:	580b883a 	mov	r5,r11
    2920:	db013715 	stw	r12,1244(sp)
    2924:	da013f15 	stw	r8,1276(sp)
    2928:	da413e15 	stw	r9,1272(sp)
    292c:	dac13915 	stw	r11,1252(sp)
    2930:	00086e80 	call	86e8 <__fpclassifyd>
    2934:	db012d17 	ldw	r12,1204(sp)
    2938:	04800044 	movi	r18,1
    293c:	da013f17 	ldw	r8,1276(sp)
    2940:	64c00204 	addi	r19,r12,8
    2944:	da413e17 	ldw	r9,1272(sp)
    2948:	d9013717 	ldw	r4,1244(sp)
    294c:	d9413917 	ldw	r5,1252(sp)
    2950:	1484581e 	bne	r2,r18,3ab4 <___vfprintf_internal_r+0x1698>
    2954:	000d883a 	mov	r6,zero
    2958:	000f883a 	mov	r7,zero
    295c:	000c3b40 	call	c3b4 <__ledf2>
    2960:	da013f17 	ldw	r8,1276(sp)
    2964:	1005ef16 	blt	r2,zero,4124 <___vfprintf_internal_r+0x1d08>
    2968:	dd412783 	ldbu	r21,1182(sp)
    296c:	008011c4 	movi	r2,71
    2970:	14053b0e 	bge	r2,r16,3e60 <___vfprintf_internal_r+0x1a44>
    2974:	00c00074 	movhi	r3,1
    2978:	18ffec04 	addi	r3,r3,-80
    297c:	d8c13115 	stw	r3,1220(sp)
    2980:	02c000c4 	movi	r11,3
    2984:	00bfdfc4 	movi	r2,-129
    2988:	dac12b15 	stw	r11,1196(sp)
    298c:	88a2703a 	and	r17,r17,r2
    2990:	dcc12d15 	stw	r19,1204(sp)
    2994:	5825883a 	mov	r18,r11
    2998:	d8013215 	stw	zero,1224(sp)
    299c:	d8013415 	stw	zero,1232(sp)
    29a0:	00003206 	br	2a6c <___vfprintf_internal_r+0x650>
    29a4:	8c400214 	ori	r17,r17,8
    29a8:	1805883a 	mov	r2,r3
    29ac:	1c000007 	ldb	r16,0(r3)
    29b0:	003f0106 	br	25b8 <___vfprintf_internal_r+0x19c>
    29b4:	8c400414 	ori	r17,r17,16
    29b8:	d8c12a15 	stw	r3,1192(sp)
    29bc:	88c0080c 	andi	r3,r17,32
    29c0:	d8812d17 	ldw	r2,1204(sp)
    29c4:	18017726 	beq	r3,zero,2fa4 <___vfprintf_internal_r+0xb88>
    29c8:	db012d17 	ldw	r12,1204(sp)
    29cc:	14c00017 	ldw	r19,0(r2)
    29d0:	17000117 	ldw	fp,4(r2)
    29d4:	63000204 	addi	r12,r12,8
    29d8:	db012d15 	stw	r12,1204(sp)
    29dc:	0005883a 	mov	r2,zero
    29e0:	9f06b03a 	or	r3,r19,fp
    29e4:	d8012785 	stb	zero,1182(sp)
    29e8:	da413215 	stw	r9,1224(sp)
    29ec:	002b883a 	mov	r21,zero
    29f0:	48000216 	blt	r9,zero,29fc <___vfprintf_internal_r+0x5e0>
    29f4:	013fdfc4 	movi	r4,-129
    29f8:	8922703a 	and	r17,r17,r4
    29fc:	1801ed1e 	bne	r3,zero,31b4 <___vfprintf_internal_r+0xd98>
    2a00:	4802e026 	beq	r9,zero,3584 <___vfprintf_internal_r+0x1168>
    2a04:	10803fcc 	andi	r2,r2,255
    2a08:	00c00044 	movi	r3,1
    2a0c:	10c20f26 	beq	r2,r3,324c <___vfprintf_internal_r+0xe30>
    2a10:	00c00084 	movi	r3,2
    2a14:	10c2fd26 	beq	r2,r3,360c <___vfprintf_internal_r+0x11f0>
    2a18:	d8c10e04 	addi	r3,sp,1080
    2a1c:	9808d0fa 	srli	r4,r19,3
    2a20:	e00a977a 	slli	r5,fp,29
    2a24:	e038d0fa 	srli	fp,fp,3
    2a28:	9cc001cc 	andi	r19,r19,7
    2a2c:	98800c04 	addi	r2,r19,48
    2a30:	18ffffc4 	addi	r3,r3,-1
    2a34:	2926b03a 	or	r19,r5,r4
    2a38:	18800005 	stb	r2,0(r3)
    2a3c:	9f08b03a 	or	r4,r19,fp
    2a40:	203ff61e 	bne	r4,zero,2a1c <___vfprintf_internal_r+0x600>
    2a44:	8900004c 	andi	r4,r17,1
    2a48:	d8c13115 	stw	r3,1220(sp)
    2a4c:	2003791e 	bne	r4,zero,3834 <___vfprintf_internal_r+0x1418>
    2a50:	dac12817 	ldw	r11,1184(sp)
    2a54:	58e5c83a 	sub	r18,r11,r3
    2a58:	9005883a 	mov	r2,r18
    2a5c:	9240010e 	bge	r18,r9,2a64 <___vfprintf_internal_r+0x648>
    2a60:	4805883a 	mov	r2,r9
    2a64:	d8812b15 	stw	r2,1196(sp)
    2a68:	d8013415 	stw	zero,1232(sp)
    2a6c:	a8803fcc 	andi	r2,r21,255
    2a70:	1080201c 	xori	r2,r2,128
    2a74:	10bfe004 	addi	r2,r2,-128
    2a78:	10000326 	beq	r2,zero,2a88 <___vfprintf_internal_r+0x66c>
    2a7c:	db012b17 	ldw	r12,1196(sp)
    2a80:	63000044 	addi	r12,r12,1
    2a84:	db012b15 	stw	r12,1196(sp)
    2a88:	88c0008c 	andi	r3,r17,2
    2a8c:	d8c12c15 	stw	r3,1200(sp)
    2a90:	18000326 	beq	r3,zero,2aa0 <___vfprintf_internal_r+0x684>
    2a94:	dac12b17 	ldw	r11,1196(sp)
    2a98:	5ac00084 	addi	r11,r11,2
    2a9c:	dac12b15 	stw	r11,1196(sp)
    2aa0:	8b00210c 	andi	r12,r17,132
    2aa4:	db013015 	stw	r12,1216(sp)
    2aa8:	6001c01e 	bne	r12,zero,31ac <___vfprintf_internal_r+0xd90>
    2aac:	dac12e17 	ldw	r11,1208(sp)
    2ab0:	db012b17 	ldw	r12,1196(sp)
    2ab4:	5b39c83a 	sub	fp,r11,r12
    2ab8:	0701bc0e 	bge	zero,fp,31ac <___vfprintf_internal_r+0xd90>
    2abc:	02400404 	movi	r9,16
    2ac0:	d8c12017 	ldw	r3,1152(sp)
    2ac4:	d8811f17 	ldw	r2,1148(sp)
    2ac8:	4f05220e 	bge	r9,fp,3f54 <___vfprintf_internal_r+0x1b38>
    2acc:	01400074 	movhi	r5,1
    2ad0:	297fff84 	addi	r5,r5,-2
    2ad4:	d9413615 	stw	r5,1240(sp)
    2ad8:	482b883a 	mov	r21,r9
    2adc:	04c001c4 	movi	r19,7
    2ae0:	00000306 	br	2af0 <___vfprintf_internal_r+0x6d4>
    2ae4:	e73ffc04 	addi	fp,fp,-16
    2ae8:	42000204 	addi	r8,r8,8
    2aec:	af00130e 	bge	r21,fp,2b3c <___vfprintf_internal_r+0x720>
    2af0:	02c00074 	movhi	r11,1
    2af4:	18c00404 	addi	r3,r3,16
    2af8:	10800044 	addi	r2,r2,1
    2afc:	5affff84 	addi	r11,r11,-2
    2b00:	42c00015 	stw	r11,0(r8)
    2b04:	45400115 	stw	r21,4(r8)
    2b08:	d8c12015 	stw	r3,1152(sp)
    2b0c:	d8811f15 	stw	r2,1148(sp)
    2b10:	98bff40e 	bge	r19,r2,2ae4 <___vfprintf_internal_r+0x6c8>
    2b14:	b009883a 	mov	r4,r22
    2b18:	b80b883a 	mov	r5,r23
    2b1c:	d9811e04 	addi	r6,sp,1144
    2b20:	0008a380 	call	8a38 <__sprint_r>
    2b24:	103f541e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    2b28:	e73ffc04 	addi	fp,fp,-16
    2b2c:	d8c12017 	ldw	r3,1152(sp)
    2b30:	d8811f17 	ldw	r2,1148(sp)
    2b34:	da000404 	addi	r8,sp,16
    2b38:	af3fed16 	blt	r21,fp,2af0 <___vfprintf_internal_r+0x6d4>
    2b3c:	db013617 	ldw	r12,1240(sp)
    2b40:	e0c7883a 	add	r3,fp,r3
    2b44:	10800044 	addi	r2,r2,1
    2b48:	43000015 	stw	r12,0(r8)
    2b4c:	47000115 	stw	fp,4(r8)
    2b50:	d8c12015 	stw	r3,1152(sp)
    2b54:	d8811f15 	stw	r2,1148(sp)
    2b58:	010001c4 	movi	r4,7
    2b5c:	2082f416 	blt	r4,r2,3730 <___vfprintf_internal_r+0x1314>
    2b60:	d8812787 	ldb	r2,1182(sp)
    2b64:	42000204 	addi	r8,r8,8
    2b68:	10000c26 	beq	r2,zero,2b9c <___vfprintf_internal_r+0x780>
    2b6c:	d8811f17 	ldw	r2,1148(sp)
    2b70:	d9012784 	addi	r4,sp,1182
    2b74:	18c00044 	addi	r3,r3,1
    2b78:	10800044 	addi	r2,r2,1
    2b7c:	41000015 	stw	r4,0(r8)
    2b80:	01000044 	movi	r4,1
    2b84:	41000115 	stw	r4,4(r8)
    2b88:	d8c12015 	stw	r3,1152(sp)
    2b8c:	d8811f15 	stw	r2,1148(sp)
    2b90:	010001c4 	movi	r4,7
    2b94:	20828d16 	blt	r4,r2,35cc <___vfprintf_internal_r+0x11b0>
    2b98:	42000204 	addi	r8,r8,8
    2b9c:	dac12c17 	ldw	r11,1200(sp)
    2ba0:	58000c26 	beq	r11,zero,2bd4 <___vfprintf_internal_r+0x7b8>
    2ba4:	d8811f17 	ldw	r2,1148(sp)
    2ba8:	d9012704 	addi	r4,sp,1180
    2bac:	18c00084 	addi	r3,r3,2
    2bb0:	10800044 	addi	r2,r2,1
    2bb4:	41000015 	stw	r4,0(r8)
    2bb8:	01000084 	movi	r4,2
    2bbc:	41000115 	stw	r4,4(r8)
    2bc0:	d8c12015 	stw	r3,1152(sp)
    2bc4:	d8811f15 	stw	r2,1148(sp)
    2bc8:	010001c4 	movi	r4,7
    2bcc:	20828716 	blt	r4,r2,35ec <___vfprintf_internal_r+0x11d0>
    2bd0:	42000204 	addi	r8,r8,8
    2bd4:	db013017 	ldw	r12,1216(sp)
    2bd8:	00802004 	movi	r2,128
    2bdc:	6081e926 	beq	r12,r2,3384 <___vfprintf_internal_r+0xf68>
    2be0:	db013217 	ldw	r12,1224(sp)
    2be4:	64abc83a 	sub	r21,r12,r18
    2be8:	0540260e 	bge	zero,r21,2c84 <___vfprintf_internal_r+0x868>
    2bec:	07000404 	movi	fp,16
    2bf0:	d8811f17 	ldw	r2,1148(sp)
    2bf4:	e5443d0e 	bge	fp,r21,3cec <___vfprintf_internal_r+0x18d0>
    2bf8:	01400074 	movhi	r5,1
    2bfc:	297ffb84 	addi	r5,r5,-18
    2c00:	d9412c15 	stw	r5,1200(sp)
    2c04:	04c001c4 	movi	r19,7
    2c08:	00000306 	br	2c18 <___vfprintf_internal_r+0x7fc>
    2c0c:	ad7ffc04 	addi	r21,r21,-16
    2c10:	42000204 	addi	r8,r8,8
    2c14:	e540110e 	bge	fp,r21,2c5c <___vfprintf_internal_r+0x840>
    2c18:	18c00404 	addi	r3,r3,16
    2c1c:	10800044 	addi	r2,r2,1
    2c20:	45000015 	stw	r20,0(r8)
    2c24:	47000115 	stw	fp,4(r8)
    2c28:	d8c12015 	stw	r3,1152(sp)
    2c2c:	d8811f15 	stw	r2,1148(sp)
    2c30:	98bff60e 	bge	r19,r2,2c0c <___vfprintf_internal_r+0x7f0>
    2c34:	b009883a 	mov	r4,r22
    2c38:	b80b883a 	mov	r5,r23
    2c3c:	d9811e04 	addi	r6,sp,1144
    2c40:	0008a380 	call	8a38 <__sprint_r>
    2c44:	103f0c1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    2c48:	ad7ffc04 	addi	r21,r21,-16
    2c4c:	d8c12017 	ldw	r3,1152(sp)
    2c50:	d8811f17 	ldw	r2,1148(sp)
    2c54:	da000404 	addi	r8,sp,16
    2c58:	e57fef16 	blt	fp,r21,2c18 <___vfprintf_internal_r+0x7fc>
    2c5c:	dac12c17 	ldw	r11,1200(sp)
    2c60:	1d47883a 	add	r3,r3,r21
    2c64:	10800044 	addi	r2,r2,1
    2c68:	42c00015 	stw	r11,0(r8)
    2c6c:	45400115 	stw	r21,4(r8)
    2c70:	d8c12015 	stw	r3,1152(sp)
    2c74:	d8811f15 	stw	r2,1148(sp)
    2c78:	010001c4 	movi	r4,7
    2c7c:	20824b16 	blt	r4,r2,35ac <___vfprintf_internal_r+0x1190>
    2c80:	42000204 	addi	r8,r8,8
    2c84:	8880400c 	andi	r2,r17,256
    2c88:	1001761e 	bne	r2,zero,3264 <___vfprintf_internal_r+0xe48>
    2c8c:	d8811f17 	ldw	r2,1148(sp)
    2c90:	db013117 	ldw	r12,1220(sp)
    2c94:	1c87883a 	add	r3,r3,r18
    2c98:	10800044 	addi	r2,r2,1
    2c9c:	43000015 	stw	r12,0(r8)
    2ca0:	44800115 	stw	r18,4(r8)
    2ca4:	d8c12015 	stw	r3,1152(sp)
    2ca8:	d8811f15 	stw	r2,1148(sp)
    2cac:	010001c4 	movi	r4,7
    2cb0:	20822616 	blt	r4,r2,354c <___vfprintf_internal_r+0x1130>
    2cb4:	42000204 	addi	r8,r8,8
    2cb8:	8c40010c 	andi	r17,r17,4
    2cbc:	88003126 	beq	r17,zero,2d84 <___vfprintf_internal_r+0x968>
    2cc0:	db012e17 	ldw	r12,1208(sp)
    2cc4:	dac12b17 	ldw	r11,1196(sp)
    2cc8:	62e1c83a 	sub	r16,r12,r11
    2ccc:	04002d0e 	bge	zero,r16,2d84 <___vfprintf_internal_r+0x968>
    2cd0:	04400404 	movi	r17,16
    2cd4:	d8811f17 	ldw	r2,1148(sp)
    2cd8:	8c04df0e 	bge	r17,r16,4058 <___vfprintf_internal_r+0x1c3c>
    2cdc:	01000074 	movhi	r4,1
    2ce0:	213fff84 	addi	r4,r4,-2
    2ce4:	d9013615 	stw	r4,1240(sp)
    2ce8:	048001c4 	movi	r18,7
    2cec:	00000306 	br	2cfc <___vfprintf_internal_r+0x8e0>
    2cf0:	843ffc04 	addi	r16,r16,-16
    2cf4:	42000204 	addi	r8,r8,8
    2cf8:	8c00130e 	bge	r17,r16,2d48 <___vfprintf_internal_r+0x92c>
    2cfc:	01400074 	movhi	r5,1
    2d00:	18c00404 	addi	r3,r3,16
    2d04:	10800044 	addi	r2,r2,1
    2d08:	297fff84 	addi	r5,r5,-2
    2d0c:	41400015 	stw	r5,0(r8)
    2d10:	44400115 	stw	r17,4(r8)
    2d14:	d8c12015 	stw	r3,1152(sp)
    2d18:	d8811f15 	stw	r2,1148(sp)
    2d1c:	90bff40e 	bge	r18,r2,2cf0 <___vfprintf_internal_r+0x8d4>
    2d20:	b009883a 	mov	r4,r22
    2d24:	b80b883a 	mov	r5,r23
    2d28:	d9811e04 	addi	r6,sp,1144
    2d2c:	0008a380 	call	8a38 <__sprint_r>
    2d30:	103ed11e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    2d34:	843ffc04 	addi	r16,r16,-16
    2d38:	d8c12017 	ldw	r3,1152(sp)
    2d3c:	d8811f17 	ldw	r2,1148(sp)
    2d40:	da000404 	addi	r8,sp,16
    2d44:	8c3fed16 	blt	r17,r16,2cfc <___vfprintf_internal_r+0x8e0>
    2d48:	dac13617 	ldw	r11,1240(sp)
    2d4c:	1c07883a 	add	r3,r3,r16
    2d50:	10800044 	addi	r2,r2,1
    2d54:	42c00015 	stw	r11,0(r8)
    2d58:	44000115 	stw	r16,4(r8)
    2d5c:	d8c12015 	stw	r3,1152(sp)
    2d60:	d8811f15 	stw	r2,1148(sp)
    2d64:	010001c4 	movi	r4,7
    2d68:	2080060e 	bge	r4,r2,2d84 <___vfprintf_internal_r+0x968>
    2d6c:	b009883a 	mov	r4,r22
    2d70:	b80b883a 	mov	r5,r23
    2d74:	d9811e04 	addi	r6,sp,1144
    2d78:	0008a380 	call	8a38 <__sprint_r>
    2d7c:	103ebe1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    2d80:	d8c12017 	ldw	r3,1152(sp)
    2d84:	d8812b17 	ldw	r2,1196(sp)
    2d88:	db012e17 	ldw	r12,1208(sp)
    2d8c:	1300010e 	bge	r2,r12,2d94 <___vfprintf_internal_r+0x978>
    2d90:	6005883a 	mov	r2,r12
    2d94:	dac12f17 	ldw	r11,1212(sp)
    2d98:	5897883a 	add	r11,r11,r2
    2d9c:	dac12f15 	stw	r11,1212(sp)
    2da0:	1801f21e 	bne	r3,zero,356c <___vfprintf_internal_r+0x1150>
    2da4:	d8011f15 	stw	zero,1148(sp)
    2da8:	da000404 	addi	r8,sp,16
    2dac:	003dd806 	br	2510 <___vfprintf_internal_r+0xf4>
    2db0:	8c400414 	ori	r17,r17,16
    2db4:	d8c12a15 	stw	r3,1192(sp)
    2db8:	88c0080c 	andi	r3,r17,32
    2dbc:	d8812d17 	ldw	r2,1204(sp)
    2dc0:	18004626 	beq	r3,zero,2edc <___vfprintf_internal_r+0xac0>
    2dc4:	dac12d17 	ldw	r11,1204(sp)
    2dc8:	14c00017 	ldw	r19,0(r2)
    2dcc:	17000117 	ldw	fp,4(r2)
    2dd0:	5ac00204 	addi	r11,r11,8
    2dd4:	dac12d15 	stw	r11,1204(sp)
    2dd8:	00800044 	movi	r2,1
    2ddc:	9f06b03a 	or	r3,r19,fp
    2de0:	003f0006 	br	29e4 <___vfprintf_internal_r+0x5c8>
    2de4:	1805883a 	mov	r2,r3
    2de8:	d8012e15 	stw	zero,1208(sp)
    2dec:	82fff404 	addi	r11,r16,-48
    2df0:	0019883a 	mov	r12,zero
    2df4:	14000007 	ldb	r16,0(r2)
    2df8:	630002a4 	muli	r12,r12,10
    2dfc:	18c00044 	addi	r3,r3,1
    2e00:	1805883a 	mov	r2,r3
    2e04:	62d9883a 	add	r12,r12,r11
    2e08:	82fff404 	addi	r11,r16,-48
    2e0c:	2afff92e 	bgeu	r5,r11,2df4 <___vfprintf_internal_r+0x9d8>
    2e10:	db012e15 	stw	r12,1208(sp)
    2e14:	003de906 	br	25bc <___vfprintf_internal_r+0x1a0>
    2e18:	8c400414 	ori	r17,r17,16
    2e1c:	d8c12a15 	stw	r3,1192(sp)
    2e20:	d9812785 	stb	r6,1182(sp)
    2e24:	8880080c 	andi	r2,r17,32
    2e28:	d8c12d17 	ldw	r3,1204(sp)
    2e2c:	10007a26 	beq	r2,zero,3018 <___vfprintf_internal_r+0xbfc>
    2e30:	db012d17 	ldw	r12,1204(sp)
    2e34:	18800117 	ldw	r2,4(r3)
    2e38:	1cc00017 	ldw	r19,0(r3)
    2e3c:	63000204 	addi	r12,r12,8
    2e40:	db012d15 	stw	r12,1204(sp)
    2e44:	1039883a 	mov	fp,r2
    2e48:	10031016 	blt	r2,zero,3a8c <___vfprintf_internal_r+0x1670>
    2e4c:	dd412783 	ldbu	r21,1182(sp)
    2e50:	da413215 	stw	r9,1224(sp)
    2e54:	00800044 	movi	r2,1
    2e58:	9f06b03a 	or	r3,r19,fp
    2e5c:	003ee406 	br	29f0 <___vfprintf_internal_r+0x5d4>
    2e60:	03000074 	movhi	r12,1
    2e64:	633fef04 	addi	r12,r12,-68
    2e68:	d8c12a15 	stw	r3,1192(sp)
    2e6c:	d9812785 	stb	r6,1182(sp)
    2e70:	db013b15 	stw	r12,1260(sp)
    2e74:	88c0080c 	andi	r3,r17,32
    2e78:	d8812d17 	ldw	r2,1204(sp)
    2e7c:	18002b26 	beq	r3,zero,2f2c <___vfprintf_internal_r+0xb10>
    2e80:	dac12d17 	ldw	r11,1204(sp)
    2e84:	14c00017 	ldw	r19,0(r2)
    2e88:	17000117 	ldw	fp,4(r2)
    2e8c:	5ac00204 	addi	r11,r11,8
    2e90:	dac12d15 	stw	r11,1204(sp)
    2e94:	8880004c 	andi	r2,r17,1
    2e98:	10025b26 	beq	r2,zero,3808 <___vfprintf_internal_r+0x13ec>
    2e9c:	9f06b03a 	or	r3,r19,fp
    2ea0:	18037026 	beq	r3,zero,3c64 <___vfprintf_internal_r+0x1848>
    2ea4:	00800c04 	movi	r2,48
    2ea8:	d8812705 	stb	r2,1180(sp)
    2eac:	dc012745 	stb	r16,1181(sp)
    2eb0:	8c400094 	ori	r17,r17,2
    2eb4:	00800084 	movi	r2,2
    2eb8:	003eca06 	br	29e4 <___vfprintf_internal_r+0x5c8>
    2ebc:	8c400814 	ori	r17,r17,32
    2ec0:	1805883a 	mov	r2,r3
    2ec4:	1c000007 	ldb	r16,0(r3)
    2ec8:	003dbb06 	br	25b8 <___vfprintf_internal_r+0x19c>
    2ecc:	d8c12a15 	stw	r3,1192(sp)
    2ed0:	88c0080c 	andi	r3,r17,32
    2ed4:	d8812d17 	ldw	r2,1204(sp)
    2ed8:	183fba1e 	bne	r3,zero,2dc4 <___vfprintf_internal_r+0x9a8>
    2edc:	88c0040c 	andi	r3,r17,16
    2ee0:	18024c1e 	bne	r3,zero,3814 <___vfprintf_internal_r+0x13f8>
    2ee4:	88c0100c 	andi	r3,r17,64
    2ee8:	18024a26 	beq	r3,zero,3814 <___vfprintf_internal_r+0x13f8>
    2eec:	dac12d17 	ldw	r11,1204(sp)
    2ef0:	14c0000b 	ldhu	r19,0(r2)
    2ef4:	0039883a 	mov	fp,zero
    2ef8:	5ac00104 	addi	r11,r11,4
    2efc:	dac12d15 	stw	r11,1204(sp)
    2f00:	00800044 	movi	r2,1
    2f04:	9807883a 	mov	r3,r19
    2f08:	003eb606 	br	29e4 <___vfprintf_internal_r+0x5c8>
    2f0c:	00800074 	movhi	r2,1
    2f10:	10bff404 	addi	r2,r2,-48
    2f14:	d8c12a15 	stw	r3,1192(sp)
    2f18:	d8813b15 	stw	r2,1260(sp)
    2f1c:	d9812785 	stb	r6,1182(sp)
    2f20:	88c0080c 	andi	r3,r17,32
    2f24:	d8812d17 	ldw	r2,1204(sp)
    2f28:	183fd51e 	bne	r3,zero,2e80 <___vfprintf_internal_r+0xa64>
    2f2c:	88c0040c 	andi	r3,r17,16
    2f30:	18034126 	beq	r3,zero,3c38 <___vfprintf_internal_r+0x181c>
    2f34:	db012d17 	ldw	r12,1204(sp)
    2f38:	14c00017 	ldw	r19,0(r2)
    2f3c:	0039883a 	mov	fp,zero
    2f40:	63000104 	addi	r12,r12,4
    2f44:	db012d15 	stw	r12,1204(sp)
    2f48:	003fd206 	br	2e94 <___vfprintf_internal_r+0xa78>
    2f4c:	1c000007 	ldb	r16,0(r3)
    2f50:	81c3d626 	beq	r16,r7,3eac <___vfprintf_internal_r+0x1a90>
    2f54:	8c400414 	ori	r17,r17,16
    2f58:	1805883a 	mov	r2,r3
    2f5c:	003d9606 	br	25b8 <___vfprintf_internal_r+0x19c>
    2f60:	d8c12a15 	stw	r3,1192(sp)
    2f64:	d9812785 	stb	r6,1182(sp)
    2f68:	8880080c 	andi	r2,r17,32
    2f6c:	10033f26 	beq	r2,zero,3c6c <___vfprintf_internal_r+0x1850>
    2f70:	db012d17 	ldw	r12,1204(sp)
    2f74:	dac12f17 	ldw	r11,1212(sp)
    2f78:	60800017 	ldw	r2,0(r12)
    2f7c:	5807d7fa 	srai	r3,r11,31
    2f80:	63000104 	addi	r12,r12,4
    2f84:	db012d15 	stw	r12,1204(sp)
    2f88:	12c00015 	stw	r11,0(r2)
    2f8c:	10c00115 	stw	r3,4(r2)
    2f90:	003d5f06 	br	2510 <___vfprintf_internal_r+0xf4>
    2f94:	d8c12a15 	stw	r3,1192(sp)
    2f98:	88c0080c 	andi	r3,r17,32
    2f9c:	d8812d17 	ldw	r2,1204(sp)
    2fa0:	183e891e 	bne	r3,zero,29c8 <___vfprintf_internal_r+0x5ac>
    2fa4:	88c0040c 	andi	r3,r17,16
    2fa8:	1801ea1e 	bne	r3,zero,3754 <___vfprintf_internal_r+0x1338>
    2fac:	88c0100c 	andi	r3,r17,64
    2fb0:	1801e826 	beq	r3,zero,3754 <___vfprintf_internal_r+0x1338>
    2fb4:	db012d17 	ldw	r12,1204(sp)
    2fb8:	14c0000b 	ldhu	r19,0(r2)
    2fbc:	0039883a 	mov	fp,zero
    2fc0:	63000104 	addi	r12,r12,4
    2fc4:	db012d15 	stw	r12,1204(sp)
    2fc8:	0005883a 	mov	r2,zero
    2fcc:	9807883a 	mov	r3,r19
    2fd0:	003e8406 	br	29e4 <___vfprintf_internal_r+0x5c8>
    2fd4:	30803fcc 	andi	r2,r6,255
    2fd8:	1080201c 	xori	r2,r2,128
    2fdc:	10bfe004 	addi	r2,r2,-128
    2fe0:	10031d1e 	bne	r2,zero,3c58 <___vfprintf_internal_r+0x183c>
    2fe4:	1805883a 	mov	r2,r3
    2fe8:	01800804 	movi	r6,32
    2fec:	1c000007 	ldb	r16,0(r3)
    2ff0:	003d7106 	br	25b8 <___vfprintf_internal_r+0x19c>
    2ff4:	8c400054 	ori	r17,r17,1
    2ff8:	1805883a 	mov	r2,r3
    2ffc:	1c000007 	ldb	r16,0(r3)
    3000:	003d6d06 	br	25b8 <___vfprintf_internal_r+0x19c>
    3004:	d8c12a15 	stw	r3,1192(sp)
    3008:	d9812785 	stb	r6,1182(sp)
    300c:	8880080c 	andi	r2,r17,32
    3010:	d8c12d17 	ldw	r3,1204(sp)
    3014:	103f861e 	bne	r2,zero,2e30 <___vfprintf_internal_r+0xa14>
    3018:	8880040c 	andi	r2,r17,16
    301c:	1001f31e 	bne	r2,zero,37ec <___vfprintf_internal_r+0x13d0>
    3020:	8880100c 	andi	r2,r17,64
    3024:	1001f126 	beq	r2,zero,37ec <___vfprintf_internal_r+0x13d0>
    3028:	1cc0000f 	ldh	r19,0(r3)
    302c:	db012d17 	ldw	r12,1204(sp)
    3030:	9839d7fa 	srai	fp,r19,31
    3034:	63000104 	addi	r12,r12,4
    3038:	db012d15 	stw	r12,1204(sp)
    303c:	e005883a 	mov	r2,fp
    3040:	003f8106 	br	2e48 <___vfprintf_internal_r+0xa2c>
    3044:	8c401014 	ori	r17,r17,64
    3048:	1805883a 	mov	r2,r3
    304c:	1c000007 	ldb	r16,0(r3)
    3050:	003d5906 	br	25b8 <___vfprintf_internal_r+0x19c>
    3054:	db012d17 	ldw	r12,1204(sp)
    3058:	d8c12a15 	stw	r3,1192(sp)
    305c:	00c00044 	movi	r3,1
    3060:	60800017 	ldw	r2,0(r12)
    3064:	63000104 	addi	r12,r12,4
    3068:	d8c12b15 	stw	r3,1196(sp)
    306c:	d8012785 	stb	zero,1182(sp)
    3070:	d8810405 	stb	r2,1040(sp)
    3074:	db012d15 	stw	r12,1204(sp)
    3078:	dac10404 	addi	r11,sp,1040
    307c:	1825883a 	mov	r18,r3
    3080:	d8013215 	stw	zero,1224(sp)
    3084:	d8013415 	stw	zero,1232(sp)
    3088:	dac13115 	stw	r11,1220(sp)
    308c:	0005883a 	mov	r2,zero
    3090:	003e7d06 	br	2a88 <___vfprintf_internal_r+0x66c>
    3094:	db012d17 	ldw	r12,1204(sp)
    3098:	00800c04 	movi	r2,48
    309c:	d8812705 	stb	r2,1180(sp)
    30a0:	64c00017 	ldw	r19,0(r12)
    30a4:	00801e04 	movi	r2,120
    30a8:	d8812745 	stb	r2,1181(sp)
    30ac:	00800074 	movhi	r2,1
    30b0:	10bff404 	addi	r2,r2,-48
    30b4:	63000104 	addi	r12,r12,4
    30b8:	d8c12a15 	stw	r3,1192(sp)
    30bc:	d8813b15 	stw	r2,1260(sp)
    30c0:	0039883a 	mov	fp,zero
    30c4:	8c400094 	ori	r17,r17,2
    30c8:	db012d15 	stw	r12,1204(sp)
    30cc:	00800084 	movi	r2,2
    30d0:	04001e04 	movi	r16,120
    30d4:	9807883a 	mov	r3,r19
    30d8:	003e4206 	br	29e4 <___vfprintf_internal_r+0x5c8>
    30dc:	dac12d17 	ldw	r11,1204(sp)
    30e0:	db012d17 	ldw	r12,1204(sp)
    30e4:	d8c12a15 	stw	r3,1192(sp)
    30e8:	5ac00017 	ldw	r11,0(r11)
    30ec:	d8012785 	stb	zero,1182(sp)
    30f0:	64c00104 	addi	r19,r12,4
    30f4:	dac13115 	stw	r11,1220(sp)
    30f8:	5803e826 	beq	r11,zero,409c <___vfprintf_internal_r+0x1c80>
    30fc:	d9013117 	ldw	r4,1220(sp)
    3100:	48037a16 	blt	r9,zero,3eec <___vfprintf_internal_r+0x1ad0>
    3104:	480d883a 	mov	r6,r9
    3108:	000b883a 	mov	r5,zero
    310c:	da013f15 	stw	r8,1276(sp)
    3110:	da413e15 	stw	r9,1272(sp)
    3114:	00072bc0 	call	72bc <memchr>
    3118:	da013f17 	ldw	r8,1276(sp)
    311c:	da413e17 	ldw	r9,1272(sp)
    3120:	10044426 	beq	r2,zero,4234 <___vfprintf_internal_r+0x1e18>
    3124:	d8c13117 	ldw	r3,1220(sp)
    3128:	10e5c83a 	sub	r18,r2,r3
    312c:	4c834416 	blt	r9,r18,3e40 <___vfprintf_internal_r+0x1a24>
    3130:	9005883a 	mov	r2,r18
    3134:	90037216 	blt	r18,zero,3f00 <___vfprintf_internal_r+0x1ae4>
    3138:	dd412783 	ldbu	r21,1182(sp)
    313c:	d8812b15 	stw	r2,1196(sp)
    3140:	dcc12d15 	stw	r19,1204(sp)
    3144:	d8013215 	stw	zero,1224(sp)
    3148:	d8013415 	stw	zero,1232(sp)
    314c:	003e4706 	br	2a6c <___vfprintf_internal_r+0x650>
    3150:	dac12d17 	ldw	r11,1204(sp)
    3154:	db012d17 	ldw	r12,1204(sp)
    3158:	5ac00017 	ldw	r11,0(r11)
    315c:	dac12e15 	stw	r11,1208(sp)
    3160:	62c00104 	addi	r11,r12,4
    3164:	db012e17 	ldw	r12,1208(sp)
    3168:	60034a16 	blt	r12,zero,3e94 <___vfprintf_internal_r+0x1a78>
    316c:	dac12d15 	stw	r11,1204(sp)
    3170:	1805883a 	mov	r2,r3
    3174:	1c000007 	ldb	r16,0(r3)
    3178:	003d0f06 	br	25b8 <___vfprintf_internal_r+0x19c>
    317c:	1805883a 	mov	r2,r3
    3180:	01800ac4 	movi	r6,43
    3184:	1c000007 	ldb	r16,0(r3)
    3188:	003d0b06 	br	25b8 <___vfprintf_internal_r+0x19c>
    318c:	d8c12a15 	stw	r3,1192(sp)
    3190:	d9812785 	stb	r6,1182(sp)
    3194:	803db226 	beq	r16,zero,2860 <___vfprintf_internal_r+0x444>
    3198:	00c00044 	movi	r3,1
    319c:	d8c12b15 	stw	r3,1196(sp)
    31a0:	dc010405 	stb	r16,1040(sp)
    31a4:	d8012785 	stb	zero,1182(sp)
    31a8:	003fb306 	br	3078 <___vfprintf_internal_r+0xc5c>
    31ac:	d8c12017 	ldw	r3,1152(sp)
    31b0:	003e6d06 	br	2b68 <___vfprintf_internal_r+0x74c>
    31b4:	10803fcc 	andi	r2,r2,255
    31b8:	00c00044 	movi	r3,1
    31bc:	10fe141e 	bne	r2,r3,2a10 <___vfprintf_internal_r+0x5f4>
    31c0:	e000021e 	bne	fp,zero,31cc <___vfprintf_internal_r+0xdb0>
    31c4:	00800244 	movi	r2,9
    31c8:	14c0202e 	bgeu	r2,r19,324c <___vfprintf_internal_r+0xe30>
    31cc:	dc012b15 	stw	r16,1196(sp)
    31d0:	dc412c15 	stw	r17,1200(sp)
    31d4:	9821883a 	mov	r16,r19
    31d8:	e023883a 	mov	r17,fp
    31dc:	dc810e04 	addi	r18,sp,1080
    31e0:	4027883a 	mov	r19,r8
    31e4:	4839883a 	mov	fp,r9
    31e8:	8009883a 	mov	r4,r16
    31ec:	880b883a 	mov	r5,r17
    31f0:	01800284 	movi	r6,10
    31f4:	000f883a 	mov	r7,zero
    31f8:	000ab580 	call	ab58 <__umoddi3>
    31fc:	10800c04 	addi	r2,r2,48
    3200:	94bfffc4 	addi	r18,r18,-1
    3204:	8009883a 	mov	r4,r16
    3208:	880b883a 	mov	r5,r17
    320c:	01800284 	movi	r6,10
    3210:	000f883a 	mov	r7,zero
    3214:	90800005 	stb	r2,0(r18)
    3218:	000a5980 	call	a598 <__udivdi3>
    321c:	1021883a 	mov	r16,r2
    3220:	10c4b03a 	or	r2,r2,r3
    3224:	1823883a 	mov	r17,r3
    3228:	103fef1e 	bne	r2,zero,31e8 <___vfprintf_internal_r+0xdcc>
    322c:	dac12817 	ldw	r11,1184(sp)
    3230:	dc813115 	stw	r18,1220(sp)
    3234:	dc012b17 	ldw	r16,1196(sp)
    3238:	9811883a 	mov	r8,r19
    323c:	dc412c17 	ldw	r17,1200(sp)
    3240:	e013883a 	mov	r9,fp
    3244:	5ca5c83a 	sub	r18,r11,r18
    3248:	003e0306 	br	2a58 <___vfprintf_internal_r+0x63c>
    324c:	9cc00c04 	addi	r19,r19,48
    3250:	d8c10dc4 	addi	r3,sp,1079
    3254:	dcc10dc5 	stb	r19,1079(sp)
    3258:	dc813c17 	ldw	r18,1264(sp)
    325c:	d8c13115 	stw	r3,1220(sp)
    3260:	003dfd06 	br	2a58 <___vfprintf_internal_r+0x63c>
    3264:	00801944 	movi	r2,101
    3268:	1400710e 	bge	r2,r16,3430 <___vfprintf_internal_r+0x1014>
    326c:	d9013717 	ldw	r4,1244(sp)
    3270:	d9413917 	ldw	r5,1252(sp)
    3274:	000d883a 	mov	r6,zero
    3278:	000f883a 	mov	r7,zero
    327c:	d8c13d15 	stw	r3,1268(sp)
    3280:	da013f15 	stw	r8,1276(sp)
    3284:	000c2500 	call	c250 <__eqdf2>
    3288:	d8c13d17 	ldw	r3,1268(sp)
    328c:	da013f17 	ldw	r8,1276(sp)
    3290:	1000ef1e 	bne	r2,zero,3650 <___vfprintf_internal_r+0x1234>
    3294:	d8811f17 	ldw	r2,1148(sp)
    3298:	01000074 	movhi	r4,1
    329c:	213ffb04 	addi	r4,r4,-20
    32a0:	18c00044 	addi	r3,r3,1
    32a4:	10800044 	addi	r2,r2,1
    32a8:	41000015 	stw	r4,0(r8)
    32ac:	01000044 	movi	r4,1
    32b0:	41000115 	stw	r4,4(r8)
    32b4:	d8c12015 	stw	r3,1152(sp)
    32b8:	d8811f15 	stw	r2,1148(sp)
    32bc:	010001c4 	movi	r4,7
    32c0:	20828e16 	blt	r4,r2,3cfc <___vfprintf_internal_r+0x18e0>
    32c4:	42000204 	addi	r8,r8,8
    32c8:	d8812617 	ldw	r2,1176(sp)
    32cc:	dac13317 	ldw	r11,1228(sp)
    32d0:	12c00216 	blt	r2,r11,32dc <___vfprintf_internal_r+0xec0>
    32d4:	8880004c 	andi	r2,r17,1
    32d8:	103e7726 	beq	r2,zero,2cb8 <___vfprintf_internal_r+0x89c>
    32dc:	db013817 	ldw	r12,1248(sp)
    32e0:	d8811f17 	ldw	r2,1148(sp)
    32e4:	dac13517 	ldw	r11,1236(sp)
    32e8:	1b07883a 	add	r3,r3,r12
    32ec:	10800044 	addi	r2,r2,1
    32f0:	42c00015 	stw	r11,0(r8)
    32f4:	43000115 	stw	r12,4(r8)
    32f8:	d8c12015 	stw	r3,1152(sp)
    32fc:	d8811f15 	stw	r2,1148(sp)
    3300:	010001c4 	movi	r4,7
    3304:	2082ed16 	blt	r4,r2,3ebc <___vfprintf_internal_r+0x1aa0>
    3308:	42000204 	addi	r8,r8,8
    330c:	db013317 	ldw	r12,1228(sp)
    3310:	643fffc4 	addi	r16,r12,-1
    3314:	043e680e 	bge	zero,r16,2cb8 <___vfprintf_internal_r+0x89c>
    3318:	04800404 	movi	r18,16
    331c:	d8811f17 	ldw	r2,1148(sp)
    3320:	94007e0e 	bge	r18,r16,351c <___vfprintf_internal_r+0x1100>
    3324:	01400074 	movhi	r5,1
    3328:	297ffb84 	addi	r5,r5,-18
    332c:	d9412c15 	stw	r5,1200(sp)
    3330:	054001c4 	movi	r21,7
    3334:	00000306 	br	3344 <___vfprintf_internal_r+0xf28>
    3338:	42000204 	addi	r8,r8,8
    333c:	843ffc04 	addi	r16,r16,-16
    3340:	9400790e 	bge	r18,r16,3528 <___vfprintf_internal_r+0x110c>
    3344:	18c00404 	addi	r3,r3,16
    3348:	10800044 	addi	r2,r2,1
    334c:	45000015 	stw	r20,0(r8)
    3350:	44800115 	stw	r18,4(r8)
    3354:	d8c12015 	stw	r3,1152(sp)
    3358:	d8811f15 	stw	r2,1148(sp)
    335c:	a8bff60e 	bge	r21,r2,3338 <___vfprintf_internal_r+0xf1c>
    3360:	b009883a 	mov	r4,r22
    3364:	b80b883a 	mov	r5,r23
    3368:	d9811e04 	addi	r6,sp,1144
    336c:	0008a380 	call	8a38 <__sprint_r>
    3370:	103d411e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3374:	d8c12017 	ldw	r3,1152(sp)
    3378:	d8811f17 	ldw	r2,1148(sp)
    337c:	da000404 	addi	r8,sp,16
    3380:	003fee06 	br	333c <___vfprintf_internal_r+0xf20>
    3384:	dac12e17 	ldw	r11,1208(sp)
    3388:	db012b17 	ldw	r12,1196(sp)
    338c:	5b2bc83a 	sub	r21,r11,r12
    3390:	057e130e 	bge	zero,r21,2be0 <___vfprintf_internal_r+0x7c4>
    3394:	07000404 	movi	fp,16
    3398:	d8811f17 	ldw	r2,1148(sp)
    339c:	e543640e 	bge	fp,r21,4130 <___vfprintf_internal_r+0x1d14>
    33a0:	01400074 	movhi	r5,1
    33a4:	297ffb84 	addi	r5,r5,-18
    33a8:	d9412c15 	stw	r5,1200(sp)
    33ac:	04c001c4 	movi	r19,7
    33b0:	00000306 	br	33c0 <___vfprintf_internal_r+0xfa4>
    33b4:	ad7ffc04 	addi	r21,r21,-16
    33b8:	42000204 	addi	r8,r8,8
    33bc:	e540110e 	bge	fp,r21,3404 <___vfprintf_internal_r+0xfe8>
    33c0:	18c00404 	addi	r3,r3,16
    33c4:	10800044 	addi	r2,r2,1
    33c8:	45000015 	stw	r20,0(r8)
    33cc:	47000115 	stw	fp,4(r8)
    33d0:	d8c12015 	stw	r3,1152(sp)
    33d4:	d8811f15 	stw	r2,1148(sp)
    33d8:	98bff60e 	bge	r19,r2,33b4 <___vfprintf_internal_r+0xf98>
    33dc:	b009883a 	mov	r4,r22
    33e0:	b80b883a 	mov	r5,r23
    33e4:	d9811e04 	addi	r6,sp,1144
    33e8:	0008a380 	call	8a38 <__sprint_r>
    33ec:	103d221e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    33f0:	ad7ffc04 	addi	r21,r21,-16
    33f4:	d8c12017 	ldw	r3,1152(sp)
    33f8:	d8811f17 	ldw	r2,1148(sp)
    33fc:	da000404 	addi	r8,sp,16
    3400:	e57fef16 	blt	fp,r21,33c0 <___vfprintf_internal_r+0xfa4>
    3404:	dac12c17 	ldw	r11,1200(sp)
    3408:	1d47883a 	add	r3,r3,r21
    340c:	10800044 	addi	r2,r2,1
    3410:	42c00015 	stw	r11,0(r8)
    3414:	45400115 	stw	r21,4(r8)
    3418:	d8c12015 	stw	r3,1152(sp)
    341c:	d8811f15 	stw	r2,1148(sp)
    3420:	010001c4 	movi	r4,7
    3424:	20819116 	blt	r4,r2,3a6c <___vfprintf_internal_r+0x1650>
    3428:	42000204 	addi	r8,r8,8
    342c:	003dec06 	br	2be0 <___vfprintf_internal_r+0x7c4>
    3430:	db013317 	ldw	r12,1228(sp)
    3434:	00800044 	movi	r2,1
    3438:	18c00044 	addi	r3,r3,1
    343c:	1301530e 	bge	r2,r12,398c <___vfprintf_internal_r+0x1570>
    3440:	dc011f17 	ldw	r16,1148(sp)
    3444:	dac13117 	ldw	r11,1220(sp)
    3448:	00800044 	movi	r2,1
    344c:	84000044 	addi	r16,r16,1
    3450:	40800115 	stw	r2,4(r8)
    3454:	42c00015 	stw	r11,0(r8)
    3458:	d8c12015 	stw	r3,1152(sp)
    345c:	dc011f15 	stw	r16,1148(sp)
    3460:	008001c4 	movi	r2,7
    3464:	14016b16 	blt	r2,r16,3a14 <___vfprintf_internal_r+0x15f8>
    3468:	42000204 	addi	r8,r8,8
    346c:	db013817 	ldw	r12,1248(sp)
    3470:	dac13517 	ldw	r11,1236(sp)
    3474:	84000044 	addi	r16,r16,1
    3478:	1b07883a 	add	r3,r3,r12
    347c:	42c00015 	stw	r11,0(r8)
    3480:	43000115 	stw	r12,4(r8)
    3484:	d8c12015 	stw	r3,1152(sp)
    3488:	dc011f15 	stw	r16,1148(sp)
    348c:	008001c4 	movi	r2,7
    3490:	14016916 	blt	r2,r16,3a38 <___vfprintf_internal_r+0x161c>
    3494:	44800204 	addi	r18,r8,8
    3498:	d9013717 	ldw	r4,1244(sp)
    349c:	d9413917 	ldw	r5,1252(sp)
    34a0:	000d883a 	mov	r6,zero
    34a4:	000f883a 	mov	r7,zero
    34a8:	d8c13d15 	stw	r3,1268(sp)
    34ac:	000c2500 	call	c250 <__eqdf2>
    34b0:	d8c13d17 	ldw	r3,1268(sp)
    34b4:	db013317 	ldw	r12,1228(sp)
    34b8:	1000ae26 	beq	r2,zero,3774 <___vfprintf_internal_r+0x1358>
    34bc:	dac13117 	ldw	r11,1220(sp)
    34c0:	60bfffc4 	addi	r2,r12,-1
    34c4:	1887883a 	add	r3,r3,r2
    34c8:	59000044 	addi	r4,r11,1
    34cc:	84000044 	addi	r16,r16,1
    34d0:	90800115 	stw	r2,4(r18)
    34d4:	91000015 	stw	r4,0(r18)
    34d8:	d8c12015 	stw	r3,1152(sp)
    34dc:	dc011f15 	stw	r16,1148(sp)
    34e0:	008001c4 	movi	r2,7
    34e4:	14014216 	blt	r2,r16,39f0 <___vfprintf_internal_r+0x15d4>
    34e8:	94800204 	addi	r18,r18,8
    34ec:	dac13a17 	ldw	r11,1256(sp)
    34f0:	dd4122c4 	addi	r21,sp,1163
    34f4:	84000044 	addi	r16,r16,1
    34f8:	58c7883a 	add	r3,r11,r3
    34fc:	95400015 	stw	r21,0(r18)
    3500:	92c00115 	stw	r11,4(r18)
    3504:	d8c12015 	stw	r3,1152(sp)
    3508:	dc011f15 	stw	r16,1148(sp)
    350c:	008001c4 	movi	r2,7
    3510:	14000e16 	blt	r2,r16,354c <___vfprintf_internal_r+0x1130>
    3514:	92000204 	addi	r8,r18,8
    3518:	003de706 	br	2cb8 <___vfprintf_internal_r+0x89c>
    351c:	01000074 	movhi	r4,1
    3520:	213ffb84 	addi	r4,r4,-18
    3524:	d9012c15 	stw	r4,1200(sp)
    3528:	dac12c17 	ldw	r11,1200(sp)
    352c:	1c07883a 	add	r3,r3,r16
    3530:	44000115 	stw	r16,4(r8)
    3534:	42c00015 	stw	r11,0(r8)
    3538:	10800044 	addi	r2,r2,1
    353c:	d8c12015 	stw	r3,1152(sp)
    3540:	d8811f15 	stw	r2,1148(sp)
    3544:	010001c4 	movi	r4,7
    3548:	20bdda0e 	bge	r4,r2,2cb4 <___vfprintf_internal_r+0x898>
    354c:	b009883a 	mov	r4,r22
    3550:	b80b883a 	mov	r5,r23
    3554:	d9811e04 	addi	r6,sp,1144
    3558:	0008a380 	call	8a38 <__sprint_r>
    355c:	103cc61e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3560:	d8c12017 	ldw	r3,1152(sp)
    3564:	da000404 	addi	r8,sp,16
    3568:	003dd306 	br	2cb8 <___vfprintf_internal_r+0x89c>
    356c:	b009883a 	mov	r4,r22
    3570:	b80b883a 	mov	r5,r23
    3574:	d9811e04 	addi	r6,sp,1144
    3578:	0008a380 	call	8a38 <__sprint_r>
    357c:	103e0926 	beq	r2,zero,2da4 <___vfprintf_internal_r+0x988>
    3580:	003cbd06 	br	2878 <___vfprintf_internal_r+0x45c>
    3584:	10803fcc 	andi	r2,r2,255
    3588:	1000651e 	bne	r2,zero,3720 <___vfprintf_internal_r+0x1304>
    358c:	8880004c 	andi	r2,r17,1
    3590:	10013226 	beq	r2,zero,3a5c <___vfprintf_internal_r+0x1640>
    3594:	00800c04 	movi	r2,48
    3598:	d8c10dc4 	addi	r3,sp,1079
    359c:	d8810dc5 	stb	r2,1079(sp)
    35a0:	dc813c17 	ldw	r18,1264(sp)
    35a4:	d8c13115 	stw	r3,1220(sp)
    35a8:	003d2b06 	br	2a58 <___vfprintf_internal_r+0x63c>
    35ac:	b009883a 	mov	r4,r22
    35b0:	b80b883a 	mov	r5,r23
    35b4:	d9811e04 	addi	r6,sp,1144
    35b8:	0008a380 	call	8a38 <__sprint_r>
    35bc:	103cae1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    35c0:	d8c12017 	ldw	r3,1152(sp)
    35c4:	da000404 	addi	r8,sp,16
    35c8:	003dae06 	br	2c84 <___vfprintf_internal_r+0x868>
    35cc:	b009883a 	mov	r4,r22
    35d0:	b80b883a 	mov	r5,r23
    35d4:	d9811e04 	addi	r6,sp,1144
    35d8:	0008a380 	call	8a38 <__sprint_r>
    35dc:	103ca61e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    35e0:	d8c12017 	ldw	r3,1152(sp)
    35e4:	da000404 	addi	r8,sp,16
    35e8:	003d6c06 	br	2b9c <___vfprintf_internal_r+0x780>
    35ec:	b009883a 	mov	r4,r22
    35f0:	b80b883a 	mov	r5,r23
    35f4:	d9811e04 	addi	r6,sp,1144
    35f8:	0008a380 	call	8a38 <__sprint_r>
    35fc:	103c9e1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3600:	d8c12017 	ldw	r3,1152(sp)
    3604:	da000404 	addi	r8,sp,16
    3608:	003d7206 	br	2bd4 <___vfprintf_internal_r+0x7b8>
    360c:	d9413b17 	ldw	r5,1260(sp)
    3610:	d8c10e04 	addi	r3,sp,1080
    3614:	988003cc 	andi	r2,r19,15
    3618:	e008973a 	slli	r4,fp,28
    361c:	2885883a 	add	r2,r5,r2
    3620:	9826d13a 	srli	r19,r19,4
    3624:	10800003 	ldbu	r2,0(r2)
    3628:	e038d13a 	srli	fp,fp,4
    362c:	18ffffc4 	addi	r3,r3,-1
    3630:	24e6b03a 	or	r19,r4,r19
    3634:	18800005 	stb	r2,0(r3)
    3638:	9f04b03a 	or	r2,r19,fp
    363c:	103ff51e 	bne	r2,zero,3614 <___vfprintf_internal_r+0x11f8>
    3640:	db012817 	ldw	r12,1184(sp)
    3644:	d8c13115 	stw	r3,1220(sp)
    3648:	60e5c83a 	sub	r18,r12,r3
    364c:	003d0206 	br	2a58 <___vfprintf_internal_r+0x63c>
    3650:	dc012617 	ldw	r16,1176(sp)
    3654:	0401b10e 	bge	zero,r16,3d1c <___vfprintf_internal_r+0x1900>
    3658:	db013117 	ldw	r12,1220(sp)
    365c:	dac13317 	ldw	r11,1228(sp)
    3660:	62e1883a 	add	r16,r12,r11
    3664:	db013417 	ldw	r12,1232(sp)
    3668:	5825883a 	mov	r18,r11
    366c:	62c0010e 	bge	r12,r11,3674 <___vfprintf_internal_r+0x1258>
    3670:	6025883a 	mov	r18,r12
    3674:	04800b0e 	bge	zero,r18,36a4 <___vfprintf_internal_r+0x1288>
    3678:	d8811f17 	ldw	r2,1148(sp)
    367c:	dac13117 	ldw	r11,1220(sp)
    3680:	1c87883a 	add	r3,r3,r18
    3684:	10800044 	addi	r2,r2,1
    3688:	42c00015 	stw	r11,0(r8)
    368c:	44800115 	stw	r18,4(r8)
    3690:	d8c12015 	stw	r3,1152(sp)
    3694:	d8811f15 	stw	r2,1148(sp)
    3698:	010001c4 	movi	r4,7
    369c:	20824f16 	blt	r4,r2,3fdc <___vfprintf_internal_r+0x1bc0>
    36a0:	42000204 	addi	r8,r8,8
    36a4:	90024b16 	blt	r18,zero,3fd4 <___vfprintf_internal_r+0x1bb8>
    36a8:	db013417 	ldw	r12,1232(sp)
    36ac:	64a5c83a 	sub	r18,r12,r18
    36b0:	0480730e 	bge	zero,r18,3880 <___vfprintf_internal_r+0x1464>
    36b4:	05400404 	movi	r21,16
    36b8:	d8811f17 	ldw	r2,1148(sp)
    36bc:	ac817d0e 	bge	r21,r18,3cb4 <___vfprintf_internal_r+0x1898>
    36c0:	01400074 	movhi	r5,1
    36c4:	297ffb84 	addi	r5,r5,-18
    36c8:	d9412c15 	stw	r5,1200(sp)
    36cc:	070001c4 	movi	fp,7
    36d0:	00000306 	br	36e0 <___vfprintf_internal_r+0x12c4>
    36d4:	42000204 	addi	r8,r8,8
    36d8:	94bffc04 	addi	r18,r18,-16
    36dc:	ac81780e 	bge	r21,r18,3cc0 <___vfprintf_internal_r+0x18a4>
    36e0:	18c00404 	addi	r3,r3,16
    36e4:	10800044 	addi	r2,r2,1
    36e8:	45000015 	stw	r20,0(r8)
    36ec:	45400115 	stw	r21,4(r8)
    36f0:	d8c12015 	stw	r3,1152(sp)
    36f4:	d8811f15 	stw	r2,1148(sp)
    36f8:	e0bff60e 	bge	fp,r2,36d4 <___vfprintf_internal_r+0x12b8>
    36fc:	b009883a 	mov	r4,r22
    3700:	b80b883a 	mov	r5,r23
    3704:	d9811e04 	addi	r6,sp,1144
    3708:	0008a380 	call	8a38 <__sprint_r>
    370c:	103c5a1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3710:	d8c12017 	ldw	r3,1152(sp)
    3714:	d8811f17 	ldw	r2,1148(sp)
    3718:	da000404 	addi	r8,sp,16
    371c:	003fee06 	br	36d8 <___vfprintf_internal_r+0x12bc>
    3720:	dac10e04 	addi	r11,sp,1080
    3724:	0025883a 	mov	r18,zero
    3728:	dac13115 	stw	r11,1220(sp)
    372c:	003cca06 	br	2a58 <___vfprintf_internal_r+0x63c>
    3730:	b009883a 	mov	r4,r22
    3734:	b80b883a 	mov	r5,r23
    3738:	d9811e04 	addi	r6,sp,1144
    373c:	0008a380 	call	8a38 <__sprint_r>
    3740:	103c4d1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3744:	d8c12017 	ldw	r3,1152(sp)
    3748:	d8812787 	ldb	r2,1182(sp)
    374c:	da000404 	addi	r8,sp,16
    3750:	003d0506 	br	2b68 <___vfprintf_internal_r+0x74c>
    3754:	dac12d17 	ldw	r11,1204(sp)
    3758:	14c00017 	ldw	r19,0(r2)
    375c:	0039883a 	mov	fp,zero
    3760:	5ac00104 	addi	r11,r11,4
    3764:	dac12d15 	stw	r11,1204(sp)
    3768:	0005883a 	mov	r2,zero
    376c:	9807883a 	mov	r3,r19
    3770:	003c9c06 	br	29e4 <___vfprintf_internal_r+0x5c8>
    3774:	657fffc4 	addi	r21,r12,-1
    3778:	057f5c0e 	bge	zero,r21,34ec <___vfprintf_internal_r+0x10d0>
    377c:	07000404 	movi	fp,16
    3780:	e5408f0e 	bge	fp,r21,39c0 <___vfprintf_internal_r+0x15a4>
    3784:	01000074 	movhi	r4,1
    3788:	213ffb84 	addi	r4,r4,-18
    378c:	d9012c15 	stw	r4,1200(sp)
    3790:	01c001c4 	movi	r7,7
    3794:	00000306 	br	37a4 <___vfprintf_internal_r+0x1388>
    3798:	94800204 	addi	r18,r18,8
    379c:	ad7ffc04 	addi	r21,r21,-16
    37a0:	e5408a0e 	bge	fp,r21,39cc <___vfprintf_internal_r+0x15b0>
    37a4:	18c00404 	addi	r3,r3,16
    37a8:	84000044 	addi	r16,r16,1
    37ac:	95000015 	stw	r20,0(r18)
    37b0:	97000115 	stw	fp,4(r18)
    37b4:	d8c12015 	stw	r3,1152(sp)
    37b8:	dc011f15 	stw	r16,1148(sp)
    37bc:	3c3ff60e 	bge	r7,r16,3798 <___vfprintf_internal_r+0x137c>
    37c0:	b009883a 	mov	r4,r22
    37c4:	b80b883a 	mov	r5,r23
    37c8:	d9811e04 	addi	r6,sp,1144
    37cc:	d9c13d15 	stw	r7,1268(sp)
    37d0:	0008a380 	call	8a38 <__sprint_r>
    37d4:	d9c13d17 	ldw	r7,1268(sp)
    37d8:	103c271e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    37dc:	d8c12017 	ldw	r3,1152(sp)
    37e0:	dc011f17 	ldw	r16,1148(sp)
    37e4:	dc800404 	addi	r18,sp,16
    37e8:	003fec06 	br	379c <___vfprintf_internal_r+0x1380>
    37ec:	1cc00017 	ldw	r19,0(r3)
    37f0:	dac12d17 	ldw	r11,1204(sp)
    37f4:	9839d7fa 	srai	fp,r19,31
    37f8:	5ac00104 	addi	r11,r11,4
    37fc:	dac12d15 	stw	r11,1204(sp)
    3800:	e005883a 	mov	r2,fp
    3804:	003d9006 	br	2e48 <___vfprintf_internal_r+0xa2c>
    3808:	00800084 	movi	r2,2
    380c:	9f06b03a 	or	r3,r19,fp
    3810:	003c7406 	br	29e4 <___vfprintf_internal_r+0x5c8>
    3814:	db012d17 	ldw	r12,1204(sp)
    3818:	14c00017 	ldw	r19,0(r2)
    381c:	0039883a 	mov	fp,zero
    3820:	63000104 	addi	r12,r12,4
    3824:	db012d15 	stw	r12,1204(sp)
    3828:	00800044 	movi	r2,1
    382c:	9807883a 	mov	r3,r19
    3830:	003c6c06 	br	29e4 <___vfprintf_internal_r+0x5c8>
    3834:	10803fcc 	andi	r2,r2,255
    3838:	1080201c 	xori	r2,r2,128
    383c:	10bfe004 	addi	r2,r2,-128
    3840:	01000c04 	movi	r4,48
    3844:	1101a526 	beq	r2,r4,3edc <___vfprintf_internal_r+0x1ac0>
    3848:	dac13117 	ldw	r11,1220(sp)
    384c:	db012817 	ldw	r12,1184(sp)
    3850:	193fffc5 	stb	r4,-1(r3)
    3854:	5affffc4 	addi	r11,r11,-1
    3858:	dac13115 	stw	r11,1220(sp)
    385c:	62e5c83a 	sub	r18,r12,r11
    3860:	003c7d06 	br	2a58 <___vfprintf_internal_r+0x63c>
    3864:	b009883a 	mov	r4,r22
    3868:	b80b883a 	mov	r5,r23
    386c:	d9811e04 	addi	r6,sp,1144
    3870:	0008a380 	call	8a38 <__sprint_r>
    3874:	103c001e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3878:	d8c12017 	ldw	r3,1152(sp)
    387c:	da000404 	addi	r8,sp,16
    3880:	db013117 	ldw	r12,1220(sp)
    3884:	dac13417 	ldw	r11,1232(sp)
    3888:	d8812617 	ldw	r2,1176(sp)
    388c:	62e5883a 	add	r18,r12,r11
    3890:	db013317 	ldw	r12,1228(sp)
    3894:	13000216 	blt	r2,r12,38a0 <___vfprintf_internal_r+0x1484>
    3898:	8900004c 	andi	r4,r17,1
    389c:	20000c26 	beq	r4,zero,38d0 <___vfprintf_internal_r+0x14b4>
    38a0:	dac13817 	ldw	r11,1248(sp)
    38a4:	d9011f17 	ldw	r4,1148(sp)
    38a8:	db013517 	ldw	r12,1236(sp)
    38ac:	1ac7883a 	add	r3,r3,r11
    38b0:	21000044 	addi	r4,r4,1
    38b4:	43000015 	stw	r12,0(r8)
    38b8:	42c00115 	stw	r11,4(r8)
    38bc:	d8c12015 	stw	r3,1152(sp)
    38c0:	d9011f15 	stw	r4,1148(sp)
    38c4:	014001c4 	movi	r5,7
    38c8:	2901cc16 	blt	r5,r4,3ffc <___vfprintf_internal_r+0x1be0>
    38cc:	42000204 	addi	r8,r8,8
    38d0:	dac13317 	ldw	r11,1228(sp)
    38d4:	8489c83a 	sub	r4,r16,r18
    38d8:	5885c83a 	sub	r2,r11,r2
    38dc:	1021883a 	mov	r16,r2
    38e0:	2080010e 	bge	r4,r2,38e8 <___vfprintf_internal_r+0x14cc>
    38e4:	2021883a 	mov	r16,r4
    38e8:	04000a0e 	bge	zero,r16,3914 <___vfprintf_internal_r+0x14f8>
    38ec:	d9011f17 	ldw	r4,1148(sp)
    38f0:	1c07883a 	add	r3,r3,r16
    38f4:	44800015 	stw	r18,0(r8)
    38f8:	21000044 	addi	r4,r4,1
    38fc:	44000115 	stw	r16,4(r8)
    3900:	d8c12015 	stw	r3,1152(sp)
    3904:	d9011f15 	stw	r4,1148(sp)
    3908:	014001c4 	movi	r5,7
    390c:	2901d616 	blt	r5,r4,4068 <___vfprintf_internal_r+0x1c4c>
    3910:	42000204 	addi	r8,r8,8
    3914:	8001df16 	blt	r16,zero,4094 <___vfprintf_internal_r+0x1c78>
    3918:	1421c83a 	sub	r16,r2,r16
    391c:	043ce60e 	bge	zero,r16,2cb8 <___vfprintf_internal_r+0x89c>
    3920:	04800404 	movi	r18,16
    3924:	d8811f17 	ldw	r2,1148(sp)
    3928:	943efc0e 	bge	r18,r16,351c <___vfprintf_internal_r+0x1100>
    392c:	01400074 	movhi	r5,1
    3930:	297ffb84 	addi	r5,r5,-18
    3934:	d9412c15 	stw	r5,1200(sp)
    3938:	054001c4 	movi	r21,7
    393c:	00000306 	br	394c <___vfprintf_internal_r+0x1530>
    3940:	42000204 	addi	r8,r8,8
    3944:	843ffc04 	addi	r16,r16,-16
    3948:	943ef70e 	bge	r18,r16,3528 <___vfprintf_internal_r+0x110c>
    394c:	18c00404 	addi	r3,r3,16
    3950:	10800044 	addi	r2,r2,1
    3954:	45000015 	stw	r20,0(r8)
    3958:	44800115 	stw	r18,4(r8)
    395c:	d8c12015 	stw	r3,1152(sp)
    3960:	d8811f15 	stw	r2,1148(sp)
    3964:	a8bff60e 	bge	r21,r2,3940 <___vfprintf_internal_r+0x1524>
    3968:	b009883a 	mov	r4,r22
    396c:	b80b883a 	mov	r5,r23
    3970:	d9811e04 	addi	r6,sp,1144
    3974:	0008a380 	call	8a38 <__sprint_r>
    3978:	103bbf1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    397c:	d8c12017 	ldw	r3,1152(sp)
    3980:	d8811f17 	ldw	r2,1148(sp)
    3984:	da000404 	addi	r8,sp,16
    3988:	003fee06 	br	3944 <___vfprintf_internal_r+0x1528>
    398c:	8888703a 	and	r4,r17,r2
    3990:	203eab1e 	bne	r4,zero,3440 <___vfprintf_internal_r+0x1024>
    3994:	dc011f17 	ldw	r16,1148(sp)
    3998:	db013117 	ldw	r12,1220(sp)
    399c:	40800115 	stw	r2,4(r8)
    39a0:	84000044 	addi	r16,r16,1
    39a4:	43000015 	stw	r12,0(r8)
    39a8:	d8c12015 	stw	r3,1152(sp)
    39ac:	dc011f15 	stw	r16,1148(sp)
    39b0:	008001c4 	movi	r2,7
    39b4:	14000e16 	blt	r2,r16,39f0 <___vfprintf_internal_r+0x15d4>
    39b8:	44800204 	addi	r18,r8,8
    39bc:	003ecb06 	br	34ec <___vfprintf_internal_r+0x10d0>
    39c0:	00800074 	movhi	r2,1
    39c4:	10bffb84 	addi	r2,r2,-18
    39c8:	d8812c15 	stw	r2,1200(sp)
    39cc:	dac12c17 	ldw	r11,1200(sp)
    39d0:	1d47883a 	add	r3,r3,r21
    39d4:	84000044 	addi	r16,r16,1
    39d8:	92c00015 	stw	r11,0(r18)
    39dc:	95400115 	stw	r21,4(r18)
    39e0:	d8c12015 	stw	r3,1152(sp)
    39e4:	dc011f15 	stw	r16,1148(sp)
    39e8:	008001c4 	movi	r2,7
    39ec:	143ebe0e 	bge	r2,r16,34e8 <___vfprintf_internal_r+0x10cc>
    39f0:	b009883a 	mov	r4,r22
    39f4:	b80b883a 	mov	r5,r23
    39f8:	d9811e04 	addi	r6,sp,1144
    39fc:	0008a380 	call	8a38 <__sprint_r>
    3a00:	103b9d1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3a04:	d8c12017 	ldw	r3,1152(sp)
    3a08:	dc011f17 	ldw	r16,1148(sp)
    3a0c:	dc800404 	addi	r18,sp,16
    3a10:	003eb606 	br	34ec <___vfprintf_internal_r+0x10d0>
    3a14:	b009883a 	mov	r4,r22
    3a18:	b80b883a 	mov	r5,r23
    3a1c:	d9811e04 	addi	r6,sp,1144
    3a20:	0008a380 	call	8a38 <__sprint_r>
    3a24:	103b941e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3a28:	d8c12017 	ldw	r3,1152(sp)
    3a2c:	dc011f17 	ldw	r16,1148(sp)
    3a30:	da000404 	addi	r8,sp,16
    3a34:	003e8d06 	br	346c <___vfprintf_internal_r+0x1050>
    3a38:	b009883a 	mov	r4,r22
    3a3c:	b80b883a 	mov	r5,r23
    3a40:	d9811e04 	addi	r6,sp,1144
    3a44:	0008a380 	call	8a38 <__sprint_r>
    3a48:	103b8b1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3a4c:	d8c12017 	ldw	r3,1152(sp)
    3a50:	dc011f17 	ldw	r16,1148(sp)
    3a54:	dc800404 	addi	r18,sp,16
    3a58:	003e8f06 	br	3498 <___vfprintf_internal_r+0x107c>
    3a5c:	db010e04 	addi	r12,sp,1080
    3a60:	0025883a 	mov	r18,zero
    3a64:	db013115 	stw	r12,1220(sp)
    3a68:	003bfb06 	br	2a58 <___vfprintf_internal_r+0x63c>
    3a6c:	b009883a 	mov	r4,r22
    3a70:	b80b883a 	mov	r5,r23
    3a74:	d9811e04 	addi	r6,sp,1144
    3a78:	0008a380 	call	8a38 <__sprint_r>
    3a7c:	103b7e1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3a80:	d8c12017 	ldw	r3,1152(sp)
    3a84:	da000404 	addi	r8,sp,16
    3a88:	003c5506 	br	2be0 <___vfprintf_internal_r+0x7c4>
    3a8c:	04e7c83a 	sub	r19,zero,r19
    3a90:	9804c03a 	cmpne	r2,r19,zero
    3a94:	0739c83a 	sub	fp,zero,fp
    3a98:	e0b9c83a 	sub	fp,fp,r2
    3a9c:	05400b44 	movi	r21,45
    3aa0:	dd412785 	stb	r21,1182(sp)
    3aa4:	da413215 	stw	r9,1224(sp)
    3aa8:	00800044 	movi	r2,1
    3aac:	9f06b03a 	or	r3,r19,fp
    3ab0:	003bcf06 	br	29f0 <___vfprintf_internal_r+0x5d4>
    3ab4:	da013f15 	stw	r8,1276(sp)
    3ab8:	da413e15 	stw	r9,1272(sp)
    3abc:	00086e80 	call	86e8 <__fpclassifyd>
    3ac0:	da013f17 	ldw	r8,1276(sp)
    3ac4:	da413e17 	ldw	r9,1272(sp)
    3ac8:	1000ce26 	beq	r2,zero,3e04 <___vfprintf_internal_r+0x19e8>
    3acc:	057ff7c4 	movi	r21,-33
    3ad0:	00bfffc4 	movi	r2,-1
    3ad4:	856a703a 	and	r21,r16,r21
    3ad8:	4881f026 	beq	r9,r2,429c <___vfprintf_internal_r+0x1e80>
    3adc:	008011c4 	movi	r2,71
    3ae0:	a881e526 	beq	r21,r2,4278 <___vfprintf_internal_r+0x1e5c>
    3ae4:	db013917 	ldw	r12,1252(sp)
    3ae8:	8ac04014 	ori	r11,r17,256
    3aec:	dac12d15 	stw	r11,1204(sp)
    3af0:	6001e416 	blt	r12,zero,4284 <___vfprintf_internal_r+0x1e68>
    3af4:	dc813917 	ldw	r18,1252(sp)
    3af8:	d8012b05 	stb	zero,1196(sp)
    3afc:	00801984 	movi	r2,102
    3b00:	80811826 	beq	r16,r2,3f64 <___vfprintf_internal_r+0x1b48>
    3b04:	00801184 	movi	r2,70
    3b08:	80811626 	beq	r16,r2,3f64 <___vfprintf_internal_r+0x1b48>
    3b0c:	00801144 	movi	r2,69
    3b10:	a881e026 	beq	r21,r2,4294 <___vfprintf_internal_r+0x1e78>
    3b14:	4839883a 	mov	fp,r9
    3b18:	d8812604 	addi	r2,sp,1176
    3b1c:	d8800115 	stw	r2,4(sp)
    3b20:	d9413717 	ldw	r5,1244(sp)
    3b24:	d8812504 	addi	r2,sp,1172
    3b28:	d8800215 	stw	r2,8(sp)
    3b2c:	d8812104 	addi	r2,sp,1156
    3b30:	df000015 	stw	fp,0(sp)
    3b34:	d8800315 	stw	r2,12(sp)
    3b38:	b009883a 	mov	r4,r22
    3b3c:	900d883a 	mov	r6,r18
    3b40:	01c00084 	movi	r7,2
    3b44:	da013f15 	stw	r8,1276(sp)
    3b48:	da413e15 	stw	r9,1272(sp)
    3b4c:	00048dc0 	call	48dc <_dtoa_r>
    3b50:	d8813115 	stw	r2,1220(sp)
    3b54:	008019c4 	movi	r2,103
    3b58:	da013f17 	ldw	r8,1276(sp)
    3b5c:	da413e17 	ldw	r9,1272(sp)
    3b60:	80800226 	beq	r16,r2,3b6c <___vfprintf_internal_r+0x1750>
    3b64:	008011c4 	movi	r2,71
    3b68:	8081101e 	bne	r16,r2,3fac <___vfprintf_internal_r+0x1b90>
    3b6c:	8880004c 	andi	r2,r17,1
    3b70:	1001df26 	beq	r2,zero,42f0 <___vfprintf_internal_r+0x1ed4>
    3b74:	db013117 	ldw	r12,1220(sp)
    3b78:	6715883a 	add	r10,r12,fp
    3b7c:	d9013717 	ldw	r4,1244(sp)
    3b80:	900b883a 	mov	r5,r18
    3b84:	000d883a 	mov	r6,zero
    3b88:	000f883a 	mov	r7,zero
    3b8c:	da013f15 	stw	r8,1276(sp)
    3b90:	da413e15 	stw	r9,1272(sp)
    3b94:	da813d15 	stw	r10,1268(sp)
    3b98:	000c2500 	call	c250 <__eqdf2>
    3b9c:	da013f17 	ldw	r8,1276(sp)
    3ba0:	da413e17 	ldw	r9,1272(sp)
    3ba4:	da813d17 	ldw	r10,1268(sp)
    3ba8:	10016526 	beq	r2,zero,4140 <___vfprintf_internal_r+0x1d24>
    3bac:	d8812117 	ldw	r2,1156(sp)
    3bb0:	1280062e 	bgeu	r2,r10,3bcc <___vfprintf_internal_r+0x17b0>
    3bb4:	01000c04 	movi	r4,48
    3bb8:	10c00044 	addi	r3,r2,1
    3bbc:	d8c12115 	stw	r3,1156(sp)
    3bc0:	11000005 	stb	r4,0(r2)
    3bc4:	d8812117 	ldw	r2,1156(sp)
    3bc8:	12bffb36 	bltu	r2,r10,3bb8 <___vfprintf_internal_r+0x179c>
    3bcc:	db013117 	ldw	r12,1220(sp)
    3bd0:	1305c83a 	sub	r2,r2,r12
    3bd4:	d8813315 	stw	r2,1228(sp)
    3bd8:	008011c4 	movi	r2,71
    3bdc:	a8814a26 	beq	r21,r2,4108 <___vfprintf_internal_r+0x1cec>
    3be0:	00801944 	movi	r2,101
    3be4:	14020a0e 	bge	r2,r16,4410 <___vfprintf_internal_r+0x1ff4>
    3be8:	00801984 	movi	r2,102
    3bec:	8081b626 	beq	r16,r2,42c8 <___vfprintf_internal_r+0x1eac>
    3bf0:	db012617 	ldw	r12,1176(sp)
    3bf4:	db013415 	stw	r12,1232(sp)
    3bf8:	db013417 	ldw	r12,1232(sp)
    3bfc:	dac13317 	ldw	r11,1228(sp)
    3c00:	62c1a816 	blt	r12,r11,42a4 <___vfprintf_internal_r+0x1e88>
    3c04:	8c40004c 	andi	r17,r17,1
    3c08:	8801ca1e 	bne	r17,zero,4334 <___vfprintf_internal_r+0x1f18>
    3c0c:	6005883a 	mov	r2,r12
    3c10:	6001b516 	blt	r12,zero,42e8 <___vfprintf_internal_r+0x1ecc>
    3c14:	dc813417 	ldw	r18,1232(sp)
    3c18:	df012b07 	ldb	fp,1196(sp)
    3c1c:	e001321e 	bne	fp,zero,40e8 <___vfprintf_internal_r+0x1ccc>
    3c20:	dc412d17 	ldw	r17,1204(sp)
    3c24:	dd412783 	ldbu	r21,1182(sp)
    3c28:	d8812b15 	stw	r2,1196(sp)
    3c2c:	dcc12d15 	stw	r19,1204(sp)
    3c30:	d8013215 	stw	zero,1224(sp)
    3c34:	003b8d06 	br	2a6c <___vfprintf_internal_r+0x650>
    3c38:	88c0100c 	andi	r3,r17,64
    3c3c:	18008226 	beq	r3,zero,3e48 <___vfprintf_internal_r+0x1a2c>
    3c40:	dac12d17 	ldw	r11,1204(sp)
    3c44:	14c0000b 	ldhu	r19,0(r2)
    3c48:	0039883a 	mov	fp,zero
    3c4c:	5ac00104 	addi	r11,r11,4
    3c50:	dac12d15 	stw	r11,1204(sp)
    3c54:	003c8f06 	br	2e94 <___vfprintf_internal_r+0xa78>
    3c58:	1c000007 	ldb	r16,0(r3)
    3c5c:	1805883a 	mov	r2,r3
    3c60:	003a5506 	br	25b8 <___vfprintf_internal_r+0x19c>
    3c64:	00800084 	movi	r2,2
    3c68:	003b5e06 	br	29e4 <___vfprintf_internal_r+0x5c8>
    3c6c:	8880040c 	andi	r2,r17,16
    3c70:	1000091e 	bne	r2,zero,3c98 <___vfprintf_internal_r+0x187c>
    3c74:	8c40100c 	andi	r17,r17,64
    3c78:	88000726 	beq	r17,zero,3c98 <___vfprintf_internal_r+0x187c>
    3c7c:	db012d17 	ldw	r12,1204(sp)
    3c80:	dac12f17 	ldw	r11,1212(sp)
    3c84:	60800017 	ldw	r2,0(r12)
    3c88:	63000104 	addi	r12,r12,4
    3c8c:	db012d15 	stw	r12,1204(sp)
    3c90:	12c0000d 	sth	r11,0(r2)
    3c94:	003a1e06 	br	2510 <___vfprintf_internal_r+0xf4>
    3c98:	db012d17 	ldw	r12,1204(sp)
    3c9c:	dac12f17 	ldw	r11,1212(sp)
    3ca0:	60800017 	ldw	r2,0(r12)
    3ca4:	63000104 	addi	r12,r12,4
    3ca8:	db012d15 	stw	r12,1204(sp)
    3cac:	12c00015 	stw	r11,0(r2)
    3cb0:	003a1706 	br	2510 <___vfprintf_internal_r+0xf4>
    3cb4:	01000074 	movhi	r4,1
    3cb8:	213ffb84 	addi	r4,r4,-18
    3cbc:	d9012c15 	stw	r4,1200(sp)
    3cc0:	dac12c17 	ldw	r11,1200(sp)
    3cc4:	1c87883a 	add	r3,r3,r18
    3cc8:	10800044 	addi	r2,r2,1
    3ccc:	42c00015 	stw	r11,0(r8)
    3cd0:	44800115 	stw	r18,4(r8)
    3cd4:	d8c12015 	stw	r3,1152(sp)
    3cd8:	d8811f15 	stw	r2,1148(sp)
    3cdc:	010001c4 	movi	r4,7
    3ce0:	20bee016 	blt	r4,r2,3864 <___vfprintf_internal_r+0x1448>
    3ce4:	42000204 	addi	r8,r8,8
    3ce8:	003ee506 	br	3880 <___vfprintf_internal_r+0x1464>
    3cec:	01000074 	movhi	r4,1
    3cf0:	213ffb84 	addi	r4,r4,-18
    3cf4:	d9012c15 	stw	r4,1200(sp)
    3cf8:	003bd806 	br	2c5c <___vfprintf_internal_r+0x840>
    3cfc:	b009883a 	mov	r4,r22
    3d00:	b80b883a 	mov	r5,r23
    3d04:	d9811e04 	addi	r6,sp,1144
    3d08:	0008a380 	call	8a38 <__sprint_r>
    3d0c:	103ada1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3d10:	d8c12017 	ldw	r3,1152(sp)
    3d14:	da000404 	addi	r8,sp,16
    3d18:	003d6b06 	br	32c8 <___vfprintf_internal_r+0xeac>
    3d1c:	d8811f17 	ldw	r2,1148(sp)
    3d20:	03000074 	movhi	r12,1
    3d24:	01000044 	movi	r4,1
    3d28:	18c00044 	addi	r3,r3,1
    3d2c:	10800044 	addi	r2,r2,1
    3d30:	633ffb04 	addi	r12,r12,-20
    3d34:	41000115 	stw	r4,4(r8)
    3d38:	43000015 	stw	r12,0(r8)
    3d3c:	d8c12015 	stw	r3,1152(sp)
    3d40:	d8811f15 	stw	r2,1148(sp)
    3d44:	010001c4 	movi	r4,7
    3d48:	20804916 	blt	r4,r2,3e70 <___vfprintf_internal_r+0x1a54>
    3d4c:	42000204 	addi	r8,r8,8
    3d50:	8000041e 	bne	r16,zero,3d64 <___vfprintf_internal_r+0x1948>
    3d54:	dac13317 	ldw	r11,1228(sp)
    3d58:	5800021e 	bne	r11,zero,3d64 <___vfprintf_internal_r+0x1948>
    3d5c:	8880004c 	andi	r2,r17,1
    3d60:	103bd526 	beq	r2,zero,2cb8 <___vfprintf_internal_r+0x89c>
    3d64:	db013817 	ldw	r12,1248(sp)
    3d68:	d8811f17 	ldw	r2,1148(sp)
    3d6c:	dac13517 	ldw	r11,1236(sp)
    3d70:	1b07883a 	add	r3,r3,r12
    3d74:	10800044 	addi	r2,r2,1
    3d78:	42c00015 	stw	r11,0(r8)
    3d7c:	43000115 	stw	r12,4(r8)
    3d80:	d8c12015 	stw	r3,1152(sp)
    3d84:	d8811f15 	stw	r2,1148(sp)
    3d88:	010001c4 	movi	r4,7
    3d8c:	20813016 	blt	r4,r2,4250 <___vfprintf_internal_r+0x1e34>
    3d90:	42000204 	addi	r8,r8,8
    3d94:	0421c83a 	sub	r16,zero,r16
    3d98:	0400630e 	bge	zero,r16,3f28 <___vfprintf_internal_r+0x1b0c>
    3d9c:	04800404 	movi	r18,16
    3da0:	94009f0e 	bge	r18,r16,4020 <___vfprintf_internal_r+0x1c04>
    3da4:	01000074 	movhi	r4,1
    3da8:	213ffb84 	addi	r4,r4,-18
    3dac:	d9012c15 	stw	r4,1200(sp)
    3db0:	054001c4 	movi	r21,7
    3db4:	00000306 	br	3dc4 <___vfprintf_internal_r+0x19a8>
    3db8:	42000204 	addi	r8,r8,8
    3dbc:	843ffc04 	addi	r16,r16,-16
    3dc0:	94009a0e 	bge	r18,r16,402c <___vfprintf_internal_r+0x1c10>
    3dc4:	18c00404 	addi	r3,r3,16
    3dc8:	10800044 	addi	r2,r2,1
    3dcc:	45000015 	stw	r20,0(r8)
    3dd0:	44800115 	stw	r18,4(r8)
    3dd4:	d8c12015 	stw	r3,1152(sp)
    3dd8:	d8811f15 	stw	r2,1148(sp)
    3ddc:	a8bff60e 	bge	r21,r2,3db8 <___vfprintf_internal_r+0x199c>
    3de0:	b009883a 	mov	r4,r22
    3de4:	b80b883a 	mov	r5,r23
    3de8:	d9811e04 	addi	r6,sp,1144
    3dec:	0008a380 	call	8a38 <__sprint_r>
    3df0:	103aa11e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3df4:	d8c12017 	ldw	r3,1152(sp)
    3df8:	d8811f17 	ldw	r2,1148(sp)
    3dfc:	da000404 	addi	r8,sp,16
    3e00:	003fee06 	br	3dbc <___vfprintf_internal_r+0x19a0>
    3e04:	008011c4 	movi	r2,71
    3e08:	1400b316 	blt	r2,r16,40d8 <___vfprintf_internal_r+0x1cbc>
    3e0c:	03000074 	movhi	r12,1
    3e10:	633fed04 	addi	r12,r12,-76
    3e14:	db013115 	stw	r12,1220(sp)
    3e18:	00c000c4 	movi	r3,3
    3e1c:	00bfdfc4 	movi	r2,-129
    3e20:	d8c12b15 	stw	r3,1196(sp)
    3e24:	88a2703a 	and	r17,r17,r2
    3e28:	dd412783 	ldbu	r21,1182(sp)
    3e2c:	dcc12d15 	stw	r19,1204(sp)
    3e30:	1825883a 	mov	r18,r3
    3e34:	d8013215 	stw	zero,1224(sp)
    3e38:	d8013415 	stw	zero,1232(sp)
    3e3c:	003b0b06 	br	2a6c <___vfprintf_internal_r+0x650>
    3e40:	4825883a 	mov	r18,r9
    3e44:	003cba06 	br	3130 <___vfprintf_internal_r+0xd14>
    3e48:	db012d17 	ldw	r12,1204(sp)
    3e4c:	14c00017 	ldw	r19,0(r2)
    3e50:	0039883a 	mov	fp,zero
    3e54:	63000104 	addi	r12,r12,4
    3e58:	db012d15 	stw	r12,1204(sp)
    3e5c:	003c0d06 	br	2e94 <___vfprintf_internal_r+0xa78>
    3e60:	00800074 	movhi	r2,1
    3e64:	10bfeb04 	addi	r2,r2,-84
    3e68:	d8813115 	stw	r2,1220(sp)
    3e6c:	003ac406 	br	2980 <___vfprintf_internal_r+0x564>
    3e70:	b009883a 	mov	r4,r22
    3e74:	b80b883a 	mov	r5,r23
    3e78:	d9811e04 	addi	r6,sp,1144
    3e7c:	0008a380 	call	8a38 <__sprint_r>
    3e80:	103a7d1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3e84:	dc012617 	ldw	r16,1176(sp)
    3e88:	d8c12017 	ldw	r3,1152(sp)
    3e8c:	da000404 	addi	r8,sp,16
    3e90:	003faf06 	br	3d50 <___vfprintf_internal_r+0x1934>
    3e94:	db012e17 	ldw	r12,1208(sp)
    3e98:	1805883a 	mov	r2,r3
    3e9c:	dac12d15 	stw	r11,1204(sp)
    3ea0:	0319c83a 	sub	r12,zero,r12
    3ea4:	db012e15 	stw	r12,1208(sp)
    3ea8:	003a7e06 	br	28a4 <___vfprintf_internal_r+0x488>
    3eac:	18800044 	addi	r2,r3,1
    3eb0:	8c400814 	ori	r17,r17,32
    3eb4:	1c000047 	ldb	r16,1(r3)
    3eb8:	0039bf06 	br	25b8 <___vfprintf_internal_r+0x19c>
    3ebc:	b009883a 	mov	r4,r22
    3ec0:	b80b883a 	mov	r5,r23
    3ec4:	d9811e04 	addi	r6,sp,1144
    3ec8:	0008a380 	call	8a38 <__sprint_r>
    3ecc:	103a6a1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3ed0:	d8c12017 	ldw	r3,1152(sp)
    3ed4:	da000404 	addi	r8,sp,16
    3ed8:	003d0c06 	br	330c <___vfprintf_internal_r+0xef0>
    3edc:	db012817 	ldw	r12,1184(sp)
    3ee0:	d8c13117 	ldw	r3,1220(sp)
    3ee4:	60e5c83a 	sub	r18,r12,r3
    3ee8:	003adb06 	br	2a58 <___vfprintf_internal_r+0x63c>
    3eec:	da013f15 	stw	r8,1276(sp)
    3ef0:	00023840 	call	2384 <strlen>
    3ef4:	1025883a 	mov	r18,r2
    3ef8:	da013f17 	ldw	r8,1276(sp)
    3efc:	903c8e0e 	bge	r18,zero,3138 <___vfprintf_internal_r+0xd1c>
    3f00:	0005883a 	mov	r2,zero
    3f04:	003c8c06 	br	3138 <___vfprintf_internal_r+0xd1c>
    3f08:	b009883a 	mov	r4,r22
    3f0c:	b80b883a 	mov	r5,r23
    3f10:	d9811e04 	addi	r6,sp,1144
    3f14:	0008a380 	call	8a38 <__sprint_r>
    3f18:	103a571e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3f1c:	d8c12017 	ldw	r3,1152(sp)
    3f20:	d8811f17 	ldw	r2,1148(sp)
    3f24:	da000404 	addi	r8,sp,16
    3f28:	db013317 	ldw	r12,1228(sp)
    3f2c:	dac13117 	ldw	r11,1220(sp)
    3f30:	10800044 	addi	r2,r2,1
    3f34:	60c7883a 	add	r3,r12,r3
    3f38:	42c00015 	stw	r11,0(r8)
    3f3c:	43000115 	stw	r12,4(r8)
    3f40:	d8c12015 	stw	r3,1152(sp)
    3f44:	d8811f15 	stw	r2,1148(sp)
    3f48:	010001c4 	movi	r4,7
    3f4c:	20bb590e 	bge	r4,r2,2cb4 <___vfprintf_internal_r+0x898>
    3f50:	003d7e06 	br	354c <___vfprintf_internal_r+0x1130>
    3f54:	01000074 	movhi	r4,1
    3f58:	213fff84 	addi	r4,r4,-2
    3f5c:	d9013615 	stw	r4,1240(sp)
    3f60:	003af606 	br	2b3c <___vfprintf_internal_r+0x720>
    3f64:	d8812604 	addi	r2,sp,1176
    3f68:	d8800115 	stw	r2,4(sp)
    3f6c:	d9413717 	ldw	r5,1244(sp)
    3f70:	d8812504 	addi	r2,sp,1172
    3f74:	d8800215 	stw	r2,8(sp)
    3f78:	d8812104 	addi	r2,sp,1156
    3f7c:	da400015 	stw	r9,0(sp)
    3f80:	d8800315 	stw	r2,12(sp)
    3f84:	b009883a 	mov	r4,r22
    3f88:	900d883a 	mov	r6,r18
    3f8c:	01c000c4 	movi	r7,3
    3f90:	da013f15 	stw	r8,1276(sp)
    3f94:	da413e15 	stw	r9,1272(sp)
    3f98:	00048dc0 	call	48dc <_dtoa_r>
    3f9c:	da413e17 	ldw	r9,1272(sp)
    3fa0:	da013f17 	ldw	r8,1276(sp)
    3fa4:	d8813115 	stw	r2,1220(sp)
    3fa8:	4839883a 	mov	fp,r9
    3fac:	dac13117 	ldw	r11,1220(sp)
    3fb0:	00801184 	movi	r2,70
    3fb4:	5f15883a 	add	r10,r11,fp
    3fb8:	a8bef01e 	bne	r21,r2,3b7c <___vfprintf_internal_r+0x1760>
    3fbc:	59000007 	ldb	r4,0(r11)
    3fc0:	00800c04 	movi	r2,48
    3fc4:	2080e026 	beq	r4,r2,4348 <___vfprintf_internal_r+0x1f2c>
    3fc8:	d8c12617 	ldw	r3,1176(sp)
    3fcc:	50d5883a 	add	r10,r10,r3
    3fd0:	003eea06 	br	3b7c <___vfprintf_internal_r+0x1760>
    3fd4:	0025883a 	mov	r18,zero
    3fd8:	003db306 	br	36a8 <___vfprintf_internal_r+0x128c>
    3fdc:	b009883a 	mov	r4,r22
    3fe0:	b80b883a 	mov	r5,r23
    3fe4:	d9811e04 	addi	r6,sp,1144
    3fe8:	0008a380 	call	8a38 <__sprint_r>
    3fec:	103a221e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    3ff0:	d8c12017 	ldw	r3,1152(sp)
    3ff4:	da000404 	addi	r8,sp,16
    3ff8:	003daa06 	br	36a4 <___vfprintf_internal_r+0x1288>
    3ffc:	b009883a 	mov	r4,r22
    4000:	b80b883a 	mov	r5,r23
    4004:	d9811e04 	addi	r6,sp,1144
    4008:	0008a380 	call	8a38 <__sprint_r>
    400c:	103a1a1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    4010:	d8812617 	ldw	r2,1176(sp)
    4014:	d8c12017 	ldw	r3,1152(sp)
    4018:	da000404 	addi	r8,sp,16
    401c:	003e2c06 	br	38d0 <___vfprintf_internal_r+0x14b4>
    4020:	03000074 	movhi	r12,1
    4024:	633ffb84 	addi	r12,r12,-18
    4028:	db012c15 	stw	r12,1200(sp)
    402c:	dac12c17 	ldw	r11,1200(sp)
    4030:	1c07883a 	add	r3,r3,r16
    4034:	10800044 	addi	r2,r2,1
    4038:	42c00015 	stw	r11,0(r8)
    403c:	44000115 	stw	r16,4(r8)
    4040:	d8c12015 	stw	r3,1152(sp)
    4044:	d8811f15 	stw	r2,1148(sp)
    4048:	010001c4 	movi	r4,7
    404c:	20bfae16 	blt	r4,r2,3f08 <___vfprintf_internal_r+0x1aec>
    4050:	42000204 	addi	r8,r8,8
    4054:	003fb406 	br	3f28 <___vfprintf_internal_r+0x1b0c>
    4058:	03000074 	movhi	r12,1
    405c:	633fff84 	addi	r12,r12,-2
    4060:	db013615 	stw	r12,1240(sp)
    4064:	003b3806 	br	2d48 <___vfprintf_internal_r+0x92c>
    4068:	b009883a 	mov	r4,r22
    406c:	b80b883a 	mov	r5,r23
    4070:	d9811e04 	addi	r6,sp,1144
    4074:	0008a380 	call	8a38 <__sprint_r>
    4078:	1039ff1e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    407c:	d8812617 	ldw	r2,1176(sp)
    4080:	db013317 	ldw	r12,1228(sp)
    4084:	d8c12017 	ldw	r3,1152(sp)
    4088:	da000404 	addi	r8,sp,16
    408c:	6085c83a 	sub	r2,r12,r2
    4090:	003e2006 	br	3914 <___vfprintf_internal_r+0x14f8>
    4094:	0021883a 	mov	r16,zero
    4098:	003e1f06 	br	3918 <___vfprintf_internal_r+0x14fc>
    409c:	00800184 	movi	r2,6
    40a0:	1240012e 	bgeu	r2,r9,40a8 <___vfprintf_internal_r+0x1c8c>
    40a4:	1013883a 	mov	r9,r2
    40a8:	4825883a 	mov	r18,r9
    40ac:	4805883a 	mov	r2,r9
    40b0:	48009e16 	blt	r9,zero,432c <___vfprintf_internal_r+0x1f10>
    40b4:	d8812b15 	stw	r2,1196(sp)
    40b8:	00800074 	movhi	r2,1
    40bc:	10bff904 	addi	r2,r2,-28
    40c0:	d8813115 	stw	r2,1220(sp)
    40c4:	dcc12d15 	stw	r19,1204(sp)
    40c8:	d8013215 	stw	zero,1224(sp)
    40cc:	d8013415 	stw	zero,1232(sp)
    40d0:	0005883a 	mov	r2,zero
    40d4:	003a6c06 	br	2a88 <___vfprintf_internal_r+0x66c>
    40d8:	00800074 	movhi	r2,1
    40dc:	10bfee04 	addi	r2,r2,-72
    40e0:	d8813115 	stw	r2,1220(sp)
    40e4:	003f4c06 	br	3e18 <___vfprintf_internal_r+0x19fc>
    40e8:	00c00b44 	movi	r3,45
    40ec:	d8812b15 	stw	r2,1196(sp)
    40f0:	dc412d17 	ldw	r17,1204(sp)
    40f4:	d8c12785 	stb	r3,1182(sp)
    40f8:	dcc12d15 	stw	r19,1204(sp)
    40fc:	d8013215 	stw	zero,1224(sp)
    4100:	00800b44 	movi	r2,45
    4104:	003a5d06 	br	2a7c <___vfprintf_internal_r+0x660>
    4108:	d8c12617 	ldw	r3,1176(sp)
    410c:	00bfff44 	movi	r2,-3
    4110:	18800d16 	blt	r3,r2,4148 <___vfprintf_internal_r+0x1d2c>
    4114:	48c00c16 	blt	r9,r3,4148 <___vfprintf_internal_r+0x1d2c>
    4118:	d8c13415 	stw	r3,1232(sp)
    411c:	040019c4 	movi	r16,103
    4120:	003eb506 	br	3bf8 <___vfprintf_internal_r+0x17dc>
    4124:	05400b44 	movi	r21,45
    4128:	dd412785 	stb	r21,1182(sp)
    412c:	003a0f06 	br	296c <___vfprintf_internal_r+0x550>
    4130:	01000074 	movhi	r4,1
    4134:	213ffb84 	addi	r4,r4,-18
    4138:	d9012c15 	stw	r4,1200(sp)
    413c:	003cb106 	br	3404 <___vfprintf_internal_r+0xfe8>
    4140:	5005883a 	mov	r2,r10
    4144:	003ea106 	br	3bcc <___vfprintf_internal_r+0x17b0>
    4148:	843fff84 	addi	r16,r16,-2
    414c:	1f3fffc4 	addi	fp,r3,-1
    4150:	df012615 	stw	fp,1176(sp)
    4154:	dc0122c5 	stb	r16,1163(sp)
    4158:	e0009516 	blt	fp,zero,43b0 <___vfprintf_internal_r+0x1f94>
    415c:	00800ac4 	movi	r2,43
    4160:	d8812305 	stb	r2,1164(sp)
    4164:	00800244 	movi	r2,9
    4168:	1700690e 	bge	r2,fp,4310 <___vfprintf_internal_r+0x1ef4>
    416c:	dd4122c4 	addi	r21,sp,1163
    4170:	dc012c15 	stw	r16,1200(sp)
    4174:	8825883a 	mov	r18,r17
    4178:	a821883a 	mov	r16,r21
    417c:	4023883a 	mov	r17,r8
    4180:	e009883a 	mov	r4,fp
    4184:	01400284 	movi	r5,10
    4188:	000129c0 	call	129c <__modsi3>
    418c:	10800c04 	addi	r2,r2,48
    4190:	843fffc4 	addi	r16,r16,-1
    4194:	e009883a 	mov	r4,fp
    4198:	01400284 	movi	r5,10
    419c:	80800005 	stb	r2,0(r16)
    41a0:	00012480 	call	1248 <__divsi3>
    41a4:	1039883a 	mov	fp,r2
    41a8:	00800244 	movi	r2,9
    41ac:	173ff416 	blt	r2,fp,4180 <___vfprintf_internal_r+0x1d64>
    41b0:	8811883a 	mov	r8,r17
    41b4:	e0800c04 	addi	r2,fp,48
    41b8:	9023883a 	mov	r17,r18
    41bc:	8025883a 	mov	r18,r16
    41c0:	913fffc4 	addi	r4,r18,-1
    41c4:	90bfffc5 	stb	r2,-1(r18)
    41c8:	dc012c17 	ldw	r16,1200(sp)
    41cc:	25408e2e 	bgeu	r4,r21,4408 <___vfprintf_internal_r+0x1fec>
    41d0:	d9412384 	addi	r5,sp,1166
    41d4:	2c8bc83a 	sub	r5,r5,r18
    41d8:	d8c12344 	addi	r3,sp,1165
    41dc:	a94b883a 	add	r5,r21,r5
    41e0:	00000106 	br	41e8 <___vfprintf_internal_r+0x1dcc>
    41e4:	20800003 	ldbu	r2,0(r4)
    41e8:	18800005 	stb	r2,0(r3)
    41ec:	18c00044 	addi	r3,r3,1
    41f0:	21000044 	addi	r4,r4,1
    41f4:	197ffb1e 	bne	r3,r5,41e4 <___vfprintf_internal_r+0x1dc8>
    41f8:	d8812304 	addi	r2,sp,1164
    41fc:	1485c83a 	sub	r2,r2,r18
    4200:	d8c12344 	addi	r3,sp,1165
    4204:	1885883a 	add	r2,r3,r2
    4208:	dac13317 	ldw	r11,1228(sp)
    420c:	156bc83a 	sub	r21,r2,r21
    4210:	dd413a15 	stw	r21,1256(sp)
    4214:	00800044 	movi	r2,1
    4218:	5d65883a 	add	r18,r11,r21
    421c:	12c0770e 	bge	r2,r11,43fc <___vfprintf_internal_r+0x1fe0>
    4220:	94800044 	addi	r18,r18,1
    4224:	9005883a 	mov	r2,r18
    4228:	90007216 	blt	r18,zero,43f4 <___vfprintf_internal_r+0x1fd8>
    422c:	d8013415 	stw	zero,1232(sp)
    4230:	003e7906 	br	3c18 <___vfprintf_internal_r+0x17fc>
    4234:	da412b15 	stw	r9,1196(sp)
    4238:	dd412783 	ldbu	r21,1182(sp)
    423c:	4825883a 	mov	r18,r9
    4240:	dcc12d15 	stw	r19,1204(sp)
    4244:	d8013215 	stw	zero,1224(sp)
    4248:	d8013415 	stw	zero,1232(sp)
    424c:	003a0706 	br	2a6c <___vfprintf_internal_r+0x650>
    4250:	b009883a 	mov	r4,r22
    4254:	b80b883a 	mov	r5,r23
    4258:	d9811e04 	addi	r6,sp,1144
    425c:	0008a380 	call	8a38 <__sprint_r>
    4260:	1039851e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x45c>
    4264:	dc012617 	ldw	r16,1176(sp)
    4268:	d8c12017 	ldw	r3,1152(sp)
    426c:	d8811f17 	ldw	r2,1148(sp)
    4270:	da000404 	addi	r8,sp,16
    4274:	003ec706 	br	3d94 <___vfprintf_internal_r+0x1978>
    4278:	483e1a1e 	bne	r9,zero,3ae4 <___vfprintf_internal_r+0x16c8>
    427c:	9013883a 	mov	r9,r18
    4280:	003e1806 	br	3ae4 <___vfprintf_internal_r+0x16c8>
    4284:	00c00b44 	movi	r3,45
    4288:	64a0003c 	xorhi	r18,r12,32768
    428c:	d8c12b05 	stb	r3,1196(sp)
    4290:	003e1a06 	br	3afc <___vfprintf_internal_r+0x16e0>
    4294:	4f000044 	addi	fp,r9,1
    4298:	003e1f06 	br	3b18 <___vfprintf_internal_r+0x16fc>
    429c:	02400184 	movi	r9,6
    42a0:	003e1006 	br	3ae4 <___vfprintf_internal_r+0x16c8>
    42a4:	d8c13417 	ldw	r3,1232(sp)
    42a8:	00c04b0e 	bge	zero,r3,43d8 <___vfprintf_internal_r+0x1fbc>
    42ac:	04800044 	movi	r18,1
    42b0:	dac13317 	ldw	r11,1228(sp)
    42b4:	92e5883a 	add	r18,r18,r11
    42b8:	9005883a 	mov	r2,r18
    42bc:	903e560e 	bge	r18,zero,3c18 <___vfprintf_internal_r+0x17fc>
    42c0:	0005883a 	mov	r2,zero
    42c4:	003e5406 	br	3c18 <___vfprintf_internal_r+0x17fc>
    42c8:	d8c12617 	ldw	r3,1176(sp)
    42cc:	d8c13415 	stw	r3,1232(sp)
    42d0:	00c03b0e 	bge	zero,r3,43c0 <___vfprintf_internal_r+0x1fa4>
    42d4:	4800081e 	bne	r9,zero,42f8 <___vfprintf_internal_r+0x1edc>
    42d8:	8c40004c 	andi	r17,r17,1
    42dc:	8800061e 	bne	r17,zero,42f8 <___vfprintf_internal_r+0x1edc>
    42e0:	1805883a 	mov	r2,r3
    42e4:	183e4b0e 	bge	r3,zero,3c14 <___vfprintf_internal_r+0x17f8>
    42e8:	0005883a 	mov	r2,zero
    42ec:	003e4906 	br	3c14 <___vfprintf_internal_r+0x17f8>
    42f0:	d8812117 	ldw	r2,1156(sp)
    42f4:	003e3506 	br	3bcc <___vfprintf_internal_r+0x17b0>
    42f8:	dac13417 	ldw	r11,1232(sp)
    42fc:	4a400044 	addi	r9,r9,1
    4300:	5a65883a 	add	r18,r11,r9
    4304:	9005883a 	mov	r2,r18
    4308:	903e430e 	bge	r18,zero,3c18 <___vfprintf_internal_r+0x17fc>
    430c:	003fec06 	br	42c0 <___vfprintf_internal_r+0x1ea4>
    4310:	00800c04 	movi	r2,48
    4314:	e0c00c04 	addi	r3,fp,48
    4318:	d8812345 	stb	r2,1165(sp)
    431c:	d8c12385 	stb	r3,1166(sp)
    4320:	d88123c4 	addi	r2,sp,1167
    4324:	dd4122c4 	addi	r21,sp,1163
    4328:	003fb706 	br	4208 <___vfprintf_internal_r+0x1dec>
    432c:	0005883a 	mov	r2,zero
    4330:	003f6006 	br	40b4 <___vfprintf_internal_r+0x1c98>
    4334:	db013417 	ldw	r12,1232(sp)
    4338:	64800044 	addi	r18,r12,1
    433c:	9005883a 	mov	r2,r18
    4340:	903e350e 	bge	r18,zero,3c18 <___vfprintf_internal_r+0x17fc>
    4344:	003fde06 	br	42c0 <___vfprintf_internal_r+0x1ea4>
    4348:	d9013717 	ldw	r4,1244(sp)
    434c:	900b883a 	mov	r5,r18
    4350:	000d883a 	mov	r6,zero
    4354:	000f883a 	mov	r7,zero
    4358:	da013f15 	stw	r8,1276(sp)
    435c:	da413e15 	stw	r9,1272(sp)
    4360:	da813d15 	stw	r10,1268(sp)
    4364:	000c2500 	call	c250 <__eqdf2>
    4368:	da013f17 	ldw	r8,1276(sp)
    436c:	da413e17 	ldw	r9,1272(sp)
    4370:	da813d17 	ldw	r10,1268(sp)
    4374:	103f1426 	beq	r2,zero,3fc8 <___vfprintf_internal_r+0x1bac>
    4378:	00800044 	movi	r2,1
    437c:	1707c83a 	sub	r3,r2,fp
    4380:	d8c12615 	stw	r3,1176(sp)
    4384:	003f1106 	br	3fcc <___vfprintf_internal_r+0x1bb0>
    4388:	dac12d17 	ldw	r11,1204(sp)
    438c:	5a400017 	ldw	r9,0(r11)
    4390:	5ac00104 	addi	r11,r11,4
    4394:	dac12d15 	stw	r11,1204(sp)
    4398:	483ec60e 	bge	r9,zero,3eb4 <___vfprintf_internal_r+0x1a98>
    439c:	027fffc4 	movi	r9,-1
    43a0:	1c000047 	ldb	r16,1(r3)
    43a4:	00388406 	br	25b8 <___vfprintf_internal_r+0x19c>
    43a8:	043fffc4 	movi	r16,-1
    43ac:	00391006 	br	27f0 <___vfprintf_internal_r+0x3d4>
    43b0:	00800b44 	movi	r2,45
    43b4:	0739c83a 	sub	fp,zero,fp
    43b8:	d8812305 	stb	r2,1164(sp)
    43bc:	003f6906 	br	4164 <___vfprintf_internal_r+0x1d48>
    43c0:	4800081e 	bne	r9,zero,43e4 <___vfprintf_internal_r+0x1fc8>
    43c4:	8c40004c 	andi	r17,r17,1
    43c8:	8800061e 	bne	r17,zero,43e4 <___vfprintf_internal_r+0x1fc8>
    43cc:	00800044 	movi	r2,1
    43d0:	1025883a 	mov	r18,r2
    43d4:	003e1006 	br	3c18 <___vfprintf_internal_r+0x17fc>
    43d8:	04800084 	movi	r18,2
    43dc:	90e5c83a 	sub	r18,r18,r3
    43e0:	003fb306 	br	42b0 <___vfprintf_internal_r+0x1e94>
    43e4:	4c800084 	addi	r18,r9,2
    43e8:	9005883a 	mov	r2,r18
    43ec:	903e0a0e 	bge	r18,zero,3c18 <___vfprintf_internal_r+0x17fc>
    43f0:	003fb306 	br	42c0 <___vfprintf_internal_r+0x1ea4>
    43f4:	0005883a 	mov	r2,zero
    43f8:	003f8c06 	br	422c <___vfprintf_internal_r+0x1e10>
    43fc:	88a2703a 	and	r17,r17,r2
    4400:	883f8826 	beq	r17,zero,4224 <___vfprintf_internal_r+0x1e08>
    4404:	003f8606 	br	4220 <___vfprintf_internal_r+0x1e04>
    4408:	d8812344 	addi	r2,sp,1165
    440c:	003f7e06 	br	4208 <___vfprintf_internal_r+0x1dec>
    4410:	d8c12617 	ldw	r3,1176(sp)
    4414:	003f4d06 	br	414c <___vfprintf_internal_r+0x1d30>

00004418 <__vfprintf_internal>:
    4418:	2007883a 	mov	r3,r4
    441c:	01000074 	movhi	r4,1
    4420:	21075304 	addi	r4,r4,7500
    4424:	21000017 	ldw	r4,0(r4)
    4428:	2805883a 	mov	r2,r5
    442c:	300f883a 	mov	r7,r6
    4430:	180b883a 	mov	r5,r3
    4434:	100d883a 	mov	r6,r2
    4438:	000241c1 	jmpi	241c <___vfprintf_internal_r>

0000443c <__swbuf_r>:
    443c:	defffc04 	addi	sp,sp,-16
    4440:	dc800215 	stw	r18,8(sp)
    4444:	dc400115 	stw	r17,4(sp)
    4448:	dc000015 	stw	r16,0(sp)
    444c:	dfc00315 	stw	ra,12(sp)
    4450:	2025883a 	mov	r18,r4
    4454:	2823883a 	mov	r17,r5
    4458:	3021883a 	mov	r16,r6
    445c:	20000226 	beq	r4,zero,4468 <__swbuf_r+0x2c>
    4460:	20800e17 	ldw	r2,56(r4)
    4464:	10004126 	beq	r2,zero,456c <__swbuf_r+0x130>
    4468:	80c00617 	ldw	r3,24(r16)
    446c:	8180030b 	ldhu	r6,12(r16)
    4470:	80c00215 	stw	r3,8(r16)
    4474:	30c0020c 	andi	r3,r6,8
    4478:	18003526 	beq	r3,zero,4550 <__swbuf_r+0x114>
    447c:	80c00417 	ldw	r3,16(r16)
    4480:	18003326 	beq	r3,zero,4550 <__swbuf_r+0x114>
    4484:	3088000c 	andi	r2,r6,8192
    4488:	8c403fcc 	andi	r17,r17,255
    448c:	10001726 	beq	r2,zero,44ec <__swbuf_r+0xb0>
    4490:	80800017 	ldw	r2,0(r16)
    4494:	81000517 	ldw	r4,20(r16)
    4498:	10c7c83a 	sub	r3,r2,r3
    449c:	19001d0e 	bge	r3,r4,4514 <__swbuf_r+0xd8>
    44a0:	18c00044 	addi	r3,r3,1
    44a4:	81400217 	ldw	r5,8(r16)
    44a8:	11000044 	addi	r4,r2,1
    44ac:	81000015 	stw	r4,0(r16)
    44b0:	297fffc4 	addi	r5,r5,-1
    44b4:	81400215 	stw	r5,8(r16)
    44b8:	14400005 	stb	r17,0(r2)
    44bc:	80800517 	ldw	r2,20(r16)
    44c0:	10c01d26 	beq	r2,r3,4538 <__swbuf_r+0xfc>
    44c4:	8080030b 	ldhu	r2,12(r16)
    44c8:	1080004c 	andi	r2,r2,1
    44cc:	1000181e 	bne	r2,zero,4530 <__swbuf_r+0xf4>
    44d0:	8805883a 	mov	r2,r17
    44d4:	dfc00317 	ldw	ra,12(sp)
    44d8:	dc800217 	ldw	r18,8(sp)
    44dc:	dc400117 	ldw	r17,4(sp)
    44e0:	dc000017 	ldw	r16,0(sp)
    44e4:	dec00404 	addi	sp,sp,16
    44e8:	f800283a 	ret
    44ec:	81001917 	ldw	r4,100(r16)
    44f0:	00b7ffc4 	movi	r2,-8193
    44f4:	31880014 	ori	r6,r6,8192
    44f8:	2084703a 	and	r2,r4,r2
    44fc:	80801915 	stw	r2,100(r16)
    4500:	80800017 	ldw	r2,0(r16)
    4504:	81000517 	ldw	r4,20(r16)
    4508:	8180030d 	sth	r6,12(r16)
    450c:	10c7c83a 	sub	r3,r2,r3
    4510:	193fe316 	blt	r3,r4,44a0 <__swbuf_r+0x64>
    4514:	9009883a 	mov	r4,r18
    4518:	800b883a 	mov	r5,r16
    451c:	00060040 	call	6004 <_fflush_r>
    4520:	1000091e 	bne	r2,zero,4548 <__swbuf_r+0x10c>
    4524:	80800017 	ldw	r2,0(r16)
    4528:	00c00044 	movi	r3,1
    452c:	003fdd06 	br	44a4 <__swbuf_r+0x68>
    4530:	00800284 	movi	r2,10
    4534:	88bfe61e 	bne	r17,r2,44d0 <__swbuf_r+0x94>
    4538:	9009883a 	mov	r4,r18
    453c:	800b883a 	mov	r5,r16
    4540:	00060040 	call	6004 <_fflush_r>
    4544:	103fe226 	beq	r2,zero,44d0 <__swbuf_r+0x94>
    4548:	00bfffc4 	movi	r2,-1
    454c:	003fe106 	br	44d4 <__swbuf_r+0x98>
    4550:	9009883a 	mov	r4,r18
    4554:	800b883a 	mov	r5,r16
    4558:	00045ac0 	call	45ac <__swsetup_r>
    455c:	1000051e 	bne	r2,zero,4574 <__swbuf_r+0x138>
    4560:	8180030b 	ldhu	r6,12(r16)
    4564:	80c00417 	ldw	r3,16(r16)
    4568:	003fc606 	br	4484 <__swbuf_r+0x48>
    456c:	00065ac0 	call	65ac <__sinit>
    4570:	003fbd06 	br	4468 <__swbuf_r+0x2c>
    4574:	80c0030b 	ldhu	r3,12(r16)
    4578:	00bfffc4 	movi	r2,-1
    457c:	18c01014 	ori	r3,r3,64
    4580:	80c0030d 	sth	r3,12(r16)
    4584:	00c00244 	movi	r3,9
    4588:	90c00015 	stw	r3,0(r18)
    458c:	003fd106 	br	44d4 <__swbuf_r+0x98>

00004590 <__swbuf>:
    4590:	00c00074 	movhi	r3,1
    4594:	18c75304 	addi	r3,r3,7500
    4598:	2005883a 	mov	r2,r4
    459c:	19000017 	ldw	r4,0(r3)
    45a0:	280d883a 	mov	r6,r5
    45a4:	100b883a 	mov	r5,r2
    45a8:	000443c1 	jmpi	443c <__swbuf_r>

000045ac <__swsetup_r>:
    45ac:	00800074 	movhi	r2,1
    45b0:	defffd04 	addi	sp,sp,-12
    45b4:	10875304 	addi	r2,r2,7500
    45b8:	dc400115 	stw	r17,4(sp)
    45bc:	2023883a 	mov	r17,r4
    45c0:	11000017 	ldw	r4,0(r2)
    45c4:	dc000015 	stw	r16,0(sp)
    45c8:	dfc00215 	stw	ra,8(sp)
    45cc:	2821883a 	mov	r16,r5
    45d0:	20000226 	beq	r4,zero,45dc <__swsetup_r+0x30>
    45d4:	20c00e17 	ldw	r3,56(r4)
    45d8:	18002e26 	beq	r3,zero,4694 <__swsetup_r+0xe8>
    45dc:	8080030b 	ldhu	r2,12(r16)
    45e0:	10c0020c 	andi	r3,r2,8
    45e4:	100d883a 	mov	r6,r2
    45e8:	18000f26 	beq	r3,zero,4628 <__swsetup_r+0x7c>
    45ec:	80c00417 	ldw	r3,16(r16)
    45f0:	18001526 	beq	r3,zero,4648 <__swsetup_r+0x9c>
    45f4:	1100004c 	andi	r4,r2,1
    45f8:	20001c1e 	bne	r4,zero,466c <__swsetup_r+0xc0>
    45fc:	1080008c 	andi	r2,r2,2
    4600:	1000261e 	bne	r2,zero,469c <__swsetup_r+0xf0>
    4604:	80800517 	ldw	r2,20(r16)
    4608:	80800215 	stw	r2,8(r16)
    460c:	18001c26 	beq	r3,zero,4680 <__swsetup_r+0xd4>
    4610:	0005883a 	mov	r2,zero
    4614:	dfc00217 	ldw	ra,8(sp)
    4618:	dc400117 	ldw	r17,4(sp)
    461c:	dc000017 	ldw	r16,0(sp)
    4620:	dec00304 	addi	sp,sp,12
    4624:	f800283a 	ret
    4628:	3080040c 	andi	r2,r6,16
    462c:	10001726 	beq	r2,zero,468c <__swsetup_r+0xe0>
    4630:	3080010c 	andi	r2,r6,4
    4634:	10001b1e 	bne	r2,zero,46a4 <__swsetup_r+0xf8>
    4638:	80c00417 	ldw	r3,16(r16)
    463c:	30800214 	ori	r2,r6,8
    4640:	8080030d 	sth	r2,12(r16)
    4644:	183feb1e 	bne	r3,zero,45f4 <__swsetup_r+0x48>
    4648:	1140a00c 	andi	r5,r2,640
    464c:	01008004 	movi	r4,512
    4650:	293fe826 	beq	r5,r4,45f4 <__swsetup_r+0x48>
    4654:	8809883a 	mov	r4,r17
    4658:	800b883a 	mov	r5,r16
    465c:	00071040 	call	7104 <__smakebuf_r>
    4660:	8080030b 	ldhu	r2,12(r16)
    4664:	80c00417 	ldw	r3,16(r16)
    4668:	003fe206 	br	45f4 <__swsetup_r+0x48>
    466c:	80800517 	ldw	r2,20(r16)
    4670:	80000215 	stw	zero,8(r16)
    4674:	0085c83a 	sub	r2,zero,r2
    4678:	80800615 	stw	r2,24(r16)
    467c:	183fe41e 	bne	r3,zero,4610 <__swsetup_r+0x64>
    4680:	8080030b 	ldhu	r2,12(r16)
    4684:	1080200c 	andi	r2,r2,128
    4688:	103fe226 	beq	r2,zero,4614 <__swsetup_r+0x68>
    468c:	00bfffc4 	movi	r2,-1
    4690:	003fe006 	br	4614 <__swsetup_r+0x68>
    4694:	00065ac0 	call	65ac <__sinit>
    4698:	003fd006 	br	45dc <__swsetup_r+0x30>
    469c:	0005883a 	mov	r2,zero
    46a0:	003fd906 	br	4608 <__swsetup_r+0x5c>
    46a4:	81400c17 	ldw	r5,48(r16)
    46a8:	28000626 	beq	r5,zero,46c4 <__swsetup_r+0x118>
    46ac:	80801004 	addi	r2,r16,64
    46b0:	28800326 	beq	r5,r2,46c0 <__swsetup_r+0x114>
    46b4:	8809883a 	mov	r4,r17
    46b8:	00067200 	call	6720 <_free_r>
    46bc:	8180030b 	ldhu	r6,12(r16)
    46c0:	80000c15 	stw	zero,48(r16)
    46c4:	80c00417 	ldw	r3,16(r16)
    46c8:	00bff6c4 	movi	r2,-37
    46cc:	118c703a 	and	r6,r2,r6
    46d0:	80000115 	stw	zero,4(r16)
    46d4:	80c00015 	stw	r3,0(r16)
    46d8:	003fd806 	br	463c <__swsetup_r+0x90>

000046dc <quorem>:
    46dc:	defff704 	addi	sp,sp,-36
    46e0:	dc800215 	stw	r18,8(sp)
    46e4:	20800417 	ldw	r2,16(r4)
    46e8:	2c800417 	ldw	r18,16(r5)
    46ec:	dfc00815 	stw	ra,32(sp)
    46f0:	ddc00715 	stw	r23,28(sp)
    46f4:	dd800615 	stw	r22,24(sp)
    46f8:	dd400515 	stw	r21,20(sp)
    46fc:	dd000415 	stw	r20,16(sp)
    4700:	dcc00315 	stw	r19,12(sp)
    4704:	dc400115 	stw	r17,4(sp)
    4708:	dc000015 	stw	r16,0(sp)
    470c:	14807116 	blt	r2,r18,48d4 <quorem+0x1f8>
    4710:	94bfffc4 	addi	r18,r18,-1
    4714:	94ad883a 	add	r22,r18,r18
    4718:	b5ad883a 	add	r22,r22,r22
    471c:	2c400504 	addi	r17,r5,20
    4720:	8da9883a 	add	r20,r17,r22
    4724:	25400504 	addi	r21,r4,20
    4728:	282f883a 	mov	r23,r5
    472c:	adad883a 	add	r22,r21,r22
    4730:	a1400017 	ldw	r5,0(r20)
    4734:	2021883a 	mov	r16,r4
    4738:	b1000017 	ldw	r4,0(r22)
    473c:	29400044 	addi	r5,r5,1
    4740:	00012f80 	call	12f8 <__udivsi3>
    4744:	1027883a 	mov	r19,r2
    4748:	10002c26 	beq	r2,zero,47fc <quorem+0x120>
    474c:	a813883a 	mov	r9,r21
    4750:	8811883a 	mov	r8,r17
    4754:	0009883a 	mov	r4,zero
    4758:	000d883a 	mov	r6,zero
    475c:	41c00017 	ldw	r7,0(r8)
    4760:	49400017 	ldw	r5,0(r9)
    4764:	42000104 	addi	r8,r8,4
    4768:	38bfffcc 	andi	r2,r7,65535
    476c:	14c5383a 	mul	r2,r2,r19
    4770:	380ed43a 	srli	r7,r7,16
    4774:	28ffffcc 	andi	r3,r5,65535
    4778:	2085883a 	add	r2,r4,r2
    477c:	1008d43a 	srli	r4,r2,16
    4780:	3ccf383a 	mul	r7,r7,r19
    4784:	198d883a 	add	r6,r3,r6
    4788:	10ffffcc 	andi	r3,r2,65535
    478c:	30c7c83a 	sub	r3,r6,r3
    4790:	280ad43a 	srli	r5,r5,16
    4794:	21c9883a 	add	r4,r4,r7
    4798:	180dd43a 	srai	r6,r3,16
    479c:	20bfffcc 	andi	r2,r4,65535
    47a0:	288bc83a 	sub	r5,r5,r2
    47a4:	298b883a 	add	r5,r5,r6
    47a8:	280e943a 	slli	r7,r5,16
    47ac:	18ffffcc 	andi	r3,r3,65535
    47b0:	2008d43a 	srli	r4,r4,16
    47b4:	38ceb03a 	or	r7,r7,r3
    47b8:	49c00015 	stw	r7,0(r9)
    47bc:	280dd43a 	srai	r6,r5,16
    47c0:	4a400104 	addi	r9,r9,4
    47c4:	a23fe52e 	bgeu	r20,r8,475c <quorem+0x80>
    47c8:	b0800017 	ldw	r2,0(r22)
    47cc:	10000b1e 	bne	r2,zero,47fc <quorem+0x120>
    47d0:	b0bfff04 	addi	r2,r22,-4
    47d4:	a880082e 	bgeu	r21,r2,47f8 <quorem+0x11c>
    47d8:	b0ffff17 	ldw	r3,-4(r22)
    47dc:	18000326 	beq	r3,zero,47ec <quorem+0x110>
    47e0:	00000506 	br	47f8 <quorem+0x11c>
    47e4:	10c00017 	ldw	r3,0(r2)
    47e8:	1800031e 	bne	r3,zero,47f8 <quorem+0x11c>
    47ec:	10bfff04 	addi	r2,r2,-4
    47f0:	94bfffc4 	addi	r18,r18,-1
    47f4:	a8bffb36 	bltu	r21,r2,47e4 <quorem+0x108>
    47f8:	84800415 	stw	r18,16(r16)
    47fc:	8009883a 	mov	r4,r16
    4800:	b80b883a 	mov	r5,r23
    4804:	000801c0 	call	801c <__mcmp>
    4808:	10002616 	blt	r2,zero,48a4 <quorem+0x1c8>
    480c:	9cc00044 	addi	r19,r19,1
    4810:	a80d883a 	mov	r6,r21
    4814:	000b883a 	mov	r5,zero
    4818:	31000017 	ldw	r4,0(r6)
    481c:	88800017 	ldw	r2,0(r17)
    4820:	31800104 	addi	r6,r6,4
    4824:	20ffffcc 	andi	r3,r4,65535
    4828:	194b883a 	add	r5,r3,r5
    482c:	10ffffcc 	andi	r3,r2,65535
    4830:	28c7c83a 	sub	r3,r5,r3
    4834:	1004d43a 	srli	r2,r2,16
    4838:	2008d43a 	srli	r4,r4,16
    483c:	180bd43a 	srai	r5,r3,16
    4840:	18ffffcc 	andi	r3,r3,65535
    4844:	2089c83a 	sub	r4,r4,r2
    4848:	2149883a 	add	r4,r4,r5
    484c:	2004943a 	slli	r2,r4,16
    4850:	8c400104 	addi	r17,r17,4
    4854:	200bd43a 	srai	r5,r4,16
    4858:	10c6b03a 	or	r3,r2,r3
    485c:	30ffff15 	stw	r3,-4(r6)
    4860:	a47fed2e 	bgeu	r20,r17,4818 <quorem+0x13c>
    4864:	9485883a 	add	r2,r18,r18
    4868:	1085883a 	add	r2,r2,r2
    486c:	a887883a 	add	r3,r21,r2
    4870:	18800017 	ldw	r2,0(r3)
    4874:	10000b1e 	bne	r2,zero,48a4 <quorem+0x1c8>
    4878:	18bfff04 	addi	r2,r3,-4
    487c:	a880082e 	bgeu	r21,r2,48a0 <quorem+0x1c4>
    4880:	18ffff17 	ldw	r3,-4(r3)
    4884:	18000326 	beq	r3,zero,4894 <quorem+0x1b8>
    4888:	00000506 	br	48a0 <quorem+0x1c4>
    488c:	10c00017 	ldw	r3,0(r2)
    4890:	1800031e 	bne	r3,zero,48a0 <quorem+0x1c4>
    4894:	10bfff04 	addi	r2,r2,-4
    4898:	94bfffc4 	addi	r18,r18,-1
    489c:	a8bffb36 	bltu	r21,r2,488c <quorem+0x1b0>
    48a0:	84800415 	stw	r18,16(r16)
    48a4:	9805883a 	mov	r2,r19
    48a8:	dfc00817 	ldw	ra,32(sp)
    48ac:	ddc00717 	ldw	r23,28(sp)
    48b0:	dd800617 	ldw	r22,24(sp)
    48b4:	dd400517 	ldw	r21,20(sp)
    48b8:	dd000417 	ldw	r20,16(sp)
    48bc:	dcc00317 	ldw	r19,12(sp)
    48c0:	dc800217 	ldw	r18,8(sp)
    48c4:	dc400117 	ldw	r17,4(sp)
    48c8:	dc000017 	ldw	r16,0(sp)
    48cc:	dec00904 	addi	sp,sp,36
    48d0:	f800283a 	ret
    48d4:	0005883a 	mov	r2,zero
    48d8:	003ff306 	br	48a8 <quorem+0x1cc>

000048dc <_dtoa_r>:
    48dc:	20801017 	ldw	r2,64(r4)
    48e0:	deffde04 	addi	sp,sp,-136
    48e4:	dd401d15 	stw	r21,116(sp)
    48e8:	dcc01b15 	stw	r19,108(sp)
    48ec:	dc801a15 	stw	r18,104(sp)
    48f0:	dc401915 	stw	r17,100(sp)
    48f4:	dc001815 	stw	r16,96(sp)
    48f8:	dfc02115 	stw	ra,132(sp)
    48fc:	df002015 	stw	fp,128(sp)
    4900:	ddc01f15 	stw	r23,124(sp)
    4904:	dd801e15 	stw	r22,120(sp)
    4908:	dd001c15 	stw	r20,112(sp)
    490c:	d9c00315 	stw	r7,12(sp)
    4910:	2021883a 	mov	r16,r4
    4914:	302b883a 	mov	r21,r6
    4918:	2825883a 	mov	r18,r5
    491c:	dc402417 	ldw	r17,144(sp)
    4920:	3027883a 	mov	r19,r6
    4924:	10000826 	beq	r2,zero,4948 <_dtoa_r+0x6c>
    4928:	21801117 	ldw	r6,68(r4)
    492c:	00c00044 	movi	r3,1
    4930:	100b883a 	mov	r5,r2
    4934:	1986983a 	sll	r3,r3,r6
    4938:	11800115 	stw	r6,4(r2)
    493c:	10c00215 	stw	r3,8(r2)
    4940:	00078040 	call	7804 <_Bfree>
    4944:	80001015 	stw	zero,64(r16)
    4948:	a8002d16 	blt	r21,zero,4a00 <_dtoa_r+0x124>
    494c:	88000015 	stw	zero,0(r17)
    4950:	a8dffc2c 	andhi	r3,r21,32752
    4954:	009ffc34 	movhi	r2,32752
    4958:	18801b26 	beq	r3,r2,49c8 <_dtoa_r+0xec>
    495c:	9009883a 	mov	r4,r18
    4960:	980b883a 	mov	r5,r19
    4964:	000d883a 	mov	r6,zero
    4968:	000f883a 	mov	r7,zero
    496c:	000c2500 	call	c250 <__eqdf2>
    4970:	10002a1e 	bne	r2,zero,4a1c <_dtoa_r+0x140>
    4974:	d8c02317 	ldw	r3,140(sp)
    4978:	d9002517 	ldw	r4,148(sp)
    497c:	00800044 	movi	r2,1
    4980:	18800015 	stw	r2,0(r3)
    4984:	2001a226 	beq	r4,zero,5010 <_dtoa_r+0x734>
    4988:	00800074 	movhi	r2,1
    498c:	10bffb44 	addi	r2,r2,-19
    4990:	20800015 	stw	r2,0(r4)
    4994:	10bfffc4 	addi	r2,r2,-1
    4998:	dfc02117 	ldw	ra,132(sp)
    499c:	df002017 	ldw	fp,128(sp)
    49a0:	ddc01f17 	ldw	r23,124(sp)
    49a4:	dd801e17 	ldw	r22,120(sp)
    49a8:	dd401d17 	ldw	r21,116(sp)
    49ac:	dd001c17 	ldw	r20,112(sp)
    49b0:	dcc01b17 	ldw	r19,108(sp)
    49b4:	dc801a17 	ldw	r18,104(sp)
    49b8:	dc401917 	ldw	r17,100(sp)
    49bc:	dc001817 	ldw	r16,96(sp)
    49c0:	dec02204 	addi	sp,sp,136
    49c4:	f800283a 	ret
    49c8:	d8c02317 	ldw	r3,140(sp)
    49cc:	0089c3c4 	movi	r2,9999
    49d0:	18800015 	stw	r2,0(r3)
    49d4:	90017c26 	beq	r18,zero,4fc8 <_dtoa_r+0x6ec>
    49d8:	00800074 	movhi	r2,1
    49dc:	10800704 	addi	r2,r2,28
    49e0:	d9002517 	ldw	r4,148(sp)
    49e4:	203fec26 	beq	r4,zero,4998 <_dtoa_r+0xbc>
    49e8:	10c000c7 	ldb	r3,3(r2)
    49ec:	18017d1e 	bne	r3,zero,4fe4 <_dtoa_r+0x708>
    49f0:	10c000c4 	addi	r3,r2,3
    49f4:	d9802517 	ldw	r6,148(sp)
    49f8:	30c00015 	stw	r3,0(r6)
    49fc:	003fe606 	br	4998 <_dtoa_r+0xbc>
    4a00:	04e00034 	movhi	r19,32768
    4a04:	9cffffc4 	addi	r19,r19,-1
    4a08:	00800044 	movi	r2,1
    4a0c:	ace6703a 	and	r19,r21,r19
    4a10:	88800015 	stw	r2,0(r17)
    4a14:	982b883a 	mov	r21,r19
    4a18:	003fcd06 	br	4950 <_dtoa_r+0x74>
    4a1c:	d8800204 	addi	r2,sp,8
    4a20:	a822d53a 	srli	r17,r21,20
    4a24:	d8800015 	stw	r2,0(sp)
    4a28:	8009883a 	mov	r4,r16
    4a2c:	900b883a 	mov	r5,r18
    4a30:	980d883a 	mov	r6,r19
    4a34:	d9c00104 	addi	r7,sp,4
    4a38:	00083900 	call	8390 <__d2b>
    4a3c:	1039883a 	mov	fp,r2
    4a40:	88016a1e 	bne	r17,zero,4fec <_dtoa_r+0x710>
    4a44:	dd000217 	ldw	r20,8(sp)
    4a48:	dc400117 	ldw	r17,4(sp)
    4a4c:	00befbc4 	movi	r2,-1041
    4a50:	a463883a 	add	r17,r20,r17
    4a54:	8882ea16 	blt	r17,r2,5600 <_dtoa_r+0xd24>
    4a58:	00bf0384 	movi	r2,-1010
    4a5c:	1445c83a 	sub	r2,r2,r17
    4a60:	89010484 	addi	r4,r17,1042
    4a64:	a8aa983a 	sll	r21,r21,r2
    4a68:	9108d83a 	srl	r4,r18,r4
    4a6c:	a908b03a 	or	r4,r21,r4
    4a70:	000d5e00 	call	d5e0 <__floatunsidf>
    4a74:	017f8434 	movhi	r5,65040
    4a78:	01800044 	movi	r6,1
    4a7c:	1009883a 	mov	r4,r2
    4a80:	194b883a 	add	r5,r3,r5
    4a84:	8c7fffc4 	addi	r17,r17,-1
    4a88:	d9800f15 	stw	r6,60(sp)
    4a8c:	000d883a 	mov	r6,zero
    4a90:	01cffe34 	movhi	r7,16376
    4a94:	000cbb80 	call	cbb8 <__subdf3>
    4a98:	0198dbf4 	movhi	r6,25455
    4a9c:	01cff4f4 	movhi	r7,16339
    4aa0:	1009883a 	mov	r4,r2
    4aa4:	180b883a 	mov	r5,r3
    4aa8:	3190d844 	addi	r6,r6,17249
    4aac:	39e1e9c4 	addi	r7,r7,-30809
    4ab0:	000c4940 	call	c494 <__muldf3>
    4ab4:	01a2d874 	movhi	r6,35681
    4ab8:	01cff1f4 	movhi	r7,16327
    4abc:	180b883a 	mov	r5,r3
    4ac0:	31b22cc4 	addi	r6,r6,-14157
    4ac4:	39e28a04 	addi	r7,r7,-30168
    4ac8:	1009883a 	mov	r4,r2
    4acc:	000b0e80 	call	b0e8 <__adddf3>
    4ad0:	8809883a 	mov	r4,r17
    4ad4:	102d883a 	mov	r22,r2
    4ad8:	182b883a 	mov	r21,r3
    4adc:	000d5100 	call	d510 <__floatsidf>
    4ae0:	019427f4 	movhi	r6,20639
    4ae4:	01cff4f4 	movhi	r7,16339
    4ae8:	1009883a 	mov	r4,r2
    4aec:	180b883a 	mov	r5,r3
    4af0:	319e7ec4 	addi	r6,r6,31227
    4af4:	39d104c4 	addi	r7,r7,17427
    4af8:	000c4940 	call	c494 <__muldf3>
    4afc:	b009883a 	mov	r4,r22
    4b00:	a80b883a 	mov	r5,r21
    4b04:	100d883a 	mov	r6,r2
    4b08:	180f883a 	mov	r7,r3
    4b0c:	000b0e80 	call	b0e8 <__adddf3>
    4b10:	1009883a 	mov	r4,r2
    4b14:	180b883a 	mov	r5,r3
    4b18:	102d883a 	mov	r22,r2
    4b1c:	182b883a 	mov	r21,r3
    4b20:	000d4880 	call	d488 <__fixdfsi>
    4b24:	b009883a 	mov	r4,r22
    4b28:	a80b883a 	mov	r5,r21
    4b2c:	000d883a 	mov	r6,zero
    4b30:	000f883a 	mov	r7,zero
    4b34:	d8800515 	stw	r2,20(sp)
    4b38:	000c3b40 	call	c3b4 <__ledf2>
    4b3c:	10023116 	blt	r2,zero,5404 <_dtoa_r+0xb28>
    4b40:	d8c00517 	ldw	r3,20(sp)
    4b44:	00800584 	movi	r2,22
    4b48:	10c21f36 	bltu	r2,r3,53c8 <_dtoa_r+0xaec>
    4b4c:	180490fa 	slli	r2,r3,3
    4b50:	00c00074 	movhi	r3,1
    4b54:	18c02204 	addi	r3,r3,136
    4b58:	1885883a 	add	r2,r3,r2
    4b5c:	11000017 	ldw	r4,0(r2)
    4b60:	11400117 	ldw	r5,4(r2)
    4b64:	900d883a 	mov	r6,r18
    4b68:	980f883a 	mov	r7,r19
    4b6c:	000c2d40 	call	c2d4 <__gedf2>
    4b70:	0082a70e 	bge	zero,r2,5610 <_dtoa_r+0xd34>
    4b74:	d9000517 	ldw	r4,20(sp)
    4b78:	d8000c15 	stw	zero,48(sp)
    4b7c:	213fffc4 	addi	r4,r4,-1
    4b80:	d9000515 	stw	r4,20(sp)
    4b84:	a463c83a 	sub	r17,r20,r17
    4b88:	8dbfffc4 	addi	r22,r17,-1
    4b8c:	b0021916 	blt	r22,zero,53f4 <_dtoa_r+0xb18>
    4b90:	d8000815 	stw	zero,32(sp)
    4b94:	d8800517 	ldw	r2,20(sp)
    4b98:	10020e16 	blt	r2,zero,53d4 <_dtoa_r+0xaf8>
    4b9c:	b0ad883a 	add	r22,r22,r2
    4ba0:	d8800a15 	stw	r2,40(sp)
    4ba4:	d8000915 	stw	zero,36(sp)
    4ba8:	d8c00317 	ldw	r3,12(sp)
    4bac:	00800244 	movi	r2,9
    4bb0:	10c11a36 	bltu	r2,r3,501c <_dtoa_r+0x740>
    4bb4:	00800144 	movi	r2,5
    4bb8:	10c4fc0e 	bge	r2,r3,5fac <_dtoa_r+0x16d0>
    4bbc:	18ffff04 	addi	r3,r3,-4
    4bc0:	d8c00315 	stw	r3,12(sp)
    4bc4:	0029883a 	mov	r20,zero
    4bc8:	d9800317 	ldw	r6,12(sp)
    4bcc:	008000c4 	movi	r2,3
    4bd0:	3083bd26 	beq	r6,r2,5ac8 <_dtoa_r+0x11ec>
    4bd4:	1183670e 	bge	r2,r6,5974 <_dtoa_r+0x1098>
    4bd8:	d8c00317 	ldw	r3,12(sp)
    4bdc:	00800104 	movi	r2,4
    4be0:	1882e726 	beq	r3,r2,5780 <_dtoa_r+0xea4>
    4be4:	00800144 	movi	r2,5
    4be8:	1884f21e 	bne	r3,r2,5fb4 <_dtoa_r+0x16d8>
    4bec:	00800044 	movi	r2,1
    4bf0:	d8800b15 	stw	r2,44(sp)
    4bf4:	d8c02217 	ldw	r3,136(sp)
    4bf8:	d9000517 	ldw	r4,20(sp)
    4bfc:	1907883a 	add	r3,r3,r4
    4c00:	19800044 	addi	r6,r3,1
    4c04:	d8c00d15 	stw	r3,52(sp)
    4c08:	d9800615 	stw	r6,24(sp)
    4c0c:	0183c30e 	bge	zero,r6,5b1c <_dtoa_r+0x1240>
    4c10:	d9800617 	ldw	r6,24(sp)
    4c14:	3023883a 	mov	r17,r6
    4c18:	80001115 	stw	zero,68(r16)
    4c1c:	008005c4 	movi	r2,23
    4c20:	1184f62e 	bgeu	r2,r6,5ffc <_dtoa_r+0x1720>
    4c24:	00c00044 	movi	r3,1
    4c28:	00800104 	movi	r2,4
    4c2c:	1085883a 	add	r2,r2,r2
    4c30:	11000504 	addi	r4,r2,20
    4c34:	180b883a 	mov	r5,r3
    4c38:	18c00044 	addi	r3,r3,1
    4c3c:	313ffb2e 	bgeu	r6,r4,4c2c <_dtoa_r+0x350>
    4c40:	81401115 	stw	r5,68(r16)
    4c44:	8009883a 	mov	r4,r16
    4c48:	000775c0 	call	775c <_Balloc>
    4c4c:	d8800715 	stw	r2,28(sp)
    4c50:	80801015 	stw	r2,64(r16)
    4c54:	00800384 	movi	r2,14
    4c58:	1440fd36 	bltu	r2,r17,5050 <_dtoa_r+0x774>
    4c5c:	a000fc26 	beq	r20,zero,5050 <_dtoa_r+0x774>
    4c60:	d8800517 	ldw	r2,20(sp)
    4c64:	0083b90e 	bge	zero,r2,5b4c <_dtoa_r+0x1270>
    4c68:	d8c00517 	ldw	r3,20(sp)
    4c6c:	108003cc 	andi	r2,r2,15
    4c70:	100490fa 	slli	r2,r2,3
    4c74:	182fd13a 	srai	r23,r3,4
    4c78:	00c00074 	movhi	r3,1
    4c7c:	18c02204 	addi	r3,r3,136
    4c80:	1885883a 	add	r2,r3,r2
    4c84:	b8c0040c 	andi	r3,r23,16
    4c88:	12c00017 	ldw	r11,0(r2)
    4c8c:	12800117 	ldw	r10,4(r2)
    4c90:	18039726 	beq	r3,zero,5af0 <_dtoa_r+0x1214>
    4c94:	00800074 	movhi	r2,1
    4c98:	10801804 	addi	r2,r2,96
    4c9c:	11800817 	ldw	r6,32(r2)
    4ca0:	11c00917 	ldw	r7,36(r2)
    4ca4:	9009883a 	mov	r4,r18
    4ca8:	980b883a 	mov	r5,r19
    4cac:	da801615 	stw	r10,88(sp)
    4cb0:	dac01515 	stw	r11,84(sp)
    4cb4:	000b9840 	call	b984 <__divdf3>
    4cb8:	da801617 	ldw	r10,88(sp)
    4cbc:	dac01517 	ldw	r11,84(sp)
    4cc0:	bdc003cc 	andi	r23,r23,15
    4cc4:	044000c4 	movi	r17,3
    4cc8:	d8800e15 	stw	r2,56(sp)
    4ccc:	182b883a 	mov	r21,r3
    4cd0:	b8001126 	beq	r23,zero,4d18 <_dtoa_r+0x43c>
    4cd4:	05000074 	movhi	r20,1
    4cd8:	a5001804 	addi	r20,r20,96
    4cdc:	5805883a 	mov	r2,r11
    4ce0:	5007883a 	mov	r3,r10
    4ce4:	b980004c 	andi	r6,r23,1
    4ce8:	1009883a 	mov	r4,r2
    4cec:	b82fd07a 	srai	r23,r23,1
    4cf0:	180b883a 	mov	r5,r3
    4cf4:	30000426 	beq	r6,zero,4d08 <_dtoa_r+0x42c>
    4cf8:	a1800017 	ldw	r6,0(r20)
    4cfc:	a1c00117 	ldw	r7,4(r20)
    4d00:	8c400044 	addi	r17,r17,1
    4d04:	000c4940 	call	c494 <__muldf3>
    4d08:	a5000204 	addi	r20,r20,8
    4d0c:	b83ff51e 	bne	r23,zero,4ce4 <_dtoa_r+0x408>
    4d10:	1017883a 	mov	r11,r2
    4d14:	1815883a 	mov	r10,r3
    4d18:	d9000e17 	ldw	r4,56(sp)
    4d1c:	a80b883a 	mov	r5,r21
    4d20:	580d883a 	mov	r6,r11
    4d24:	500f883a 	mov	r7,r10
    4d28:	000b9840 	call	b984 <__divdf3>
    4d2c:	1029883a 	mov	r20,r2
    4d30:	182b883a 	mov	r21,r3
    4d34:	d9800c17 	ldw	r6,48(sp)
    4d38:	30000626 	beq	r6,zero,4d54 <_dtoa_r+0x478>
    4d3c:	a009883a 	mov	r4,r20
    4d40:	a80b883a 	mov	r5,r21
    4d44:	000d883a 	mov	r6,zero
    4d48:	01cffc34 	movhi	r7,16368
    4d4c:	000c3b40 	call	c3b4 <__ledf2>
    4d50:	10043216 	blt	r2,zero,5e1c <_dtoa_r+0x1540>
    4d54:	8809883a 	mov	r4,r17
    4d58:	000d5100 	call	d510 <__floatsidf>
    4d5c:	1009883a 	mov	r4,r2
    4d60:	180b883a 	mov	r5,r3
    4d64:	a00d883a 	mov	r6,r20
    4d68:	a80f883a 	mov	r7,r21
    4d6c:	000c4940 	call	c494 <__muldf3>
    4d70:	000d883a 	mov	r6,zero
    4d74:	1009883a 	mov	r4,r2
    4d78:	180b883a 	mov	r5,r3
    4d7c:	01d00734 	movhi	r7,16412
    4d80:	000b0e80 	call	b0e8 <__adddf3>
    4d84:	1023883a 	mov	r17,r2
    4d88:	d9800617 	ldw	r6,24(sp)
    4d8c:	00bf3034 	movhi	r2,64704
    4d90:	1885883a 	add	r2,r3,r2
    4d94:	d8800e15 	stw	r2,56(sp)
    4d98:	30032e26 	beq	r6,zero,5a54 <_dtoa_r+0x1178>
    4d9c:	d8c00517 	ldw	r3,20(sp)
    4da0:	da800617 	ldw	r10,24(sp)
    4da4:	d8c01215 	stw	r3,72(sp)
    4da8:	d9000b17 	ldw	r4,44(sp)
    4dac:	2003b026 	beq	r4,zero,5c70 <_dtoa_r+0x1394>
    4db0:	50bfffc4 	addi	r2,r10,-1
    4db4:	100490fa 	slli	r2,r2,3
    4db8:	00c00074 	movhi	r3,1
    4dbc:	18c02204 	addi	r3,r3,136
    4dc0:	1885883a 	add	r2,r3,r2
    4dc4:	11800017 	ldw	r6,0(r2)
    4dc8:	11c00117 	ldw	r7,4(r2)
    4dcc:	d8800717 	ldw	r2,28(sp)
    4dd0:	0009883a 	mov	r4,zero
    4dd4:	014ff834 	movhi	r5,16352
    4dd8:	da801615 	stw	r10,88(sp)
    4ddc:	15c00044 	addi	r23,r2,1
    4de0:	000b9840 	call	b984 <__divdf3>
    4de4:	d9c00e17 	ldw	r7,56(sp)
    4de8:	880d883a 	mov	r6,r17
    4dec:	1009883a 	mov	r4,r2
    4df0:	180b883a 	mov	r5,r3
    4df4:	000cbb80 	call	cbb8 <__subdf3>
    4df8:	a80b883a 	mov	r5,r21
    4dfc:	a009883a 	mov	r4,r20
    4e00:	d8c01015 	stw	r3,64(sp)
    4e04:	d8800e15 	stw	r2,56(sp)
    4e08:	000d4880 	call	d488 <__fixdfsi>
    4e0c:	1009883a 	mov	r4,r2
    4e10:	d8801715 	stw	r2,92(sp)
    4e14:	000d5100 	call	d510 <__floatsidf>
    4e18:	a009883a 	mov	r4,r20
    4e1c:	a80b883a 	mov	r5,r21
    4e20:	100d883a 	mov	r6,r2
    4e24:	180f883a 	mov	r7,r3
    4e28:	000cbb80 	call	cbb8 <__subdf3>
    4e2c:	da001717 	ldw	r8,92(sp)
    4e30:	1829883a 	mov	r20,r3
    4e34:	d8c00717 	ldw	r3,28(sp)
    4e38:	d9000e17 	ldw	r4,56(sp)
    4e3c:	d9401017 	ldw	r5,64(sp)
    4e40:	42000c04 	addi	r8,r8,48
    4e44:	1023883a 	mov	r17,r2
    4e48:	1a000005 	stb	r8,0(r3)
    4e4c:	880d883a 	mov	r6,r17
    4e50:	a00f883a 	mov	r7,r20
    4e54:	402b883a 	mov	r21,r8
    4e58:	000c2d40 	call	c2d4 <__gedf2>
    4e5c:	00844516 	blt	zero,r2,5f74 <_dtoa_r+0x1698>
    4e60:	0009883a 	mov	r4,zero
    4e64:	014ffc34 	movhi	r5,16368
    4e68:	880d883a 	mov	r6,r17
    4e6c:	a00f883a 	mov	r7,r20
    4e70:	000cbb80 	call	cbb8 <__subdf3>
    4e74:	d9000e17 	ldw	r4,56(sp)
    4e78:	d9401017 	ldw	r5,64(sp)
    4e7c:	100d883a 	mov	r6,r2
    4e80:	180f883a 	mov	r7,r3
    4e84:	000c2d40 	call	c2d4 <__gedf2>
    4e88:	da801617 	ldw	r10,88(sp)
    4e8c:	00843616 	blt	zero,r2,5f68 <_dtoa_r+0x168c>
    4e90:	00800044 	movi	r2,1
    4e94:	12806e0e 	bge	r2,r10,5050 <_dtoa_r+0x774>
    4e98:	d9000717 	ldw	r4,28(sp)
    4e9c:	dd801315 	stw	r22,76(sp)
    4ea0:	dc001115 	stw	r16,68(sp)
    4ea4:	2295883a 	add	r10,r4,r10
    4ea8:	dcc01415 	stw	r19,80(sp)
    4eac:	502d883a 	mov	r22,r10
    4eb0:	dcc01017 	ldw	r19,64(sp)
    4eb4:	b821883a 	mov	r16,r23
    4eb8:	dc801015 	stw	r18,64(sp)
    4ebc:	dc800e17 	ldw	r18,56(sp)
    4ec0:	00000906 	br	4ee8 <_dtoa_r+0x60c>
    4ec4:	000cbb80 	call	cbb8 <__subdf3>
    4ec8:	1009883a 	mov	r4,r2
    4ecc:	180b883a 	mov	r5,r3
    4ed0:	900d883a 	mov	r6,r18
    4ed4:	980f883a 	mov	r7,r19
    4ed8:	000c3b40 	call	c3b4 <__ledf2>
    4edc:	10040e16 	blt	r2,zero,5f18 <_dtoa_r+0x163c>
    4ee0:	b821883a 	mov	r16,r23
    4ee4:	bd841026 	beq	r23,r22,5f28 <_dtoa_r+0x164c>
    4ee8:	9009883a 	mov	r4,r18
    4eec:	980b883a 	mov	r5,r19
    4ef0:	000d883a 	mov	r6,zero
    4ef4:	01d00934 	movhi	r7,16420
    4ef8:	000c4940 	call	c494 <__muldf3>
    4efc:	000d883a 	mov	r6,zero
    4f00:	01d00934 	movhi	r7,16420
    4f04:	8809883a 	mov	r4,r17
    4f08:	a00b883a 	mov	r5,r20
    4f0c:	1025883a 	mov	r18,r2
    4f10:	1827883a 	mov	r19,r3
    4f14:	000c4940 	call	c494 <__muldf3>
    4f18:	180b883a 	mov	r5,r3
    4f1c:	1009883a 	mov	r4,r2
    4f20:	1823883a 	mov	r17,r3
    4f24:	1029883a 	mov	r20,r2
    4f28:	000d4880 	call	d488 <__fixdfsi>
    4f2c:	1009883a 	mov	r4,r2
    4f30:	102b883a 	mov	r21,r2
    4f34:	000d5100 	call	d510 <__floatsidf>
    4f38:	a009883a 	mov	r4,r20
    4f3c:	880b883a 	mov	r5,r17
    4f40:	100d883a 	mov	r6,r2
    4f44:	180f883a 	mov	r7,r3
    4f48:	000cbb80 	call	cbb8 <__subdf3>
    4f4c:	ad400c04 	addi	r21,r21,48
    4f50:	1009883a 	mov	r4,r2
    4f54:	180b883a 	mov	r5,r3
    4f58:	900d883a 	mov	r6,r18
    4f5c:	980f883a 	mov	r7,r19
    4f60:	85400005 	stb	r21,0(r16)
    4f64:	1023883a 	mov	r17,r2
    4f68:	1829883a 	mov	r20,r3
    4f6c:	000c3b40 	call	c3b4 <__ledf2>
    4f70:	bdc00044 	addi	r23,r23,1
    4f74:	0009883a 	mov	r4,zero
    4f78:	014ffc34 	movhi	r5,16368
    4f7c:	880d883a 	mov	r6,r17
    4f80:	a00f883a 	mov	r7,r20
    4f84:	103fcf0e 	bge	r2,zero,4ec4 <_dtoa_r+0x5e8>
    4f88:	d9801217 	ldw	r6,72(sp)
    4f8c:	dc001117 	ldw	r16,68(sp)
    4f90:	d9800515 	stw	r6,20(sp)
    4f94:	8009883a 	mov	r4,r16
    4f98:	e00b883a 	mov	r5,fp
    4f9c:	00078040 	call	7804 <_Bfree>
    4fa0:	d8c00517 	ldw	r3,20(sp)
    4fa4:	d9002317 	ldw	r4,140(sp)
    4fa8:	d9802517 	ldw	r6,148(sp)
    4fac:	b8000005 	stb	zero,0(r23)
    4fb0:	18800044 	addi	r2,r3,1
    4fb4:	20800015 	stw	r2,0(r4)
    4fb8:	30027226 	beq	r6,zero,5984 <_dtoa_r+0x10a8>
    4fbc:	35c00015 	stw	r23,0(r6)
    4fc0:	d8800717 	ldw	r2,28(sp)
    4fc4:	003e7406 	br	4998 <_dtoa_r+0xbc>
    4fc8:	00800434 	movhi	r2,16
    4fcc:	10bfffc4 	addi	r2,r2,-1
    4fd0:	a8aa703a 	and	r21,r21,r2
    4fd4:	a83e801e 	bne	r21,zero,49d8 <_dtoa_r+0xfc>
    4fd8:	00800074 	movhi	r2,1
    4fdc:	10800404 	addi	r2,r2,16
    4fe0:	003e7f06 	br	49e0 <_dtoa_r+0x104>
    4fe4:	10c00204 	addi	r3,r2,8
    4fe8:	003e8206 	br	49f4 <_dtoa_r+0x118>
    4fec:	01400434 	movhi	r5,16
    4ff0:	297fffc4 	addi	r5,r5,-1
    4ff4:	994a703a 	and	r5,r19,r5
    4ff8:	9009883a 	mov	r4,r18
    4ffc:	8c7f0044 	addi	r17,r17,-1023
    5000:	294ffc34 	orhi	r5,r5,16368
    5004:	dd000217 	ldw	r20,8(sp)
    5008:	d8000f15 	stw	zero,60(sp)
    500c:	003e9f06 	br	4a8c <_dtoa_r+0x1b0>
    5010:	00800074 	movhi	r2,1
    5014:	10bffb04 	addi	r2,r2,-20
    5018:	003e5f06 	br	4998 <_dtoa_r+0xbc>
    501c:	80001115 	stw	zero,68(r16)
    5020:	8009883a 	mov	r4,r16
    5024:	000b883a 	mov	r5,zero
    5028:	000775c0 	call	775c <_Balloc>
    502c:	01bfffc4 	movi	r6,-1
    5030:	d8800715 	stw	r2,28(sp)
    5034:	80801015 	stw	r2,64(r16)
    5038:	00800044 	movi	r2,1
    503c:	d9800615 	stw	r6,24(sp)
    5040:	d8800b15 	stw	r2,44(sp)
    5044:	d8002215 	stw	zero,136(sp)
    5048:	d9800d15 	stw	r6,52(sp)
    504c:	d8000315 	stw	zero,12(sp)
    5050:	d8800117 	ldw	r2,4(sp)
    5054:	10008e16 	blt	r2,zero,5290 <_dtoa_r+0x9b4>
    5058:	d9000517 	ldw	r4,20(sp)
    505c:	00c00384 	movi	r3,14
    5060:	19008b16 	blt	r3,r4,5290 <_dtoa_r+0x9b4>
    5064:	200490fa 	slli	r2,r4,3
    5068:	00c00074 	movhi	r3,1
    506c:	d9802217 	ldw	r6,136(sp)
    5070:	18c02204 	addi	r3,r3,136
    5074:	1885883a 	add	r2,r3,r2
    5078:	14400017 	ldw	r17,0(r2)
    507c:	15000117 	ldw	r20,4(r2)
    5080:	3001c716 	blt	r6,zero,57a0 <_dtoa_r+0xec4>
    5084:	880d883a 	mov	r6,r17
    5088:	a00f883a 	mov	r7,r20
    508c:	9009883a 	mov	r4,r18
    5090:	980b883a 	mov	r5,r19
    5094:	000b9840 	call	b984 <__divdf3>
    5098:	180b883a 	mov	r5,r3
    509c:	1009883a 	mov	r4,r2
    50a0:	000d4880 	call	d488 <__fixdfsi>
    50a4:	1009883a 	mov	r4,r2
    50a8:	102d883a 	mov	r22,r2
    50ac:	000d5100 	call	d510 <__floatsidf>
    50b0:	1009883a 	mov	r4,r2
    50b4:	180b883a 	mov	r5,r3
    50b8:	880d883a 	mov	r6,r17
    50bc:	a00f883a 	mov	r7,r20
    50c0:	000c4940 	call	c494 <__muldf3>
    50c4:	9009883a 	mov	r4,r18
    50c8:	980b883a 	mov	r5,r19
    50cc:	100d883a 	mov	r6,r2
    50d0:	180f883a 	mov	r7,r3
    50d4:	000cbb80 	call	cbb8 <__subdf3>
    50d8:	d9000717 	ldw	r4,28(sp)
    50dc:	d9800617 	ldw	r6,24(sp)
    50e0:	180b883a 	mov	r5,r3
    50e4:	b0c00c04 	addi	r3,r22,48
    50e8:	20c00005 	stb	r3,0(r4)
    50ec:	25c00044 	addi	r23,r4,1
    50f0:	01000044 	movi	r4,1
    50f4:	1011883a 	mov	r8,r2
    50f8:	2807883a 	mov	r3,r5
    50fc:	31003d26 	beq	r6,r4,51f4 <_dtoa_r+0x918>
    5100:	000d883a 	mov	r6,zero
    5104:	01d00934 	movhi	r7,16420
    5108:	1009883a 	mov	r4,r2
    510c:	000c4940 	call	c494 <__muldf3>
    5110:	1009883a 	mov	r4,r2
    5114:	180b883a 	mov	r5,r3
    5118:	000d883a 	mov	r6,zero
    511c:	000f883a 	mov	r7,zero
    5120:	1027883a 	mov	r19,r2
    5124:	182b883a 	mov	r21,r3
    5128:	000c2500 	call	c250 <__eqdf2>
    512c:	103f9926 	beq	r2,zero,4f94 <_dtoa_r+0x6b8>
    5130:	d8c00617 	ldw	r3,24(sp)
    5134:	d9000717 	ldw	r4,28(sp)
    5138:	b825883a 	mov	r18,r23
    513c:	18bfffc4 	addi	r2,r3,-1
    5140:	20ad883a 	add	r22,r4,r2
    5144:	dc000315 	stw	r16,12(sp)
    5148:	00000a06 	br	5174 <_dtoa_r+0x898>
    514c:	000c4940 	call	c494 <__muldf3>
    5150:	1009883a 	mov	r4,r2
    5154:	180b883a 	mov	r5,r3
    5158:	000d883a 	mov	r6,zero
    515c:	000f883a 	mov	r7,zero
    5160:	1027883a 	mov	r19,r2
    5164:	182b883a 	mov	r21,r3
    5168:	b825883a 	mov	r18,r23
    516c:	000c2500 	call	c250 <__eqdf2>
    5170:	10022626 	beq	r2,zero,5a0c <_dtoa_r+0x1130>
    5174:	880d883a 	mov	r6,r17
    5178:	a00f883a 	mov	r7,r20
    517c:	9809883a 	mov	r4,r19
    5180:	a80b883a 	mov	r5,r21
    5184:	000b9840 	call	b984 <__divdf3>
    5188:	180b883a 	mov	r5,r3
    518c:	1009883a 	mov	r4,r2
    5190:	000d4880 	call	d488 <__fixdfsi>
    5194:	1009883a 	mov	r4,r2
    5198:	1021883a 	mov	r16,r2
    519c:	000d5100 	call	d510 <__floatsidf>
    51a0:	1009883a 	mov	r4,r2
    51a4:	180b883a 	mov	r5,r3
    51a8:	880d883a 	mov	r6,r17
    51ac:	a00f883a 	mov	r7,r20
    51b0:	000c4940 	call	c494 <__muldf3>
    51b4:	9809883a 	mov	r4,r19
    51b8:	a80b883a 	mov	r5,r21
    51bc:	100d883a 	mov	r6,r2
    51c0:	180f883a 	mov	r7,r3
    51c4:	000cbb80 	call	cbb8 <__subdf3>
    51c8:	82000c04 	addi	r8,r16,48
    51cc:	92000005 	stb	r8,0(r18)
    51d0:	1009883a 	mov	r4,r2
    51d4:	180b883a 	mov	r5,r3
    51d8:	000d883a 	mov	r6,zero
    51dc:	01d00934 	movhi	r7,16420
    51e0:	1011883a 	mov	r8,r2
    51e4:	bdc00044 	addi	r23,r23,1
    51e8:	95bfd81e 	bne	r18,r22,514c <_dtoa_r+0x870>
    51ec:	802d883a 	mov	r22,r16
    51f0:	dc000317 	ldw	r16,12(sp)
    51f4:	4009883a 	mov	r4,r8
    51f8:	180b883a 	mov	r5,r3
    51fc:	400d883a 	mov	r6,r8
    5200:	180f883a 	mov	r7,r3
    5204:	000b0e80 	call	b0e8 <__adddf3>
    5208:	8809883a 	mov	r4,r17
    520c:	a00b883a 	mov	r5,r20
    5210:	100d883a 	mov	r6,r2
    5214:	180f883a 	mov	r7,r3
    5218:	1027883a 	mov	r19,r2
    521c:	1825883a 	mov	r18,r3
    5220:	000c3b40 	call	c3b4 <__ledf2>
    5224:	10000816 	blt	r2,zero,5248 <_dtoa_r+0x96c>
    5228:	8809883a 	mov	r4,r17
    522c:	a00b883a 	mov	r5,r20
    5230:	980d883a 	mov	r6,r19
    5234:	900f883a 	mov	r7,r18
    5238:	000c2500 	call	c250 <__eqdf2>
    523c:	103f551e 	bne	r2,zero,4f94 <_dtoa_r+0x6b8>
    5240:	b580004c 	andi	r22,r22,1
    5244:	b03f5326 	beq	r22,zero,4f94 <_dtoa_r+0x6b8>
    5248:	bd7fffc3 	ldbu	r21,-1(r23)
    524c:	b8bfffc4 	addi	r2,r23,-1
    5250:	1007883a 	mov	r3,r2
    5254:	01400e44 	movi	r5,57
    5258:	d9800717 	ldw	r6,28(sp)
    525c:	00000506 	br	5274 <_dtoa_r+0x998>
    5260:	18ffffc4 	addi	r3,r3,-1
    5264:	30825e26 	beq	r6,r2,5be0 <_dtoa_r+0x1304>
    5268:	1d400003 	ldbu	r21,0(r3)
    526c:	102f883a 	mov	r23,r2
    5270:	10bfffc4 	addi	r2,r2,-1
    5274:	a9003fcc 	andi	r4,r21,255
    5278:	2100201c 	xori	r4,r4,128
    527c:	213fe004 	addi	r4,r4,-128
    5280:	217ff726 	beq	r4,r5,5260 <_dtoa_r+0x984>
    5284:	aa000044 	addi	r8,r21,1
    5288:	12000005 	stb	r8,0(r2)
    528c:	003f4106 	br	4f94 <_dtoa_r+0x6b8>
    5290:	d8c00b17 	ldw	r3,44(sp)
    5294:	18006726 	beq	r3,zero,5434 <_dtoa_r+0xb58>
    5298:	d9000317 	ldw	r4,12(sp)
    529c:	00c00044 	movi	r3,1
    52a0:	19016a0e 	bge	r3,r4,584c <_dtoa_r+0xf70>
    52a4:	d8800617 	ldw	r2,24(sp)
    52a8:	d8c00917 	ldw	r3,36(sp)
    52ac:	157fffc4 	addi	r21,r2,-1
    52b0:	1d420716 	blt	r3,r21,5ad0 <_dtoa_r+0x11f4>
    52b4:	1d6bc83a 	sub	r21,r3,r21
    52b8:	d8800617 	ldw	r2,24(sp)
    52bc:	1002c716 	blt	r2,zero,5ddc <_dtoa_r+0x1500>
    52c0:	dd000817 	ldw	r20,32(sp)
    52c4:	d8800617 	ldw	r2,24(sp)
    52c8:	d9800817 	ldw	r6,32(sp)
    52cc:	8009883a 	mov	r4,r16
    52d0:	01400044 	movi	r5,1
    52d4:	308d883a 	add	r6,r6,r2
    52d8:	d9800815 	stw	r6,32(sp)
    52dc:	b0ad883a 	add	r22,r22,r2
    52e0:	0007b5c0 	call	7b5c <__i2b>
    52e4:	1023883a 	mov	r17,r2
    52e8:	a0000826 	beq	r20,zero,530c <_dtoa_r+0xa30>
    52ec:	0580070e 	bge	zero,r22,530c <_dtoa_r+0xa30>
    52f0:	b005883a 	mov	r2,r22
    52f4:	a5812016 	blt	r20,r22,5778 <_dtoa_r+0xe9c>
    52f8:	d8c00817 	ldw	r3,32(sp)
    52fc:	a0a9c83a 	sub	r20,r20,r2
    5300:	b0adc83a 	sub	r22,r22,r2
    5304:	1887c83a 	sub	r3,r3,r2
    5308:	d8c00815 	stw	r3,32(sp)
    530c:	d9000917 	ldw	r4,36(sp)
    5310:	0100140e 	bge	zero,r4,5364 <_dtoa_r+0xa88>
    5314:	d9800b17 	ldw	r6,44(sp)
    5318:	3001e526 	beq	r6,zero,5ab0 <_dtoa_r+0x11d4>
    531c:	05400e0e 	bge	zero,r21,5358 <_dtoa_r+0xa7c>
    5320:	880b883a 	mov	r5,r17
    5324:	8009883a 	mov	r4,r16
    5328:	a80d883a 	mov	r6,r21
    532c:	0007d940 	call	7d94 <__pow5mult>
    5330:	e00d883a 	mov	r6,fp
    5334:	8009883a 	mov	r4,r16
    5338:	100b883a 	mov	r5,r2
    533c:	1023883a 	mov	r17,r2
    5340:	0007b980 	call	7b98 <__multiply>
    5344:	102f883a 	mov	r23,r2
    5348:	e00b883a 	mov	r5,fp
    534c:	8009883a 	mov	r4,r16
    5350:	00078040 	call	7804 <_Bfree>
    5354:	b839883a 	mov	fp,r23
    5358:	d8800917 	ldw	r2,36(sp)
    535c:	154dc83a 	sub	r6,r2,r21
    5360:	3001281e 	bne	r6,zero,5804 <_dtoa_r+0xf28>
    5364:	05c00044 	movi	r23,1
    5368:	8009883a 	mov	r4,r16
    536c:	b80b883a 	mov	r5,r23
    5370:	0007b5c0 	call	7b5c <__i2b>
    5374:	d8c00a17 	ldw	r3,40(sp)
    5378:	102b883a 	mov	r21,r2
    537c:	00c0310e 	bge	zero,r3,5444 <_dtoa_r+0xb68>
    5380:	8009883a 	mov	r4,r16
    5384:	100b883a 	mov	r5,r2
    5388:	180d883a 	mov	r6,r3
    538c:	0007d940 	call	7d94 <__pow5mult>
    5390:	d9000317 	ldw	r4,12(sp)
    5394:	102b883a 	mov	r21,r2
    5398:	b9011f0e 	bge	r23,r4,5818 <_dtoa_r+0xf3c>
    539c:	0027883a 	mov	r19,zero
    53a0:	a8800417 	ldw	r2,16(r21)
    53a4:	10800104 	addi	r2,r2,4
    53a8:	1085883a 	add	r2,r2,r2
    53ac:	1085883a 	add	r2,r2,r2
    53b0:	a885883a 	add	r2,r21,r2
    53b4:	11000017 	ldw	r4,0(r2)
    53b8:	0007a440 	call	7a44 <__hi0bits>
    53bc:	00c00804 	movi	r3,32
    53c0:	1885c83a 	sub	r2,r3,r2
    53c4:	00002506 	br	545c <_dtoa_r+0xb80>
    53c8:	01800044 	movi	r6,1
    53cc:	d9800c15 	stw	r6,48(sp)
    53d0:	003dec06 	br	4b84 <_dtoa_r+0x2a8>
    53d4:	d8c00817 	ldw	r3,32(sp)
    53d8:	d9000517 	ldw	r4,20(sp)
    53dc:	d8000a15 	stw	zero,40(sp)
    53e0:	1907c83a 	sub	r3,r3,r4
    53e4:	010dc83a 	sub	r6,zero,r4
    53e8:	d8c00815 	stw	r3,32(sp)
    53ec:	d9800915 	stw	r6,36(sp)
    53f0:	003ded06 	br	4ba8 <_dtoa_r+0x2cc>
    53f4:	05adc83a 	sub	r22,zero,r22
    53f8:	dd800815 	stw	r22,32(sp)
    53fc:	002d883a 	mov	r22,zero
    5400:	003de406 	br	4b94 <_dtoa_r+0x2b8>
    5404:	d9000517 	ldw	r4,20(sp)
    5408:	000d5100 	call	d510 <__floatsidf>
    540c:	1009883a 	mov	r4,r2
    5410:	180b883a 	mov	r5,r3
    5414:	b00d883a 	mov	r6,r22
    5418:	a80f883a 	mov	r7,r21
    541c:	000c2500 	call	c250 <__eqdf2>
    5420:	103dc726 	beq	r2,zero,4b40 <_dtoa_r+0x264>
    5424:	d8800517 	ldw	r2,20(sp)
    5428:	10bfffc4 	addi	r2,r2,-1
    542c:	d8800515 	stw	r2,20(sp)
    5430:	003dc306 	br	4b40 <_dtoa_r+0x264>
    5434:	dd400917 	ldw	r21,36(sp)
    5438:	dd000817 	ldw	r20,32(sp)
    543c:	0023883a 	mov	r17,zero
    5440:	003fa906 	br	52e8 <_dtoa_r+0xa0c>
    5444:	d9800317 	ldw	r6,12(sp)
    5448:	b981670e 	bge	r23,r6,59e8 <_dtoa_r+0x110c>
    544c:	0027883a 	mov	r19,zero
    5450:	d8c00a17 	ldw	r3,40(sp)
    5454:	183fd21e 	bne	r3,zero,53a0 <_dtoa_r+0xac4>
    5458:	00800044 	movi	r2,1
    545c:	1585883a 	add	r2,r2,r22
    5460:	108007cc 	andi	r2,r2,31
    5464:	10005f26 	beq	r2,zero,55e4 <_dtoa_r+0xd08>
    5468:	00c00804 	movi	r3,32
    546c:	1887c83a 	sub	r3,r3,r2
    5470:	01000104 	movi	r4,4
    5474:	20c2dd0e 	bge	r4,r3,5fec <_dtoa_r+0x1710>
    5478:	d9000817 	ldw	r4,32(sp)
    547c:	00c00704 	movi	r3,28
    5480:	1885c83a 	sub	r2,r3,r2
    5484:	2089883a 	add	r4,r4,r2
    5488:	d9000815 	stw	r4,32(sp)
    548c:	a0a9883a 	add	r20,r20,r2
    5490:	b0ad883a 	add	r22,r22,r2
    5494:	d8800817 	ldw	r2,32(sp)
    5498:	0080050e 	bge	zero,r2,54b0 <_dtoa_r+0xbd4>
    549c:	e00b883a 	mov	r5,fp
    54a0:	8009883a 	mov	r4,r16
    54a4:	100d883a 	mov	r6,r2
    54a8:	0007ed40 	call	7ed4 <__lshift>
    54ac:	1039883a 	mov	fp,r2
    54b0:	0580050e 	bge	zero,r22,54c8 <_dtoa_r+0xbec>
    54b4:	a80b883a 	mov	r5,r21
    54b8:	8009883a 	mov	r4,r16
    54bc:	b00d883a 	mov	r6,r22
    54c0:	0007ed40 	call	7ed4 <__lshift>
    54c4:	102b883a 	mov	r21,r2
    54c8:	d8c00c17 	ldw	r3,48(sp)
    54cc:	1801161e 	bne	r3,zero,5928 <_dtoa_r+0x104c>
    54d0:	d8c00617 	ldw	r3,24(sp)
    54d4:	00c12d0e 	bge	zero,r3,598c <_dtoa_r+0x10b0>
    54d8:	d8c00b17 	ldw	r3,44(sp)
    54dc:	1800571e 	bne	r3,zero,563c <_dtoa_r+0xd60>
    54e0:	dc800717 	ldw	r18,28(sp)
    54e4:	dcc00617 	ldw	r19,24(sp)
    54e8:	9029883a 	mov	r20,r18
    54ec:	00000206 	br	54f8 <_dtoa_r+0xc1c>
    54f0:	000782c0 	call	782c <__multadd>
    54f4:	1039883a 	mov	fp,r2
    54f8:	e009883a 	mov	r4,fp
    54fc:	a80b883a 	mov	r5,r21
    5500:	00046dc0 	call	46dc <quorem>
    5504:	10800c04 	addi	r2,r2,48
    5508:	90800005 	stb	r2,0(r18)
    550c:	94800044 	addi	r18,r18,1
    5510:	9507c83a 	sub	r3,r18,r20
    5514:	8009883a 	mov	r4,r16
    5518:	e00b883a 	mov	r5,fp
    551c:	01800284 	movi	r6,10
    5520:	000f883a 	mov	r7,zero
    5524:	1cfff216 	blt	r3,r19,54f0 <_dtoa_r+0xc14>
    5528:	1011883a 	mov	r8,r2
    552c:	d8800617 	ldw	r2,24(sp)
    5530:	00822e0e 	bge	zero,r2,5dec <_dtoa_r+0x1510>
    5534:	d9000717 	ldw	r4,28(sp)
    5538:	0025883a 	mov	r18,zero
    553c:	20af883a 	add	r23,r4,r2
    5540:	e00b883a 	mov	r5,fp
    5544:	01800044 	movi	r6,1
    5548:	8009883a 	mov	r4,r16
    554c:	da001715 	stw	r8,92(sp)
    5550:	0007ed40 	call	7ed4 <__lshift>
    5554:	1009883a 	mov	r4,r2
    5558:	a80b883a 	mov	r5,r21
    555c:	1039883a 	mov	fp,r2
    5560:	000801c0 	call	801c <__mcmp>
    5564:	da001717 	ldw	r8,92(sp)
    5568:	00816e0e 	bge	zero,r2,5b24 <_dtoa_r+0x1248>
    556c:	b93fffc3 	ldbu	r4,-1(r23)
    5570:	b8bfffc4 	addi	r2,r23,-1
    5574:	1007883a 	mov	r3,r2
    5578:	01800e44 	movi	r6,57
    557c:	d9c00717 	ldw	r7,28(sp)
    5580:	00000506 	br	5598 <_dtoa_r+0xcbc>
    5584:	18ffffc4 	addi	r3,r3,-1
    5588:	38811926 	beq	r7,r2,59f0 <_dtoa_r+0x1114>
    558c:	19000003 	ldbu	r4,0(r3)
    5590:	102f883a 	mov	r23,r2
    5594:	10bfffc4 	addi	r2,r2,-1
    5598:	21403fcc 	andi	r5,r4,255
    559c:	2940201c 	xori	r5,r5,128
    55a0:	297fe004 	addi	r5,r5,-128
    55a4:	29bff726 	beq	r5,r6,5584 <_dtoa_r+0xca8>
    55a8:	21000044 	addi	r4,r4,1
    55ac:	11000005 	stb	r4,0(r2)
    55b0:	8009883a 	mov	r4,r16
    55b4:	a80b883a 	mov	r5,r21
    55b8:	00078040 	call	7804 <_Bfree>
    55bc:	883e7526 	beq	r17,zero,4f94 <_dtoa_r+0x6b8>
    55c0:	90000426 	beq	r18,zero,55d4 <_dtoa_r+0xcf8>
    55c4:	94400326 	beq	r18,r17,55d4 <_dtoa_r+0xcf8>
    55c8:	8009883a 	mov	r4,r16
    55cc:	900b883a 	mov	r5,r18
    55d0:	00078040 	call	7804 <_Bfree>
    55d4:	8009883a 	mov	r4,r16
    55d8:	880b883a 	mov	r5,r17
    55dc:	00078040 	call	7804 <_Bfree>
    55e0:	003e6c06 	br	4f94 <_dtoa_r+0x6b8>
    55e4:	00800704 	movi	r2,28
    55e8:	d9800817 	ldw	r6,32(sp)
    55ec:	a0a9883a 	add	r20,r20,r2
    55f0:	b0ad883a 	add	r22,r22,r2
    55f4:	308d883a 	add	r6,r6,r2
    55f8:	d9800815 	stw	r6,32(sp)
    55fc:	003fa506 	br	5494 <_dtoa_r+0xbb8>
    5600:	013efb84 	movi	r4,-1042
    5604:	246bc83a 	sub	r21,r4,r17
    5608:	9548983a 	sll	r4,r18,r21
    560c:	003d1806 	br	4a70 <_dtoa_r+0x194>
    5610:	d8000c15 	stw	zero,48(sp)
    5614:	003d5b06 	br	4b84 <_dtoa_r+0x2a8>
    5618:	880b883a 	mov	r5,r17
    561c:	8009883a 	mov	r4,r16
    5620:	01800284 	movi	r6,10
    5624:	000f883a 	mov	r7,zero
    5628:	000782c0 	call	782c <__multadd>
    562c:	1023883a 	mov	r17,r2
    5630:	d8800d17 	ldw	r2,52(sp)
    5634:	0082550e 	bge	zero,r2,5f8c <_dtoa_r+0x16b0>
    5638:	d8800615 	stw	r2,24(sp)
    563c:	0500050e 	bge	zero,r20,5654 <_dtoa_r+0xd78>
    5640:	880b883a 	mov	r5,r17
    5644:	8009883a 	mov	r4,r16
    5648:	a00d883a 	mov	r6,r20
    564c:	0007ed40 	call	7ed4 <__lshift>
    5650:	1023883a 	mov	r17,r2
    5654:	98016a1e 	bne	r19,zero,5c00 <_dtoa_r+0x1324>
    5658:	8829883a 	mov	r20,r17
    565c:	d9000617 	ldw	r4,24(sp)
    5660:	dcc00717 	ldw	r19,28(sp)
    5664:	9480004c 	andi	r18,r18,1
    5668:	20bfffc4 	addi	r2,r4,-1
    566c:	9885883a 	add	r2,r19,r2
    5670:	d8800415 	stw	r2,16(sp)
    5674:	dc800615 	stw	r18,24(sp)
    5678:	e009883a 	mov	r4,fp
    567c:	a80b883a 	mov	r5,r21
    5680:	00046dc0 	call	46dc <quorem>
    5684:	e009883a 	mov	r4,fp
    5688:	880b883a 	mov	r5,r17
    568c:	102f883a 	mov	r23,r2
    5690:	000801c0 	call	801c <__mcmp>
    5694:	8009883a 	mov	r4,r16
    5698:	a80b883a 	mov	r5,r21
    569c:	a00d883a 	mov	r6,r20
    56a0:	102d883a 	mov	r22,r2
    56a4:	000807c0 	call	807c <__mdiff>
    56a8:	1007883a 	mov	r3,r2
    56ac:	10800317 	ldw	r2,12(r2)
    56b0:	bc800c04 	addi	r18,r23,48
    56b4:	1000971e 	bne	r2,zero,5914 <_dtoa_r+0x1038>
    56b8:	180b883a 	mov	r5,r3
    56bc:	e009883a 	mov	r4,fp
    56c0:	d8c01515 	stw	r3,84(sp)
    56c4:	000801c0 	call	801c <__mcmp>
    56c8:	d8c01517 	ldw	r3,84(sp)
    56cc:	8009883a 	mov	r4,r16
    56d0:	d8801515 	stw	r2,84(sp)
    56d4:	180b883a 	mov	r5,r3
    56d8:	00078040 	call	7804 <_Bfree>
    56dc:	d8801517 	ldw	r2,84(sp)
    56e0:	1000041e 	bne	r2,zero,56f4 <_dtoa_r+0xe18>
    56e4:	d9800317 	ldw	r6,12(sp)
    56e8:	3000021e 	bne	r6,zero,56f4 <_dtoa_r+0xe18>
    56ec:	d8c00617 	ldw	r3,24(sp)
    56f0:	18007626 	beq	r3,zero,58cc <_dtoa_r+0xff0>
    56f4:	b0005b16 	blt	r22,zero,5864 <_dtoa_r+0xf88>
    56f8:	b000041e 	bne	r22,zero,570c <_dtoa_r+0xe30>
    56fc:	d9000317 	ldw	r4,12(sp)
    5700:	2000021e 	bne	r4,zero,570c <_dtoa_r+0xe30>
    5704:	d8c00617 	ldw	r3,24(sp)
    5708:	18005626 	beq	r3,zero,5864 <_dtoa_r+0xf88>
    570c:	00814d16 	blt	zero,r2,5c44 <_dtoa_r+0x1368>
    5710:	d8c00417 	ldw	r3,16(sp)
    5714:	9d800044 	addi	r22,r19,1
    5718:	9c800005 	stb	r18,0(r19)
    571c:	b02f883a 	mov	r23,r22
    5720:	98c14c26 	beq	r19,r3,5c54 <_dtoa_r+0x1378>
    5724:	e00b883a 	mov	r5,fp
    5728:	8009883a 	mov	r4,r16
    572c:	01800284 	movi	r6,10
    5730:	000f883a 	mov	r7,zero
    5734:	000782c0 	call	782c <__multadd>
    5738:	1039883a 	mov	fp,r2
    573c:	8d006d26 	beq	r17,r20,58f4 <_dtoa_r+0x1018>
    5740:	880b883a 	mov	r5,r17
    5744:	01800284 	movi	r6,10
    5748:	000f883a 	mov	r7,zero
    574c:	8009883a 	mov	r4,r16
    5750:	000782c0 	call	782c <__multadd>
    5754:	a00b883a 	mov	r5,r20
    5758:	8009883a 	mov	r4,r16
    575c:	01800284 	movi	r6,10
    5760:	000f883a 	mov	r7,zero
    5764:	1023883a 	mov	r17,r2
    5768:	000782c0 	call	782c <__multadd>
    576c:	1029883a 	mov	r20,r2
    5770:	b027883a 	mov	r19,r22
    5774:	003fc006 	br	5678 <_dtoa_r+0xd9c>
    5778:	a005883a 	mov	r2,r20
    577c:	003ede06 	br	52f8 <_dtoa_r+0xa1c>
    5780:	01000044 	movi	r4,1
    5784:	d9000b15 	stw	r4,44(sp)
    5788:	d9802217 	ldw	r6,136(sp)
    578c:	0180dc0e 	bge	zero,r6,5b00 <_dtoa_r+0x1224>
    5790:	3023883a 	mov	r17,r6
    5794:	d9800d15 	stw	r6,52(sp)
    5798:	d9800615 	stw	r6,24(sp)
    579c:	003d1e06 	br	4c18 <_dtoa_r+0x33c>
    57a0:	d8800617 	ldw	r2,24(sp)
    57a4:	00be3716 	blt	zero,r2,5084 <_dtoa_r+0x7a8>
    57a8:	1000be1e 	bne	r2,zero,5aa4 <_dtoa_r+0x11c8>
    57ac:	8809883a 	mov	r4,r17
    57b0:	a00b883a 	mov	r5,r20
    57b4:	000d883a 	mov	r6,zero
    57b8:	01d00534 	movhi	r7,16404
    57bc:	000c4940 	call	c494 <__muldf3>
    57c0:	1009883a 	mov	r4,r2
    57c4:	180b883a 	mov	r5,r3
    57c8:	900d883a 	mov	r6,r18
    57cc:	980f883a 	mov	r7,r19
    57d0:	000c2d40 	call	c2d4 <__gedf2>
    57d4:	002b883a 	mov	r21,zero
    57d8:	0023883a 	mov	r17,zero
    57dc:	10007a16 	blt	r2,zero,59c8 <_dtoa_r+0x10ec>
    57e0:	d9002217 	ldw	r4,136(sp)
    57e4:	ddc00717 	ldw	r23,28(sp)
    57e8:	0108303a 	nor	r4,zero,r4
    57ec:	d9000515 	stw	r4,20(sp)
    57f0:	8009883a 	mov	r4,r16
    57f4:	a80b883a 	mov	r5,r21
    57f8:	00078040 	call	7804 <_Bfree>
    57fc:	883f751e 	bne	r17,zero,55d4 <_dtoa_r+0xcf8>
    5800:	003de406 	br	4f94 <_dtoa_r+0x6b8>
    5804:	e00b883a 	mov	r5,fp
    5808:	8009883a 	mov	r4,r16
    580c:	0007d940 	call	7d94 <__pow5mult>
    5810:	1039883a 	mov	fp,r2
    5814:	003ed306 	br	5364 <_dtoa_r+0xa88>
    5818:	903ee01e 	bne	r18,zero,539c <_dtoa_r+0xac0>
    581c:	00800434 	movhi	r2,16
    5820:	10bfffc4 	addi	r2,r2,-1
    5824:	9884703a 	and	r2,r19,r2
    5828:	103f081e 	bne	r2,zero,544c <_dtoa_r+0xb70>
    582c:	9cdffc2c 	andhi	r19,r19,32752
    5830:	983f0626 	beq	r19,zero,544c <_dtoa_r+0xb70>
    5834:	d8800817 	ldw	r2,32(sp)
    5838:	b5800044 	addi	r22,r22,1
    583c:	04c00044 	movi	r19,1
    5840:	10800044 	addi	r2,r2,1
    5844:	d8800815 	stw	r2,32(sp)
    5848:	003f0106 	br	5450 <_dtoa_r+0xb74>
    584c:	d9800f17 	ldw	r6,60(sp)
    5850:	30016826 	beq	r6,zero,5df4 <_dtoa_r+0x1518>
    5854:	10810cc4 	addi	r2,r2,1075
    5858:	dd400917 	ldw	r21,36(sp)
    585c:	dd000817 	ldw	r20,32(sp)
    5860:	003e9906 	br	52c8 <_dtoa_r+0x9ec>
    5864:	9011883a 	mov	r8,r18
    5868:	4007883a 	mov	r3,r8
    586c:	e02d883a 	mov	r22,fp
    5870:	0080100e 	bge	zero,r2,58b4 <_dtoa_r+0xfd8>
    5874:	01800044 	movi	r6,1
    5878:	8009883a 	mov	r4,r16
    587c:	e00b883a 	mov	r5,fp
    5880:	da001515 	stw	r8,84(sp)
    5884:	da001715 	stw	r8,92(sp)
    5888:	0007ed40 	call	7ed4 <__lshift>
    588c:	1009883a 	mov	r4,r2
    5890:	a80b883a 	mov	r5,r21
    5894:	102d883a 	mov	r22,r2
    5898:	000801c0 	call	801c <__mcmp>
    589c:	d8c01517 	ldw	r3,84(sp)
    58a0:	da001717 	ldw	r8,92(sp)
    58a4:	0081a50e 	bge	zero,r2,5f3c <_dtoa_r+0x1660>
    58a8:	00800e44 	movi	r2,57
    58ac:	40817b26 	beq	r8,r2,5e9c <_dtoa_r+0x15c0>
    58b0:	40c00044 	addi	r3,r8,1
    58b4:	8825883a 	mov	r18,r17
    58b8:	9dc00044 	addi	r23,r19,1
    58bc:	98c00005 	stb	r3,0(r19)
    58c0:	a023883a 	mov	r17,r20
    58c4:	b039883a 	mov	fp,r22
    58c8:	003f3906 	br	55b0 <_dtoa_r+0xcd4>
    58cc:	00800e44 	movi	r2,57
    58d0:	9011883a 	mov	r8,r18
    58d4:	90817226 	beq	r18,r2,5ea0 <_dtoa_r+0x15c4>
    58d8:	0580010e 	bge	zero,r22,58e0 <_dtoa_r+0x1004>
    58dc:	ba000c44 	addi	r8,r23,49
    58e0:	8825883a 	mov	r18,r17
    58e4:	9dc00044 	addi	r23,r19,1
    58e8:	9a000005 	stb	r8,0(r19)
    58ec:	a023883a 	mov	r17,r20
    58f0:	003f2f06 	br	55b0 <_dtoa_r+0xcd4>
    58f4:	880b883a 	mov	r5,r17
    58f8:	8009883a 	mov	r4,r16
    58fc:	01800284 	movi	r6,10
    5900:	000f883a 	mov	r7,zero
    5904:	000782c0 	call	782c <__multadd>
    5908:	1023883a 	mov	r17,r2
    590c:	1029883a 	mov	r20,r2
    5910:	003f9706 	br	5770 <_dtoa_r+0xe94>
    5914:	8009883a 	mov	r4,r16
    5918:	180b883a 	mov	r5,r3
    591c:	00078040 	call	7804 <_Bfree>
    5920:	00800044 	movi	r2,1
    5924:	003f7306 	br	56f4 <_dtoa_r+0xe18>
    5928:	e009883a 	mov	r4,fp
    592c:	a80b883a 	mov	r5,r21
    5930:	000801c0 	call	801c <__mcmp>
    5934:	103ee60e 	bge	r2,zero,54d0 <_dtoa_r+0xbf4>
    5938:	8009883a 	mov	r4,r16
    593c:	e00b883a 	mov	r5,fp
    5940:	01800284 	movi	r6,10
    5944:	000f883a 	mov	r7,zero
    5948:	000782c0 	call	782c <__multadd>
    594c:	d9000517 	ldw	r4,20(sp)
    5950:	d9800b17 	ldw	r6,44(sp)
    5954:	1039883a 	mov	fp,r2
    5958:	213fffc4 	addi	r4,r4,-1
    595c:	d9000515 	stw	r4,20(sp)
    5960:	303f2d1e 	bne	r6,zero,5618 <_dtoa_r+0xd3c>
    5964:	d9000d17 	ldw	r4,52(sp)
    5968:	0101780e 	bge	zero,r4,5f4c <_dtoa_r+0x1670>
    596c:	d9000615 	stw	r4,24(sp)
    5970:	003edb06 	br	54e0 <_dtoa_r+0xc04>
    5974:	00800084 	movi	r2,2
    5978:	30818e1e 	bne	r6,r2,5fb4 <_dtoa_r+0x16d8>
    597c:	d8000b15 	stw	zero,44(sp)
    5980:	003f8106 	br	5788 <_dtoa_r+0xeac>
    5984:	d8800717 	ldw	r2,28(sp)
    5988:	003c0306 	br	4998 <_dtoa_r+0xbc>
    598c:	d9000317 	ldw	r4,12(sp)
    5990:	00800084 	movi	r2,2
    5994:	113ed00e 	bge	r2,r4,54d8 <_dtoa_r+0xbfc>
    5998:	d8c00617 	ldw	r3,24(sp)
    599c:	183f901e 	bne	r3,zero,57e0 <_dtoa_r+0xf04>
    59a0:	a80b883a 	mov	r5,r21
    59a4:	8009883a 	mov	r4,r16
    59a8:	01800144 	movi	r6,5
    59ac:	000f883a 	mov	r7,zero
    59b0:	000782c0 	call	782c <__multadd>
    59b4:	e009883a 	mov	r4,fp
    59b8:	100b883a 	mov	r5,r2
    59bc:	102b883a 	mov	r21,r2
    59c0:	000801c0 	call	801c <__mcmp>
    59c4:	00bf860e 	bge	zero,r2,57e0 <_dtoa_r+0xf04>
    59c8:	d9800717 	ldw	r6,28(sp)
    59cc:	00800c44 	movi	r2,49
    59d0:	30800005 	stb	r2,0(r6)
    59d4:	d8800517 	ldw	r2,20(sp)
    59d8:	35c00044 	addi	r23,r6,1
    59dc:	10800044 	addi	r2,r2,1
    59e0:	d8800515 	stw	r2,20(sp)
    59e4:	003f8206 	br	57f0 <_dtoa_r+0xf14>
    59e8:	903e981e 	bne	r18,zero,544c <_dtoa_r+0xb70>
    59ec:	003f8b06 	br	581c <_dtoa_r+0xf40>
    59f0:	d9800517 	ldw	r6,20(sp)
    59f4:	d8c00717 	ldw	r3,28(sp)
    59f8:	00800c44 	movi	r2,49
    59fc:	31800044 	addi	r6,r6,1
    5a00:	d9800515 	stw	r6,20(sp)
    5a04:	18800005 	stb	r2,0(r3)
    5a08:	003ee906 	br	55b0 <_dtoa_r+0xcd4>
    5a0c:	dc000317 	ldw	r16,12(sp)
    5a10:	003d6006 	br	4f94 <_dtoa_r+0x6b8>
    5a14:	8809883a 	mov	r4,r17
    5a18:	000d5100 	call	d510 <__floatsidf>
    5a1c:	a009883a 	mov	r4,r20
    5a20:	a80b883a 	mov	r5,r21
    5a24:	100d883a 	mov	r6,r2
    5a28:	180f883a 	mov	r7,r3
    5a2c:	000c4940 	call	c494 <__muldf3>
    5a30:	1009883a 	mov	r4,r2
    5a34:	180b883a 	mov	r5,r3
    5a38:	000d883a 	mov	r6,zero
    5a3c:	01d00734 	movhi	r7,16412
    5a40:	000b0e80 	call	b0e8 <__adddf3>
    5a44:	1023883a 	mov	r17,r2
    5a48:	00bf3034 	movhi	r2,64704
    5a4c:	1885883a 	add	r2,r3,r2
    5a50:	d8800e15 	stw	r2,56(sp)
    5a54:	a009883a 	mov	r4,r20
    5a58:	a80b883a 	mov	r5,r21
    5a5c:	000d883a 	mov	r6,zero
    5a60:	01d00534 	movhi	r7,16404
    5a64:	000cbb80 	call	cbb8 <__subdf3>
    5a68:	d9c00e17 	ldw	r7,56(sp)
    5a6c:	1009883a 	mov	r4,r2
    5a70:	180b883a 	mov	r5,r3
    5a74:	880d883a 	mov	r6,r17
    5a78:	102b883a 	mov	r21,r2
    5a7c:	1829883a 	mov	r20,r3
    5a80:	000c2d40 	call	c2d4 <__gedf2>
    5a84:	00807716 	blt	zero,r2,5c64 <_dtoa_r+0x1388>
    5a88:	d8800e17 	ldw	r2,56(sp)
    5a8c:	a809883a 	mov	r4,r21
    5a90:	a00b883a 	mov	r5,r20
    5a94:	11e0003c 	xorhi	r7,r2,32768
    5a98:	880d883a 	mov	r6,r17
    5a9c:	000c3b40 	call	c3b4 <__ledf2>
    5aa0:	103d6b0e 	bge	r2,zero,5050 <_dtoa_r+0x774>
    5aa4:	002b883a 	mov	r21,zero
    5aa8:	0023883a 	mov	r17,zero
    5aac:	003f4c06 	br	57e0 <_dtoa_r+0xf04>
    5ab0:	d9800917 	ldw	r6,36(sp)
    5ab4:	e00b883a 	mov	r5,fp
    5ab8:	8009883a 	mov	r4,r16
    5abc:	0007d940 	call	7d94 <__pow5mult>
    5ac0:	1039883a 	mov	fp,r2
    5ac4:	003e2706 	br	5364 <_dtoa_r+0xa88>
    5ac8:	d8000b15 	stw	zero,44(sp)
    5acc:	003c4906 	br	4bf4 <_dtoa_r+0x318>
    5ad0:	d9000917 	ldw	r4,36(sp)
    5ad4:	d9800a17 	ldw	r6,40(sp)
    5ad8:	dd400915 	stw	r21,36(sp)
    5adc:	a905c83a 	sub	r2,r21,r4
    5ae0:	308d883a 	add	r6,r6,r2
    5ae4:	d9800a15 	stw	r6,40(sp)
    5ae8:	002b883a 	mov	r21,zero
    5aec:	003df206 	br	52b8 <_dtoa_r+0x9dc>
    5af0:	dc800e15 	stw	r18,56(sp)
    5af4:	982b883a 	mov	r21,r19
    5af8:	04400084 	movi	r17,2
    5afc:	003c7406 	br	4cd0 <_dtoa_r+0x3f4>
    5b00:	04400044 	movi	r17,1
    5b04:	dc400d15 	stw	r17,52(sp)
    5b08:	dc400615 	stw	r17,24(sp)
    5b0c:	dc402215 	stw	r17,136(sp)
    5b10:	80001115 	stw	zero,68(r16)
    5b14:	000b883a 	mov	r5,zero
    5b18:	003c4a06 	br	4c44 <_dtoa_r+0x368>
    5b1c:	3023883a 	mov	r17,r6
    5b20:	003ffb06 	br	5b10 <_dtoa_r+0x1234>
    5b24:	1000021e 	bne	r2,zero,5b30 <_dtoa_r+0x1254>
    5b28:	4200004c 	andi	r8,r8,1
    5b2c:	403e8f1e 	bne	r8,zero,556c <_dtoa_r+0xc90>
    5b30:	01000c04 	movi	r4,48
    5b34:	00000106 	br	5b3c <_dtoa_r+0x1260>
    5b38:	102f883a 	mov	r23,r2
    5b3c:	b8bfffc4 	addi	r2,r23,-1
    5b40:	10c00007 	ldb	r3,0(r2)
    5b44:	193ffc26 	beq	r3,r4,5b38 <_dtoa_r+0x125c>
    5b48:	003e9906 	br	55b0 <_dtoa_r+0xcd4>
    5b4c:	d9000517 	ldw	r4,20(sp)
    5b50:	012fc83a 	sub	r23,zero,r4
    5b54:	b800ad26 	beq	r23,zero,5e0c <_dtoa_r+0x1530>
    5b58:	b88003cc 	andi	r2,r23,15
    5b5c:	100490fa 	slli	r2,r2,3
    5b60:	00c00074 	movhi	r3,1
    5b64:	18c02204 	addi	r3,r3,136
    5b68:	1885883a 	add	r2,r3,r2
    5b6c:	11800017 	ldw	r6,0(r2)
    5b70:	11c00117 	ldw	r7,4(r2)
    5b74:	b82fd13a 	srai	r23,r23,4
    5b78:	9009883a 	mov	r4,r18
    5b7c:	980b883a 	mov	r5,r19
    5b80:	000c4940 	call	c494 <__muldf3>
    5b84:	1029883a 	mov	r20,r2
    5b88:	182b883a 	mov	r21,r3
    5b8c:	b800f426 	beq	r23,zero,5f60 <_dtoa_r+0x1684>
    5b90:	02000074 	movhi	r8,1
    5b94:	42001804 	addi	r8,r8,96
    5b98:	8029883a 	mov	r20,r16
    5b9c:	04400084 	movi	r17,2
    5ba0:	4021883a 	mov	r16,r8
    5ba4:	b980004c 	andi	r6,r23,1
    5ba8:	1009883a 	mov	r4,r2
    5bac:	b82fd07a 	srai	r23,r23,1
    5bb0:	180b883a 	mov	r5,r3
    5bb4:	30000426 	beq	r6,zero,5bc8 <_dtoa_r+0x12ec>
    5bb8:	81800017 	ldw	r6,0(r16)
    5bbc:	81c00117 	ldw	r7,4(r16)
    5bc0:	8c400044 	addi	r17,r17,1
    5bc4:	000c4940 	call	c494 <__muldf3>
    5bc8:	84000204 	addi	r16,r16,8
    5bcc:	b83ff51e 	bne	r23,zero,5ba4 <_dtoa_r+0x12c8>
    5bd0:	a021883a 	mov	r16,r20
    5bd4:	182b883a 	mov	r21,r3
    5bd8:	1029883a 	mov	r20,r2
    5bdc:	003c5506 	br	4d34 <_dtoa_r+0x458>
    5be0:	d9800517 	ldw	r6,20(sp)
    5be4:	d9000717 	ldw	r4,28(sp)
    5be8:	00c00c04 	movi	r3,48
    5bec:	31800044 	addi	r6,r6,1
    5bf0:	d9800515 	stw	r6,20(sp)
    5bf4:	20c00005 	stb	r3,0(r4)
    5bf8:	02000c44 	movi	r8,49
    5bfc:	003da206 	br	5288 <_dtoa_r+0x9ac>
    5c00:	89400117 	ldw	r5,4(r17)
    5c04:	8009883a 	mov	r4,r16
    5c08:	000775c0 	call	775c <_Balloc>
    5c0c:	89800417 	ldw	r6,16(r17)
    5c10:	11000304 	addi	r4,r2,12
    5c14:	89400304 	addi	r5,r17,12
    5c18:	31800084 	addi	r6,r6,2
    5c1c:	318d883a 	add	r6,r6,r6
    5c20:	318d883a 	add	r6,r6,r6
    5c24:	1027883a 	mov	r19,r2
    5c28:	00073a40 	call	73a4 <memcpy>
    5c2c:	8009883a 	mov	r4,r16
    5c30:	980b883a 	mov	r5,r19
    5c34:	01800044 	movi	r6,1
    5c38:	0007ed40 	call	7ed4 <__lshift>
    5c3c:	1029883a 	mov	r20,r2
    5c40:	003e8606 	br	565c <_dtoa_r+0xd80>
    5c44:	00800e44 	movi	r2,57
    5c48:	90809526 	beq	r18,r2,5ea0 <_dtoa_r+0x15c4>
    5c4c:	92000044 	addi	r8,r18,1
    5c50:	003f2306 	br	58e0 <_dtoa_r+0x1004>
    5c54:	9011883a 	mov	r8,r18
    5c58:	8825883a 	mov	r18,r17
    5c5c:	a023883a 	mov	r17,r20
    5c60:	003e3706 	br	5540 <_dtoa_r+0xc64>
    5c64:	002b883a 	mov	r21,zero
    5c68:	0023883a 	mov	r17,zero
    5c6c:	003f5606 	br	59c8 <_dtoa_r+0x10ec>
    5c70:	51bfffc4 	addi	r6,r10,-1
    5c74:	300490fa 	slli	r2,r6,3
    5c78:	00c00074 	movhi	r3,1
    5c7c:	18c02204 	addi	r3,r3,136
    5c80:	1885883a 	add	r2,r3,r2
    5c84:	d9c00e17 	ldw	r7,56(sp)
    5c88:	11000017 	ldw	r4,0(r2)
    5c8c:	11400117 	ldw	r5,4(r2)
    5c90:	d8800717 	ldw	r2,28(sp)
    5c94:	d9801015 	stw	r6,64(sp)
    5c98:	880d883a 	mov	r6,r17
    5c9c:	da801615 	stw	r10,88(sp)
    5ca0:	15c00044 	addi	r23,r2,1
    5ca4:	000c4940 	call	c494 <__muldf3>
    5ca8:	a80b883a 	mov	r5,r21
    5cac:	a009883a 	mov	r4,r20
    5cb0:	d8c01115 	stw	r3,68(sp)
    5cb4:	d8800e15 	stw	r2,56(sp)
    5cb8:	000d4880 	call	d488 <__fixdfsi>
    5cbc:	1009883a 	mov	r4,r2
    5cc0:	1023883a 	mov	r17,r2
    5cc4:	000d5100 	call	d510 <__floatsidf>
    5cc8:	a009883a 	mov	r4,r20
    5ccc:	a80b883a 	mov	r5,r21
    5cd0:	100d883a 	mov	r6,r2
    5cd4:	180f883a 	mov	r7,r3
    5cd8:	000cbb80 	call	cbb8 <__subdf3>
    5cdc:	1813883a 	mov	r9,r3
    5ce0:	d8c00717 	ldw	r3,28(sp)
    5ce4:	8c400c04 	addi	r17,r17,48
    5ce8:	1011883a 	mov	r8,r2
    5cec:	1c400005 	stb	r17,0(r3)
    5cf0:	da801617 	ldw	r10,88(sp)
    5cf4:	00800044 	movi	r2,1
    5cf8:	50802326 	beq	r10,r2,5d88 <_dtoa_r+0x14ac>
    5cfc:	d8800717 	ldw	r2,28(sp)
    5d00:	b82b883a 	mov	r21,r23
    5d04:	dc001315 	stw	r16,76(sp)
    5d08:	12a9883a 	add	r20,r2,r10
    5d0c:	4807883a 	mov	r3,r9
    5d10:	4005883a 	mov	r2,r8
    5d14:	dc801415 	stw	r18,80(sp)
    5d18:	000d883a 	mov	r6,zero
    5d1c:	01d00934 	movhi	r7,16420
    5d20:	1009883a 	mov	r4,r2
    5d24:	180b883a 	mov	r5,r3
    5d28:	000c4940 	call	c494 <__muldf3>
    5d2c:	180b883a 	mov	r5,r3
    5d30:	1009883a 	mov	r4,r2
    5d34:	1821883a 	mov	r16,r3
    5d38:	1025883a 	mov	r18,r2
    5d3c:	000d4880 	call	d488 <__fixdfsi>
    5d40:	1009883a 	mov	r4,r2
    5d44:	1023883a 	mov	r17,r2
    5d48:	000d5100 	call	d510 <__floatsidf>
    5d4c:	9009883a 	mov	r4,r18
    5d50:	800b883a 	mov	r5,r16
    5d54:	100d883a 	mov	r6,r2
    5d58:	180f883a 	mov	r7,r3
    5d5c:	8c400c04 	addi	r17,r17,48
    5d60:	000cbb80 	call	cbb8 <__subdf3>
    5d64:	ad400044 	addi	r21,r21,1
    5d68:	ac7fffc5 	stb	r17,-1(r21)
    5d6c:	ad3fea1e 	bne	r21,r20,5d18 <_dtoa_r+0x143c>
    5d70:	1813883a 	mov	r9,r3
    5d74:	d8c01017 	ldw	r3,64(sp)
    5d78:	dc001317 	ldw	r16,76(sp)
    5d7c:	dc801417 	ldw	r18,80(sp)
    5d80:	1011883a 	mov	r8,r2
    5d84:	b8ef883a 	add	r23,r23,r3
    5d88:	d9000e17 	ldw	r4,56(sp)
    5d8c:	d9401117 	ldw	r5,68(sp)
    5d90:	000d883a 	mov	r6,zero
    5d94:	01cff834 	movhi	r7,16352
    5d98:	da001715 	stw	r8,92(sp)
    5d9c:	da401515 	stw	r9,84(sp)
    5da0:	000b0e80 	call	b0e8 <__adddf3>
    5da4:	da001717 	ldw	r8,92(sp)
    5da8:	da401517 	ldw	r9,84(sp)
    5dac:	1009883a 	mov	r4,r2
    5db0:	400d883a 	mov	r6,r8
    5db4:	480f883a 	mov	r7,r9
    5db8:	180b883a 	mov	r5,r3
    5dbc:	000c3b40 	call	c3b4 <__ledf2>
    5dc0:	da001717 	ldw	r8,92(sp)
    5dc4:	da401517 	ldw	r9,84(sp)
    5dc8:	10003b0e 	bge	r2,zero,5eb8 <_dtoa_r+0x15dc>
    5dcc:	d9001217 	ldw	r4,72(sp)
    5dd0:	bd7fffc3 	ldbu	r21,-1(r23)
    5dd4:	d9000515 	stw	r4,20(sp)
    5dd8:	003d1c06 	br	524c <_dtoa_r+0x970>
    5ddc:	d8c00817 	ldw	r3,32(sp)
    5de0:	18a9c83a 	sub	r20,r3,r2
    5de4:	0005883a 	mov	r2,zero
    5de8:	003d3706 	br	52c8 <_dtoa_r+0x9ec>
    5dec:	00800044 	movi	r2,1
    5df0:	003dd006 	br	5534 <_dtoa_r+0xc58>
    5df4:	d8c00217 	ldw	r3,8(sp)
    5df8:	00800d84 	movi	r2,54
    5dfc:	dd400917 	ldw	r21,36(sp)
    5e00:	10c5c83a 	sub	r2,r2,r3
    5e04:	dd000817 	ldw	r20,32(sp)
    5e08:	003d2f06 	br	52c8 <_dtoa_r+0x9ec>
    5e0c:	9029883a 	mov	r20,r18
    5e10:	982b883a 	mov	r21,r19
    5e14:	04400084 	movi	r17,2
    5e18:	003bc606 	br	4d34 <_dtoa_r+0x458>
    5e1c:	d8800617 	ldw	r2,24(sp)
    5e20:	103efc26 	beq	r2,zero,5a14 <_dtoa_r+0x1138>
    5e24:	d8c00d17 	ldw	r3,52(sp)
    5e28:	00fc890e 	bge	zero,r3,5050 <_dtoa_r+0x774>
    5e2c:	a80b883a 	mov	r5,r21
    5e30:	a009883a 	mov	r4,r20
    5e34:	000d883a 	mov	r6,zero
    5e38:	01d00934 	movhi	r7,16420
    5e3c:	000c4940 	call	c494 <__muldf3>
    5e40:	89000044 	addi	r4,r17,1
    5e44:	1029883a 	mov	r20,r2
    5e48:	182b883a 	mov	r21,r3
    5e4c:	000d5100 	call	d510 <__floatsidf>
    5e50:	a009883a 	mov	r4,r20
    5e54:	a80b883a 	mov	r5,r21
    5e58:	100d883a 	mov	r6,r2
    5e5c:	180f883a 	mov	r7,r3
    5e60:	000c4940 	call	c494 <__muldf3>
    5e64:	1009883a 	mov	r4,r2
    5e68:	180b883a 	mov	r5,r3
    5e6c:	000d883a 	mov	r6,zero
    5e70:	01d00734 	movhi	r7,16412
    5e74:	000b0e80 	call	b0e8 <__adddf3>
    5e78:	d9000517 	ldw	r4,20(sp)
    5e7c:	1023883a 	mov	r17,r2
    5e80:	00bf3034 	movhi	r2,64704
    5e84:	213fffc4 	addi	r4,r4,-1
    5e88:	1885883a 	add	r2,r3,r2
    5e8c:	d9001215 	stw	r4,72(sp)
    5e90:	d8800e15 	stw	r2,56(sp)
    5e94:	da800d17 	ldw	r10,52(sp)
    5e98:	003bc306 	br	4da8 <_dtoa_r+0x4cc>
    5e9c:	b039883a 	mov	fp,r22
    5ea0:	01000e44 	movi	r4,57
    5ea4:	8825883a 	mov	r18,r17
    5ea8:	9dc00044 	addi	r23,r19,1
    5eac:	99000005 	stb	r4,0(r19)
    5eb0:	a023883a 	mov	r17,r20
    5eb4:	003dae06 	br	5570 <_dtoa_r+0xc94>
    5eb8:	d9800e17 	ldw	r6,56(sp)
    5ebc:	d9c01117 	ldw	r7,68(sp)
    5ec0:	0009883a 	mov	r4,zero
    5ec4:	014ff834 	movhi	r5,16352
    5ec8:	da001715 	stw	r8,92(sp)
    5ecc:	da401515 	stw	r9,84(sp)
    5ed0:	000cbb80 	call	cbb8 <__subdf3>
    5ed4:	da001717 	ldw	r8,92(sp)
    5ed8:	da401517 	ldw	r9,84(sp)
    5edc:	1009883a 	mov	r4,r2
    5ee0:	180b883a 	mov	r5,r3
    5ee4:	400d883a 	mov	r6,r8
    5ee8:	480f883a 	mov	r7,r9
    5eec:	000c2d40 	call	c2d4 <__gedf2>
    5ef0:	00bc570e 	bge	zero,r2,5050 <_dtoa_r+0x774>
    5ef4:	01000c04 	movi	r4,48
    5ef8:	00000106 	br	5f00 <_dtoa_r+0x1624>
    5efc:	102f883a 	mov	r23,r2
    5f00:	b8bfffc4 	addi	r2,r23,-1
    5f04:	10c00007 	ldb	r3,0(r2)
    5f08:	193ffc26 	beq	r3,r4,5efc <_dtoa_r+0x1620>
    5f0c:	d9801217 	ldw	r6,72(sp)
    5f10:	d9800515 	stw	r6,20(sp)
    5f14:	003c1f06 	br	4f94 <_dtoa_r+0x6b8>
    5f18:	d8801217 	ldw	r2,72(sp)
    5f1c:	dc001117 	ldw	r16,68(sp)
    5f20:	d8800515 	stw	r2,20(sp)
    5f24:	003cc906 	br	524c <_dtoa_r+0x970>
    5f28:	dd801317 	ldw	r22,76(sp)
    5f2c:	dc001117 	ldw	r16,68(sp)
    5f30:	dcc01417 	ldw	r19,80(sp)
    5f34:	dc801017 	ldw	r18,64(sp)
    5f38:	003c4506 	br	5050 <_dtoa_r+0x774>
    5f3c:	103e5d1e 	bne	r2,zero,58b4 <_dtoa_r+0xfd8>
    5f40:	4080004c 	andi	r2,r8,1
    5f44:	103e5b26 	beq	r2,zero,58b4 <_dtoa_r+0xfd8>
    5f48:	003e5706 	br	58a8 <_dtoa_r+0xfcc>
    5f4c:	d8c00317 	ldw	r3,12(sp)
    5f50:	00800084 	movi	r2,2
    5f54:	10c00a16 	blt	r2,r3,5f80 <_dtoa_r+0x16a4>
    5f58:	d9000d17 	ldw	r4,52(sp)
    5f5c:	003e8306 	br	596c <_dtoa_r+0x1090>
    5f60:	04400084 	movi	r17,2
    5f64:	003b7306 	br	4d34 <_dtoa_r+0x458>
    5f68:	d9801217 	ldw	r6,72(sp)
    5f6c:	d9800515 	stw	r6,20(sp)
    5f70:	003cb606 	br	524c <_dtoa_r+0x970>
    5f74:	d9001217 	ldw	r4,72(sp)
    5f78:	d9000515 	stw	r4,20(sp)
    5f7c:	003c0506 	br	4f94 <_dtoa_r+0x6b8>
    5f80:	d9800d17 	ldw	r6,52(sp)
    5f84:	d9800615 	stw	r6,24(sp)
    5f88:	003e8306 	br	5998 <_dtoa_r+0x10bc>
    5f8c:	d9800317 	ldw	r6,12(sp)
    5f90:	00800084 	movi	r2,2
    5f94:	11800216 	blt	r2,r6,5fa0 <_dtoa_r+0x16c4>
    5f98:	d8800d17 	ldw	r2,52(sp)
    5f9c:	003da606 	br	5638 <_dtoa_r+0xd5c>
    5fa0:	d8800d17 	ldw	r2,52(sp)
    5fa4:	d8800615 	stw	r2,24(sp)
    5fa8:	003e7b06 	br	5998 <_dtoa_r+0x10bc>
    5fac:	05000044 	movi	r20,1
    5fb0:	003b0506 	br	4bc8 <_dtoa_r+0x2ec>
    5fb4:	8009883a 	mov	r4,r16
    5fb8:	80001115 	stw	zero,68(r16)
    5fbc:	000b883a 	mov	r5,zero
    5fc0:	000775c0 	call	775c <_Balloc>
    5fc4:	d8800715 	stw	r2,28(sp)
    5fc8:	d8c00717 	ldw	r3,28(sp)
    5fcc:	00bfffc4 	movi	r2,-1
    5fd0:	01000044 	movi	r4,1
    5fd4:	d8800615 	stw	r2,24(sp)
    5fd8:	80c01015 	stw	r3,64(r16)
    5fdc:	d9000b15 	stw	r4,44(sp)
    5fe0:	d8002215 	stw	zero,136(sp)
    5fe4:	d8800d15 	stw	r2,52(sp)
    5fe8:	003c1906 	br	5050 <_dtoa_r+0x774>
    5fec:	193d2926 	beq	r3,r4,5494 <_dtoa_r+0xbb8>
    5ff0:	00c00f04 	movi	r3,60
    5ff4:	1885c83a 	sub	r2,r3,r2
    5ff8:	003d7b06 	br	55e8 <_dtoa_r+0xd0c>
    5ffc:	000b883a 	mov	r5,zero
    6000:	003b1006 	br	4c44 <_dtoa_r+0x368>

00006004 <_fflush_r>:
    6004:	defffb04 	addi	sp,sp,-20
    6008:	dcc00315 	stw	r19,12(sp)
    600c:	dc000015 	stw	r16,0(sp)
    6010:	dfc00415 	stw	ra,16(sp)
    6014:	dc800215 	stw	r18,8(sp)
    6018:	dc400115 	stw	r17,4(sp)
    601c:	2027883a 	mov	r19,r4
    6020:	2821883a 	mov	r16,r5
    6024:	20000226 	beq	r4,zero,6030 <_fflush_r+0x2c>
    6028:	20800e17 	ldw	r2,56(r4)
    602c:	10005326 	beq	r2,zero,617c <_fflush_r+0x178>
    6030:	8080030b 	ldhu	r2,12(r16)
    6034:	10ffffcc 	andi	r3,r2,65535
    6038:	18e0001c 	xori	r3,r3,32768
    603c:	18e00004 	addi	r3,r3,-32768
    6040:	18002c26 	beq	r3,zero,60f4 <_fflush_r+0xf0>
    6044:	10c0020c 	andi	r3,r2,8
    6048:	1800321e 	bne	r3,zero,6114 <_fflush_r+0x110>
    604c:	80c00117 	ldw	r3,4(r16)
    6050:	10820014 	ori	r2,r2,2048
    6054:	8080030d 	sth	r2,12(r16)
    6058:	00c0570e 	bge	zero,r3,61b8 <_fflush_r+0x1b4>
    605c:	82000a17 	ldw	r8,40(r16)
    6060:	40002426 	beq	r8,zero,60f4 <_fflush_r+0xf0>
    6064:	9c400017 	ldw	r17,0(r19)
    6068:	10c4000c 	andi	r3,r2,4096
    606c:	98000015 	stw	zero,0(r19)
    6070:	18004626 	beq	r3,zero,618c <_fflush_r+0x188>
    6074:	81801417 	ldw	r6,80(r16)
    6078:	10c0010c 	andi	r3,r2,4
    607c:	18000626 	beq	r3,zero,6098 <_fflush_r+0x94>
    6080:	80c00117 	ldw	r3,4(r16)
    6084:	80800c17 	ldw	r2,48(r16)
    6088:	30cdc83a 	sub	r6,r6,r3
    608c:	10000226 	beq	r2,zero,6098 <_fflush_r+0x94>
    6090:	80800f17 	ldw	r2,60(r16)
    6094:	308dc83a 	sub	r6,r6,r2
    6098:	81400717 	ldw	r5,28(r16)
    609c:	9809883a 	mov	r4,r19
    60a0:	000f883a 	mov	r7,zero
    60a4:	403ee83a 	callr	r8
    60a8:	00ffffc4 	movi	r3,-1
    60ac:	10c04526 	beq	r2,r3,61c4 <_fflush_r+0x1c0>
    60b0:	80c0030b 	ldhu	r3,12(r16)
    60b4:	81000417 	ldw	r4,16(r16)
    60b8:	80000115 	stw	zero,4(r16)
    60bc:	197dffcc 	andi	r5,r3,63487
    60c0:	8140030d 	sth	r5,12(r16)
    60c4:	81000015 	stw	r4,0(r16)
    60c8:	18c4000c 	andi	r3,r3,4096
    60cc:	18000126 	beq	r3,zero,60d4 <_fflush_r+0xd0>
    60d0:	80801415 	stw	r2,80(r16)
    60d4:	81400c17 	ldw	r5,48(r16)
    60d8:	9c400015 	stw	r17,0(r19)
    60dc:	28000526 	beq	r5,zero,60f4 <_fflush_r+0xf0>
    60e0:	80801004 	addi	r2,r16,64
    60e4:	28800226 	beq	r5,r2,60f0 <_fflush_r+0xec>
    60e8:	9809883a 	mov	r4,r19
    60ec:	00067200 	call	6720 <_free_r>
    60f0:	80000c15 	stw	zero,48(r16)
    60f4:	0005883a 	mov	r2,zero
    60f8:	dfc00417 	ldw	ra,16(sp)
    60fc:	dcc00317 	ldw	r19,12(sp)
    6100:	dc800217 	ldw	r18,8(sp)
    6104:	dc400117 	ldw	r17,4(sp)
    6108:	dc000017 	ldw	r16,0(sp)
    610c:	dec00504 	addi	sp,sp,20
    6110:	f800283a 	ret
    6114:	84800417 	ldw	r18,16(r16)
    6118:	903ff626 	beq	r18,zero,60f4 <_fflush_r+0xf0>
    611c:	84400017 	ldw	r17,0(r16)
    6120:	108000cc 	andi	r2,r2,3
    6124:	84800015 	stw	r18,0(r16)
    6128:	8ca3c83a 	sub	r17,r17,r18
    612c:	10001526 	beq	r2,zero,6184 <_fflush_r+0x180>
    6130:	0005883a 	mov	r2,zero
    6134:	80800215 	stw	r2,8(r16)
    6138:	04400316 	blt	zero,r17,6148 <_fflush_r+0x144>
    613c:	003fed06 	br	60f4 <_fflush_r+0xf0>
    6140:	90a5883a 	add	r18,r18,r2
    6144:	047feb0e 	bge	zero,r17,60f4 <_fflush_r+0xf0>
    6148:	80800917 	ldw	r2,36(r16)
    614c:	81400717 	ldw	r5,28(r16)
    6150:	880f883a 	mov	r7,r17
    6154:	900d883a 	mov	r6,r18
    6158:	9809883a 	mov	r4,r19
    615c:	103ee83a 	callr	r2
    6160:	88a3c83a 	sub	r17,r17,r2
    6164:	00bff616 	blt	zero,r2,6140 <_fflush_r+0x13c>
    6168:	80c0030b 	ldhu	r3,12(r16)
    616c:	00bfffc4 	movi	r2,-1
    6170:	18c01014 	ori	r3,r3,64
    6174:	80c0030d 	sth	r3,12(r16)
    6178:	003fdf06 	br	60f8 <_fflush_r+0xf4>
    617c:	00065ac0 	call	65ac <__sinit>
    6180:	003fab06 	br	6030 <_fflush_r+0x2c>
    6184:	80800517 	ldw	r2,20(r16)
    6188:	003fea06 	br	6134 <_fflush_r+0x130>
    618c:	81400717 	ldw	r5,28(r16)
    6190:	000d883a 	mov	r6,zero
    6194:	9809883a 	mov	r4,r19
    6198:	01c00044 	movi	r7,1
    619c:	403ee83a 	callr	r8
    61a0:	100d883a 	mov	r6,r2
    61a4:	00bfffc4 	movi	r2,-1
    61a8:	30801326 	beq	r6,r2,61f8 <_fflush_r+0x1f4>
    61ac:	8080030b 	ldhu	r2,12(r16)
    61b0:	82000a17 	ldw	r8,40(r16)
    61b4:	003fb006 	br	6078 <_fflush_r+0x74>
    61b8:	80c00f17 	ldw	r3,60(r16)
    61bc:	00ffa716 	blt	zero,r3,605c <_fflush_r+0x58>
    61c0:	003fcc06 	br	60f4 <_fflush_r+0xf0>
    61c4:	98c00017 	ldw	r3,0(r19)
    61c8:	183fb926 	beq	r3,zero,60b0 <_fflush_r+0xac>
    61cc:	01000744 	movi	r4,29
    61d0:	19000226 	beq	r3,r4,61dc <_fflush_r+0x1d8>
    61d4:	01000584 	movi	r4,22
    61d8:	1900101e 	bne	r3,r4,621c <_fflush_r+0x218>
    61dc:	8080030b 	ldhu	r2,12(r16)
    61e0:	80c00417 	ldw	r3,16(r16)
    61e4:	80000115 	stw	zero,4(r16)
    61e8:	10bdffcc 	andi	r2,r2,63487
    61ec:	8080030d 	sth	r2,12(r16)
    61f0:	80c00015 	stw	r3,0(r16)
    61f4:	003fb706 	br	60d4 <_fflush_r+0xd0>
    61f8:	98800017 	ldw	r2,0(r19)
    61fc:	103feb26 	beq	r2,zero,61ac <_fflush_r+0x1a8>
    6200:	00c00744 	movi	r3,29
    6204:	10c00226 	beq	r2,r3,6210 <_fflush_r+0x20c>
    6208:	00c00584 	movi	r3,22
    620c:	10ffd61e 	bne	r2,r3,6168 <_fflush_r+0x164>
    6210:	9c400015 	stw	r17,0(r19)
    6214:	0005883a 	mov	r2,zero
    6218:	003fb706 	br	60f8 <_fflush_r+0xf4>
    621c:	80c0030b 	ldhu	r3,12(r16)
    6220:	18c01014 	ori	r3,r3,64
    6224:	80c0030d 	sth	r3,12(r16)
    6228:	003fb306 	br	60f8 <_fflush_r+0xf4>

0000622c <fflush>:
    622c:	20000526 	beq	r4,zero,6244 <fflush+0x18>
    6230:	00800074 	movhi	r2,1
    6234:	10875304 	addi	r2,r2,7500
    6238:	200b883a 	mov	r5,r4
    623c:	11000017 	ldw	r4,0(r2)
    6240:	00060041 	jmpi	6004 <_fflush_r>
    6244:	00800074 	movhi	r2,1
    6248:	10875204 	addi	r2,r2,7496
    624c:	11000017 	ldw	r4,0(r2)
    6250:	01400034 	movhi	r5,0
    6254:	29580104 	addi	r5,r5,24580
    6258:	0006f6c1 	jmpi	6f6c <_fwalk_reent>

0000625c <__fp_lock>:
    625c:	0005883a 	mov	r2,zero
    6260:	f800283a 	ret

00006264 <__fp_unlock>:
    6264:	0005883a 	mov	r2,zero
    6268:	f800283a 	ret

0000626c <_cleanup_r>:
    626c:	01400074 	movhi	r5,1
    6270:	29681104 	addi	r5,r5,-24508
    6274:	0006eb41 	jmpi	6eb4 <_fwalk>

00006278 <__sinit.part.1>:
    6278:	defff604 	addi	sp,sp,-40
    627c:	00c00034 	movhi	r3,0
    6280:	dfc00915 	stw	ra,36(sp)
    6284:	df000815 	stw	fp,32(sp)
    6288:	ddc00715 	stw	r23,28(sp)
    628c:	dd800615 	stw	r22,24(sp)
    6290:	dd400515 	stw	r21,20(sp)
    6294:	dd000415 	stw	r20,16(sp)
    6298:	dcc00315 	stw	r19,12(sp)
    629c:	dc800215 	stw	r18,8(sp)
    62a0:	dc400115 	stw	r17,4(sp)
    62a4:	dc000015 	stw	r16,0(sp)
    62a8:	18d89b04 	addi	r3,r3,25196
    62ac:	24000117 	ldw	r16,4(r4)
    62b0:	20c00f15 	stw	r3,60(r4)
    62b4:	07000044 	movi	fp,1
    62b8:	00c000c4 	movi	r3,3
    62bc:	2080bb04 	addi	r2,r4,748
    62c0:	20c0b915 	stw	r3,740(r4)
    62c4:	27000e15 	stw	fp,56(r4)
    62c8:	2080ba15 	stw	r2,744(r4)
    62cc:	2000b815 	stw	zero,736(r4)
    62d0:	05c00204 	movi	r23,8
    62d4:	00800104 	movi	r2,4
    62d8:	2025883a 	mov	r18,r4
    62dc:	b80d883a 	mov	r6,r23
    62e0:	81001704 	addi	r4,r16,92
    62e4:	000b883a 	mov	r5,zero
    62e8:	80000015 	stw	zero,0(r16)
    62ec:	80000115 	stw	zero,4(r16)
    62f0:	80000215 	stw	zero,8(r16)
    62f4:	8080030d 	sth	r2,12(r16)
    62f8:	80001915 	stw	zero,100(r16)
    62fc:	8000038d 	sth	zero,14(r16)
    6300:	80000415 	stw	zero,16(r16)
    6304:	80000515 	stw	zero,20(r16)
    6308:	80000615 	stw	zero,24(r16)
    630c:	00076380 	call	7638 <memset>
    6310:	05800074 	movhi	r22,1
    6314:	94400217 	ldw	r17,8(r18)
    6318:	05400074 	movhi	r21,1
    631c:	05000074 	movhi	r20,1
    6320:	04c00074 	movhi	r19,1
    6324:	b5a1d704 	addi	r22,r22,-30884
    6328:	ad61ee04 	addi	r21,r21,-30792
    632c:	a5220d04 	addi	r20,r20,-30668
    6330:	9ce22404 	addi	r19,r19,-30576
    6334:	85800815 	stw	r22,32(r16)
    6338:	85400915 	stw	r21,36(r16)
    633c:	85000a15 	stw	r20,40(r16)
    6340:	84c00b15 	stw	r19,44(r16)
    6344:	84000715 	stw	r16,28(r16)
    6348:	00800284 	movi	r2,10
    634c:	89001704 	addi	r4,r17,92
    6350:	b80d883a 	mov	r6,r23
    6354:	000b883a 	mov	r5,zero
    6358:	88000015 	stw	zero,0(r17)
    635c:	88000115 	stw	zero,4(r17)
    6360:	88000215 	stw	zero,8(r17)
    6364:	8880030d 	sth	r2,12(r17)
    6368:	88001915 	stw	zero,100(r17)
    636c:	8f00038d 	sth	fp,14(r17)
    6370:	88000415 	stw	zero,16(r17)
    6374:	88000515 	stw	zero,20(r17)
    6378:	88000615 	stw	zero,24(r17)
    637c:	00076380 	call	7638 <memset>
    6380:	94000317 	ldw	r16,12(r18)
    6384:	00800484 	movi	r2,18
    6388:	8c400715 	stw	r17,28(r17)
    638c:	8d800815 	stw	r22,32(r17)
    6390:	8d400915 	stw	r21,36(r17)
    6394:	8d000a15 	stw	r20,40(r17)
    6398:	8cc00b15 	stw	r19,44(r17)
    639c:	8080030d 	sth	r2,12(r16)
    63a0:	00800084 	movi	r2,2
    63a4:	80000015 	stw	zero,0(r16)
    63a8:	80000115 	stw	zero,4(r16)
    63ac:	80000215 	stw	zero,8(r16)
    63b0:	80001915 	stw	zero,100(r16)
    63b4:	8080038d 	sth	r2,14(r16)
    63b8:	80000415 	stw	zero,16(r16)
    63bc:	80000515 	stw	zero,20(r16)
    63c0:	80000615 	stw	zero,24(r16)
    63c4:	81001704 	addi	r4,r16,92
    63c8:	000b883a 	mov	r5,zero
    63cc:	b80d883a 	mov	r6,r23
    63d0:	00076380 	call	7638 <memset>
    63d4:	84000715 	stw	r16,28(r16)
    63d8:	85800815 	stw	r22,32(r16)
    63dc:	85400915 	stw	r21,36(r16)
    63e0:	85000a15 	stw	r20,40(r16)
    63e4:	84c00b15 	stw	r19,44(r16)
    63e8:	dfc00917 	ldw	ra,36(sp)
    63ec:	df000817 	ldw	fp,32(sp)
    63f0:	ddc00717 	ldw	r23,28(sp)
    63f4:	dd800617 	ldw	r22,24(sp)
    63f8:	dd400517 	ldw	r21,20(sp)
    63fc:	dd000417 	ldw	r20,16(sp)
    6400:	dcc00317 	ldw	r19,12(sp)
    6404:	dc800217 	ldw	r18,8(sp)
    6408:	dc400117 	ldw	r17,4(sp)
    640c:	dc000017 	ldw	r16,0(sp)
    6410:	dec00a04 	addi	sp,sp,40
    6414:	f800283a 	ret

00006418 <__sfmoreglue>:
    6418:	defffc04 	addi	sp,sp,-16
    641c:	dc400115 	stw	r17,4(sp)
    6420:	2c401a24 	muli	r17,r5,104
    6424:	dc800215 	stw	r18,8(sp)
    6428:	2825883a 	mov	r18,r5
    642c:	89400304 	addi	r5,r17,12
    6430:	dc000015 	stw	r16,0(sp)
    6434:	dfc00315 	stw	ra,12(sp)
    6438:	00013300 	call	1330 <_malloc_r>
    643c:	1021883a 	mov	r16,r2
    6440:	10000726 	beq	r2,zero,6460 <__sfmoreglue+0x48>
    6444:	11000304 	addi	r4,r2,12
    6448:	10000015 	stw	zero,0(r2)
    644c:	14800115 	stw	r18,4(r2)
    6450:	11000215 	stw	r4,8(r2)
    6454:	000b883a 	mov	r5,zero
    6458:	880d883a 	mov	r6,r17
    645c:	00076380 	call	7638 <memset>
    6460:	8005883a 	mov	r2,r16
    6464:	dfc00317 	ldw	ra,12(sp)
    6468:	dc800217 	ldw	r18,8(sp)
    646c:	dc400117 	ldw	r17,4(sp)
    6470:	dc000017 	ldw	r16,0(sp)
    6474:	dec00404 	addi	sp,sp,16
    6478:	f800283a 	ret

0000647c <__sfp>:
    647c:	00800074 	movhi	r2,1
    6480:	defffb04 	addi	sp,sp,-20
    6484:	10875204 	addi	r2,r2,7496
    6488:	dc800215 	stw	r18,8(sp)
    648c:	14800017 	ldw	r18,0(r2)
    6490:	dcc00315 	stw	r19,12(sp)
    6494:	dfc00415 	stw	ra,16(sp)
    6498:	90800e17 	ldw	r2,56(r18)
    649c:	dc400115 	stw	r17,4(sp)
    64a0:	dc000015 	stw	r16,0(sp)
    64a4:	2027883a 	mov	r19,r4
    64a8:	1000021e 	bne	r2,zero,64b4 <__sfp+0x38>
    64ac:	9009883a 	mov	r4,r18
    64b0:	00062780 	call	6278 <__sinit.part.1>
    64b4:	9480b804 	addi	r18,r18,736
    64b8:	047fffc4 	movi	r17,-1
    64bc:	91400117 	ldw	r5,4(r18)
    64c0:	94000217 	ldw	r16,8(r18)
    64c4:	297fffc4 	addi	r5,r5,-1
    64c8:	28000a16 	blt	r5,zero,64f4 <__sfp+0x78>
    64cc:	8080030f 	ldh	r2,12(r16)
    64d0:	10000c26 	beq	r2,zero,6504 <__sfp+0x88>
    64d4:	80c01d04 	addi	r3,r16,116
    64d8:	00000206 	br	64e4 <__sfp+0x68>
    64dc:	18bfe60f 	ldh	r2,-104(r3)
    64e0:	10000826 	beq	r2,zero,6504 <__sfp+0x88>
    64e4:	297fffc4 	addi	r5,r5,-1
    64e8:	1c3ffd04 	addi	r16,r3,-12
    64ec:	18c01a04 	addi	r3,r3,104
    64f0:	2c7ffa1e 	bne	r5,r17,64dc <__sfp+0x60>
    64f4:	90800017 	ldw	r2,0(r18)
    64f8:	10001d26 	beq	r2,zero,6570 <__sfp+0xf4>
    64fc:	1025883a 	mov	r18,r2
    6500:	003fee06 	br	64bc <__sfp+0x40>
    6504:	00bfffc4 	movi	r2,-1
    6508:	8080038d 	sth	r2,14(r16)
    650c:	00800044 	movi	r2,1
    6510:	8080030d 	sth	r2,12(r16)
    6514:	80001915 	stw	zero,100(r16)
    6518:	80000015 	stw	zero,0(r16)
    651c:	80000215 	stw	zero,8(r16)
    6520:	80000115 	stw	zero,4(r16)
    6524:	80000415 	stw	zero,16(r16)
    6528:	80000515 	stw	zero,20(r16)
    652c:	80000615 	stw	zero,24(r16)
    6530:	81001704 	addi	r4,r16,92
    6534:	000b883a 	mov	r5,zero
    6538:	01800204 	movi	r6,8
    653c:	00076380 	call	7638 <memset>
    6540:	8005883a 	mov	r2,r16
    6544:	80000c15 	stw	zero,48(r16)
    6548:	80000d15 	stw	zero,52(r16)
    654c:	80001115 	stw	zero,68(r16)
    6550:	80001215 	stw	zero,72(r16)
    6554:	dfc00417 	ldw	ra,16(sp)
    6558:	dcc00317 	ldw	r19,12(sp)
    655c:	dc800217 	ldw	r18,8(sp)
    6560:	dc400117 	ldw	r17,4(sp)
    6564:	dc000017 	ldw	r16,0(sp)
    6568:	dec00504 	addi	sp,sp,20
    656c:	f800283a 	ret
    6570:	9809883a 	mov	r4,r19
    6574:	01400104 	movi	r5,4
    6578:	00064180 	call	6418 <__sfmoreglue>
    657c:	90800015 	stw	r2,0(r18)
    6580:	103fde1e 	bne	r2,zero,64fc <__sfp+0x80>
    6584:	00800304 	movi	r2,12
    6588:	98800015 	stw	r2,0(r19)
    658c:	0005883a 	mov	r2,zero
    6590:	003ff006 	br	6554 <__sfp+0xd8>

00006594 <_cleanup>:
    6594:	00800074 	movhi	r2,1
    6598:	10875204 	addi	r2,r2,7496
    659c:	11000017 	ldw	r4,0(r2)
    65a0:	01400074 	movhi	r5,1
    65a4:	29681104 	addi	r5,r5,-24508
    65a8:	0006eb41 	jmpi	6eb4 <_fwalk>

000065ac <__sinit>:
    65ac:	20800e17 	ldw	r2,56(r4)
    65b0:	10000126 	beq	r2,zero,65b8 <__sinit+0xc>
    65b4:	f800283a 	ret
    65b8:	00062781 	jmpi	6278 <__sinit.part.1>

000065bc <__sfp_lock_acquire>:
    65bc:	f800283a 	ret

000065c0 <__sfp_lock_release>:
    65c0:	f800283a 	ret

000065c4 <__sinit_lock_acquire>:
    65c4:	f800283a 	ret

000065c8 <__sinit_lock_release>:
    65c8:	f800283a 	ret

000065cc <__fp_lock_all>:
    65cc:	00800074 	movhi	r2,1
    65d0:	10875304 	addi	r2,r2,7500
    65d4:	11000017 	ldw	r4,0(r2)
    65d8:	01400034 	movhi	r5,0
    65dc:	29589704 	addi	r5,r5,25180
    65e0:	0006eb41 	jmpi	6eb4 <_fwalk>

000065e4 <__fp_unlock_all>:
    65e4:	00800074 	movhi	r2,1
    65e8:	10875304 	addi	r2,r2,7500
    65ec:	11000017 	ldw	r4,0(r2)
    65f0:	01400034 	movhi	r5,0
    65f4:	29589904 	addi	r5,r5,25188
    65f8:	0006eb41 	jmpi	6eb4 <_fwalk>

000065fc <_malloc_trim_r>:
    65fc:	defffb04 	addi	sp,sp,-20
    6600:	dcc00315 	stw	r19,12(sp)
    6604:	04c00074 	movhi	r19,1
    6608:	dc800215 	stw	r18,8(sp)
    660c:	dc400115 	stw	r17,4(sp)
    6610:	dc000015 	stw	r16,0(sp)
    6614:	dfc00415 	stw	ra,16(sp)
    6618:	2821883a 	mov	r16,r5
    661c:	9cc1b004 	addi	r19,r19,1728
    6620:	2025883a 	mov	r18,r4
    6624:	000dca80 	call	dca8 <__malloc_lock>
    6628:	98800217 	ldw	r2,8(r19)
    662c:	14400117 	ldw	r17,4(r2)
    6630:	00bfff04 	movi	r2,-4
    6634:	88a2703a 	and	r17,r17,r2
    6638:	8c21c83a 	sub	r16,r17,r16
    663c:	8403fbc4 	addi	r16,r16,4079
    6640:	8020d33a 	srli	r16,r16,12
    6644:	0083ffc4 	movi	r2,4095
    6648:	843fffc4 	addi	r16,r16,-1
    664c:	8020933a 	slli	r16,r16,12
    6650:	1400060e 	bge	r2,r16,666c <_malloc_trim_r+0x70>
    6654:	9009883a 	mov	r4,r18
    6658:	000b883a 	mov	r5,zero
    665c:	00023300 	call	2330 <_sbrk_r>
    6660:	98c00217 	ldw	r3,8(r19)
    6664:	1c47883a 	add	r3,r3,r17
    6668:	10c00a26 	beq	r2,r3,6694 <_malloc_trim_r+0x98>
    666c:	9009883a 	mov	r4,r18
    6670:	000dcc80 	call	dcc8 <__malloc_unlock>
    6674:	0005883a 	mov	r2,zero
    6678:	dfc00417 	ldw	ra,16(sp)
    667c:	dcc00317 	ldw	r19,12(sp)
    6680:	dc800217 	ldw	r18,8(sp)
    6684:	dc400117 	ldw	r17,4(sp)
    6688:	dc000017 	ldw	r16,0(sp)
    668c:	dec00504 	addi	sp,sp,20
    6690:	f800283a 	ret
    6694:	9009883a 	mov	r4,r18
    6698:	040bc83a 	sub	r5,zero,r16
    669c:	00023300 	call	2330 <_sbrk_r>
    66a0:	00ffffc4 	movi	r3,-1
    66a4:	10c00d26 	beq	r2,r3,66dc <_malloc_trim_r+0xe0>
    66a8:	00c00074 	movhi	r3,1
    66ac:	18ce2a04 	addi	r3,r3,14504
    66b0:	18800017 	ldw	r2,0(r3)
    66b4:	99000217 	ldw	r4,8(r19)
    66b8:	8c23c83a 	sub	r17,r17,r16
    66bc:	8c400054 	ori	r17,r17,1
    66c0:	1421c83a 	sub	r16,r2,r16
    66c4:	24400115 	stw	r17,4(r4)
    66c8:	9009883a 	mov	r4,r18
    66cc:	1c000015 	stw	r16,0(r3)
    66d0:	000dcc80 	call	dcc8 <__malloc_unlock>
    66d4:	00800044 	movi	r2,1
    66d8:	003fe706 	br	6678 <_malloc_trim_r+0x7c>
    66dc:	9009883a 	mov	r4,r18
    66e0:	000b883a 	mov	r5,zero
    66e4:	00023300 	call	2330 <_sbrk_r>
    66e8:	99000217 	ldw	r4,8(r19)
    66ec:	014003c4 	movi	r5,15
    66f0:	1107c83a 	sub	r3,r2,r4
    66f4:	28ffdd0e 	bge	r5,r3,666c <_malloc_trim_r+0x70>
    66f8:	01400074 	movhi	r5,1
    66fc:	29475404 	addi	r5,r5,7504
    6700:	29400017 	ldw	r5,0(r5)
    6704:	18c00054 	ori	r3,r3,1
    6708:	20c00115 	stw	r3,4(r4)
    670c:	00c00074 	movhi	r3,1
    6710:	1145c83a 	sub	r2,r2,r5
    6714:	18ce2a04 	addi	r3,r3,14504
    6718:	18800015 	stw	r2,0(r3)
    671c:	003fd306 	br	666c <_malloc_trim_r+0x70>

00006720 <_free_r>:
    6720:	28004c26 	beq	r5,zero,6854 <_free_r+0x134>
    6724:	defffd04 	addi	sp,sp,-12
    6728:	dc400115 	stw	r17,4(sp)
    672c:	dc000015 	stw	r16,0(sp)
    6730:	2023883a 	mov	r17,r4
    6734:	2821883a 	mov	r16,r5
    6738:	dfc00215 	stw	ra,8(sp)
    673c:	000dca80 	call	dca8 <__malloc_lock>
    6740:	813fff17 	ldw	r4,-4(r16)
    6744:	00bfff84 	movi	r2,-2
    6748:	02400074 	movhi	r9,1
    674c:	81bffe04 	addi	r6,r16,-8
    6750:	2084703a 	and	r2,r4,r2
    6754:	4a41b004 	addi	r9,r9,1728
    6758:	308b883a 	add	r5,r6,r2
    675c:	2a000117 	ldw	r8,4(r5)
    6760:	49c00217 	ldw	r7,8(r9)
    6764:	00ffff04 	movi	r3,-4
    6768:	40c6703a 	and	r3,r8,r3
    676c:	39405326 	beq	r7,r5,68bc <_free_r+0x19c>
    6770:	28c00115 	stw	r3,4(r5)
    6774:	2100004c 	andi	r4,r4,1
    6778:	2000091e 	bne	r4,zero,67a0 <_free_r+0x80>
    677c:	81fffe17 	ldw	r7,-8(r16)
    6780:	4a000204 	addi	r8,r9,8
    6784:	31cdc83a 	sub	r6,r6,r7
    6788:	31000217 	ldw	r4,8(r6)
    678c:	11c5883a 	add	r2,r2,r7
    6790:	22006126 	beq	r4,r8,6918 <_free_r+0x1f8>
    6794:	31c00317 	ldw	r7,12(r6)
    6798:	21c00315 	stw	r7,12(r4)
    679c:	39000215 	stw	r4,8(r7)
    67a0:	28c9883a 	add	r4,r5,r3
    67a4:	21c00117 	ldw	r7,4(r4)
    67a8:	39c0004c 	andi	r7,r7,1
    67ac:	38000d1e 	bne	r7,zero,67e4 <_free_r+0xc4>
    67b0:	29000217 	ldw	r4,8(r5)
    67b4:	10c5883a 	add	r2,r2,r3
    67b8:	00c00074 	movhi	r3,1
    67bc:	18c1b204 	addi	r3,r3,1736
    67c0:	20c07526 	beq	r4,r3,6998 <_free_r+0x278>
    67c4:	29c00317 	ldw	r7,12(r5)
    67c8:	11400054 	ori	r5,r2,1
    67cc:	3087883a 	add	r3,r6,r2
    67d0:	21c00315 	stw	r7,12(r4)
    67d4:	39000215 	stw	r4,8(r7)
    67d8:	31400115 	stw	r5,4(r6)
    67dc:	18800015 	stw	r2,0(r3)
    67e0:	00000406 	br	67f4 <_free_r+0xd4>
    67e4:	10c00054 	ori	r3,r2,1
    67e8:	30c00115 	stw	r3,4(r6)
    67ec:	3087883a 	add	r3,r6,r2
    67f0:	18800015 	stw	r2,0(r3)
    67f4:	00c07fc4 	movi	r3,511
    67f8:	18801736 	bltu	r3,r2,6858 <_free_r+0x138>
    67fc:	1004d0fa 	srli	r2,r2,3
    6800:	01400044 	movi	r5,1
    6804:	49000117 	ldw	r4,4(r9)
    6808:	1087883a 	add	r3,r2,r2
    680c:	18c7883a 	add	r3,r3,r3
    6810:	1005d0ba 	srai	r2,r2,2
    6814:	18c7883a 	add	r3,r3,r3
    6818:	1a47883a 	add	r3,r3,r9
    681c:	19c00217 	ldw	r7,8(r3)
    6820:	2884983a 	sll	r2,r5,r2
    6824:	30c00315 	stw	r3,12(r6)
    6828:	31c00215 	stw	r7,8(r6)
    682c:	1104b03a 	or	r2,r2,r4
    6830:	19800215 	stw	r6,8(r3)
    6834:	48800115 	stw	r2,4(r9)
    6838:	39800315 	stw	r6,12(r7)
    683c:	8809883a 	mov	r4,r17
    6840:	dfc00217 	ldw	ra,8(sp)
    6844:	dc400117 	ldw	r17,4(sp)
    6848:	dc000017 	ldw	r16,0(sp)
    684c:	dec00304 	addi	sp,sp,12
    6850:	000dcc81 	jmpi	dcc8 <__malloc_unlock>
    6854:	f800283a 	ret
    6858:	1006d27a 	srli	r3,r2,9
    685c:	01000104 	movi	r4,4
    6860:	20c04036 	bltu	r4,r3,6964 <_free_r+0x244>
    6864:	1006d1ba 	srli	r3,r2,6
    6868:	19400e04 	addi	r5,r3,56
    686c:	2947883a 	add	r3,r5,r5
    6870:	18c7883a 	add	r3,r3,r3
    6874:	18c7883a 	add	r3,r3,r3
    6878:	1a49883a 	add	r4,r3,r9
    687c:	20c00217 	ldw	r3,8(r4)
    6880:	01c00074 	movhi	r7,1
    6884:	39c1b004 	addi	r7,r7,1728
    6888:	19003b26 	beq	r3,r4,6978 <_free_r+0x258>
    688c:	01ffff04 	movi	r7,-4
    6890:	19400117 	ldw	r5,4(r3)
    6894:	29ca703a 	and	r5,r5,r7
    6898:	1140022e 	bgeu	r2,r5,68a4 <_free_r+0x184>
    689c:	18c00217 	ldw	r3,8(r3)
    68a0:	20fffb1e 	bne	r4,r3,6890 <_free_r+0x170>
    68a4:	18800317 	ldw	r2,12(r3)
    68a8:	30800315 	stw	r2,12(r6)
    68ac:	30c00215 	stw	r3,8(r6)
    68b0:	11800215 	stw	r6,8(r2)
    68b4:	19800315 	stw	r6,12(r3)
    68b8:	003fe006 	br	683c <_free_r+0x11c>
    68bc:	2100004c 	andi	r4,r4,1
    68c0:	1885883a 	add	r2,r3,r2
    68c4:	2000071e 	bne	r4,zero,68e4 <_free_r+0x1c4>
    68c8:	817ffe17 	ldw	r5,-8(r16)
    68cc:	314dc83a 	sub	r6,r6,r5
    68d0:	30c00317 	ldw	r3,12(r6)
    68d4:	31000217 	ldw	r4,8(r6)
    68d8:	1145883a 	add	r2,r2,r5
    68dc:	20c00315 	stw	r3,12(r4)
    68e0:	19000215 	stw	r4,8(r3)
    68e4:	10c00054 	ori	r3,r2,1
    68e8:	30c00115 	stw	r3,4(r6)
    68ec:	00c00074 	movhi	r3,1
    68f0:	18c75504 	addi	r3,r3,7508
    68f4:	18c00017 	ldw	r3,0(r3)
    68f8:	49800215 	stw	r6,8(r9)
    68fc:	10ffcf36 	bltu	r2,r3,683c <_free_r+0x11c>
    6900:	00800074 	movhi	r2,1
    6904:	108e1f04 	addi	r2,r2,14460
    6908:	11400017 	ldw	r5,0(r2)
    690c:	8809883a 	mov	r4,r17
    6910:	00065fc0 	call	65fc <_malloc_trim_r>
    6914:	003fc906 	br	683c <_free_r+0x11c>
    6918:	28c9883a 	add	r4,r5,r3
    691c:	21000117 	ldw	r4,4(r4)
    6920:	2100004c 	andi	r4,r4,1
    6924:	20000a1e 	bne	r4,zero,6950 <_free_r+0x230>
    6928:	29000317 	ldw	r4,12(r5)
    692c:	29400217 	ldw	r5,8(r5)
    6930:	10c5883a 	add	r2,r2,r3
    6934:	10c00054 	ori	r3,r2,1
    6938:	29000315 	stw	r4,12(r5)
    693c:	21400215 	stw	r5,8(r4)
    6940:	30c00115 	stw	r3,4(r6)
    6944:	308d883a 	add	r6,r6,r2
    6948:	30800015 	stw	r2,0(r6)
    694c:	003fbb06 	br	683c <_free_r+0x11c>
    6950:	10c00054 	ori	r3,r2,1
    6954:	30c00115 	stw	r3,4(r6)
    6958:	308d883a 	add	r6,r6,r2
    695c:	30800015 	stw	r2,0(r6)
    6960:	003fb606 	br	683c <_free_r+0x11c>
    6964:	01000504 	movi	r4,20
    6968:	20c01436 	bltu	r4,r3,69bc <_free_r+0x29c>
    696c:	194016c4 	addi	r5,r3,91
    6970:	2947883a 	add	r3,r5,r5
    6974:	003fbe06 	br	6870 <_free_r+0x150>
    6978:	280bd0ba 	srai	r5,r5,2
    697c:	00800044 	movi	r2,1
    6980:	39000117 	ldw	r4,4(r7)
    6984:	114a983a 	sll	r5,r2,r5
    6988:	1805883a 	mov	r2,r3
    698c:	2908b03a 	or	r4,r5,r4
    6990:	39000115 	stw	r4,4(r7)
    6994:	003fc406 	br	68a8 <_free_r+0x188>
    6998:	49800515 	stw	r6,20(r9)
    699c:	49800415 	stw	r6,16(r9)
    69a0:	10c00054 	ori	r3,r2,1
    69a4:	31000315 	stw	r4,12(r6)
    69a8:	31000215 	stw	r4,8(r6)
    69ac:	30c00115 	stw	r3,4(r6)
    69b0:	308d883a 	add	r6,r6,r2
    69b4:	30800015 	stw	r2,0(r6)
    69b8:	003fa006 	br	683c <_free_r+0x11c>
    69bc:	01001504 	movi	r4,84
    69c0:	20c00436 	bltu	r4,r3,69d4 <_free_r+0x2b4>
    69c4:	1006d33a 	srli	r3,r2,12
    69c8:	19401b84 	addi	r5,r3,110
    69cc:	2947883a 	add	r3,r5,r5
    69d0:	003fa706 	br	6870 <_free_r+0x150>
    69d4:	01005504 	movi	r4,340
    69d8:	20c00436 	bltu	r4,r3,69ec <_free_r+0x2cc>
    69dc:	1006d3fa 	srli	r3,r2,15
    69e0:	19401dc4 	addi	r5,r3,119
    69e4:	2947883a 	add	r3,r5,r5
    69e8:	003fa106 	br	6870 <_free_r+0x150>
    69ec:	01015504 	movi	r4,1364
    69f0:	20c00436 	bltu	r4,r3,6a04 <_free_r+0x2e4>
    69f4:	1006d4ba 	srli	r3,r2,18
    69f8:	19401f04 	addi	r5,r3,124
    69fc:	2947883a 	add	r3,r5,r5
    6a00:	003f9b06 	br	6870 <_free_r+0x150>
    6a04:	00c03f04 	movi	r3,252
    6a08:	01401f84 	movi	r5,126
    6a0c:	003f9806 	br	6870 <_free_r+0x150>

00006a10 <__sfvwrite_r>:
    6a10:	30800217 	ldw	r2,8(r6)
    6a14:	10004526 	beq	r2,zero,6b2c <__sfvwrite_r+0x11c>
    6a18:	28c0030b 	ldhu	r3,12(r5)
    6a1c:	defff404 	addi	sp,sp,-48
    6a20:	dd400715 	stw	r21,28(sp)
    6a24:	dcc00515 	stw	r19,20(sp)
    6a28:	dc000215 	stw	r16,8(sp)
    6a2c:	dfc00b15 	stw	ra,44(sp)
    6a30:	df000a15 	stw	fp,40(sp)
    6a34:	ddc00915 	stw	r23,36(sp)
    6a38:	dd800815 	stw	r22,32(sp)
    6a3c:	dd000615 	stw	r20,24(sp)
    6a40:	dc800415 	stw	r18,16(sp)
    6a44:	dc400315 	stw	r17,12(sp)
    6a48:	1880020c 	andi	r2,r3,8
    6a4c:	2821883a 	mov	r16,r5
    6a50:	202b883a 	mov	r21,r4
    6a54:	3027883a 	mov	r19,r6
    6a58:	10002526 	beq	r2,zero,6af0 <__sfvwrite_r+0xe0>
    6a5c:	28800417 	ldw	r2,16(r5)
    6a60:	10002326 	beq	r2,zero,6af0 <__sfvwrite_r+0xe0>
    6a64:	1880008c 	andi	r2,r3,2
    6a68:	9c400017 	ldw	r17,0(r19)
    6a6c:	10003126 	beq	r2,zero,6b34 <__sfvwrite_r+0x124>
    6a70:	0029883a 	mov	r20,zero
    6a74:	0025883a 	mov	r18,zero
    6a78:	05810004 	movi	r22,1024
    6a7c:	a00d883a 	mov	r6,r20
    6a80:	a809883a 	mov	r4,r21
    6a84:	90002526 	beq	r18,zero,6b1c <__sfvwrite_r+0x10c>
    6a88:	900f883a 	mov	r7,r18
    6a8c:	81400717 	ldw	r5,28(r16)
    6a90:	b480012e 	bgeu	r22,r18,6a98 <__sfvwrite_r+0x88>
    6a94:	01c10004 	movi	r7,1024
    6a98:	80800917 	ldw	r2,36(r16)
    6a9c:	103ee83a 	callr	r2
    6aa0:	0080510e 	bge	zero,r2,6be8 <__sfvwrite_r+0x1d8>
    6aa4:	98c00217 	ldw	r3,8(r19)
    6aa8:	a0a9883a 	add	r20,r20,r2
    6aac:	90a5c83a 	sub	r18,r18,r2
    6ab0:	1885c83a 	sub	r2,r3,r2
    6ab4:	98800215 	stw	r2,8(r19)
    6ab8:	103ff01e 	bne	r2,zero,6a7c <__sfvwrite_r+0x6c>
    6abc:	0005883a 	mov	r2,zero
    6ac0:	dfc00b17 	ldw	ra,44(sp)
    6ac4:	df000a17 	ldw	fp,40(sp)
    6ac8:	ddc00917 	ldw	r23,36(sp)
    6acc:	dd800817 	ldw	r22,32(sp)
    6ad0:	dd400717 	ldw	r21,28(sp)
    6ad4:	dd000617 	ldw	r20,24(sp)
    6ad8:	dcc00517 	ldw	r19,20(sp)
    6adc:	dc800417 	ldw	r18,16(sp)
    6ae0:	dc400317 	ldw	r17,12(sp)
    6ae4:	dc000217 	ldw	r16,8(sp)
    6ae8:	dec00c04 	addi	sp,sp,48
    6aec:	f800283a 	ret
    6af0:	a809883a 	mov	r4,r21
    6af4:	800b883a 	mov	r5,r16
    6af8:	00045ac0 	call	45ac <__swsetup_r>
    6afc:	80c0030b 	ldhu	r3,12(r16)
    6b00:	103fd826 	beq	r2,zero,6a64 <__sfvwrite_r+0x54>
    6b04:	18c01014 	ori	r3,r3,64
    6b08:	80c0030d 	sth	r3,12(r16)
    6b0c:	00c00244 	movi	r3,9
    6b10:	00bfffc4 	movi	r2,-1
    6b14:	a8c00015 	stw	r3,0(r21)
    6b18:	003fe906 	br	6ac0 <__sfvwrite_r+0xb0>
    6b1c:	8d000017 	ldw	r20,0(r17)
    6b20:	8c800117 	ldw	r18,4(r17)
    6b24:	8c400204 	addi	r17,r17,8
    6b28:	003fd406 	br	6a7c <__sfvwrite_r+0x6c>
    6b2c:	0005883a 	mov	r2,zero
    6b30:	f800283a 	ret
    6b34:	1880004c 	andi	r2,r3,1
    6b38:	1000301e 	bne	r2,zero,6bfc <__sfvwrite_r+0x1ec>
    6b3c:	002f883a 	mov	r23,zero
    6b40:	0025883a 	mov	r18,zero
    6b44:	90001c26 	beq	r18,zero,6bb8 <__sfvwrite_r+0x1a8>
    6b48:	1880800c 	andi	r2,r3,512
    6b4c:	85000217 	ldw	r20,8(r16)
    6b50:	10006c26 	beq	r2,zero,6d04 <__sfvwrite_r+0x2f4>
    6b54:	a02d883a 	mov	r22,r20
    6b58:	95008536 	bltu	r18,r20,6d70 <__sfvwrite_r+0x360>
    6b5c:	1881200c 	andi	r2,r3,1152
    6b60:	10009d1e 	bne	r2,zero,6dd8 <__sfvwrite_r+0x3c8>
    6b64:	81000017 	ldw	r4,0(r16)
    6b68:	a039883a 	mov	fp,r20
    6b6c:	9029883a 	mov	r20,r18
    6b70:	b80b883a 	mov	r5,r23
    6b74:	b00d883a 	mov	r6,r22
    6b78:	00074dc0 	call	74dc <memmove>
    6b7c:	80c00217 	ldw	r3,8(r16)
    6b80:	81000017 	ldw	r4,0(r16)
    6b84:	9005883a 	mov	r2,r18
    6b88:	1f39c83a 	sub	fp,r3,fp
    6b8c:	258f883a 	add	r7,r4,r22
    6b90:	87000215 	stw	fp,8(r16)
    6b94:	81c00015 	stw	r7,0(r16)
    6b98:	98c00217 	ldw	r3,8(r19)
    6b9c:	b8af883a 	add	r23,r23,r2
    6ba0:	90a5c83a 	sub	r18,r18,r2
    6ba4:	1d05c83a 	sub	r2,r3,r20
    6ba8:	98800215 	stw	r2,8(r19)
    6bac:	103fc326 	beq	r2,zero,6abc <__sfvwrite_r+0xac>
    6bb0:	80c0030b 	ldhu	r3,12(r16)
    6bb4:	903fe41e 	bne	r18,zero,6b48 <__sfvwrite_r+0x138>
    6bb8:	8dc00017 	ldw	r23,0(r17)
    6bbc:	8c800117 	ldw	r18,4(r17)
    6bc0:	8c400204 	addi	r17,r17,8
    6bc4:	003fdf06 	br	6b44 <__sfvwrite_r+0x134>
    6bc8:	0001d900 	call	1d90 <_realloc_r>
    6bcc:	102d883a 	mov	r22,r2
    6bd0:	1000a01e 	bne	r2,zero,6e54 <__sfvwrite_r+0x444>
    6bd4:	81400417 	ldw	r5,16(r16)
    6bd8:	a809883a 	mov	r4,r21
    6bdc:	00067200 	call	6720 <_free_r>
    6be0:	00800304 	movi	r2,12
    6be4:	a8800015 	stw	r2,0(r21)
    6be8:	80c0030b 	ldhu	r3,12(r16)
    6bec:	00bfffc4 	movi	r2,-1
    6bf0:	18c01014 	ori	r3,r3,64
    6bf4:	80c0030d 	sth	r3,12(r16)
    6bf8:	003fb106 	br	6ac0 <__sfvwrite_r+0xb0>
    6bfc:	0029883a 	mov	r20,zero
    6c00:	0011883a 	mov	r8,zero
    6c04:	0039883a 	mov	fp,zero
    6c08:	0025883a 	mov	r18,zero
    6c0c:	90001f26 	beq	r18,zero,6c8c <__sfvwrite_r+0x27c>
    6c10:	40006826 	beq	r8,zero,6db4 <__sfvwrite_r+0x3a4>
    6c14:	a02f883a 	mov	r23,r20
    6c18:	9500012e 	bgeu	r18,r20,6c20 <__sfvwrite_r+0x210>
    6c1c:	902f883a 	mov	r23,r18
    6c20:	81000017 	ldw	r4,0(r16)
    6c24:	80800417 	ldw	r2,16(r16)
    6c28:	b82d883a 	mov	r22,r23
    6c2c:	81800217 	ldw	r6,8(r16)
    6c30:	81c00517 	ldw	r7,20(r16)
    6c34:	1100022e 	bgeu	r2,r4,6c40 <__sfvwrite_r+0x230>
    6c38:	31c7883a 	add	r3,r6,r7
    6c3c:	1dc01816 	blt	r3,r23,6ca0 <__sfvwrite_r+0x290>
    6c40:	b9c03f16 	blt	r23,r7,6d40 <__sfvwrite_r+0x330>
    6c44:	80800917 	ldw	r2,36(r16)
    6c48:	81400717 	ldw	r5,28(r16)
    6c4c:	a809883a 	mov	r4,r21
    6c50:	da000115 	stw	r8,4(sp)
    6c54:	e00d883a 	mov	r6,fp
    6c58:	103ee83a 	callr	r2
    6c5c:	102d883a 	mov	r22,r2
    6c60:	da000117 	ldw	r8,4(sp)
    6c64:	00bfe00e 	bge	zero,r2,6be8 <__sfvwrite_r+0x1d8>
    6c68:	a5a9c83a 	sub	r20,r20,r22
    6c6c:	a0001f26 	beq	r20,zero,6cec <__sfvwrite_r+0x2dc>
    6c70:	98800217 	ldw	r2,8(r19)
    6c74:	e5b9883a 	add	fp,fp,r22
    6c78:	95a5c83a 	sub	r18,r18,r22
    6c7c:	15adc83a 	sub	r22,r2,r22
    6c80:	9d800215 	stw	r22,8(r19)
    6c84:	b03f8d26 	beq	r22,zero,6abc <__sfvwrite_r+0xac>
    6c88:	903fe11e 	bne	r18,zero,6c10 <__sfvwrite_r+0x200>
    6c8c:	8f000017 	ldw	fp,0(r17)
    6c90:	8c800117 	ldw	r18,4(r17)
    6c94:	0011883a 	mov	r8,zero
    6c98:	8c400204 	addi	r17,r17,8
    6c9c:	003fdb06 	br	6c0c <__sfvwrite_r+0x1fc>
    6ca0:	180d883a 	mov	r6,r3
    6ca4:	e00b883a 	mov	r5,fp
    6ca8:	da000115 	stw	r8,4(sp)
    6cac:	d8c00015 	stw	r3,0(sp)
    6cb0:	00074dc0 	call	74dc <memmove>
    6cb4:	d8c00017 	ldw	r3,0(sp)
    6cb8:	80800017 	ldw	r2,0(r16)
    6cbc:	a809883a 	mov	r4,r21
    6cc0:	800b883a 	mov	r5,r16
    6cc4:	10c5883a 	add	r2,r2,r3
    6cc8:	80800015 	stw	r2,0(r16)
    6ccc:	d8c00015 	stw	r3,0(sp)
    6cd0:	00060040 	call	6004 <_fflush_r>
    6cd4:	d8c00017 	ldw	r3,0(sp)
    6cd8:	da000117 	ldw	r8,4(sp)
    6cdc:	103fc21e 	bne	r2,zero,6be8 <__sfvwrite_r+0x1d8>
    6ce0:	182d883a 	mov	r22,r3
    6ce4:	a5a9c83a 	sub	r20,r20,r22
    6ce8:	a03fe11e 	bne	r20,zero,6c70 <__sfvwrite_r+0x260>
    6cec:	a809883a 	mov	r4,r21
    6cf0:	800b883a 	mov	r5,r16
    6cf4:	00060040 	call	6004 <_fflush_r>
    6cf8:	103fbb1e 	bne	r2,zero,6be8 <__sfvwrite_r+0x1d8>
    6cfc:	0011883a 	mov	r8,zero
    6d00:	003fdb06 	br	6c70 <__sfvwrite_r+0x260>
    6d04:	81000017 	ldw	r4,0(r16)
    6d08:	80800417 	ldw	r2,16(r16)
    6d0c:	1100012e 	bgeu	r2,r4,6d14 <__sfvwrite_r+0x304>
    6d10:	a4805a36 	bltu	r20,r18,6e7c <__sfvwrite_r+0x46c>
    6d14:	81c00517 	ldw	r7,20(r16)
    6d18:	91c01a36 	bltu	r18,r7,6d84 <__sfvwrite_r+0x374>
    6d1c:	80800917 	ldw	r2,36(r16)
    6d20:	81400717 	ldw	r5,28(r16)
    6d24:	a809883a 	mov	r4,r21
    6d28:	b80d883a 	mov	r6,r23
    6d2c:	103ee83a 	callr	r2
    6d30:	1029883a 	mov	r20,r2
    6d34:	00bfac0e 	bge	zero,r2,6be8 <__sfvwrite_r+0x1d8>
    6d38:	a005883a 	mov	r2,r20
    6d3c:	003f9606 	br	6b98 <__sfvwrite_r+0x188>
    6d40:	b80d883a 	mov	r6,r23
    6d44:	e00b883a 	mov	r5,fp
    6d48:	da000115 	stw	r8,4(sp)
    6d4c:	00074dc0 	call	74dc <memmove>
    6d50:	80800217 	ldw	r2,8(r16)
    6d54:	80c00017 	ldw	r3,0(r16)
    6d58:	da000117 	ldw	r8,4(sp)
    6d5c:	15c5c83a 	sub	r2,r2,r23
    6d60:	1def883a 	add	r23,r3,r23
    6d64:	80800215 	stw	r2,8(r16)
    6d68:	85c00015 	stw	r23,0(r16)
    6d6c:	003fbe06 	br	6c68 <__sfvwrite_r+0x258>
    6d70:	81000017 	ldw	r4,0(r16)
    6d74:	9039883a 	mov	fp,r18
    6d78:	9029883a 	mov	r20,r18
    6d7c:	902d883a 	mov	r22,r18
    6d80:	003f7b06 	br	6b70 <__sfvwrite_r+0x160>
    6d84:	b80b883a 	mov	r5,r23
    6d88:	900d883a 	mov	r6,r18
    6d8c:	00074dc0 	call	74dc <memmove>
    6d90:	80c00217 	ldw	r3,8(r16)
    6d94:	80800017 	ldw	r2,0(r16)
    6d98:	9029883a 	mov	r20,r18
    6d9c:	1c87c83a 	sub	r3,r3,r18
    6da0:	1485883a 	add	r2,r2,r18
    6da4:	80800015 	stw	r2,0(r16)
    6da8:	80c00215 	stw	r3,8(r16)
    6dac:	9005883a 	mov	r2,r18
    6db0:	003f7906 	br	6b98 <__sfvwrite_r+0x188>
    6db4:	e009883a 	mov	r4,fp
    6db8:	01400284 	movi	r5,10
    6dbc:	900d883a 	mov	r6,r18
    6dc0:	00072bc0 	call	72bc <memchr>
    6dc4:	10003826 	beq	r2,zero,6ea8 <__sfvwrite_r+0x498>
    6dc8:	10800044 	addi	r2,r2,1
    6dcc:	1729c83a 	sub	r20,r2,fp
    6dd0:	02000044 	movi	r8,1
    6dd4:	003f8f06 	br	6c14 <__sfvwrite_r+0x204>
    6dd8:	80800517 	ldw	r2,20(r16)
    6ddc:	81400417 	ldw	r5,16(r16)
    6de0:	87000017 	ldw	fp,0(r16)
    6de4:	10a9883a 	add	r20,r2,r2
    6de8:	a085883a 	add	r2,r20,r2
    6dec:	1028d7fa 	srli	r20,r2,31
    6df0:	e179c83a 	sub	fp,fp,r5
    6df4:	e1000044 	addi	r4,fp,1
    6df8:	a085883a 	add	r2,r20,r2
    6dfc:	1029d07a 	srai	r20,r2,1
    6e00:	2485883a 	add	r2,r4,r18
    6e04:	a00d883a 	mov	r6,r20
    6e08:	a080022e 	bgeu	r20,r2,6e14 <__sfvwrite_r+0x404>
    6e0c:	1029883a 	mov	r20,r2
    6e10:	100d883a 	mov	r6,r2
    6e14:	18c1000c 	andi	r3,r3,1024
    6e18:	a809883a 	mov	r4,r21
    6e1c:	183f6a26 	beq	r3,zero,6bc8 <__sfvwrite_r+0x1b8>
    6e20:	300b883a 	mov	r5,r6
    6e24:	00013300 	call	1330 <_malloc_r>
    6e28:	102d883a 	mov	r22,r2
    6e2c:	103f6c26 	beq	r2,zero,6be0 <__sfvwrite_r+0x1d0>
    6e30:	81400417 	ldw	r5,16(r16)
    6e34:	1009883a 	mov	r4,r2
    6e38:	e00d883a 	mov	r6,fp
    6e3c:	00073a40 	call	73a4 <memcpy>
    6e40:	8080030b 	ldhu	r2,12(r16)
    6e44:	00fedfc4 	movi	r3,-1153
    6e48:	10c4703a 	and	r2,r2,r3
    6e4c:	10802014 	ori	r2,r2,128
    6e50:	8080030d 	sth	r2,12(r16)
    6e54:	b709883a 	add	r4,r22,fp
    6e58:	a707c83a 	sub	r3,r20,fp
    6e5c:	85800415 	stw	r22,16(r16)
    6e60:	85000515 	stw	r20,20(r16)
    6e64:	81000015 	stw	r4,0(r16)
    6e68:	9039883a 	mov	fp,r18
    6e6c:	80c00215 	stw	r3,8(r16)
    6e70:	9029883a 	mov	r20,r18
    6e74:	902d883a 	mov	r22,r18
    6e78:	003f3d06 	br	6b70 <__sfvwrite_r+0x160>
    6e7c:	b80b883a 	mov	r5,r23
    6e80:	a00d883a 	mov	r6,r20
    6e84:	00074dc0 	call	74dc <memmove>
    6e88:	80800017 	ldw	r2,0(r16)
    6e8c:	a809883a 	mov	r4,r21
    6e90:	800b883a 	mov	r5,r16
    6e94:	1505883a 	add	r2,r2,r20
    6e98:	80800015 	stw	r2,0(r16)
    6e9c:	00060040 	call	6004 <_fflush_r>
    6ea0:	103fa526 	beq	r2,zero,6d38 <__sfvwrite_r+0x328>
    6ea4:	003f5006 	br	6be8 <__sfvwrite_r+0x1d8>
    6ea8:	95000044 	addi	r20,r18,1
    6eac:	02000044 	movi	r8,1
    6eb0:	003f5806 	br	6c14 <__sfvwrite_r+0x204>

00006eb4 <_fwalk>:
    6eb4:	defff804 	addi	sp,sp,-32
    6eb8:	dd400515 	stw	r21,20(sp)
    6ebc:	2540b804 	addi	r21,r4,736
    6ec0:	dd800615 	stw	r22,24(sp)
    6ec4:	dd000415 	stw	r20,16(sp)
    6ec8:	dfc00715 	stw	ra,28(sp)
    6ecc:	dcc00315 	stw	r19,12(sp)
    6ed0:	dc800215 	stw	r18,8(sp)
    6ed4:	dc400115 	stw	r17,4(sp)
    6ed8:	dc000015 	stw	r16,0(sp)
    6edc:	2829883a 	mov	r20,r5
    6ee0:	002d883a 	mov	r22,zero
    6ee4:	00065bc0 	call	65bc <__sfp_lock_acquire>
    6ee8:	a8001426 	beq	r21,zero,6f3c <_fwalk+0x88>
    6eec:	04ffffc4 	movi	r19,-1
    6ef0:	ac400117 	ldw	r17,4(r21)
    6ef4:	ac800217 	ldw	r18,8(r21)
    6ef8:	8c7fffc4 	addi	r17,r17,-1
    6efc:	88000d16 	blt	r17,zero,6f34 <_fwalk+0x80>
    6f00:	94000304 	addi	r16,r18,12
    6f04:	94800384 	addi	r18,r18,14
    6f08:	80c0000f 	ldh	r3,0(r16)
    6f0c:	8c7fffc4 	addi	r17,r17,-1
    6f10:	813ffd04 	addi	r4,r16,-12
    6f14:	18000426 	beq	r3,zero,6f28 <_fwalk+0x74>
    6f18:	90c0000f 	ldh	r3,0(r18)
    6f1c:	1cc00226 	beq	r3,r19,6f28 <_fwalk+0x74>
    6f20:	a03ee83a 	callr	r20
    6f24:	b0acb03a 	or	r22,r22,r2
    6f28:	84001a04 	addi	r16,r16,104
    6f2c:	94801a04 	addi	r18,r18,104
    6f30:	8cfff51e 	bne	r17,r19,6f08 <_fwalk+0x54>
    6f34:	ad400017 	ldw	r21,0(r21)
    6f38:	a83fed1e 	bne	r21,zero,6ef0 <_fwalk+0x3c>
    6f3c:	00065c00 	call	65c0 <__sfp_lock_release>
    6f40:	b005883a 	mov	r2,r22
    6f44:	dfc00717 	ldw	ra,28(sp)
    6f48:	dd800617 	ldw	r22,24(sp)
    6f4c:	dd400517 	ldw	r21,20(sp)
    6f50:	dd000417 	ldw	r20,16(sp)
    6f54:	dcc00317 	ldw	r19,12(sp)
    6f58:	dc800217 	ldw	r18,8(sp)
    6f5c:	dc400117 	ldw	r17,4(sp)
    6f60:	dc000017 	ldw	r16,0(sp)
    6f64:	dec00804 	addi	sp,sp,32
    6f68:	f800283a 	ret

00006f6c <_fwalk_reent>:
    6f6c:	defff804 	addi	sp,sp,-32
    6f70:	dd400515 	stw	r21,20(sp)
    6f74:	2540b804 	addi	r21,r4,736
    6f78:	dd800615 	stw	r22,24(sp)
    6f7c:	dd000415 	stw	r20,16(sp)
    6f80:	dcc00315 	stw	r19,12(sp)
    6f84:	dfc00715 	stw	ra,28(sp)
    6f88:	dc800215 	stw	r18,8(sp)
    6f8c:	dc400115 	stw	r17,4(sp)
    6f90:	dc000015 	stw	r16,0(sp)
    6f94:	2027883a 	mov	r19,r4
    6f98:	2829883a 	mov	r20,r5
    6f9c:	002d883a 	mov	r22,zero
    6fa0:	00065bc0 	call	65bc <__sfp_lock_acquire>
    6fa4:	a8001326 	beq	r21,zero,6ff4 <_fwalk_reent+0x88>
    6fa8:	04bfffc4 	movi	r18,-1
    6fac:	ac400117 	ldw	r17,4(r21)
    6fb0:	ac000217 	ldw	r16,8(r21)
    6fb4:	8c7fffc4 	addi	r17,r17,-1
    6fb8:	88000c16 	blt	r17,zero,6fec <_fwalk_reent+0x80>
    6fbc:	84000304 	addi	r16,r16,12
    6fc0:	80c0000f 	ldh	r3,0(r16)
    6fc4:	8c7fffc4 	addi	r17,r17,-1
    6fc8:	817ffd04 	addi	r5,r16,-12
    6fcc:	18000526 	beq	r3,zero,6fe4 <_fwalk_reent+0x78>
    6fd0:	80c0008f 	ldh	r3,2(r16)
    6fd4:	9809883a 	mov	r4,r19
    6fd8:	1c800226 	beq	r3,r18,6fe4 <_fwalk_reent+0x78>
    6fdc:	a03ee83a 	callr	r20
    6fe0:	b0acb03a 	or	r22,r22,r2
    6fe4:	84001a04 	addi	r16,r16,104
    6fe8:	8cbff51e 	bne	r17,r18,6fc0 <_fwalk_reent+0x54>
    6fec:	ad400017 	ldw	r21,0(r21)
    6ff0:	a83fee1e 	bne	r21,zero,6fac <_fwalk_reent+0x40>
    6ff4:	00065c00 	call	65c0 <__sfp_lock_release>
    6ff8:	b005883a 	mov	r2,r22
    6ffc:	dfc00717 	ldw	ra,28(sp)
    7000:	dd800617 	ldw	r22,24(sp)
    7004:	dd400517 	ldw	r21,20(sp)
    7008:	dd000417 	ldw	r20,16(sp)
    700c:	dcc00317 	ldw	r19,12(sp)
    7010:	dc800217 	ldw	r18,8(sp)
    7014:	dc400117 	ldw	r17,4(sp)
    7018:	dc000017 	ldw	r16,0(sp)
    701c:	dec00804 	addi	sp,sp,32
    7020:	f800283a 	ret

00007024 <_setlocale_r>:
    7024:	30001b26 	beq	r6,zero,7094 <_setlocale_r+0x70>
    7028:	01400074 	movhi	r5,1
    702c:	defffe04 	addi	sp,sp,-8
    7030:	29400804 	addi	r5,r5,32
    7034:	3009883a 	mov	r4,r6
    7038:	dc000015 	stw	r16,0(sp)
    703c:	dfc00115 	stw	ra,4(sp)
    7040:	3021883a 	mov	r16,r6
    7044:	00088980 	call	8898 <strcmp>
    7048:	1000061e 	bne	r2,zero,7064 <_setlocale_r+0x40>
    704c:	00800074 	movhi	r2,1
    7050:	10bfe904 	addi	r2,r2,-92
    7054:	dfc00117 	ldw	ra,4(sp)
    7058:	dc000017 	ldw	r16,0(sp)
    705c:	dec00204 	addi	sp,sp,8
    7060:	f800283a 	ret
    7064:	01400074 	movhi	r5,1
    7068:	297fe904 	addi	r5,r5,-92
    706c:	8009883a 	mov	r4,r16
    7070:	00088980 	call	8898 <strcmp>
    7074:	103ff526 	beq	r2,zero,704c <_setlocale_r+0x28>
    7078:	01400074 	movhi	r5,1
    707c:	297ff304 	addi	r5,r5,-52
    7080:	8009883a 	mov	r4,r16
    7084:	00088980 	call	8898 <strcmp>
    7088:	103ff026 	beq	r2,zero,704c <_setlocale_r+0x28>
    708c:	0005883a 	mov	r2,zero
    7090:	003ff006 	br	7054 <_setlocale_r+0x30>
    7094:	00800074 	movhi	r2,1
    7098:	10bfe904 	addi	r2,r2,-92
    709c:	f800283a 	ret

000070a0 <__locale_charset>:
    70a0:	00800074 	movhi	r2,1
    70a4:	1082ba04 	addi	r2,r2,2792
    70a8:	f800283a 	ret

000070ac <__locale_mb_cur_max>:
    70ac:	00800074 	movhi	r2,1
    70b0:	10875604 	addi	r2,r2,7512
    70b4:	10800017 	ldw	r2,0(r2)
    70b8:	f800283a 	ret

000070bc <__locale_msgcharset>:
    70bc:	00800074 	movhi	r2,1
    70c0:	1082b204 	addi	r2,r2,2760
    70c4:	f800283a 	ret

000070c8 <__locale_cjk_lang>:
    70c8:	0005883a 	mov	r2,zero
    70cc:	f800283a 	ret

000070d0 <_localeconv_r>:
    70d0:	00800074 	movhi	r2,1
    70d4:	1082c204 	addi	r2,r2,2824
    70d8:	f800283a 	ret

000070dc <setlocale>:
    70dc:	00c00074 	movhi	r3,1
    70e0:	18c75304 	addi	r3,r3,7500
    70e4:	2005883a 	mov	r2,r4
    70e8:	19000017 	ldw	r4,0(r3)
    70ec:	280d883a 	mov	r6,r5
    70f0:	100b883a 	mov	r5,r2
    70f4:	00070241 	jmpi	7024 <_setlocale_r>

000070f8 <localeconv>:
    70f8:	00800074 	movhi	r2,1
    70fc:	1082c204 	addi	r2,r2,2824
    7100:	f800283a 	ret

00007104 <__smakebuf_r>:
    7104:	2880030b 	ldhu	r2,12(r5)
    7108:	10c0008c 	andi	r3,r2,2
    710c:	1800401e 	bne	r3,zero,7210 <__smakebuf_r+0x10c>
    7110:	deffec04 	addi	sp,sp,-80
    7114:	dc000f15 	stw	r16,60(sp)
    7118:	2821883a 	mov	r16,r5
    711c:	2940038f 	ldh	r5,14(r5)
    7120:	dc401015 	stw	r17,64(sp)
    7124:	dfc01315 	stw	ra,76(sp)
    7128:	dcc01215 	stw	r19,72(sp)
    712c:	dc801115 	stw	r18,68(sp)
    7130:	2023883a 	mov	r17,r4
    7134:	28001b16 	blt	r5,zero,71a4 <__smakebuf_r+0xa0>
    7138:	d80d883a 	mov	r6,sp
    713c:	000a2340 	call	a234 <_fstat_r>
    7140:	10001716 	blt	r2,zero,71a0 <__smakebuf_r+0x9c>
    7144:	d8800117 	ldw	r2,4(sp)
    7148:	00e00014 	movui	r3,32768
    714c:	10bc000c 	andi	r2,r2,61440
    7150:	10c03726 	beq	r2,r3,7230 <__smakebuf_r+0x12c>
    7154:	80c0030b 	ldhu	r3,12(r16)
    7158:	18c20014 	ori	r3,r3,2048
    715c:	80c0030d 	sth	r3,12(r16)
    7160:	00c80004 	movi	r3,8192
    7164:	10c03c1e 	bne	r2,r3,7258 <__smakebuf_r+0x154>
    7168:	8140038f 	ldh	r5,14(r16)
    716c:	8809883a 	mov	r4,r17
    7170:	000a28c0 	call	a28c <_isatty_r>
    7174:	10004e26 	beq	r2,zero,72b0 <__smakebuf_r+0x1ac>
    7178:	8080030b 	ldhu	r2,12(r16)
    717c:	04c00044 	movi	r19,1
    7180:	80c010c4 	addi	r3,r16,67
    7184:	14c4b03a 	or	r2,r2,r19
    7188:	8080030d 	sth	r2,12(r16)
    718c:	80c00015 	stw	r3,0(r16)
    7190:	80c00415 	stw	r3,16(r16)
    7194:	84c00515 	stw	r19,20(r16)
    7198:	04810004 	movi	r18,1024
    719c:	00000706 	br	71bc <__smakebuf_r+0xb8>
    71a0:	8080030b 	ldhu	r2,12(r16)
    71a4:	10c0200c 	andi	r3,r2,128
    71a8:	18001f1e 	bne	r3,zero,7228 <__smakebuf_r+0x124>
    71ac:	04810004 	movi	r18,1024
    71b0:	10820014 	ori	r2,r2,2048
    71b4:	8080030d 	sth	r2,12(r16)
    71b8:	0027883a 	mov	r19,zero
    71bc:	8809883a 	mov	r4,r17
    71c0:	900b883a 	mov	r5,r18
    71c4:	00013300 	call	1330 <_malloc_r>
    71c8:	10002e26 	beq	r2,zero,7284 <__smakebuf_r+0x180>
    71cc:	80c0030b 	ldhu	r3,12(r16)
    71d0:	01000034 	movhi	r4,0
    71d4:	21189b04 	addi	r4,r4,25196
    71d8:	89000f15 	stw	r4,60(r17)
    71dc:	18c02014 	ori	r3,r3,128
    71e0:	80c0030d 	sth	r3,12(r16)
    71e4:	80800015 	stw	r2,0(r16)
    71e8:	80800415 	stw	r2,16(r16)
    71ec:	84800515 	stw	r18,20(r16)
    71f0:	98001c1e 	bne	r19,zero,7264 <__smakebuf_r+0x160>
    71f4:	dfc01317 	ldw	ra,76(sp)
    71f8:	dcc01217 	ldw	r19,72(sp)
    71fc:	dc801117 	ldw	r18,68(sp)
    7200:	dc401017 	ldw	r17,64(sp)
    7204:	dc000f17 	ldw	r16,60(sp)
    7208:	dec01404 	addi	sp,sp,80
    720c:	f800283a 	ret
    7210:	288010c4 	addi	r2,r5,67
    7214:	28800015 	stw	r2,0(r5)
    7218:	28800415 	stw	r2,16(r5)
    721c:	00800044 	movi	r2,1
    7220:	28800515 	stw	r2,20(r5)
    7224:	f800283a 	ret
    7228:	04801004 	movi	r18,64
    722c:	003fe006 	br	71b0 <__smakebuf_r+0xac>
    7230:	81000a17 	ldw	r4,40(r16)
    7234:	00c00074 	movhi	r3,1
    7238:	18e20d04 	addi	r3,r3,-30668
    723c:	20ffc51e 	bne	r4,r3,7154 <__smakebuf_r+0x50>
    7240:	80c0030b 	ldhu	r3,12(r16)
    7244:	01010004 	movi	r4,1024
    7248:	81001315 	stw	r4,76(r16)
    724c:	1906b03a 	or	r3,r3,r4
    7250:	80c0030d 	sth	r3,12(r16)
    7254:	003fc206 	br	7160 <__smakebuf_r+0x5c>
    7258:	0027883a 	mov	r19,zero
    725c:	04810004 	movi	r18,1024
    7260:	003fd606 	br	71bc <__smakebuf_r+0xb8>
    7264:	8140038f 	ldh	r5,14(r16)
    7268:	8809883a 	mov	r4,r17
    726c:	000a28c0 	call	a28c <_isatty_r>
    7270:	103fe026 	beq	r2,zero,71f4 <__smakebuf_r+0xf0>
    7274:	8080030b 	ldhu	r2,12(r16)
    7278:	10800054 	ori	r2,r2,1
    727c:	8080030d 	sth	r2,12(r16)
    7280:	003fdc06 	br	71f4 <__smakebuf_r+0xf0>
    7284:	8080030b 	ldhu	r2,12(r16)
    7288:	10c0800c 	andi	r3,r2,512
    728c:	183fd91e 	bne	r3,zero,71f4 <__smakebuf_r+0xf0>
    7290:	10800094 	ori	r2,r2,2
    7294:	80c010c4 	addi	r3,r16,67
    7298:	8080030d 	sth	r2,12(r16)
    729c:	00800044 	movi	r2,1
    72a0:	80c00015 	stw	r3,0(r16)
    72a4:	80c00415 	stw	r3,16(r16)
    72a8:	80800515 	stw	r2,20(r16)
    72ac:	003fd106 	br	71f4 <__smakebuf_r+0xf0>
    72b0:	04c00044 	movi	r19,1
    72b4:	04810004 	movi	r18,1024
    72b8:	003fc006 	br	71bc <__smakebuf_r+0xb8>

000072bc <memchr>:
    72bc:	208000cc 	andi	r2,r4,3
    72c0:	280f883a 	mov	r7,r5
    72c4:	10003526 	beq	r2,zero,739c <memchr+0xe0>
    72c8:	30bfffc4 	addi	r2,r6,-1
    72cc:	30001b26 	beq	r6,zero,733c <memchr+0x80>
    72d0:	21800003 	ldbu	r6,0(r4)
    72d4:	28c03fcc 	andi	r3,r5,255
    72d8:	30c01a26 	beq	r6,r3,7344 <memchr+0x88>
    72dc:	180d883a 	mov	r6,r3
    72e0:	00000406 	br	72f4 <memchr+0x38>
    72e4:	10001526 	beq	r2,zero,733c <memchr+0x80>
    72e8:	20c00003 	ldbu	r3,0(r4)
    72ec:	10bfffc4 	addi	r2,r2,-1
    72f0:	19801426 	beq	r3,r6,7344 <memchr+0x88>
    72f4:	21000044 	addi	r4,r4,1
    72f8:	20c000cc 	andi	r3,r4,3
    72fc:	183ff91e 	bne	r3,zero,72e4 <memchr+0x28>
    7300:	024000c4 	movi	r9,3
    7304:	48801136 	bltu	r9,r2,734c <memchr+0x90>
    7308:	10000c26 	beq	r2,zero,733c <memchr+0x80>
    730c:	20c00003 	ldbu	r3,0(r4)
    7310:	29403fcc 	andi	r5,r5,255
    7314:	19400b26 	beq	r3,r5,7344 <memchr+0x88>
    7318:	20c00044 	addi	r3,r4,1
    731c:	2085883a 	add	r2,r4,r2
    7320:	39803fcc 	andi	r6,r7,255
    7324:	00000306 	br	7334 <memchr+0x78>
    7328:	18c00044 	addi	r3,r3,1
    732c:	197fffc3 	ldbu	r5,-1(r3)
    7330:	29800426 	beq	r5,r6,7344 <memchr+0x88>
    7334:	1809883a 	mov	r4,r3
    7338:	18bffb1e 	bne	r3,r2,7328 <memchr+0x6c>
    733c:	0005883a 	mov	r2,zero
    7340:	f800283a 	ret
    7344:	2005883a 	mov	r2,r4
    7348:	f800283a 	ret
    734c:	28c03fcc 	andi	r3,r5,255
    7350:	1810923a 	slli	r8,r3,8
    7354:	02ffbff4 	movhi	r11,65279
    7358:	02a02074 	movhi	r10,32897
    735c:	40c6b03a 	or	r3,r8,r3
    7360:	1810943a 	slli	r8,r3,16
    7364:	5affbfc4 	addi	r11,r11,-257
    7368:	52a02004 	addi	r10,r10,-32640
    736c:	40d0b03a 	or	r8,r8,r3
    7370:	20c00017 	ldw	r3,0(r4)
    7374:	40c6f03a 	xor	r3,r8,r3
    7378:	1acd883a 	add	r6,r3,r11
    737c:	00c6303a 	nor	r3,zero,r3
    7380:	30c6703a 	and	r3,r6,r3
    7384:	1a86703a 	and	r3,r3,r10
    7388:	183fdf1e 	bne	r3,zero,7308 <memchr+0x4c>
    738c:	10bfff04 	addi	r2,r2,-4
    7390:	21000104 	addi	r4,r4,4
    7394:	48bff636 	bltu	r9,r2,7370 <memchr+0xb4>
    7398:	003fdb06 	br	7308 <memchr+0x4c>
    739c:	3005883a 	mov	r2,r6
    73a0:	003fd706 	br	7300 <memchr+0x44>

000073a4 <memcpy>:
    73a4:	deffff04 	addi	sp,sp,-4
    73a8:	dc000015 	stw	r16,0(sp)
    73ac:	00c003c4 	movi	r3,15
    73b0:	2005883a 	mov	r2,r4
    73b4:	1980432e 	bgeu	r3,r6,74c4 <memcpy+0x120>
    73b8:	2146b03a 	or	r3,r4,r5
    73bc:	18c000cc 	andi	r3,r3,3
    73c0:	1800421e 	bne	r3,zero,74cc <memcpy+0x128>
    73c4:	343ffc04 	addi	r16,r6,-16
    73c8:	8020d13a 	srli	r16,r16,4
    73cc:	28c00104 	addi	r3,r5,4
    73d0:	23400104 	addi	r13,r4,4
    73d4:	801e913a 	slli	r15,r16,4
    73d8:	2b000204 	addi	r12,r5,8
    73dc:	22c00204 	addi	r11,r4,8
    73e0:	7bc00504 	addi	r15,r15,20
    73e4:	2a800304 	addi	r10,r5,12
    73e8:	22400304 	addi	r9,r4,12
    73ec:	2bdf883a 	add	r15,r5,r15
    73f0:	2811883a 	mov	r8,r5
    73f4:	200f883a 	mov	r7,r4
    73f8:	41000017 	ldw	r4,0(r8)
    73fc:	39c00404 	addi	r7,r7,16
    7400:	18c00404 	addi	r3,r3,16
    7404:	393ffc15 	stw	r4,-16(r7)
    7408:	1bbffc17 	ldw	r14,-16(r3)
    740c:	6b400404 	addi	r13,r13,16
    7410:	5ac00404 	addi	r11,r11,16
    7414:	6bbffc15 	stw	r14,-16(r13)
    7418:	63800017 	ldw	r14,0(r12)
    741c:	4a400404 	addi	r9,r9,16
    7420:	42000404 	addi	r8,r8,16
    7424:	5bbffc15 	stw	r14,-16(r11)
    7428:	53800017 	ldw	r14,0(r10)
    742c:	63000404 	addi	r12,r12,16
    7430:	52800404 	addi	r10,r10,16
    7434:	4bbffc15 	stw	r14,-16(r9)
    7438:	1bffef1e 	bne	r3,r15,73f8 <memcpy+0x54>
    743c:	81c00044 	addi	r7,r16,1
    7440:	380e913a 	slli	r7,r7,4
    7444:	310003cc 	andi	r4,r6,15
    7448:	02c000c4 	movi	r11,3
    744c:	11c7883a 	add	r3,r2,r7
    7450:	29cb883a 	add	r5,r5,r7
    7454:	59001f2e 	bgeu	r11,r4,74d4 <memcpy+0x130>
    7458:	1813883a 	mov	r9,r3
    745c:	2811883a 	mov	r8,r5
    7460:	200f883a 	mov	r7,r4
    7464:	42800017 	ldw	r10,0(r8)
    7468:	4a400104 	addi	r9,r9,4
    746c:	39ffff04 	addi	r7,r7,-4
    7470:	4abfff15 	stw	r10,-4(r9)
    7474:	42000104 	addi	r8,r8,4
    7478:	59fffa36 	bltu	r11,r7,7464 <memcpy+0xc0>
    747c:	213fff04 	addi	r4,r4,-4
    7480:	2008d0ba 	srli	r4,r4,2
    7484:	318000cc 	andi	r6,r6,3
    7488:	21000044 	addi	r4,r4,1
    748c:	2109883a 	add	r4,r4,r4
    7490:	2109883a 	add	r4,r4,r4
    7494:	1907883a 	add	r3,r3,r4
    7498:	290b883a 	add	r5,r5,r4
    749c:	30000626 	beq	r6,zero,74b8 <memcpy+0x114>
    74a0:	198d883a 	add	r6,r3,r6
    74a4:	29c00003 	ldbu	r7,0(r5)
    74a8:	18c00044 	addi	r3,r3,1
    74ac:	29400044 	addi	r5,r5,1
    74b0:	19ffffc5 	stb	r7,-1(r3)
    74b4:	19bffb1e 	bne	r3,r6,74a4 <memcpy+0x100>
    74b8:	dc000017 	ldw	r16,0(sp)
    74bc:	dec00104 	addi	sp,sp,4
    74c0:	f800283a 	ret
    74c4:	2007883a 	mov	r3,r4
    74c8:	003ff406 	br	749c <memcpy+0xf8>
    74cc:	2007883a 	mov	r3,r4
    74d0:	003ff306 	br	74a0 <memcpy+0xfc>
    74d4:	200d883a 	mov	r6,r4
    74d8:	003ff006 	br	749c <memcpy+0xf8>

000074dc <memmove>:
    74dc:	2005883a 	mov	r2,r4
    74e0:	29000b2e 	bgeu	r5,r4,7510 <memmove+0x34>
    74e4:	298f883a 	add	r7,r5,r6
    74e8:	21c0092e 	bgeu	r4,r7,7510 <memmove+0x34>
    74ec:	2187883a 	add	r3,r4,r6
    74f0:	198bc83a 	sub	r5,r3,r6
    74f4:	30004b26 	beq	r6,zero,7624 <memmove+0x148>
    74f8:	39ffffc4 	addi	r7,r7,-1
    74fc:	39000003 	ldbu	r4,0(r7)
    7500:	18ffffc4 	addi	r3,r3,-1
    7504:	19000005 	stb	r4,0(r3)
    7508:	197ffb1e 	bne	r3,r5,74f8 <memmove+0x1c>
    750c:	f800283a 	ret
    7510:	00c003c4 	movi	r3,15
    7514:	1980412e 	bgeu	r3,r6,761c <memmove+0x140>
    7518:	1146b03a 	or	r3,r2,r5
    751c:	18c000cc 	andi	r3,r3,3
    7520:	1800411e 	bne	r3,zero,7628 <memmove+0x14c>
    7524:	33fffc04 	addi	r15,r6,-16
    7528:	781ed13a 	srli	r15,r15,4
    752c:	28c00104 	addi	r3,r5,4
    7530:	13400104 	addi	r13,r2,4
    7534:	781c913a 	slli	r14,r15,4
    7538:	2b000204 	addi	r12,r5,8
    753c:	12c00204 	addi	r11,r2,8
    7540:	73800504 	addi	r14,r14,20
    7544:	2a800304 	addi	r10,r5,12
    7548:	12400304 	addi	r9,r2,12
    754c:	2b9d883a 	add	r14,r5,r14
    7550:	2811883a 	mov	r8,r5
    7554:	100f883a 	mov	r7,r2
    7558:	41000017 	ldw	r4,0(r8)
    755c:	39c00404 	addi	r7,r7,16
    7560:	18c00404 	addi	r3,r3,16
    7564:	393ffc15 	stw	r4,-16(r7)
    7568:	193ffc17 	ldw	r4,-16(r3)
    756c:	6b400404 	addi	r13,r13,16
    7570:	5ac00404 	addi	r11,r11,16
    7574:	693ffc15 	stw	r4,-16(r13)
    7578:	61000017 	ldw	r4,0(r12)
    757c:	4a400404 	addi	r9,r9,16
    7580:	42000404 	addi	r8,r8,16
    7584:	593ffc15 	stw	r4,-16(r11)
    7588:	51000017 	ldw	r4,0(r10)
    758c:	63000404 	addi	r12,r12,16
    7590:	52800404 	addi	r10,r10,16
    7594:	493ffc15 	stw	r4,-16(r9)
    7598:	1bbfef1e 	bne	r3,r14,7558 <memmove+0x7c>
    759c:	79000044 	addi	r4,r15,1
    75a0:	2008913a 	slli	r4,r4,4
    75a4:	328003cc 	andi	r10,r6,15
    75a8:	02c000c4 	movi	r11,3
    75ac:	1107883a 	add	r3,r2,r4
    75b0:	290b883a 	add	r5,r5,r4
    75b4:	5a801e2e 	bgeu	r11,r10,7630 <memmove+0x154>
    75b8:	1813883a 	mov	r9,r3
    75bc:	2811883a 	mov	r8,r5
    75c0:	500f883a 	mov	r7,r10
    75c4:	41000017 	ldw	r4,0(r8)
    75c8:	4a400104 	addi	r9,r9,4
    75cc:	39ffff04 	addi	r7,r7,-4
    75d0:	493fff15 	stw	r4,-4(r9)
    75d4:	42000104 	addi	r8,r8,4
    75d8:	59fffa36 	bltu	r11,r7,75c4 <memmove+0xe8>
    75dc:	513fff04 	addi	r4,r10,-4
    75e0:	2008d0ba 	srli	r4,r4,2
    75e4:	318000cc 	andi	r6,r6,3
    75e8:	21000044 	addi	r4,r4,1
    75ec:	2109883a 	add	r4,r4,r4
    75f0:	2109883a 	add	r4,r4,r4
    75f4:	1907883a 	add	r3,r3,r4
    75f8:	290b883a 	add	r5,r5,r4
    75fc:	30000926 	beq	r6,zero,7624 <memmove+0x148>
    7600:	198d883a 	add	r6,r3,r6
    7604:	29c00003 	ldbu	r7,0(r5)
    7608:	18c00044 	addi	r3,r3,1
    760c:	29400044 	addi	r5,r5,1
    7610:	19ffffc5 	stb	r7,-1(r3)
    7614:	19bffb1e 	bne	r3,r6,7604 <memmove+0x128>
    7618:	f800283a 	ret
    761c:	1007883a 	mov	r3,r2
    7620:	003ff606 	br	75fc <memmove+0x120>
    7624:	f800283a 	ret
    7628:	1007883a 	mov	r3,r2
    762c:	003ff406 	br	7600 <memmove+0x124>
    7630:	500d883a 	mov	r6,r10
    7634:	003ff106 	br	75fc <memmove+0x120>

00007638 <memset>:
    7638:	20c000cc 	andi	r3,r4,3
    763c:	2005883a 	mov	r2,r4
    7640:	18004326 	beq	r3,zero,7750 <memset+0x118>
    7644:	31ffffc4 	addi	r7,r6,-1
    7648:	30004026 	beq	r6,zero,774c <memset+0x114>
    764c:	2813883a 	mov	r9,r5
    7650:	200d883a 	mov	r6,r4
    7654:	2007883a 	mov	r3,r4
    7658:	00000406 	br	766c <memset+0x34>
    765c:	3a3fffc4 	addi	r8,r7,-1
    7660:	31800044 	addi	r6,r6,1
    7664:	38003926 	beq	r7,zero,774c <memset+0x114>
    7668:	400f883a 	mov	r7,r8
    766c:	18c00044 	addi	r3,r3,1
    7670:	32400005 	stb	r9,0(r6)
    7674:	1a0000cc 	andi	r8,r3,3
    7678:	403ff81e 	bne	r8,zero,765c <memset+0x24>
    767c:	010000c4 	movi	r4,3
    7680:	21c02d2e 	bgeu	r4,r7,7738 <memset+0x100>
    7684:	29803fcc 	andi	r6,r5,255
    7688:	3008923a 	slli	r4,r6,8
    768c:	218cb03a 	or	r6,r4,r6
    7690:	3008943a 	slli	r4,r6,16
    7694:	218cb03a 	or	r6,r4,r6
    7698:	010003c4 	movi	r4,15
    769c:	21c0182e 	bgeu	r4,r7,7700 <memset+0xc8>
    76a0:	3b3ffc04 	addi	r12,r7,-16
    76a4:	6018d13a 	srli	r12,r12,4
    76a8:	1a000104 	addi	r8,r3,4
    76ac:	1ac00204 	addi	r11,r3,8
    76b0:	6008913a 	slli	r4,r12,4
    76b4:	1a800304 	addi	r10,r3,12
    76b8:	1813883a 	mov	r9,r3
    76bc:	21000504 	addi	r4,r4,20
    76c0:	1909883a 	add	r4,r3,r4
    76c4:	49800015 	stw	r6,0(r9)
    76c8:	41800015 	stw	r6,0(r8)
    76cc:	59800015 	stw	r6,0(r11)
    76d0:	51800015 	stw	r6,0(r10)
    76d4:	42000404 	addi	r8,r8,16
    76d8:	4a400404 	addi	r9,r9,16
    76dc:	5ac00404 	addi	r11,r11,16
    76e0:	52800404 	addi	r10,r10,16
    76e4:	413ff71e 	bne	r8,r4,76c4 <memset+0x8c>
    76e8:	63000044 	addi	r12,r12,1
    76ec:	6018913a 	slli	r12,r12,4
    76f0:	39c003cc 	andi	r7,r7,15
    76f4:	010000c4 	movi	r4,3
    76f8:	1b07883a 	add	r3,r3,r12
    76fc:	21c00e2e 	bgeu	r4,r7,7738 <memset+0x100>
    7700:	1813883a 	mov	r9,r3
    7704:	3811883a 	mov	r8,r7
    7708:	010000c4 	movi	r4,3
    770c:	49800015 	stw	r6,0(r9)
    7710:	423fff04 	addi	r8,r8,-4
    7714:	4a400104 	addi	r9,r9,4
    7718:	223ffc36 	bltu	r4,r8,770c <memset+0xd4>
    771c:	393fff04 	addi	r4,r7,-4
    7720:	2008d0ba 	srli	r4,r4,2
    7724:	39c000cc 	andi	r7,r7,3
    7728:	21000044 	addi	r4,r4,1
    772c:	2109883a 	add	r4,r4,r4
    7730:	2109883a 	add	r4,r4,r4
    7734:	1907883a 	add	r3,r3,r4
    7738:	38000426 	beq	r7,zero,774c <memset+0x114>
    773c:	19cf883a 	add	r7,r3,r7
    7740:	19400005 	stb	r5,0(r3)
    7744:	18c00044 	addi	r3,r3,1
    7748:	19fffd1e 	bne	r3,r7,7740 <memset+0x108>
    774c:	f800283a 	ret
    7750:	2007883a 	mov	r3,r4
    7754:	300f883a 	mov	r7,r6
    7758:	003fc806 	br	767c <memset+0x44>

0000775c <_Balloc>:
    775c:	20801317 	ldw	r2,76(r4)
    7760:	defffc04 	addi	sp,sp,-16
    7764:	dc400115 	stw	r17,4(sp)
    7768:	dc000015 	stw	r16,0(sp)
    776c:	dfc00315 	stw	ra,12(sp)
    7770:	dc800215 	stw	r18,8(sp)
    7774:	2023883a 	mov	r17,r4
    7778:	2821883a 	mov	r16,r5
    777c:	10000f26 	beq	r2,zero,77bc <_Balloc+0x60>
    7780:	8407883a 	add	r3,r16,r16
    7784:	18c7883a 	add	r3,r3,r3
    7788:	10c7883a 	add	r3,r2,r3
    778c:	18800017 	ldw	r2,0(r3)
    7790:	10001126 	beq	r2,zero,77d8 <_Balloc+0x7c>
    7794:	11000017 	ldw	r4,0(r2)
    7798:	19000015 	stw	r4,0(r3)
    779c:	10000415 	stw	zero,16(r2)
    77a0:	10000315 	stw	zero,12(r2)
    77a4:	dfc00317 	ldw	ra,12(sp)
    77a8:	dc800217 	ldw	r18,8(sp)
    77ac:	dc400117 	ldw	r17,4(sp)
    77b0:	dc000017 	ldw	r16,0(sp)
    77b4:	dec00404 	addi	sp,sp,16
    77b8:	f800283a 	ret
    77bc:	01400104 	movi	r5,4
    77c0:	01800844 	movi	r6,33
    77c4:	0009e800 	call	9e80 <_calloc_r>
    77c8:	88801315 	stw	r2,76(r17)
    77cc:	103fec1e 	bne	r2,zero,7780 <_Balloc+0x24>
    77d0:	0005883a 	mov	r2,zero
    77d4:	003ff306 	br	77a4 <_Balloc+0x48>
    77d8:	01400044 	movi	r5,1
    77dc:	2c24983a 	sll	r18,r5,r16
    77e0:	8809883a 	mov	r4,r17
    77e4:	91800144 	addi	r6,r18,5
    77e8:	318d883a 	add	r6,r6,r6
    77ec:	318d883a 	add	r6,r6,r6
    77f0:	0009e800 	call	9e80 <_calloc_r>
    77f4:	103ff626 	beq	r2,zero,77d0 <_Balloc+0x74>
    77f8:	14000115 	stw	r16,4(r2)
    77fc:	14800215 	stw	r18,8(r2)
    7800:	003fe606 	br	779c <_Balloc+0x40>

00007804 <_Bfree>:
    7804:	28000826 	beq	r5,zero,7828 <_Bfree+0x24>
    7808:	28c00117 	ldw	r3,4(r5)
    780c:	20801317 	ldw	r2,76(r4)
    7810:	18c7883a 	add	r3,r3,r3
    7814:	18c7883a 	add	r3,r3,r3
    7818:	10c5883a 	add	r2,r2,r3
    781c:	10c00017 	ldw	r3,0(r2)
    7820:	28c00015 	stw	r3,0(r5)
    7824:	11400015 	stw	r5,0(r2)
    7828:	f800283a 	ret

0000782c <__multadd>:
    782c:	defffa04 	addi	sp,sp,-24
    7830:	dc000115 	stw	r16,4(sp)
    7834:	2c000417 	ldw	r16,16(r5)
    7838:	dc800315 	stw	r18,12(sp)
    783c:	dc400215 	stw	r17,8(sp)
    7840:	dfc00515 	stw	ra,20(sp)
    7844:	dcc00415 	stw	r19,16(sp)
    7848:	2823883a 	mov	r17,r5
    784c:	2025883a 	mov	r18,r4
    7850:	2a400504 	addi	r9,r5,20
    7854:	0015883a 	mov	r10,zero
    7858:	4a000017 	ldw	r8,0(r9)
    785c:	4a400104 	addi	r9,r9,4
    7860:	52800044 	addi	r10,r10,1
    7864:	40ffffcc 	andi	r3,r8,65535
    7868:	1987383a 	mul	r3,r3,r6
    786c:	4010d43a 	srli	r8,r8,16
    7870:	19cf883a 	add	r7,r3,r7
    7874:	4191383a 	mul	r8,r8,r6
    7878:	3816d43a 	srli	r11,r7,16
    787c:	38ffffcc 	andi	r3,r7,65535
    7880:	5a0f883a 	add	r7,r11,r8
    7884:	3810943a 	slli	r8,r7,16
    7888:	380ed43a 	srli	r7,r7,16
    788c:	40c7883a 	add	r3,r8,r3
    7890:	48ffff15 	stw	r3,-4(r9)
    7894:	543ff016 	blt	r10,r16,7858 <__multadd+0x2c>
    7898:	38000926 	beq	r7,zero,78c0 <__multadd+0x94>
    789c:	88800217 	ldw	r2,8(r17)
    78a0:	80800f0e 	bge	r16,r2,78e0 <__multadd+0xb4>
    78a4:	80800144 	addi	r2,r16,5
    78a8:	1085883a 	add	r2,r2,r2
    78ac:	1085883a 	add	r2,r2,r2
    78b0:	8885883a 	add	r2,r17,r2
    78b4:	11c00015 	stw	r7,0(r2)
    78b8:	84000044 	addi	r16,r16,1
    78bc:	8c000415 	stw	r16,16(r17)
    78c0:	8805883a 	mov	r2,r17
    78c4:	dfc00517 	ldw	ra,20(sp)
    78c8:	dcc00417 	ldw	r19,16(sp)
    78cc:	dc800317 	ldw	r18,12(sp)
    78d0:	dc400217 	ldw	r17,8(sp)
    78d4:	dc000117 	ldw	r16,4(sp)
    78d8:	dec00604 	addi	sp,sp,24
    78dc:	f800283a 	ret
    78e0:	89400117 	ldw	r5,4(r17)
    78e4:	9009883a 	mov	r4,r18
    78e8:	d9c00015 	stw	r7,0(sp)
    78ec:	29400044 	addi	r5,r5,1
    78f0:	000775c0 	call	775c <_Balloc>
    78f4:	89800417 	ldw	r6,16(r17)
    78f8:	89400304 	addi	r5,r17,12
    78fc:	11000304 	addi	r4,r2,12
    7900:	31800084 	addi	r6,r6,2
    7904:	318d883a 	add	r6,r6,r6
    7908:	318d883a 	add	r6,r6,r6
    790c:	1027883a 	mov	r19,r2
    7910:	00073a40 	call	73a4 <memcpy>
    7914:	89000117 	ldw	r4,4(r17)
    7918:	90c01317 	ldw	r3,76(r18)
    791c:	d9c00017 	ldw	r7,0(sp)
    7920:	2109883a 	add	r4,r4,r4
    7924:	2109883a 	add	r4,r4,r4
    7928:	1907883a 	add	r3,r3,r4
    792c:	18800017 	ldw	r2,0(r3)
    7930:	88800015 	stw	r2,0(r17)
    7934:	1c400015 	stw	r17,0(r3)
    7938:	9823883a 	mov	r17,r19
    793c:	003fd906 	br	78a4 <__multadd+0x78>

00007940 <__s2b>:
    7940:	defff904 	addi	sp,sp,-28
    7944:	dc400115 	stw	r17,4(sp)
    7948:	dc000015 	stw	r16,0(sp)
    794c:	2023883a 	mov	r17,r4
    7950:	2821883a 	mov	r16,r5
    7954:	39000204 	addi	r4,r7,8
    7958:	01400244 	movi	r5,9
    795c:	dcc00315 	stw	r19,12(sp)
    7960:	dc800215 	stw	r18,8(sp)
    7964:	dfc00615 	stw	ra,24(sp)
    7968:	dd400515 	stw	r21,20(sp)
    796c:	dd000415 	stw	r20,16(sp)
    7970:	3825883a 	mov	r18,r7
    7974:	3027883a 	mov	r19,r6
    7978:	00012480 	call	1248 <__divsi3>
    797c:	00c00044 	movi	r3,1
    7980:	000b883a 	mov	r5,zero
    7984:	1880030e 	bge	r3,r2,7994 <__s2b+0x54>
    7988:	18c7883a 	add	r3,r3,r3
    798c:	29400044 	addi	r5,r5,1
    7990:	18bffd16 	blt	r3,r2,7988 <__s2b+0x48>
    7994:	8809883a 	mov	r4,r17
    7998:	000775c0 	call	775c <_Balloc>
    799c:	d8c00717 	ldw	r3,28(sp)
    79a0:	10c00515 	stw	r3,20(r2)
    79a4:	00c00044 	movi	r3,1
    79a8:	10c00415 	stw	r3,16(r2)
    79ac:	00c00244 	movi	r3,9
    79b0:	1cc0210e 	bge	r3,r19,7a38 <__s2b+0xf8>
    79b4:	80eb883a 	add	r21,r16,r3
    79b8:	a829883a 	mov	r20,r21
    79bc:	84e1883a 	add	r16,r16,r19
    79c0:	a1c00007 	ldb	r7,0(r20)
    79c4:	8809883a 	mov	r4,r17
    79c8:	a5000044 	addi	r20,r20,1
    79cc:	100b883a 	mov	r5,r2
    79d0:	01800284 	movi	r6,10
    79d4:	39fff404 	addi	r7,r7,-48
    79d8:	000782c0 	call	782c <__multadd>
    79dc:	a43ff81e 	bne	r20,r16,79c0 <__s2b+0x80>
    79e0:	ace1883a 	add	r16,r21,r19
    79e4:	843ffe04 	addi	r16,r16,-8
    79e8:	9c800a0e 	bge	r19,r18,7a14 <__s2b+0xd4>
    79ec:	94e5c83a 	sub	r18,r18,r19
    79f0:	84a5883a 	add	r18,r16,r18
    79f4:	81c00007 	ldb	r7,0(r16)
    79f8:	8809883a 	mov	r4,r17
    79fc:	84000044 	addi	r16,r16,1
    7a00:	100b883a 	mov	r5,r2
    7a04:	01800284 	movi	r6,10
    7a08:	39fff404 	addi	r7,r7,-48
    7a0c:	000782c0 	call	782c <__multadd>
    7a10:	84bff81e 	bne	r16,r18,79f4 <__s2b+0xb4>
    7a14:	dfc00617 	ldw	ra,24(sp)
    7a18:	dd400517 	ldw	r21,20(sp)
    7a1c:	dd000417 	ldw	r20,16(sp)
    7a20:	dcc00317 	ldw	r19,12(sp)
    7a24:	dc800217 	ldw	r18,8(sp)
    7a28:	dc400117 	ldw	r17,4(sp)
    7a2c:	dc000017 	ldw	r16,0(sp)
    7a30:	dec00704 	addi	sp,sp,28
    7a34:	f800283a 	ret
    7a38:	84000284 	addi	r16,r16,10
    7a3c:	1827883a 	mov	r19,r3
    7a40:	003fe906 	br	79e8 <__s2b+0xa8>

00007a44 <__hi0bits>:
    7a44:	20bfffec 	andhi	r2,r4,65535
    7a48:	1000141e 	bne	r2,zero,7a9c <__hi0bits+0x58>
    7a4c:	2008943a 	slli	r4,r4,16
    7a50:	00800404 	movi	r2,16
    7a54:	20ffc02c 	andhi	r3,r4,65280
    7a58:	1800021e 	bne	r3,zero,7a64 <__hi0bits+0x20>
    7a5c:	2008923a 	slli	r4,r4,8
    7a60:	10800204 	addi	r2,r2,8
    7a64:	20fc002c 	andhi	r3,r4,61440
    7a68:	1800021e 	bne	r3,zero,7a74 <__hi0bits+0x30>
    7a6c:	2008913a 	slli	r4,r4,4
    7a70:	10800104 	addi	r2,r2,4
    7a74:	20f0002c 	andhi	r3,r4,49152
    7a78:	1800031e 	bne	r3,zero,7a88 <__hi0bits+0x44>
    7a7c:	2109883a 	add	r4,r4,r4
    7a80:	10800084 	addi	r2,r2,2
    7a84:	2109883a 	add	r4,r4,r4
    7a88:	20000316 	blt	r4,zero,7a98 <__hi0bits+0x54>
    7a8c:	2110002c 	andhi	r4,r4,16384
    7a90:	2000041e 	bne	r4,zero,7aa4 <__hi0bits+0x60>
    7a94:	00800804 	movi	r2,32
    7a98:	f800283a 	ret
    7a9c:	0005883a 	mov	r2,zero
    7aa0:	003fec06 	br	7a54 <__hi0bits+0x10>
    7aa4:	10800044 	addi	r2,r2,1
    7aa8:	f800283a 	ret

00007aac <__lo0bits>:
    7aac:	20c00017 	ldw	r3,0(r4)
    7ab0:	188001cc 	andi	r2,r3,7
    7ab4:	10000826 	beq	r2,zero,7ad8 <__lo0bits+0x2c>
    7ab8:	1880004c 	andi	r2,r3,1
    7abc:	1000211e 	bne	r2,zero,7b44 <__lo0bits+0x98>
    7ac0:	1880008c 	andi	r2,r3,2
    7ac4:	1000211e 	bne	r2,zero,7b4c <__lo0bits+0xa0>
    7ac8:	1806d0ba 	srli	r3,r3,2
    7acc:	00800084 	movi	r2,2
    7ad0:	20c00015 	stw	r3,0(r4)
    7ad4:	f800283a 	ret
    7ad8:	18bfffcc 	andi	r2,r3,65535
    7adc:	10001326 	beq	r2,zero,7b2c <__lo0bits+0x80>
    7ae0:	0005883a 	mov	r2,zero
    7ae4:	19403fcc 	andi	r5,r3,255
    7ae8:	2800021e 	bne	r5,zero,7af4 <__lo0bits+0x48>
    7aec:	1806d23a 	srli	r3,r3,8
    7af0:	10800204 	addi	r2,r2,8
    7af4:	194003cc 	andi	r5,r3,15
    7af8:	2800021e 	bne	r5,zero,7b04 <__lo0bits+0x58>
    7afc:	1806d13a 	srli	r3,r3,4
    7b00:	10800104 	addi	r2,r2,4
    7b04:	194000cc 	andi	r5,r3,3
    7b08:	2800021e 	bne	r5,zero,7b14 <__lo0bits+0x68>
    7b0c:	1806d0ba 	srli	r3,r3,2
    7b10:	10800084 	addi	r2,r2,2
    7b14:	1940004c 	andi	r5,r3,1
    7b18:	2800081e 	bne	r5,zero,7b3c <__lo0bits+0x90>
    7b1c:	1806d07a 	srli	r3,r3,1
    7b20:	1800051e 	bne	r3,zero,7b38 <__lo0bits+0x8c>
    7b24:	00800804 	movi	r2,32
    7b28:	f800283a 	ret
    7b2c:	1806d43a 	srli	r3,r3,16
    7b30:	00800404 	movi	r2,16
    7b34:	003feb06 	br	7ae4 <__lo0bits+0x38>
    7b38:	10800044 	addi	r2,r2,1
    7b3c:	20c00015 	stw	r3,0(r4)
    7b40:	f800283a 	ret
    7b44:	0005883a 	mov	r2,zero
    7b48:	f800283a 	ret
    7b4c:	1806d07a 	srli	r3,r3,1
    7b50:	00800044 	movi	r2,1
    7b54:	20c00015 	stw	r3,0(r4)
    7b58:	f800283a 	ret

00007b5c <__i2b>:
    7b5c:	defffd04 	addi	sp,sp,-12
    7b60:	dc000015 	stw	r16,0(sp)
    7b64:	04000044 	movi	r16,1
    7b68:	dc400115 	stw	r17,4(sp)
    7b6c:	2823883a 	mov	r17,r5
    7b70:	800b883a 	mov	r5,r16
    7b74:	dfc00215 	stw	ra,8(sp)
    7b78:	000775c0 	call	775c <_Balloc>
    7b7c:	14400515 	stw	r17,20(r2)
    7b80:	14000415 	stw	r16,16(r2)
    7b84:	dfc00217 	ldw	ra,8(sp)
    7b88:	dc400117 	ldw	r17,4(sp)
    7b8c:	dc000017 	ldw	r16,0(sp)
    7b90:	dec00304 	addi	sp,sp,12
    7b94:	f800283a 	ret

00007b98 <__multiply>:
    7b98:	defffa04 	addi	sp,sp,-24
    7b9c:	dcc00315 	stw	r19,12(sp)
    7ba0:	dc800215 	stw	r18,8(sp)
    7ba4:	2cc00417 	ldw	r19,16(r5)
    7ba8:	34800417 	ldw	r18,16(r6)
    7bac:	dd000415 	stw	r20,16(sp)
    7bb0:	dc400115 	stw	r17,4(sp)
    7bb4:	dfc00515 	stw	ra,20(sp)
    7bb8:	dc000015 	stw	r16,0(sp)
    7bbc:	2829883a 	mov	r20,r5
    7bc0:	3023883a 	mov	r17,r6
    7bc4:	9c807016 	blt	r19,r18,7d88 <__multiply+0x1f0>
    7bc8:	9005883a 	mov	r2,r18
    7bcc:	9825883a 	mov	r18,r19
    7bd0:	1027883a 	mov	r19,r2
    7bd4:	a0800217 	ldw	r2,8(r20)
    7bd8:	94e1883a 	add	r16,r18,r19
    7bdc:	a1400117 	ldw	r5,4(r20)
    7be0:	1400010e 	bge	r2,r16,7be8 <__multiply+0x50>
    7be4:	29400044 	addi	r5,r5,1
    7be8:	000775c0 	call	775c <_Balloc>
    7bec:	8417883a 	add	r11,r16,r16
    7bf0:	13000504 	addi	r12,r2,20
    7bf4:	5ad7883a 	add	r11,r11,r11
    7bf8:	62d7883a 	add	r11,r12,r11
    7bfc:	6007883a 	mov	r3,r12
    7c00:	62c0032e 	bgeu	r12,r11,7c10 <__multiply+0x78>
    7c04:	18000015 	stw	zero,0(r3)
    7c08:	18c00104 	addi	r3,r3,4
    7c0c:	1afffd36 	bltu	r3,r11,7c04 <__multiply+0x6c>
    7c10:	9ce7883a 	add	r19,r19,r19
    7c14:	94a5883a 	add	r18,r18,r18
    7c18:	89800504 	addi	r6,r17,20
    7c1c:	9ce7883a 	add	r19,r19,r19
    7c20:	a3800504 	addi	r14,r20,20
    7c24:	94a5883a 	add	r18,r18,r18
    7c28:	34db883a 	add	r13,r6,r19
    7c2c:	7495883a 	add	r10,r14,r18
    7c30:	3340422e 	bgeu	r6,r13,7d3c <__multiply+0x1a4>
    7c34:	34400017 	ldw	r17,0(r6)
    7c38:	8cbfffcc 	andi	r18,r17,65535
    7c3c:	90001b26 	beq	r18,zero,7cac <__multiply+0x114>
    7c40:	6013883a 	mov	r9,r12
    7c44:	7023883a 	mov	r17,r14
    7c48:	0011883a 	mov	r8,zero
    7c4c:	88c00017 	ldw	r3,0(r17)
    7c50:	4bc00017 	ldw	r15,0(r9)
    7c54:	8c400104 	addi	r17,r17,4
    7c58:	19ffffcc 	andi	r7,r3,65535
    7c5c:	3c8f383a 	mul	r7,r7,r18
    7c60:	1808d43a 	srli	r4,r3,16
    7c64:	797fffcc 	andi	r5,r15,65535
    7c68:	29cb883a 	add	r5,r5,r7
    7c6c:	2a0b883a 	add	r5,r5,r8
    7c70:	2489383a 	mul	r4,r4,r18
    7c74:	7806d43a 	srli	r3,r15,16
    7c78:	2810d43a 	srli	r8,r5,16
    7c7c:	297fffcc 	andi	r5,r5,65535
    7c80:	1907883a 	add	r3,r3,r4
    7c84:	1a07883a 	add	r3,r3,r8
    7c88:	1808943a 	slli	r4,r3,16
    7c8c:	480f883a 	mov	r7,r9
    7c90:	1810d43a 	srli	r8,r3,16
    7c94:	214ab03a 	or	r5,r4,r5
    7c98:	49400015 	stw	r5,0(r9)
    7c9c:	4a400104 	addi	r9,r9,4
    7ca0:	8abfea36 	bltu	r17,r10,7c4c <__multiply+0xb4>
    7ca4:	3a000115 	stw	r8,4(r7)
    7ca8:	34400017 	ldw	r17,0(r6)
    7cac:	8822d43a 	srli	r17,r17,16
    7cb0:	88001f26 	beq	r17,zero,7d30 <__multiply+0x198>
    7cb4:	60c00017 	ldw	r3,0(r12)
    7cb8:	7013883a 	mov	r9,r14
    7cbc:	601f883a 	mov	r15,r12
    7cc0:	1811883a 	mov	r8,r3
    7cc4:	6027883a 	mov	r19,r12
    7cc8:	000f883a 	mov	r7,zero
    7ccc:	00000106 	br	7cd4 <__multiply+0x13c>
    7cd0:	9027883a 	mov	r19,r18
    7cd4:	4940000b 	ldhu	r5,0(r9)
    7cd8:	4010d43a 	srli	r8,r8,16
    7cdc:	193fffcc 	andi	r4,r3,65535
    7ce0:	2c4b383a 	mul	r5,r5,r17
    7ce4:	7bc00104 	addi	r15,r15,4
    7ce8:	4a400104 	addi	r9,r9,4
    7cec:	2a0b883a 	add	r5,r5,r8
    7cf0:	29cb883a 	add	r5,r5,r7
    7cf4:	2806943a 	slli	r3,r5,16
    7cf8:	9c800104 	addi	r18,r19,4
    7cfc:	280ad43a 	srli	r5,r5,16
    7d00:	1908b03a 	or	r4,r3,r4
    7d04:	793fff15 	stw	r4,-4(r15)
    7d08:	48ffff17 	ldw	r3,-4(r9)
    7d0c:	92000017 	ldw	r8,0(r18)
    7d10:	1806d43a 	srli	r3,r3,16
    7d14:	413fffcc 	andi	r4,r8,65535
    7d18:	1c47383a 	mul	r3,r3,r17
    7d1c:	1907883a 	add	r3,r3,r4
    7d20:	1947883a 	add	r3,r3,r5
    7d24:	180ed43a 	srli	r7,r3,16
    7d28:	4abfe936 	bltu	r9,r10,7cd0 <__multiply+0x138>
    7d2c:	98c00115 	stw	r3,4(r19)
    7d30:	31800104 	addi	r6,r6,4
    7d34:	63000104 	addi	r12,r12,4
    7d38:	337fbe36 	bltu	r6,r13,7c34 <__multiply+0x9c>
    7d3c:	0400090e 	bge	zero,r16,7d64 <__multiply+0x1cc>
    7d40:	58ffff17 	ldw	r3,-4(r11)
    7d44:	5affff04 	addi	r11,r11,-4
    7d48:	18000326 	beq	r3,zero,7d58 <__multiply+0x1c0>
    7d4c:	00000506 	br	7d64 <__multiply+0x1cc>
    7d50:	58c00017 	ldw	r3,0(r11)
    7d54:	1800031e 	bne	r3,zero,7d64 <__multiply+0x1cc>
    7d58:	843fffc4 	addi	r16,r16,-1
    7d5c:	5affff04 	addi	r11,r11,-4
    7d60:	803ffb1e 	bne	r16,zero,7d50 <__multiply+0x1b8>
    7d64:	14000415 	stw	r16,16(r2)
    7d68:	dfc00517 	ldw	ra,20(sp)
    7d6c:	dd000417 	ldw	r20,16(sp)
    7d70:	dcc00317 	ldw	r19,12(sp)
    7d74:	dc800217 	ldw	r18,8(sp)
    7d78:	dc400117 	ldw	r17,4(sp)
    7d7c:	dc000017 	ldw	r16,0(sp)
    7d80:	dec00604 	addi	sp,sp,24
    7d84:	f800283a 	ret
    7d88:	3029883a 	mov	r20,r6
    7d8c:	2823883a 	mov	r17,r5
    7d90:	003f9006 	br	7bd4 <__multiply+0x3c>

00007d94 <__pow5mult>:
    7d94:	defffa04 	addi	sp,sp,-24
    7d98:	dcc00315 	stw	r19,12(sp)
    7d9c:	dc800215 	stw	r18,8(sp)
    7da0:	dc000015 	stw	r16,0(sp)
    7da4:	dfc00515 	stw	ra,20(sp)
    7da8:	dd000415 	stw	r20,16(sp)
    7dac:	dc400115 	stw	r17,4(sp)
    7db0:	308000cc 	andi	r2,r6,3
    7db4:	3021883a 	mov	r16,r6
    7db8:	2027883a 	mov	r19,r4
    7dbc:	2825883a 	mov	r18,r5
    7dc0:	10002e1e 	bne	r2,zero,7e7c <__pow5mult+0xe8>
    7dc4:	8021d0ba 	srai	r16,r16,2
    7dc8:	80001a26 	beq	r16,zero,7e34 <__pow5mult+0xa0>
    7dcc:	9c401217 	ldw	r17,72(r19)
    7dd0:	8800061e 	bne	r17,zero,7dec <__pow5mult+0x58>
    7dd4:	00003406 	br	7ea8 <__pow5mult+0x114>
    7dd8:	8021d07a 	srai	r16,r16,1
    7ddc:	80001526 	beq	r16,zero,7e34 <__pow5mult+0xa0>
    7de0:	88800017 	ldw	r2,0(r17)
    7de4:	10001c26 	beq	r2,zero,7e58 <__pow5mult+0xc4>
    7de8:	1023883a 	mov	r17,r2
    7dec:	80c0004c 	andi	r3,r16,1
    7df0:	183ff926 	beq	r3,zero,7dd8 <__pow5mult+0x44>
    7df4:	900b883a 	mov	r5,r18
    7df8:	880d883a 	mov	r6,r17
    7dfc:	9809883a 	mov	r4,r19
    7e00:	0007b980 	call	7b98 <__multiply>
    7e04:	90001b26 	beq	r18,zero,7e74 <__pow5mult+0xe0>
    7e08:	91c00117 	ldw	r7,4(r18)
    7e0c:	98c01317 	ldw	r3,76(r19)
    7e10:	8021d07a 	srai	r16,r16,1
    7e14:	39cf883a 	add	r7,r7,r7
    7e18:	39cf883a 	add	r7,r7,r7
    7e1c:	19c7883a 	add	r3,r3,r7
    7e20:	19000017 	ldw	r4,0(r3)
    7e24:	91000015 	stw	r4,0(r18)
    7e28:	1c800015 	stw	r18,0(r3)
    7e2c:	1025883a 	mov	r18,r2
    7e30:	803feb1e 	bne	r16,zero,7de0 <__pow5mult+0x4c>
    7e34:	9005883a 	mov	r2,r18
    7e38:	dfc00517 	ldw	ra,20(sp)
    7e3c:	dd000417 	ldw	r20,16(sp)
    7e40:	dcc00317 	ldw	r19,12(sp)
    7e44:	dc800217 	ldw	r18,8(sp)
    7e48:	dc400117 	ldw	r17,4(sp)
    7e4c:	dc000017 	ldw	r16,0(sp)
    7e50:	dec00604 	addi	sp,sp,24
    7e54:	f800283a 	ret
    7e58:	9809883a 	mov	r4,r19
    7e5c:	880b883a 	mov	r5,r17
    7e60:	880d883a 	mov	r6,r17
    7e64:	0007b980 	call	7b98 <__multiply>
    7e68:	88800015 	stw	r2,0(r17)
    7e6c:	10000015 	stw	zero,0(r2)
    7e70:	003fdd06 	br	7de8 <__pow5mult+0x54>
    7e74:	1025883a 	mov	r18,r2
    7e78:	003fd706 	br	7dd8 <__pow5mult+0x44>
    7e7c:	10bfffc4 	addi	r2,r2,-1
    7e80:	1085883a 	add	r2,r2,r2
    7e84:	00c00074 	movhi	r3,1
    7e88:	18c00b04 	addi	r3,r3,44
    7e8c:	1085883a 	add	r2,r2,r2
    7e90:	1885883a 	add	r2,r3,r2
    7e94:	11800017 	ldw	r6,0(r2)
    7e98:	000f883a 	mov	r7,zero
    7e9c:	000782c0 	call	782c <__multadd>
    7ea0:	1025883a 	mov	r18,r2
    7ea4:	003fc706 	br	7dc4 <__pow5mult+0x30>
    7ea8:	05000044 	movi	r20,1
    7eac:	9809883a 	mov	r4,r19
    7eb0:	a00b883a 	mov	r5,r20
    7eb4:	000775c0 	call	775c <_Balloc>
    7eb8:	1023883a 	mov	r17,r2
    7ebc:	00809c44 	movi	r2,625
    7ec0:	88800515 	stw	r2,20(r17)
    7ec4:	8d000415 	stw	r20,16(r17)
    7ec8:	9c401215 	stw	r17,72(r19)
    7ecc:	88000015 	stw	zero,0(r17)
    7ed0:	003fc606 	br	7dec <__pow5mult+0x58>

00007ed4 <__lshift>:
    7ed4:	defff904 	addi	sp,sp,-28
    7ed8:	dd000415 	stw	r20,16(sp)
    7edc:	dcc00315 	stw	r19,12(sp)
    7ee0:	3029d17a 	srai	r20,r6,5
    7ee4:	2cc00417 	ldw	r19,16(r5)
    7ee8:	28800217 	ldw	r2,8(r5)
    7eec:	dd400515 	stw	r21,20(sp)
    7ef0:	a4e7883a 	add	r19,r20,r19
    7ef4:	dc800215 	stw	r18,8(sp)
    7ef8:	dc400115 	stw	r17,4(sp)
    7efc:	dc000015 	stw	r16,0(sp)
    7f00:	dfc00615 	stw	ra,24(sp)
    7f04:	9c000044 	addi	r16,r19,1
    7f08:	2823883a 	mov	r17,r5
    7f0c:	302b883a 	mov	r21,r6
    7f10:	2025883a 	mov	r18,r4
    7f14:	29400117 	ldw	r5,4(r5)
    7f18:	1400030e 	bge	r2,r16,7f28 <__lshift+0x54>
    7f1c:	1085883a 	add	r2,r2,r2
    7f20:	29400044 	addi	r5,r5,1
    7f24:	143ffd16 	blt	r2,r16,7f1c <__lshift+0x48>
    7f28:	9009883a 	mov	r4,r18
    7f2c:	000775c0 	call	775c <_Balloc>
    7f30:	11c00504 	addi	r7,r2,20
    7f34:	0500090e 	bge	zero,r20,7f5c <__lshift+0x88>
    7f38:	3811883a 	mov	r8,r7
    7f3c:	0007883a 	mov	r3,zero
    7f40:	40000015 	stw	zero,0(r8)
    7f44:	18c00044 	addi	r3,r3,1
    7f48:	42000104 	addi	r8,r8,4
    7f4c:	1d3ffc1e 	bne	r3,r20,7f40 <__lshift+0x6c>
    7f50:	18c7883a 	add	r3,r3,r3
    7f54:	18c7883a 	add	r3,r3,r3
    7f58:	38cf883a 	add	r7,r7,r3
    7f5c:	89000417 	ldw	r4,16(r17)
    7f60:	88c00504 	addi	r3,r17,20
    7f64:	a98007cc 	andi	r6,r21,31
    7f68:	2109883a 	add	r4,r4,r4
    7f6c:	2109883a 	add	r4,r4,r4
    7f70:	1909883a 	add	r4,r3,r4
    7f74:	30002326 	beq	r6,zero,8004 <__lshift+0x130>
    7f78:	01400804 	movi	r5,32
    7f7c:	298bc83a 	sub	r5,r5,r6
    7f80:	0013883a 	mov	r9,zero
    7f84:	1a000017 	ldw	r8,0(r3)
    7f88:	3815883a 	mov	r10,r7
    7f8c:	39c00104 	addi	r7,r7,4
    7f90:	4190983a 	sll	r8,r8,r6
    7f94:	18c00104 	addi	r3,r3,4
    7f98:	4a10b03a 	or	r8,r9,r8
    7f9c:	3a3fff15 	stw	r8,-4(r7)
    7fa0:	1a3fff17 	ldw	r8,-4(r3)
    7fa4:	4152d83a 	srl	r9,r8,r5
    7fa8:	193ff636 	bltu	r3,r4,7f84 <__lshift+0xb0>
    7fac:	52400115 	stw	r9,4(r10)
    7fb0:	48000126 	beq	r9,zero,7fb8 <__lshift+0xe4>
    7fb4:	9c000084 	addi	r16,r19,2
    7fb8:	89000117 	ldw	r4,4(r17)
    7fbc:	90c01317 	ldw	r3,76(r18)
    7fc0:	843fffc4 	addi	r16,r16,-1
    7fc4:	2109883a 	add	r4,r4,r4
    7fc8:	2109883a 	add	r4,r4,r4
    7fcc:	1907883a 	add	r3,r3,r4
    7fd0:	19000017 	ldw	r4,0(r3)
    7fd4:	14000415 	stw	r16,16(r2)
    7fd8:	89000015 	stw	r4,0(r17)
    7fdc:	1c400015 	stw	r17,0(r3)
    7fe0:	dfc00617 	ldw	ra,24(sp)
    7fe4:	dd400517 	ldw	r21,20(sp)
    7fe8:	dd000417 	ldw	r20,16(sp)
    7fec:	dcc00317 	ldw	r19,12(sp)
    7ff0:	dc800217 	ldw	r18,8(sp)
    7ff4:	dc400117 	ldw	r17,4(sp)
    7ff8:	dc000017 	ldw	r16,0(sp)
    7ffc:	dec00704 	addi	sp,sp,28
    8000:	f800283a 	ret
    8004:	19400017 	ldw	r5,0(r3)
    8008:	39c00104 	addi	r7,r7,4
    800c:	18c00104 	addi	r3,r3,4
    8010:	397fff15 	stw	r5,-4(r7)
    8014:	193ffb36 	bltu	r3,r4,8004 <__lshift+0x130>
    8018:	003fe706 	br	7fb8 <__lshift+0xe4>

0000801c <__mcmp>:
    801c:	20800417 	ldw	r2,16(r4)
    8020:	28c00417 	ldw	r3,16(r5)
    8024:	10c5c83a 	sub	r2,r2,r3
    8028:	1000111e 	bne	r2,zero,8070 <__mcmp+0x54>
    802c:	18c7883a 	add	r3,r3,r3
    8030:	18c7883a 	add	r3,r3,r3
    8034:	21000504 	addi	r4,r4,20
    8038:	29400504 	addi	r5,r5,20
    803c:	20c5883a 	add	r2,r4,r3
    8040:	28cb883a 	add	r5,r5,r3
    8044:	00000106 	br	804c <__mcmp+0x30>
    8048:	20800a2e 	bgeu	r4,r2,8074 <__mcmp+0x58>
    804c:	10bfff04 	addi	r2,r2,-4
    8050:	297fff04 	addi	r5,r5,-4
    8054:	11800017 	ldw	r6,0(r2)
    8058:	28c00017 	ldw	r3,0(r5)
    805c:	30fffa26 	beq	r6,r3,8048 <__mcmp+0x2c>
    8060:	30c00236 	bltu	r6,r3,806c <__mcmp+0x50>
    8064:	00800044 	movi	r2,1
    8068:	f800283a 	ret
    806c:	00bfffc4 	movi	r2,-1
    8070:	f800283a 	ret
    8074:	0005883a 	mov	r2,zero
    8078:	f800283a 	ret

0000807c <__mdiff>:
    807c:	defffb04 	addi	sp,sp,-20
    8080:	dc000015 	stw	r16,0(sp)
    8084:	2821883a 	mov	r16,r5
    8088:	dcc00315 	stw	r19,12(sp)
    808c:	300b883a 	mov	r5,r6
    8090:	2027883a 	mov	r19,r4
    8094:	8009883a 	mov	r4,r16
    8098:	dc800215 	stw	r18,8(sp)
    809c:	dfc00415 	stw	ra,16(sp)
    80a0:	dc400115 	stw	r17,4(sp)
    80a4:	3025883a 	mov	r18,r6
    80a8:	000801c0 	call	801c <__mcmp>
    80ac:	10005226 	beq	r2,zero,81f8 <__mdiff+0x17c>
    80b0:	10004c16 	blt	r2,zero,81e4 <__mdiff+0x168>
    80b4:	0023883a 	mov	r17,zero
    80b8:	81400117 	ldw	r5,4(r16)
    80bc:	9809883a 	mov	r4,r19
    80c0:	000775c0 	call	775c <_Balloc>
    80c4:	83400417 	ldw	r13,16(r16)
    80c8:	93800417 	ldw	r14,16(r18)
    80cc:	81000504 	addi	r4,r16,20
    80d0:	6b59883a 	add	r12,r13,r13
    80d4:	739d883a 	add	r14,r14,r14
    80d8:	6319883a 	add	r12,r12,r12
    80dc:	91800504 	addi	r6,r18,20
    80e0:	739d883a 	add	r14,r14,r14
    80e4:	14400315 	stw	r17,12(r2)
    80e8:	2319883a 	add	r12,r4,r12
    80ec:	339d883a 	add	r14,r6,r14
    80f0:	12400504 	addi	r9,r2,20
    80f4:	0007883a 	mov	r3,zero
    80f8:	22000017 	ldw	r8,0(r4)
    80fc:	32800017 	ldw	r10,0(r6)
    8100:	4ac00104 	addi	r11,r9,4
    8104:	41ffffcc 	andi	r7,r8,65535
    8108:	38c7883a 	add	r3,r7,r3
    810c:	51ffffcc 	andi	r7,r10,65535
    8110:	19cfc83a 	sub	r7,r3,r7
    8114:	4010d43a 	srli	r8,r8,16
    8118:	5014d43a 	srli	r10,r10,16
    811c:	3807d43a 	srai	r3,r7,16
    8120:	39ffffcc 	andi	r7,r7,65535
    8124:	4291c83a 	sub	r8,r8,r10
    8128:	40c7883a 	add	r3,r8,r3
    812c:	1810943a 	slli	r8,r3,16
    8130:	31800104 	addi	r6,r6,4
    8134:	21000104 	addi	r4,r4,4
    8138:	41ceb03a 	or	r7,r8,r7
    813c:	49c00015 	stw	r7,0(r9)
    8140:	1807d43a 	srai	r3,r3,16
    8144:	580b883a 	mov	r5,r11
    8148:	5813883a 	mov	r9,r11
    814c:	33bfea36 	bltu	r6,r14,80f8 <__mdiff+0x7c>
    8150:	2011883a 	mov	r8,r4
    8154:	2300152e 	bgeu	r4,r12,81ac <__mdiff+0x130>
    8158:	21400017 	ldw	r5,0(r4)
    815c:	4a400104 	addi	r9,r9,4
    8160:	21000104 	addi	r4,r4,4
    8164:	29ffffcc 	andi	r7,r5,65535
    8168:	38c7883a 	add	r3,r7,r3
    816c:	280ad43a 	srli	r5,r5,16
    8170:	180dd43a 	srai	r6,r3,16
    8174:	19ffffcc 	andi	r7,r3,65535
    8178:	3147883a 	add	r3,r6,r5
    817c:	180a943a 	slli	r5,r3,16
    8180:	1807d43a 	srai	r3,r3,16
    8184:	29ceb03a 	or	r7,r5,r7
    8188:	49ffff15 	stw	r7,-4(r9)
    818c:	233ff236 	bltu	r4,r12,8158 <__mdiff+0xdc>
    8190:	0206303a 	nor	r3,zero,r8
    8194:	1b07883a 	add	r3,r3,r12
    8198:	1806d0ba 	srli	r3,r3,2
    819c:	18c00044 	addi	r3,r3,1
    81a0:	18c7883a 	add	r3,r3,r3
    81a4:	18c7883a 	add	r3,r3,r3
    81a8:	58cb883a 	add	r5,r11,r3
    81ac:	28ffff04 	addi	r3,r5,-4
    81b0:	3800041e 	bne	r7,zero,81c4 <__mdiff+0x148>
    81b4:	18ffff04 	addi	r3,r3,-4
    81b8:	19000017 	ldw	r4,0(r3)
    81bc:	6b7fffc4 	addi	r13,r13,-1
    81c0:	203ffc26 	beq	r4,zero,81b4 <__mdiff+0x138>
    81c4:	13400415 	stw	r13,16(r2)
    81c8:	dfc00417 	ldw	ra,16(sp)
    81cc:	dcc00317 	ldw	r19,12(sp)
    81d0:	dc800217 	ldw	r18,8(sp)
    81d4:	dc400117 	ldw	r17,4(sp)
    81d8:	dc000017 	ldw	r16,0(sp)
    81dc:	dec00504 	addi	sp,sp,20
    81e0:	f800283a 	ret
    81e4:	8005883a 	mov	r2,r16
    81e8:	04400044 	movi	r17,1
    81ec:	9021883a 	mov	r16,r18
    81f0:	1025883a 	mov	r18,r2
    81f4:	003fb006 	br	80b8 <__mdiff+0x3c>
    81f8:	9809883a 	mov	r4,r19
    81fc:	000b883a 	mov	r5,zero
    8200:	000775c0 	call	775c <_Balloc>
    8204:	00c00044 	movi	r3,1
    8208:	10c00415 	stw	r3,16(r2)
    820c:	10000515 	stw	zero,20(r2)
    8210:	003fed06 	br	81c8 <__mdiff+0x14c>

00008214 <__ulp>:
    8214:	295ffc2c 	andhi	r5,r5,32752
    8218:	00bf3034 	movhi	r2,64704
    821c:	2887883a 	add	r3,r5,r2
    8220:	00c0020e 	bge	zero,r3,822c <__ulp+0x18>
    8224:	0005883a 	mov	r2,zero
    8228:	f800283a 	ret
    822c:	00c7c83a 	sub	r3,zero,r3
    8230:	180bd53a 	srai	r5,r3,20
    8234:	008004c4 	movi	r2,19
    8238:	11400a0e 	bge	r2,r5,8264 <__ulp+0x50>
    823c:	00800c84 	movi	r2,50
    8240:	0007883a 	mov	r3,zero
    8244:	11400516 	blt	r2,r5,825c <__ulp+0x48>
    8248:	00800cc4 	movi	r2,51
    824c:	114bc83a 	sub	r5,r2,r5
    8250:	00800044 	movi	r2,1
    8254:	1144983a 	sll	r2,r2,r5
    8258:	f800283a 	ret
    825c:	00800044 	movi	r2,1
    8260:	f800283a 	ret
    8264:	00800234 	movhi	r2,8
    8268:	1147d83a 	sra	r3,r2,r5
    826c:	0005883a 	mov	r2,zero
    8270:	f800283a 	ret

00008274 <__b2d>:
    8274:	defffa04 	addi	sp,sp,-24
    8278:	dc000015 	stw	r16,0(sp)
    827c:	24000417 	ldw	r16,16(r4)
    8280:	dc400115 	stw	r17,4(sp)
    8284:	24400504 	addi	r17,r4,20
    8288:	8421883a 	add	r16,r16,r16
    828c:	8421883a 	add	r16,r16,r16
    8290:	8c21883a 	add	r16,r17,r16
    8294:	dc800215 	stw	r18,8(sp)
    8298:	84bfff17 	ldw	r18,-4(r16)
    829c:	dd000415 	stw	r20,16(sp)
    82a0:	dcc00315 	stw	r19,12(sp)
    82a4:	9009883a 	mov	r4,r18
    82a8:	2829883a 	mov	r20,r5
    82ac:	dfc00515 	stw	ra,20(sp)
    82b0:	0007a440 	call	7a44 <__hi0bits>
    82b4:	00c00804 	movi	r3,32
    82b8:	1887c83a 	sub	r3,r3,r2
    82bc:	a0c00015 	stw	r3,0(r20)
    82c0:	00c00284 	movi	r3,10
    82c4:	84ffff04 	addi	r19,r16,-4
    82c8:	18801216 	blt	r3,r2,8314 <__b2d+0xa0>
    82cc:	014002c4 	movi	r5,11
    82d0:	2889c83a 	sub	r4,r5,r2
    82d4:	9106d83a 	srl	r3,r18,r4
    82d8:	18cffc34 	orhi	r3,r3,16368
    82dc:	8cc0282e 	bgeu	r17,r19,8380 <__b2d+0x10c>
    82e0:	817ffe17 	ldw	r5,-8(r16)
    82e4:	290ad83a 	srl	r5,r5,r4
    82e8:	10800544 	addi	r2,r2,21
    82ec:	9084983a 	sll	r2,r18,r2
    82f0:	2884b03a 	or	r2,r5,r2
    82f4:	dfc00517 	ldw	ra,20(sp)
    82f8:	dd000417 	ldw	r20,16(sp)
    82fc:	dcc00317 	ldw	r19,12(sp)
    8300:	dc800217 	ldw	r18,8(sp)
    8304:	dc400117 	ldw	r17,4(sp)
    8308:	dc000017 	ldw	r16,0(sp)
    830c:	dec00604 	addi	sp,sp,24
    8310:	f800283a 	ret
    8314:	113ffd44 	addi	r4,r2,-11
    8318:	8cc00f2e 	bgeu	r17,r19,8358 <__b2d+0xe4>
    831c:	81bffe04 	addi	r6,r16,-8
    8320:	817ffe17 	ldw	r5,-8(r16)
    8324:	20001326 	beq	r4,zero,8374 <__b2d+0x100>
    8328:	00c00ac4 	movi	r3,43
    832c:	1885c83a 	sub	r2,r3,r2
    8330:	2886d83a 	srl	r3,r5,r2
    8334:	9124983a 	sll	r18,r18,r4
    8338:	90e4b03a 	or	r18,r18,r3
    833c:	90cffc34 	orhi	r3,r18,16368
    8340:	8980112e 	bgeu	r17,r6,8388 <__b2d+0x114>
    8344:	81bffd17 	ldw	r6,-12(r16)
    8348:	308cd83a 	srl	r6,r6,r2
    834c:	2904983a 	sll	r2,r5,r4
    8350:	1184b03a 	or	r2,r2,r6
    8354:	003fe706 	br	82f4 <__b2d+0x80>
    8358:	20000526 	beq	r4,zero,8370 <__b2d+0xfc>
    835c:	9124983a 	sll	r18,r18,r4
    8360:	000d883a 	mov	r6,zero
    8364:	000b883a 	mov	r5,zero
    8368:	90cffc34 	orhi	r3,r18,16368
    836c:	003ff706 	br	834c <__b2d+0xd8>
    8370:	000b883a 	mov	r5,zero
    8374:	90cffc34 	orhi	r3,r18,16368
    8378:	2805883a 	mov	r2,r5
    837c:	003fdd06 	br	82f4 <__b2d+0x80>
    8380:	000b883a 	mov	r5,zero
    8384:	003fd806 	br	82e8 <__b2d+0x74>
    8388:	000d883a 	mov	r6,zero
    838c:	003fef06 	br	834c <__b2d+0xd8>

00008390 <__d2b>:
    8390:	defff704 	addi	sp,sp,-36
    8394:	dc000215 	stw	r16,8(sp)
    8398:	3021883a 	mov	r16,r6
    839c:	dc400315 	stw	r17,12(sp)
    83a0:	8022907a 	slli	r17,r16,1
    83a4:	dd400715 	stw	r21,28(sp)
    83a8:	282b883a 	mov	r21,r5
    83ac:	01400044 	movi	r5,1
    83b0:	dd000615 	stw	r20,24(sp)
    83b4:	dcc00515 	stw	r19,20(sp)
    83b8:	dc800415 	stw	r18,16(sp)
    83bc:	dfc00815 	stw	ra,32(sp)
    83c0:	3829883a 	mov	r20,r7
    83c4:	dc800917 	ldw	r18,36(sp)
    83c8:	8822d57a 	srli	r17,r17,21
    83cc:	000775c0 	call	775c <_Balloc>
    83d0:	1027883a 	mov	r19,r2
    83d4:	00800434 	movhi	r2,16
    83d8:	10bfffc4 	addi	r2,r2,-1
    83dc:	808c703a 	and	r6,r16,r2
    83e0:	88000126 	beq	r17,zero,83e8 <__d2b+0x58>
    83e4:	31800434 	orhi	r6,r6,16
    83e8:	d9800015 	stw	r6,0(sp)
    83ec:	a8001f26 	beq	r21,zero,846c <__d2b+0xdc>
    83f0:	d9000104 	addi	r4,sp,4
    83f4:	dd400115 	stw	r21,4(sp)
    83f8:	0007aac0 	call	7aac <__lo0bits>
    83fc:	d8c00017 	ldw	r3,0(sp)
    8400:	1000291e 	bne	r2,zero,84a8 <__d2b+0x118>
    8404:	d9000117 	ldw	r4,4(sp)
    8408:	99000515 	stw	r4,20(r19)
    840c:	1820c03a 	cmpne	r16,r3,zero
    8410:	84000044 	addi	r16,r16,1
    8414:	98c00615 	stw	r3,24(r19)
    8418:	9c000415 	stw	r16,16(r19)
    841c:	88001b1e 	bne	r17,zero,848c <__d2b+0xfc>
    8420:	800690ba 	slli	r3,r16,2
    8424:	10bef384 	addi	r2,r2,-1074
    8428:	a0800015 	stw	r2,0(r20)
    842c:	98c5883a 	add	r2,r19,r3
    8430:	11000417 	ldw	r4,16(r2)
    8434:	8020917a 	slli	r16,r16,5
    8438:	0007a440 	call	7a44 <__hi0bits>
    843c:	8085c83a 	sub	r2,r16,r2
    8440:	90800015 	stw	r2,0(r18)
    8444:	9805883a 	mov	r2,r19
    8448:	dfc00817 	ldw	ra,32(sp)
    844c:	dd400717 	ldw	r21,28(sp)
    8450:	dd000617 	ldw	r20,24(sp)
    8454:	dcc00517 	ldw	r19,20(sp)
    8458:	dc800417 	ldw	r18,16(sp)
    845c:	dc400317 	ldw	r17,12(sp)
    8460:	dc000217 	ldw	r16,8(sp)
    8464:	dec00904 	addi	sp,sp,36
    8468:	f800283a 	ret
    846c:	d809883a 	mov	r4,sp
    8470:	0007aac0 	call	7aac <__lo0bits>
    8474:	d8c00017 	ldw	r3,0(sp)
    8478:	04000044 	movi	r16,1
    847c:	9c000415 	stw	r16,16(r19)
    8480:	98c00515 	stw	r3,20(r19)
    8484:	10800804 	addi	r2,r2,32
    8488:	883fe526 	beq	r17,zero,8420 <__d2b+0x90>
    848c:	8c7ef344 	addi	r17,r17,-1075
    8490:	88a3883a 	add	r17,r17,r2
    8494:	00c00d44 	movi	r3,53
    8498:	a4400015 	stw	r17,0(r20)
    849c:	1885c83a 	sub	r2,r3,r2
    84a0:	90800015 	stw	r2,0(r18)
    84a4:	003fe706 	br	8444 <__d2b+0xb4>
    84a8:	01000804 	movi	r4,32
    84ac:	2089c83a 	sub	r4,r4,r2
    84b0:	1908983a 	sll	r4,r3,r4
    84b4:	d9400117 	ldw	r5,4(sp)
    84b8:	1886d83a 	srl	r3,r3,r2
    84bc:	2148b03a 	or	r4,r4,r5
    84c0:	99000515 	stw	r4,20(r19)
    84c4:	d8c00015 	stw	r3,0(sp)
    84c8:	003fd006 	br	840c <__d2b+0x7c>

000084cc <__ratio>:
    84cc:	defff904 	addi	sp,sp,-28
    84d0:	dc400315 	stw	r17,12(sp)
    84d4:	2823883a 	mov	r17,r5
    84d8:	d9400104 	addi	r5,sp,4
    84dc:	dfc00615 	stw	ra,24(sp)
    84e0:	dcc00515 	stw	r19,20(sp)
    84e4:	dc800415 	stw	r18,16(sp)
    84e8:	2027883a 	mov	r19,r4
    84ec:	dc000215 	stw	r16,8(sp)
    84f0:	00082740 	call	8274 <__b2d>
    84f4:	8809883a 	mov	r4,r17
    84f8:	d80b883a 	mov	r5,sp
    84fc:	1025883a 	mov	r18,r2
    8500:	1821883a 	mov	r16,r3
    8504:	00082740 	call	8274 <__b2d>
    8508:	8a400417 	ldw	r9,16(r17)
    850c:	9a000417 	ldw	r8,16(r19)
    8510:	100d883a 	mov	r6,r2
    8514:	d8800017 	ldw	r2,0(sp)
    8518:	4251c83a 	sub	r8,r8,r9
    851c:	4012917a 	slli	r9,r8,5
    8520:	da000117 	ldw	r8,4(sp)
    8524:	4091c83a 	sub	r8,r8,r2
    8528:	4251883a 	add	r8,r8,r9
    852c:	02000d0e 	bge	zero,r8,8564 <__ratio+0x98>
    8530:	4010953a 	slli	r8,r8,20
    8534:	4421883a 	add	r16,r8,r16
    8538:	9009883a 	mov	r4,r18
    853c:	800b883a 	mov	r5,r16
    8540:	180f883a 	mov	r7,r3
    8544:	000b9840 	call	b984 <__divdf3>
    8548:	dfc00617 	ldw	ra,24(sp)
    854c:	dcc00517 	ldw	r19,20(sp)
    8550:	dc800417 	ldw	r18,16(sp)
    8554:	dc400317 	ldw	r17,12(sp)
    8558:	dc000217 	ldw	r16,8(sp)
    855c:	dec00704 	addi	sp,sp,28
    8560:	f800283a 	ret
    8564:	4010953a 	slli	r8,r8,20
    8568:	1a07c83a 	sub	r3,r3,r8
    856c:	003ff206 	br	8538 <__ratio+0x6c>

00008570 <_mprec_log10>:
    8570:	defffe04 	addi	sp,sp,-8
    8574:	dc000015 	stw	r16,0(sp)
    8578:	dfc00115 	stw	ra,4(sp)
    857c:	008005c4 	movi	r2,23
    8580:	2021883a 	mov	r16,r4
    8584:	11000d0e 	bge	r2,r4,85bc <_mprec_log10+0x4c>
    8588:	0005883a 	mov	r2,zero
    858c:	00cffc34 	movhi	r3,16368
    8590:	843fffc4 	addi	r16,r16,-1
    8594:	1009883a 	mov	r4,r2
    8598:	180b883a 	mov	r5,r3
    859c:	000d883a 	mov	r6,zero
    85a0:	01d00934 	movhi	r7,16420
    85a4:	000c4940 	call	c494 <__muldf3>
    85a8:	803ff91e 	bne	r16,zero,8590 <_mprec_log10+0x20>
    85ac:	dfc00117 	ldw	ra,4(sp)
    85b0:	dc000017 	ldw	r16,0(sp)
    85b4:	dec00204 	addi	sp,sp,8
    85b8:	f800283a 	ret
    85bc:	202090fa 	slli	r16,r4,3
    85c0:	00800074 	movhi	r2,1
    85c4:	10802204 	addi	r2,r2,136
    85c8:	1421883a 	add	r16,r2,r16
    85cc:	80800017 	ldw	r2,0(r16)
    85d0:	80c00117 	ldw	r3,4(r16)
    85d4:	dfc00117 	ldw	ra,4(sp)
    85d8:	dc000017 	ldw	r16,0(sp)
    85dc:	dec00204 	addi	sp,sp,8
    85e0:	f800283a 	ret

000085e4 <__copybits>:
    85e4:	297fffc4 	addi	r5,r5,-1
    85e8:	280fd17a 	srai	r7,r5,5
    85ec:	30c00417 	ldw	r3,16(r6)
    85f0:	30800504 	addi	r2,r6,20
    85f4:	39c00044 	addi	r7,r7,1
    85f8:	18c7883a 	add	r3,r3,r3
    85fc:	39cf883a 	add	r7,r7,r7
    8600:	18c7883a 	add	r3,r3,r3
    8604:	39cf883a 	add	r7,r7,r7
    8608:	10c7883a 	add	r3,r2,r3
    860c:	21cf883a 	add	r7,r4,r7
    8610:	10c00d2e 	bgeu	r2,r3,8648 <__copybits+0x64>
    8614:	200b883a 	mov	r5,r4
    8618:	12000017 	ldw	r8,0(r2)
    861c:	29400104 	addi	r5,r5,4
    8620:	10800104 	addi	r2,r2,4
    8624:	2a3fff15 	stw	r8,-4(r5)
    8628:	10fffb36 	bltu	r2,r3,8618 <__copybits+0x34>
    862c:	1985c83a 	sub	r2,r3,r6
    8630:	10bffac4 	addi	r2,r2,-21
    8634:	1004d0ba 	srli	r2,r2,2
    8638:	10800044 	addi	r2,r2,1
    863c:	1085883a 	add	r2,r2,r2
    8640:	1085883a 	add	r2,r2,r2
    8644:	2089883a 	add	r4,r4,r2
    8648:	21c0032e 	bgeu	r4,r7,8658 <__copybits+0x74>
    864c:	20000015 	stw	zero,0(r4)
    8650:	21000104 	addi	r4,r4,4
    8654:	21fffd36 	bltu	r4,r7,864c <__copybits+0x68>
    8658:	f800283a 	ret

0000865c <__any_on>:
    865c:	20c00417 	ldw	r3,16(r4)
    8660:	2805d17a 	srai	r2,r5,5
    8664:	21000504 	addi	r4,r4,20
    8668:	18800d0e 	bge	r3,r2,86a0 <__any_on+0x44>
    866c:	18c7883a 	add	r3,r3,r3
    8670:	18c7883a 	add	r3,r3,r3
    8674:	20c7883a 	add	r3,r4,r3
    8678:	20c0192e 	bgeu	r4,r3,86e0 <__any_on+0x84>
    867c:	18bfff17 	ldw	r2,-4(r3)
    8680:	18ffff04 	addi	r3,r3,-4
    8684:	1000041e 	bne	r2,zero,8698 <__any_on+0x3c>
    8688:	20c0142e 	bgeu	r4,r3,86dc <__any_on+0x80>
    868c:	18ffff04 	addi	r3,r3,-4
    8690:	19400017 	ldw	r5,0(r3)
    8694:	283ffc26 	beq	r5,zero,8688 <__any_on+0x2c>
    8698:	00800044 	movi	r2,1
    869c:	f800283a 	ret
    86a0:	10c00a0e 	bge	r2,r3,86cc <__any_on+0x70>
    86a4:	1085883a 	add	r2,r2,r2
    86a8:	1085883a 	add	r2,r2,r2
    86ac:	294007cc 	andi	r5,r5,31
    86b0:	2087883a 	add	r3,r4,r2
    86b4:	283ff026 	beq	r5,zero,8678 <__any_on+0x1c>
    86b8:	19800017 	ldw	r6,0(r3)
    86bc:	3144d83a 	srl	r2,r6,r5
    86c0:	114a983a 	sll	r5,r2,r5
    86c4:	29bff41e 	bne	r5,r6,8698 <__any_on+0x3c>
    86c8:	003feb06 	br	8678 <__any_on+0x1c>
    86cc:	1085883a 	add	r2,r2,r2
    86d0:	1085883a 	add	r2,r2,r2
    86d4:	2087883a 	add	r3,r4,r2
    86d8:	003fe706 	br	8678 <__any_on+0x1c>
    86dc:	f800283a 	ret
    86e0:	0005883a 	mov	r2,zero
    86e4:	f800283a 	ret

000086e8 <__fpclassifyd>:
    86e8:	00a00034 	movhi	r2,32768
    86ec:	10bfffc4 	addi	r2,r2,-1
    86f0:	2884703a 	and	r2,r5,r2
    86f4:	10000726 	beq	r2,zero,8714 <__fpclassifyd+0x2c>
    86f8:	00fffc34 	movhi	r3,65520
    86fc:	019ff834 	movhi	r6,32736
    8700:	28c7883a 	add	r3,r5,r3
    8704:	31bfffc4 	addi	r6,r6,-1
    8708:	30c00536 	bltu	r6,r3,8720 <__fpclassifyd+0x38>
    870c:	00800104 	movi	r2,4
    8710:	f800283a 	ret
    8714:	2000021e 	bne	r4,zero,8720 <__fpclassifyd+0x38>
    8718:	00800084 	movi	r2,2
    871c:	f800283a 	ret
    8720:	00dffc34 	movhi	r3,32752
    8724:	019ff834 	movhi	r6,32736
    8728:	28cb883a 	add	r5,r5,r3
    872c:	31bfffc4 	addi	r6,r6,-1
    8730:	317ff62e 	bgeu	r6,r5,870c <__fpclassifyd+0x24>
    8734:	01400434 	movhi	r5,16
    8738:	297fffc4 	addi	r5,r5,-1
    873c:	28800236 	bltu	r5,r2,8748 <__fpclassifyd+0x60>
    8740:	008000c4 	movi	r2,3
    8744:	f800283a 	ret
    8748:	10c00226 	beq	r2,r3,8754 <__fpclassifyd+0x6c>
    874c:	0005883a 	mov	r2,zero
    8750:	f800283a 	ret
    8754:	2005003a 	cmpeq	r2,r4,zero
    8758:	f800283a 	ret

0000875c <__sread>:
    875c:	defffe04 	addi	sp,sp,-8
    8760:	dc000015 	stw	r16,0(sp)
    8764:	2821883a 	mov	r16,r5
    8768:	2940038f 	ldh	r5,14(r5)
    876c:	dfc00115 	stw	ra,4(sp)
    8770:	000a33c0 	call	a33c <_read_r>
    8774:	10000716 	blt	r2,zero,8794 <__sread+0x38>
    8778:	80c01417 	ldw	r3,80(r16)
    877c:	1887883a 	add	r3,r3,r2
    8780:	80c01415 	stw	r3,80(r16)
    8784:	dfc00117 	ldw	ra,4(sp)
    8788:	dc000017 	ldw	r16,0(sp)
    878c:	dec00204 	addi	sp,sp,8
    8790:	f800283a 	ret
    8794:	80c0030b 	ldhu	r3,12(r16)
    8798:	18fbffcc 	andi	r3,r3,61439
    879c:	80c0030d 	sth	r3,12(r16)
    87a0:	dfc00117 	ldw	ra,4(sp)
    87a4:	dc000017 	ldw	r16,0(sp)
    87a8:	dec00204 	addi	sp,sp,8
    87ac:	f800283a 	ret

000087b0 <__seofread>:
    87b0:	0005883a 	mov	r2,zero
    87b4:	f800283a 	ret

000087b8 <__swrite>:
    87b8:	2880030b 	ldhu	r2,12(r5)
    87bc:	defffb04 	addi	sp,sp,-20
    87c0:	dcc00315 	stw	r19,12(sp)
    87c4:	dc800215 	stw	r18,8(sp)
    87c8:	dc400115 	stw	r17,4(sp)
    87cc:	dc000015 	stw	r16,0(sp)
    87d0:	dfc00415 	stw	ra,16(sp)
    87d4:	10c0400c 	andi	r3,r2,256
    87d8:	2821883a 	mov	r16,r5
    87dc:	2027883a 	mov	r19,r4
    87e0:	3025883a 	mov	r18,r6
    87e4:	3823883a 	mov	r17,r7
    87e8:	18000526 	beq	r3,zero,8800 <__swrite+0x48>
    87ec:	2940038f 	ldh	r5,14(r5)
    87f0:	000d883a 	mov	r6,zero
    87f4:	01c00084 	movi	r7,2
    87f8:	000a2e00 	call	a2e0 <_lseek_r>
    87fc:	8080030b 	ldhu	r2,12(r16)
    8800:	8140038f 	ldh	r5,14(r16)
    8804:	10bbffcc 	andi	r2,r2,61439
    8808:	9809883a 	mov	r4,r19
    880c:	900d883a 	mov	r6,r18
    8810:	880f883a 	mov	r7,r17
    8814:	8080030d 	sth	r2,12(r16)
    8818:	dfc00417 	ldw	ra,16(sp)
    881c:	dcc00317 	ldw	r19,12(sp)
    8820:	dc800217 	ldw	r18,8(sp)
    8824:	dc400117 	ldw	r17,4(sp)
    8828:	dc000017 	ldw	r16,0(sp)
    882c:	dec00504 	addi	sp,sp,20
    8830:	0009dd01 	jmpi	9dd0 <_write_r>

00008834 <__sseek>:
    8834:	defffe04 	addi	sp,sp,-8
    8838:	dc000015 	stw	r16,0(sp)
    883c:	2821883a 	mov	r16,r5
    8840:	2940038f 	ldh	r5,14(r5)
    8844:	dfc00115 	stw	ra,4(sp)
    8848:	000a2e00 	call	a2e0 <_lseek_r>
    884c:	00ffffc4 	movi	r3,-1
    8850:	10c00826 	beq	r2,r3,8874 <__sseek+0x40>
    8854:	80c0030b 	ldhu	r3,12(r16)
    8858:	80801415 	stw	r2,80(r16)
    885c:	18c40014 	ori	r3,r3,4096
    8860:	80c0030d 	sth	r3,12(r16)
    8864:	dfc00117 	ldw	ra,4(sp)
    8868:	dc000017 	ldw	r16,0(sp)
    886c:	dec00204 	addi	sp,sp,8
    8870:	f800283a 	ret
    8874:	80c0030b 	ldhu	r3,12(r16)
    8878:	18fbffcc 	andi	r3,r3,61439
    887c:	80c0030d 	sth	r3,12(r16)
    8880:	dfc00117 	ldw	ra,4(sp)
    8884:	dc000017 	ldw	r16,0(sp)
    8888:	dec00204 	addi	sp,sp,8
    888c:	f800283a 	ret

00008890 <__sclose>:
    8890:	2940038f 	ldh	r5,14(r5)
    8894:	0009e2c1 	jmpi	9e2c <_close_r>

00008898 <strcmp>:
    8898:	2144b03a 	or	r2,r4,r5
    889c:	108000cc 	andi	r2,r2,3
    88a0:	1000171e 	bne	r2,zero,8900 <strcmp+0x68>
    88a4:	20800017 	ldw	r2,0(r4)
    88a8:	28c00017 	ldw	r3,0(r5)
    88ac:	10c0141e 	bne	r2,r3,8900 <strcmp+0x68>
    88b0:	027fbff4 	movhi	r9,65279
    88b4:	4a7fbfc4 	addi	r9,r9,-257
    88b8:	0086303a 	nor	r3,zero,r2
    88bc:	02202074 	movhi	r8,32897
    88c0:	1245883a 	add	r2,r2,r9
    88c4:	42202004 	addi	r8,r8,-32640
    88c8:	10c4703a 	and	r2,r2,r3
    88cc:	1204703a 	and	r2,r2,r8
    88d0:	10000226 	beq	r2,zero,88dc <strcmp+0x44>
    88d4:	00001706 	br	8934 <strcmp+0x9c>
    88d8:	1000161e 	bne	r2,zero,8934 <strcmp+0x9c>
    88dc:	21000104 	addi	r4,r4,4
    88e0:	20c00017 	ldw	r3,0(r4)
    88e4:	29400104 	addi	r5,r5,4
    88e8:	29800017 	ldw	r6,0(r5)
    88ec:	1a4f883a 	add	r7,r3,r9
    88f0:	00c4303a 	nor	r2,zero,r3
    88f4:	3884703a 	and	r2,r7,r2
    88f8:	1204703a 	and	r2,r2,r8
    88fc:	19bff626 	beq	r3,r6,88d8 <strcmp+0x40>
    8900:	20800007 	ldb	r2,0(r4)
    8904:	1000051e 	bne	r2,zero,891c <strcmp+0x84>
    8908:	00000606 	br	8924 <strcmp+0x8c>
    890c:	21000044 	addi	r4,r4,1
    8910:	20800007 	ldb	r2,0(r4)
    8914:	29400044 	addi	r5,r5,1
    8918:	10000226 	beq	r2,zero,8924 <strcmp+0x8c>
    891c:	28c00007 	ldb	r3,0(r5)
    8920:	10fffa26 	beq	r2,r3,890c <strcmp+0x74>
    8924:	20800003 	ldbu	r2,0(r4)
    8928:	28c00003 	ldbu	r3,0(r5)
    892c:	10c5c83a 	sub	r2,r2,r3
    8930:	f800283a 	ret
    8934:	0005883a 	mov	r2,zero
    8938:	f800283a 	ret

0000893c <__sprint_r.part.0>:
    893c:	28801917 	ldw	r2,100(r5)
    8940:	defff604 	addi	sp,sp,-40
    8944:	dd400515 	stw	r21,20(sp)
    8948:	dcc00315 	stw	r19,12(sp)
    894c:	dfc00915 	stw	ra,36(sp)
    8950:	df000815 	stw	fp,32(sp)
    8954:	ddc00715 	stw	r23,28(sp)
    8958:	dd800615 	stw	r22,24(sp)
    895c:	dd000415 	stw	r20,16(sp)
    8960:	dc800215 	stw	r18,8(sp)
    8964:	dc400115 	stw	r17,4(sp)
    8968:	dc000015 	stw	r16,0(sp)
    896c:	1088000c 	andi	r2,r2,8192
    8970:	2827883a 	mov	r19,r5
    8974:	302b883a 	mov	r21,r6
    8978:	10002d26 	beq	r2,zero,8a30 <__sprint_r.part.0+0xf4>
    897c:	30800217 	ldw	r2,8(r6)
    8980:	35800017 	ldw	r22,0(r6)
    8984:	10002826 	beq	r2,zero,8a28 <__sprint_r.part.0+0xec>
    8988:	2029883a 	mov	r20,r4
    898c:	b5c00104 	addi	r23,r22,4
    8990:	04bfffc4 	movi	r18,-1
    8994:	bc400017 	ldw	r17,0(r23)
    8998:	b4000017 	ldw	r16,0(r22)
    899c:	0039883a 	mov	fp,zero
    89a0:	8822d0ba 	srli	r17,r17,2
    89a4:	04400316 	blt	zero,r17,89b4 <__sprint_r.part.0+0x78>
    89a8:	00001706 	br	8a08 <__sprint_r.part.0+0xcc>
    89ac:	84000104 	addi	r16,r16,4
    89b0:	8f001526 	beq	r17,fp,8a08 <__sprint_r.part.0+0xcc>
    89b4:	81400017 	ldw	r5,0(r16)
    89b8:	a009883a 	mov	r4,r20
    89bc:	980d883a 	mov	r6,r19
    89c0:	000a0580 	call	a058 <_fputwc_r>
    89c4:	e7000044 	addi	fp,fp,1
    89c8:	14bff81e 	bne	r2,r18,89ac <__sprint_r.part.0+0x70>
    89cc:	9005883a 	mov	r2,r18
    89d0:	a8000215 	stw	zero,8(r21)
    89d4:	a8000115 	stw	zero,4(r21)
    89d8:	dfc00917 	ldw	ra,36(sp)
    89dc:	df000817 	ldw	fp,32(sp)
    89e0:	ddc00717 	ldw	r23,28(sp)
    89e4:	dd800617 	ldw	r22,24(sp)
    89e8:	dd400517 	ldw	r21,20(sp)
    89ec:	dd000417 	ldw	r20,16(sp)
    89f0:	dcc00317 	ldw	r19,12(sp)
    89f4:	dc800217 	ldw	r18,8(sp)
    89f8:	dc400117 	ldw	r17,4(sp)
    89fc:	dc000017 	ldw	r16,0(sp)
    8a00:	dec00a04 	addi	sp,sp,40
    8a04:	f800283a 	ret
    8a08:	a8c00217 	ldw	r3,8(r21)
    8a0c:	8c63883a 	add	r17,r17,r17
    8a10:	8c63883a 	add	r17,r17,r17
    8a14:	1c45c83a 	sub	r2,r3,r17
    8a18:	a8800215 	stw	r2,8(r21)
    8a1c:	b5800204 	addi	r22,r22,8
    8a20:	bdc00204 	addi	r23,r23,8
    8a24:	103fdb1e 	bne	r2,zero,8994 <__sprint_r.part.0+0x58>
    8a28:	0005883a 	mov	r2,zero
    8a2c:	003fe806 	br	89d0 <__sprint_r.part.0+0x94>
    8a30:	0006a100 	call	6a10 <__sfvwrite_r>
    8a34:	003fe606 	br	89d0 <__sprint_r.part.0+0x94>

00008a38 <__sprint_r>:
    8a38:	30c00217 	ldw	r3,8(r6)
    8a3c:	18000126 	beq	r3,zero,8a44 <__sprint_r+0xc>
    8a40:	000893c1 	jmpi	893c <__sprint_r.part.0>
    8a44:	30000115 	stw	zero,4(r6)
    8a48:	0005883a 	mov	r2,zero
    8a4c:	f800283a 	ret

00008a50 <___vfiprintf_internal_r>:
    8a50:	defeca04 	addi	sp,sp,-1240
    8a54:	dd813215 	stw	r22,1224(sp)
    8a58:	dd013015 	stw	r20,1216(sp)
    8a5c:	dfc13515 	stw	ra,1236(sp)
    8a60:	df013415 	stw	fp,1232(sp)
    8a64:	ddc13315 	stw	r23,1228(sp)
    8a68:	dd413115 	stw	r21,1220(sp)
    8a6c:	dcc12f15 	stw	r19,1212(sp)
    8a70:	dc812e15 	stw	r18,1208(sp)
    8a74:	dc412d15 	stw	r17,1204(sp)
    8a78:	dc012c15 	stw	r16,1200(sp)
    8a7c:	d9012015 	stw	r4,1152(sp)
    8a80:	d9c12115 	stw	r7,1156(sp)
    8a84:	2829883a 	mov	r20,r5
    8a88:	302d883a 	mov	r22,r6
    8a8c:	20000226 	beq	r4,zero,8a98 <___vfiprintf_internal_r+0x48>
    8a90:	20800e17 	ldw	r2,56(r4)
    8a94:	1001d326 	beq	r2,zero,91e4 <___vfiprintf_internal_r+0x794>
    8a98:	a0c0030b 	ldhu	r3,12(r20)
    8a9c:	1908000c 	andi	r4,r3,8192
    8aa0:	1805883a 	mov	r2,r3
    8aa4:	2000071e 	bne	r4,zero,8ac4 <___vfiprintf_internal_r+0x74>
    8aa8:	a1001917 	ldw	r4,100(r20)
    8aac:	18880014 	ori	r2,r3,8192
    8ab0:	00f7ffc4 	movi	r3,-8193
    8ab4:	20c8703a 	and	r4,r4,r3
    8ab8:	a080030d 	sth	r2,12(r20)
    8abc:	1007883a 	mov	r3,r2
    8ac0:	a1001915 	stw	r4,100(r20)
    8ac4:	1100020c 	andi	r4,r2,8
    8ac8:	20018926 	beq	r4,zero,90f0 <___vfiprintf_internal_r+0x6a0>
    8acc:	a1000417 	ldw	r4,16(r20)
    8ad0:	20018726 	beq	r4,zero,90f0 <___vfiprintf_internal_r+0x6a0>
    8ad4:	1080068c 	andi	r2,r2,26
    8ad8:	01000284 	movi	r4,10
    8adc:	11018d26 	beq	r2,r4,9114 <___vfiprintf_internal_r+0x6c4>
    8ae0:	da810a04 	addi	r10,sp,1064
    8ae4:	dac109c4 	addi	r11,sp,1063
    8ae8:	07000074 	movhi	fp,1
    8aec:	05c00074 	movhi	r23,1
    8af0:	da811e15 	stw	r10,1144(sp)
    8af4:	52d5c83a 	sub	r10,r10,r11
    8af8:	e7005804 	addi	fp,fp,352
    8afc:	bdc05404 	addi	r23,r23,336
    8b00:	dac11f15 	stw	r11,1148(sp)
    8b04:	dec11a15 	stw	sp,1128(sp)
    8b08:	d8011c15 	stw	zero,1136(sp)
    8b0c:	d8011b15 	stw	zero,1132(sp)
    8b10:	d8012615 	stw	zero,1176(sp)
    8b14:	d8012215 	stw	zero,1160(sp)
    8b18:	da812715 	stw	r10,1180(sp)
    8b1c:	d811883a 	mov	r8,sp
    8b20:	b021883a 	mov	r16,r22
    8b24:	80800007 	ldb	r2,0(r16)
    8b28:	10039c26 	beq	r2,zero,999c <___vfiprintf_internal_r+0xf4c>
    8b2c:	01000944 	movi	r4,37
    8b30:	11039a26 	beq	r2,r4,999c <___vfiprintf_internal_r+0xf4c>
    8b34:	8005883a 	mov	r2,r16
    8b38:	00000106 	br	8b40 <___vfiprintf_internal_r+0xf0>
    8b3c:	19000326 	beq	r3,r4,8b4c <___vfiprintf_internal_r+0xfc>
    8b40:	10800044 	addi	r2,r2,1
    8b44:	10c00007 	ldb	r3,0(r2)
    8b48:	183ffc1e 	bne	r3,zero,8b3c <___vfiprintf_internal_r+0xec>
    8b4c:	1425c83a 	sub	r18,r2,r16
    8b50:	1023883a 	mov	r17,r2
    8b54:	90001026 	beq	r18,zero,8b98 <___vfiprintf_internal_r+0x148>
    8b58:	d8c11c17 	ldw	r3,1136(sp)
    8b5c:	d8811b17 	ldw	r2,1132(sp)
    8b60:	44000015 	stw	r16,0(r8)
    8b64:	90c7883a 	add	r3,r18,r3
    8b68:	10800044 	addi	r2,r2,1
    8b6c:	44800115 	stw	r18,4(r8)
    8b70:	d8c11c15 	stw	r3,1136(sp)
    8b74:	d8811b15 	stw	r2,1132(sp)
    8b78:	010001c4 	movi	r4,7
    8b7c:	2080750e 	bge	r4,r2,8d54 <___vfiprintf_internal_r+0x304>
    8b80:	18039d1e 	bne	r3,zero,99f8 <___vfiprintf_internal_r+0xfa8>
    8b84:	dac12217 	ldw	r11,1160(sp)
    8b88:	d8011b15 	stw	zero,1132(sp)
    8b8c:	d811883a 	mov	r8,sp
    8b90:	5c97883a 	add	r11,r11,r18
    8b94:	dac12215 	stw	r11,1160(sp)
    8b98:	88800007 	ldb	r2,0(r17)
    8b9c:	1002e026 	beq	r2,zero,9720 <___vfiprintf_internal_r+0xcd0>
    8ba0:	88c00047 	ldb	r3,1(r17)
    8ba4:	8c000044 	addi	r16,r17,1
    8ba8:	d8011d85 	stb	zero,1142(sp)
    8bac:	000d883a 	mov	r6,zero
    8bb0:	027fffc4 	movi	r9,-1
    8bb4:	0027883a 	mov	r19,zero
    8bb8:	002b883a 	mov	r21,zero
    8bbc:	01001604 	movi	r4,88
    8bc0:	01400244 	movi	r5,9
    8bc4:	03000a84 	movi	r12,42
    8bc8:	01c01b04 	movi	r7,108
    8bcc:	84000044 	addi	r16,r16,1
    8bd0:	18bff804 	addi	r2,r3,-32
    8bd4:	20825f36 	bltu	r4,r2,9554 <___vfiprintf_internal_r+0xb04>
    8bd8:	100490ba 	slli	r2,r2,2
    8bdc:	02800074 	movhi	r10,1
    8be0:	52a2fc04 	addi	r10,r10,-29712
    8be4:	1285883a 	add	r2,r2,r10
    8be8:	10800017 	ldw	r2,0(r2)
    8bec:	1000683a 	jmp	r2
    8bf0:	000093c4 	movi	zero,591
    8bf4:	00009554 	movui	zero,597
    8bf8:	00009554 	movui	zero,597
    8bfc:	00009548 	cmpgei	zero,zero,597
    8c00:	00009554 	movui	zero,597
    8c04:	00009554 	movui	zero,597
    8c08:	00009554 	movui	zero,597
    8c0c:	00009554 	movui	zero,597
    8c10:	00009554 	movui	zero,597
    8c14:	00009554 	movui	zero,597
    8c18:	00009520 	cmpeqi	zero,zero,596
    8c1c:	0000953c 	xorhi	zero,zero,596
    8c20:	00009554 	movui	zero,597
    8c24:	000091f4 	movhi	zero,583
    8c28:	00009354 	movui	zero,589
    8c2c:	00009554 	movui	zero,597
    8c30:	000092d8 	cmpnei	zero,zero,587
    8c34:	000092e4 	muli	zero,zero,587
    8c38:	000092e4 	muli	zero,zero,587
    8c3c:	000092e4 	muli	zero,zero,587
    8c40:	000092e4 	muli	zero,zero,587
    8c44:	000092e4 	muli	zero,zero,587
    8c48:	000092e4 	muli	zero,zero,587
    8c4c:	000092e4 	muli	zero,zero,587
    8c50:	000092e4 	muli	zero,zero,587
    8c54:	000092e4 	muli	zero,zero,587
    8c58:	00009554 	movui	zero,597
    8c5c:	00009554 	movui	zero,597
    8c60:	00009554 	movui	zero,597
    8c64:	00009554 	movui	zero,597
    8c68:	00009554 	movui	zero,597
    8c6c:	00009554 	movui	zero,597
    8c70:	00009554 	movui	zero,597
    8c74:	00009554 	movui	zero,597
    8c78:	00009554 	movui	zero,597
    8c7c:	00009554 	movui	zero,597
    8c80:	00009310 	cmplti	zero,zero,588
    8c84:	00009554 	movui	zero,597
    8c88:	00009554 	movui	zero,597
    8c8c:	00009554 	movui	zero,597
    8c90:	00009554 	movui	zero,597
    8c94:	00009554 	movui	zero,597
    8c98:	00009554 	movui	zero,597
    8c9c:	00009554 	movui	zero,597
    8ca0:	00009554 	movui	zero,597
    8ca4:	00009554 	movui	zero,597
    8ca8:	00009554 	movui	zero,597
    8cac:	00008da4 	muli	zero,zero,566
    8cb0:	00009554 	movui	zero,597
    8cb4:	00009554 	movui	zero,597
    8cb8:	00009554 	movui	zero,597
    8cbc:	00009554 	movui	zero,597
    8cc0:	00009554 	movui	zero,597
    8cc4:	00008d68 	cmpgeui	zero,zero,565
    8cc8:	00009554 	movui	zero,597
    8ccc:	00009554 	movui	zero,597
    8cd0:	00009250 	cmplti	zero,zero,585
    8cd4:	00009554 	movui	zero,597
    8cd8:	00009554 	movui	zero,597
    8cdc:	00009554 	movui	zero,597
    8ce0:	00009554 	movui	zero,597
    8ce4:	00009554 	movui	zero,597
    8ce8:	00009554 	movui	zero,597
    8cec:	00009554 	movui	zero,597
    8cf0:	00009554 	movui	zero,597
    8cf4:	00009554 	movui	zero,597
    8cf8:	00009554 	movui	zero,597
    8cfc:	000092a8 	cmpgeui	zero,zero,586
    8d00:	00009440 	call	944 <main+0xac>
    8d04:	00009554 	movui	zero,597
    8d08:	00009554 	movui	zero,597
    8d0c:	00009554 	movui	zero,597
    8d10:	000094c8 	cmpgei	zero,zero,595
    8d14:	00009440 	call	944 <main+0xac>
    8d18:	00009554 	movui	zero,597
    8d1c:	00009554 	movui	zero,597
    8d20:	000094d4 	movui	zero,595
    8d24:	00009554 	movui	zero,597
    8d28:	00009394 	movui	zero,590
    8d2c:	00008da8 	cmpgeui	zero,zero,566
    8d30:	0000947c 	xorhi	zero,zero,593
    8d34:	000094bc 	xorhi	zero,zero,594
    8d38:	00009554 	movui	zero,597
    8d3c:	000093e0 	cmpeqi	zero,zero,591
    8d40:	00009554 	movui	zero,597
    8d44:	00008d6c 	andhi	zero,zero,565
    8d48:	00009554 	movui	zero,597
    8d4c:	00009554 	movui	zero,597
    8d50:	000094e4 	muli	zero,zero,595
    8d54:	42000204 	addi	r8,r8,8
    8d58:	dac12217 	ldw	r11,1160(sp)
    8d5c:	5c97883a 	add	r11,r11,r18
    8d60:	dac12215 	stw	r11,1160(sp)
    8d64:	003f8c06 	br	8b98 <___vfiprintf_internal_r+0x148>
    8d68:	ad400414 	ori	r21,r21,16
    8d6c:	a880080c 	andi	r2,r21,32
    8d70:	10012f1e 	bne	r2,zero,9230 <___vfiprintf_internal_r+0x7e0>
    8d74:	a880040c 	andi	r2,r21,16
    8d78:	1001ff1e 	bne	r2,zero,9578 <___vfiprintf_internal_r+0xb28>
    8d7c:	a880100c 	andi	r2,r21,64
    8d80:	1001fd26 	beq	r2,zero,9578 <___vfiprintf_internal_r+0xb28>
    8d84:	da812117 	ldw	r10,1156(sp)
    8d88:	002d883a 	mov	r22,zero
    8d8c:	00800044 	movi	r2,1
    8d90:	5480000b 	ldhu	r18,0(r10)
    8d94:	52800104 	addi	r10,r10,4
    8d98:	da812115 	stw	r10,1156(sp)
    8d9c:	9009883a 	mov	r4,r18
    8da0:	00000a06 	br	8dcc <___vfiprintf_internal_r+0x37c>
    8da4:	ad400414 	ori	r21,r21,16
    8da8:	a880080c 	andi	r2,r21,32
    8dac:	10011426 	beq	r2,zero,9200 <___vfiprintf_internal_r+0x7b0>
    8db0:	da812117 	ldw	r10,1156(sp)
    8db4:	0005883a 	mov	r2,zero
    8db8:	54800017 	ldw	r18,0(r10)
    8dbc:	55800117 	ldw	r22,4(r10)
    8dc0:	52800204 	addi	r10,r10,8
    8dc4:	da812115 	stw	r10,1156(sp)
    8dc8:	9588b03a 	or	r4,r18,r22
    8dcc:	d8011d85 	stb	zero,1142(sp)
    8dd0:	4823883a 	mov	r17,r9
    8dd4:	0019883a 	mov	r12,zero
    8dd8:	48000216 	blt	r9,zero,8de4 <___vfiprintf_internal_r+0x394>
    8ddc:	00ffdfc4 	movi	r3,-129
    8de0:	a8ea703a 	and	r21,r21,r3
    8de4:	2002221e 	bne	r4,zero,9670 <___vfiprintf_internal_r+0xc20>
    8de8:	4802c726 	beq	r9,zero,9908 <___vfiprintf_internal_r+0xeb8>
    8dec:	10803fcc 	andi	r2,r2,255
    8df0:	00c00044 	movi	r3,1
    8df4:	10c24426 	beq	r2,r3,9708 <___vfiprintf_internal_r+0xcb8>
    8df8:	00c00084 	movi	r3,2
    8dfc:	10c2cc26 	beq	r2,r3,9930 <___vfiprintf_internal_r+0xee0>
    8e00:	d8c10a04 	addi	r3,sp,1064
    8e04:	9008d0fa 	srli	r4,r18,3
    8e08:	b00a977a 	slli	r5,r22,29
    8e0c:	b02cd0fa 	srli	r22,r22,3
    8e10:	948001cc 	andi	r18,r18,7
    8e14:	90800c04 	addi	r2,r18,48
    8e18:	18ffffc4 	addi	r3,r3,-1
    8e1c:	2924b03a 	or	r18,r5,r4
    8e20:	18800005 	stb	r2,0(r3)
    8e24:	9588b03a 	or	r4,r18,r22
    8e28:	203ff61e 	bne	r4,zero,8e04 <___vfiprintf_internal_r+0x3b4>
    8e2c:	a900004c 	andi	r4,r21,1
    8e30:	d8c12415 	stw	r3,1168(sp)
    8e34:	2002fb1e 	bne	r4,zero,9a24 <___vfiprintf_internal_r+0xfd4>
    8e38:	da811e17 	ldw	r10,1144(sp)
    8e3c:	50e3c83a 	sub	r17,r10,r3
    8e40:	8825883a 	mov	r18,r17
    8e44:	8a40010e 	bge	r17,r9,8e4c <___vfiprintf_internal_r+0x3fc>
    8e48:	4825883a 	mov	r18,r9
    8e4c:	63003fcc 	andi	r12,r12,255
    8e50:	6300201c 	xori	r12,r12,128
    8e54:	633fe004 	addi	r12,r12,-128
    8e58:	60000126 	beq	r12,zero,8e60 <___vfiprintf_internal_r+0x410>
    8e5c:	94800044 	addi	r18,r18,1
    8e60:	ab80008c 	andi	r14,r21,2
    8e64:	70000126 	beq	r14,zero,8e6c <___vfiprintf_internal_r+0x41c>
    8e68:	94800084 	addi	r18,r18,2
    8e6c:	ad80210c 	andi	r22,r21,132
    8e70:	b001df1e 	bne	r22,zero,95f0 <___vfiprintf_internal_r+0xba0>
    8e74:	9c8fc83a 	sub	r7,r19,r18
    8e78:	01c1dd0e 	bge	zero,r7,95f0 <___vfiprintf_internal_r+0xba0>
    8e7c:	03000404 	movi	r12,16
    8e80:	d8811c17 	ldw	r2,1136(sp)
    8e84:	61c3920e 	bge	r12,r7,9cd0 <___vfiprintf_internal_r+0x1280>
    8e88:	02800074 	movhi	r10,1
    8e8c:	52805804 	addi	r10,r10,352
    8e90:	dc012915 	stw	r16,1188(sp)
    8e94:	d9811b17 	ldw	r6,1132(sp)
    8e98:	da812315 	stw	r10,1164(sp)
    8e9c:	00c001c4 	movi	r3,7
    8ea0:	da412515 	stw	r9,1172(sp)
    8ea4:	db812815 	stw	r14,1184(sp)
    8ea8:	3821883a 	mov	r16,r7
    8eac:	00000506 	br	8ec4 <___vfiprintf_internal_r+0x474>
    8eb0:	31400084 	addi	r5,r6,2
    8eb4:	42000204 	addi	r8,r8,8
    8eb8:	200d883a 	mov	r6,r4
    8ebc:	843ffc04 	addi	r16,r16,-16
    8ec0:	64000d0e 	bge	r12,r16,8ef8 <___vfiprintf_internal_r+0x4a8>
    8ec4:	10800404 	addi	r2,r2,16
    8ec8:	31000044 	addi	r4,r6,1
    8ecc:	47000015 	stw	fp,0(r8)
    8ed0:	43000115 	stw	r12,4(r8)
    8ed4:	d8811c15 	stw	r2,1136(sp)
    8ed8:	d9011b15 	stw	r4,1132(sp)
    8edc:	193ff40e 	bge	r3,r4,8eb0 <___vfiprintf_internal_r+0x460>
    8ee0:	1001b51e 	bne	r2,zero,95b8 <___vfiprintf_internal_r+0xb68>
    8ee4:	843ffc04 	addi	r16,r16,-16
    8ee8:	000d883a 	mov	r6,zero
    8eec:	01400044 	movi	r5,1
    8ef0:	d811883a 	mov	r8,sp
    8ef4:	643ff316 	blt	r12,r16,8ec4 <___vfiprintf_internal_r+0x474>
    8ef8:	800f883a 	mov	r7,r16
    8efc:	da412517 	ldw	r9,1172(sp)
    8f00:	db812817 	ldw	r14,1184(sp)
    8f04:	dc012917 	ldw	r16,1188(sp)
    8f08:	dac12317 	ldw	r11,1164(sp)
    8f0c:	3887883a 	add	r3,r7,r2
    8f10:	41c00115 	stw	r7,4(r8)
    8f14:	42c00015 	stw	r11,0(r8)
    8f18:	d8c11c15 	stw	r3,1136(sp)
    8f1c:	d9411b15 	stw	r5,1132(sp)
    8f20:	008001c4 	movi	r2,7
    8f24:	11429316 	blt	r2,r5,9974 <___vfiprintf_internal_r+0xf24>
    8f28:	d9011d87 	ldb	r4,1142(sp)
    8f2c:	42000204 	addi	r8,r8,8
    8f30:	28800044 	addi	r2,r5,1
    8f34:	2001b31e 	bne	r4,zero,9604 <___vfiprintf_internal_r+0xbb4>
    8f38:	70000c26 	beq	r14,zero,8f6c <___vfiprintf_internal_r+0x51c>
    8f3c:	d9011d04 	addi	r4,sp,1140
    8f40:	18c00084 	addi	r3,r3,2
    8f44:	41000015 	stw	r4,0(r8)
    8f48:	01000084 	movi	r4,2
    8f4c:	41000115 	stw	r4,4(r8)
    8f50:	d8c11c15 	stw	r3,1136(sp)
    8f54:	d8811b15 	stw	r2,1132(sp)
    8f58:	010001c4 	movi	r4,7
    8f5c:	20826516 	blt	r4,r2,98f4 <___vfiprintf_internal_r+0xea4>
    8f60:	100b883a 	mov	r5,r2
    8f64:	42000204 	addi	r8,r8,8
    8f68:	10800044 	addi	r2,r2,1
    8f6c:	01002004 	movi	r4,128
    8f70:	b1021a26 	beq	r22,r4,97dc <___vfiprintf_internal_r+0xd8c>
    8f74:	4c6dc83a 	sub	r22,r9,r17
    8f78:	0580230e 	bge	zero,r22,9008 <___vfiprintf_internal_r+0x5b8>
    8f7c:	01c00404 	movi	r7,16
    8f80:	3d83300e 	bge	r7,r22,9c44 <___vfiprintf_internal_r+0x11f4>
    8f84:	00800074 	movhi	r2,1
    8f88:	10805404 	addi	r2,r2,336
    8f8c:	d8812315 	stw	r2,1164(sp)
    8f90:	030001c4 	movi	r12,7
    8f94:	00000506 	br	8fac <___vfiprintf_internal_r+0x55c>
    8f98:	28800084 	addi	r2,r5,2
    8f9c:	42000204 	addi	r8,r8,8
    8fa0:	200b883a 	mov	r5,r4
    8fa4:	b5bffc04 	addi	r22,r22,-16
    8fa8:	3d800d0e 	bge	r7,r22,8fe0 <___vfiprintf_internal_r+0x590>
    8fac:	18c00404 	addi	r3,r3,16
    8fb0:	29000044 	addi	r4,r5,1
    8fb4:	45c00015 	stw	r23,0(r8)
    8fb8:	41c00115 	stw	r7,4(r8)
    8fbc:	d8c11c15 	stw	r3,1136(sp)
    8fc0:	d9011b15 	stw	r4,1132(sp)
    8fc4:	613ff40e 	bge	r12,r4,8f98 <___vfiprintf_internal_r+0x548>
    8fc8:	18019b1e 	bne	r3,zero,9638 <___vfiprintf_internal_r+0xbe8>
    8fcc:	b5bffc04 	addi	r22,r22,-16
    8fd0:	000b883a 	mov	r5,zero
    8fd4:	00800044 	movi	r2,1
    8fd8:	d811883a 	mov	r8,sp
    8fdc:	3dbff316 	blt	r7,r22,8fac <___vfiprintf_internal_r+0x55c>
    8fe0:	da812317 	ldw	r10,1164(sp)
    8fe4:	1d87883a 	add	r3,r3,r22
    8fe8:	45800115 	stw	r22,4(r8)
    8fec:	42800015 	stw	r10,0(r8)
    8ff0:	d8c11c15 	stw	r3,1136(sp)
    8ff4:	d8811b15 	stw	r2,1132(sp)
    8ff8:	010001c4 	movi	r4,7
    8ffc:	2081dd16 	blt	r4,r2,9774 <___vfiprintf_internal_r+0xd24>
    9000:	42000204 	addi	r8,r8,8
    9004:	10800044 	addi	r2,r2,1
    9008:	da812417 	ldw	r10,1168(sp)
    900c:	1c47883a 	add	r3,r3,r17
    9010:	44400115 	stw	r17,4(r8)
    9014:	42800015 	stw	r10,0(r8)
    9018:	d8c11c15 	stw	r3,1136(sp)
    901c:	d8811b15 	stw	r2,1132(sp)
    9020:	010001c4 	movi	r4,7
    9024:	2081dc0e 	bge	r4,r2,9798 <___vfiprintf_internal_r+0xd48>
    9028:	1802611e 	bne	r3,zero,99b0 <___vfiprintf_internal_r+0xf60>
    902c:	d8011b15 	stw	zero,1132(sp)
    9030:	aac0010c 	andi	r11,r21,4
    9034:	58002726 	beq	r11,zero,90d4 <___vfiprintf_internal_r+0x684>
    9038:	9ca3c83a 	sub	r17,r19,r18
    903c:	d811883a 	mov	r8,sp
    9040:	0443510e 	bge	zero,r17,9d88 <___vfiprintf_internal_r+0x1338>
    9044:	01c00404 	movi	r7,16
    9048:	3c43320e 	bge	r7,r17,9d14 <___vfiprintf_internal_r+0x12c4>
    904c:	00800074 	movhi	r2,1
    9050:	10805804 	addi	r2,r2,352
    9054:	d9011b17 	ldw	r4,1132(sp)
    9058:	d8812315 	stw	r2,1164(sp)
    905c:	382d883a 	mov	r22,r7
    9060:	054001c4 	movi	r21,7
    9064:	00000506 	br	907c <___vfiprintf_internal_r+0x62c>
    9068:	21400084 	addi	r5,r4,2
    906c:	42000204 	addi	r8,r8,8
    9070:	1009883a 	mov	r4,r2
    9074:	8c7ffc04 	addi	r17,r17,-16
    9078:	b4400d0e 	bge	r22,r17,90b0 <___vfiprintf_internal_r+0x660>
    907c:	18c00404 	addi	r3,r3,16
    9080:	20800044 	addi	r2,r4,1
    9084:	47000015 	stw	fp,0(r8)
    9088:	45800115 	stw	r22,4(r8)
    908c:	d8c11c15 	stw	r3,1136(sp)
    9090:	d8811b15 	stw	r2,1132(sp)
    9094:	a8bff40e 	bge	r21,r2,9068 <___vfiprintf_internal_r+0x618>
    9098:	1801ac1e 	bne	r3,zero,974c <___vfiprintf_internal_r+0xcfc>
    909c:	8c7ffc04 	addi	r17,r17,-16
    90a0:	0009883a 	mov	r4,zero
    90a4:	01400044 	movi	r5,1
    90a8:	d811883a 	mov	r8,sp
    90ac:	b47ff316 	blt	r22,r17,907c <___vfiprintf_internal_r+0x62c>
    90b0:	da812317 	ldw	r10,1164(sp)
    90b4:	1c47883a 	add	r3,r3,r17
    90b8:	44400115 	stw	r17,4(r8)
    90bc:	42800015 	stw	r10,0(r8)
    90c0:	d8c11c15 	stw	r3,1136(sp)
    90c4:	d9411b15 	stw	r5,1132(sp)
    90c8:	008001c4 	movi	r2,7
    90cc:	1141b70e 	bge	r2,r5,97ac <___vfiprintf_internal_r+0xd5c>
    90d0:	1802cf1e 	bne	r3,zero,9c10 <___vfiprintf_internal_r+0x11c0>
    90d4:	94c2ca16 	blt	r18,r19,9c00 <___vfiprintf_internal_r+0x11b0>
    90d8:	dac12217 	ldw	r11,1160(sp)
    90dc:	5c97883a 	add	r11,r11,r18
    90e0:	dac12215 	stw	r11,1160(sp)
    90e4:	d8011b15 	stw	zero,1132(sp)
    90e8:	d811883a 	mov	r8,sp
    90ec:	003e8d06 	br	8b24 <___vfiprintf_internal_r+0xd4>
    90f0:	d9012017 	ldw	r4,1152(sp)
    90f4:	a00b883a 	mov	r5,r20
    90f8:	00045ac0 	call	45ac <__swsetup_r>
    90fc:	10002c1e 	bne	r2,zero,91b0 <___vfiprintf_internal_r+0x760>
    9100:	a0c0030b 	ldhu	r3,12(r20)
    9104:	01000284 	movi	r4,10
    9108:	1805883a 	mov	r2,r3
    910c:	1080068c 	andi	r2,r2,26
    9110:	113e731e 	bne	r2,r4,8ae0 <___vfiprintf_internal_r+0x90>
    9114:	a080038b 	ldhu	r2,14(r20)
    9118:	113fffcc 	andi	r4,r2,65535
    911c:	2120001c 	xori	r4,r4,32768
    9120:	21200004 	addi	r4,r4,-32768
    9124:	203e6e16 	blt	r4,zero,8ae0 <___vfiprintf_internal_r+0x90>
    9128:	a3001917 	ldw	r12,100(r20)
    912c:	a2c00717 	ldw	r11,28(r20)
    9130:	a2800917 	ldw	r10,36(r20)
    9134:	d9012017 	ldw	r4,1152(sp)
    9138:	d9c12117 	ldw	r7,1156(sp)
    913c:	02410004 	movi	r9,1024
    9140:	18ffff4c 	andi	r3,r3,65533
    9144:	da4b883a 	add	r5,sp,r9
    9148:	b00d883a 	mov	r6,r22
    914c:	d8c1030d 	sth	r3,1036(sp)
    9150:	db011915 	stw	r12,1124(sp)
    9154:	d881038d 	sth	r2,1038(sp)
    9158:	dac10715 	stw	r11,1052(sp)
    915c:	da810915 	stw	r10,1060(sp)
    9160:	dec10015 	stw	sp,1024(sp)
    9164:	dec10415 	stw	sp,1040(sp)
    9168:	da410215 	stw	r9,1032(sp)
    916c:	da410515 	stw	r9,1044(sp)
    9170:	d8010615 	stw	zero,1048(sp)
    9174:	0008a500 	call	8a50 <___vfiprintf_internal_r>
    9178:	1021883a 	mov	r16,r2
    917c:	10000416 	blt	r2,zero,9190 <___vfiprintf_internal_r+0x740>
    9180:	d9012017 	ldw	r4,1152(sp)
    9184:	d9410004 	addi	r5,sp,1024
    9188:	00060040 	call	6004 <_fflush_r>
    918c:	1002fc1e 	bne	r2,zero,9d80 <___vfiprintf_internal_r+0x1330>
    9190:	d881030b 	ldhu	r2,1036(sp)
    9194:	1080100c 	andi	r2,r2,64
    9198:	10000326 	beq	r2,zero,91a8 <___vfiprintf_internal_r+0x758>
    919c:	a080030b 	ldhu	r2,12(r20)
    91a0:	10801014 	ori	r2,r2,64
    91a4:	a080030d 	sth	r2,12(r20)
    91a8:	8005883a 	mov	r2,r16
    91ac:	00000106 	br	91b4 <___vfiprintf_internal_r+0x764>
    91b0:	00bfffc4 	movi	r2,-1
    91b4:	dfc13517 	ldw	ra,1236(sp)
    91b8:	df013417 	ldw	fp,1232(sp)
    91bc:	ddc13317 	ldw	r23,1228(sp)
    91c0:	dd813217 	ldw	r22,1224(sp)
    91c4:	dd413117 	ldw	r21,1220(sp)
    91c8:	dd013017 	ldw	r20,1216(sp)
    91cc:	dcc12f17 	ldw	r19,1212(sp)
    91d0:	dc812e17 	ldw	r18,1208(sp)
    91d4:	dc412d17 	ldw	r17,1204(sp)
    91d8:	dc012c17 	ldw	r16,1200(sp)
    91dc:	dec13604 	addi	sp,sp,1240
    91e0:	f800283a 	ret
    91e4:	00065ac0 	call	65ac <__sinit>
    91e8:	003e2b06 	br	8a98 <___vfiprintf_internal_r+0x48>
    91ec:	04e7c83a 	sub	r19,zero,r19
    91f0:	d8812115 	stw	r2,1156(sp)
    91f4:	ad400114 	ori	r21,r21,4
    91f8:	80c00007 	ldb	r3,0(r16)
    91fc:	003e7306 	br	8bcc <___vfiprintf_internal_r+0x17c>
    9200:	a880040c 	andi	r2,r21,16
    9204:	1000e41e 	bne	r2,zero,9598 <___vfiprintf_internal_r+0xb48>
    9208:	a880100c 	andi	r2,r21,64
    920c:	1000e226 	beq	r2,zero,9598 <___vfiprintf_internal_r+0xb48>
    9210:	da812117 	ldw	r10,1156(sp)
    9214:	002d883a 	mov	r22,zero
    9218:	0005883a 	mov	r2,zero
    921c:	5480000b 	ldhu	r18,0(r10)
    9220:	52800104 	addi	r10,r10,4
    9224:	da812115 	stw	r10,1156(sp)
    9228:	9009883a 	mov	r4,r18
    922c:	003ee706 	br	8dcc <___vfiprintf_internal_r+0x37c>
    9230:	da812117 	ldw	r10,1156(sp)
    9234:	00800044 	movi	r2,1
    9238:	54800017 	ldw	r18,0(r10)
    923c:	55800117 	ldw	r22,4(r10)
    9240:	52800204 	addi	r10,r10,8
    9244:	da812115 	stw	r10,1156(sp)
    9248:	9588b03a 	or	r4,r18,r22
    924c:	003edf06 	br	8dcc <___vfiprintf_internal_r+0x37c>
    9250:	02c00074 	movhi	r11,1
    9254:	5affef04 	addi	r11,r11,-68
    9258:	d9811d85 	stb	r6,1142(sp)
    925c:	dac12615 	stw	r11,1176(sp)
    9260:	a900080c 	andi	r4,r21,32
    9264:	d8812117 	ldw	r2,1156(sp)
    9268:	2000a526 	beq	r4,zero,9500 <___vfiprintf_internal_r+0xab0>
    926c:	da812117 	ldw	r10,1156(sp)
    9270:	14800017 	ldw	r18,0(r2)
    9274:	15800117 	ldw	r22,4(r2)
    9278:	52800204 	addi	r10,r10,8
    927c:	da812115 	stw	r10,1156(sp)
    9280:	a880004c 	andi	r2,r21,1
    9284:	1001d926 	beq	r2,zero,99ec <___vfiprintf_internal_r+0xf9c>
    9288:	9588b03a 	or	r4,r18,r22
    928c:	20024426 	beq	r4,zero,9ba0 <___vfiprintf_internal_r+0x1150>
    9290:	00800c04 	movi	r2,48
    9294:	d8811d05 	stb	r2,1140(sp)
    9298:	d8c11d45 	stb	r3,1141(sp)
    929c:	ad400094 	ori	r21,r21,2
    92a0:	00800084 	movi	r2,2
    92a4:	003ec906 	br	8dcc <___vfiprintf_internal_r+0x37c>
    92a8:	da812117 	ldw	r10,1156(sp)
    92ac:	04800044 	movi	r18,1
    92b0:	dac10004 	addi	r11,sp,1024
    92b4:	50800017 	ldw	r2,0(r10)
    92b8:	52800104 	addi	r10,r10,4
    92bc:	d8011d85 	stb	zero,1142(sp)
    92c0:	d8810005 	stb	r2,1024(sp)
    92c4:	da812115 	stw	r10,1156(sp)
    92c8:	9023883a 	mov	r17,r18
    92cc:	dac12415 	stw	r11,1168(sp)
    92d0:	0013883a 	mov	r9,zero
    92d4:	003ee206 	br	8e60 <___vfiprintf_internal_r+0x410>
    92d8:	ad402014 	ori	r21,r21,128
    92dc:	80c00007 	ldb	r3,0(r16)
    92e0:	003e3a06 	br	8bcc <___vfiprintf_internal_r+0x17c>
    92e4:	8015883a 	mov	r10,r16
    92e8:	0027883a 	mov	r19,zero
    92ec:	18bff404 	addi	r2,r3,-48
    92f0:	50c00007 	ldb	r3,0(r10)
    92f4:	9cc002a4 	muli	r19,r19,10
    92f8:	84000044 	addi	r16,r16,1
    92fc:	8015883a 	mov	r10,r16
    9300:	98a7883a 	add	r19,r19,r2
    9304:	18bff404 	addi	r2,r3,-48
    9308:	28bff92e 	bgeu	r5,r2,92f0 <___vfiprintf_internal_r+0x8a0>
    930c:	003e3006 	br	8bd0 <___vfiprintf_internal_r+0x180>
    9310:	ad400414 	ori	r21,r21,16
    9314:	d9811d85 	stb	r6,1142(sp)
    9318:	a880080c 	andi	r2,r21,32
    931c:	d8c12117 	ldw	r3,1156(sp)
    9320:	10004b26 	beq	r2,zero,9450 <___vfiprintf_internal_r+0xa00>
    9324:	da812117 	ldw	r10,1156(sp)
    9328:	18800117 	ldw	r2,4(r3)
    932c:	1c800017 	ldw	r18,0(r3)
    9330:	52800204 	addi	r10,r10,8
    9334:	da812115 	stw	r10,1156(sp)
    9338:	102d883a 	mov	r22,r2
    933c:	1001f116 	blt	r2,zero,9b04 <___vfiprintf_internal_r+0x10b4>
    9340:	db011d83 	ldbu	r12,1142(sp)
    9344:	4823883a 	mov	r17,r9
    9348:	00800044 	movi	r2,1
    934c:	9588b03a 	or	r4,r18,r22
    9350:	003ea106 	br	8dd8 <___vfiprintf_internal_r+0x388>
    9354:	80c00007 	ldb	r3,0(r16)
    9358:	82800044 	addi	r10,r16,1
    935c:	1b027f26 	beq	r3,r12,9d5c <___vfiprintf_internal_r+0x130c>
    9360:	18bff404 	addi	r2,r3,-48
    9364:	5021883a 	mov	r16,r10
    9368:	0013883a 	mov	r9,zero
    936c:	28be1836 	bltu	r5,r2,8bd0 <___vfiprintf_internal_r+0x180>
    9370:	80c00007 	ldb	r3,0(r16)
    9374:	4a4002a4 	muli	r9,r9,10
    9378:	84000044 	addi	r16,r16,1
    937c:	1253883a 	add	r9,r2,r9
    9380:	18bff404 	addi	r2,r3,-48
    9384:	28bffa2e 	bgeu	r5,r2,9370 <___vfiprintf_internal_r+0x920>
    9388:	483e110e 	bge	r9,zero,8bd0 <___vfiprintf_internal_r+0x180>
    938c:	027fffc4 	movi	r9,-1
    9390:	003e0f06 	br	8bd0 <___vfiprintf_internal_r+0x180>
    9394:	d9811d85 	stb	r6,1142(sp)
    9398:	a880080c 	andi	r2,r21,32
    939c:	1001ee26 	beq	r2,zero,9b58 <___vfiprintf_internal_r+0x1108>
    93a0:	da812117 	ldw	r10,1156(sp)
    93a4:	dac12217 	ldw	r11,1160(sp)
    93a8:	50800017 	ldw	r2,0(r10)
    93ac:	5807d7fa 	srai	r3,r11,31
    93b0:	52800104 	addi	r10,r10,4
    93b4:	da812115 	stw	r10,1156(sp)
    93b8:	12c00015 	stw	r11,0(r2)
    93bc:	10c00115 	stw	r3,4(r2)
    93c0:	003dd806 	br	8b24 <___vfiprintf_internal_r+0xd4>
    93c4:	30803fcc 	andi	r2,r6,255
    93c8:	1080201c 	xori	r2,r2,128
    93cc:	10bfe004 	addi	r2,r2,-128
    93d0:	1001df1e 	bne	r2,zero,9b50 <___vfiprintf_internal_r+0x1100>
    93d4:	01800804 	movi	r6,32
    93d8:	80c00007 	ldb	r3,0(r16)
    93dc:	003dfb06 	br	8bcc <___vfiprintf_internal_r+0x17c>
    93e0:	da812117 	ldw	r10,1156(sp)
    93e4:	dac12117 	ldw	r11,1156(sp)
    93e8:	d8011d85 	stb	zero,1142(sp)
    93ec:	52800017 	ldw	r10,0(r10)
    93f0:	5d800104 	addi	r22,r11,4
    93f4:	da812415 	stw	r10,1168(sp)
    93f8:	50023b26 	beq	r10,zero,9ce8 <___vfiprintf_internal_r+0x1298>
    93fc:	d9012417 	ldw	r4,1168(sp)
    9400:	48021f16 	blt	r9,zero,9c80 <___vfiprintf_internal_r+0x1230>
    9404:	480d883a 	mov	r6,r9
    9408:	000b883a 	mov	r5,zero
    940c:	da012a15 	stw	r8,1192(sp)
    9410:	da412b15 	stw	r9,1196(sp)
    9414:	00072bc0 	call	72bc <memchr>
    9418:	da012a17 	ldw	r8,1192(sp)
    941c:	da412b17 	ldw	r9,1196(sp)
    9420:	10024726 	beq	r2,zero,9d40 <___vfiprintf_internal_r+0x12f0>
    9424:	d8c12417 	ldw	r3,1168(sp)
    9428:	10e3c83a 	sub	r17,r2,r3
    942c:	4c41f616 	blt	r9,r17,9c08 <___vfiprintf_internal_r+0x11b8>
    9430:	db011d83 	ldbu	r12,1142(sp)
    9434:	dd812115 	stw	r22,1156(sp)
    9438:	0013883a 	mov	r9,zero
    943c:	003e8006 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9440:	d9811d85 	stb	r6,1142(sp)
    9444:	a880080c 	andi	r2,r21,32
    9448:	d8c12117 	ldw	r3,1156(sp)
    944c:	103fb51e 	bne	r2,zero,9324 <___vfiprintf_internal_r+0x8d4>
    9450:	a880040c 	andi	r2,r21,16
    9454:	10015e1e 	bne	r2,zero,99d0 <___vfiprintf_internal_r+0xf80>
    9458:	a880100c 	andi	r2,r21,64
    945c:	10015c26 	beq	r2,zero,99d0 <___vfiprintf_internal_r+0xf80>
    9460:	1c80000f 	ldh	r18,0(r3)
    9464:	da812117 	ldw	r10,1156(sp)
    9468:	902dd7fa 	srai	r22,r18,31
    946c:	52800104 	addi	r10,r10,4
    9470:	da812115 	stw	r10,1156(sp)
    9474:	b005883a 	mov	r2,r22
    9478:	003fb006 	br	933c <___vfiprintf_internal_r+0x8ec>
    947c:	da812117 	ldw	r10,1156(sp)
    9480:	00800c04 	movi	r2,48
    9484:	02c00074 	movhi	r11,1
    9488:	54800017 	ldw	r18,0(r10)
    948c:	d8811d05 	stb	r2,1140(sp)
    9490:	52800104 	addi	r10,r10,4
    9494:	00801e04 	movi	r2,120
    9498:	5afff404 	addi	r11,r11,-48
    949c:	d8811d45 	stb	r2,1141(sp)
    94a0:	002d883a 	mov	r22,zero
    94a4:	ad400094 	ori	r21,r21,2
    94a8:	da812115 	stw	r10,1156(sp)
    94ac:	dac12615 	stw	r11,1176(sp)
    94b0:	00800084 	movi	r2,2
    94b4:	9009883a 	mov	r4,r18
    94b8:	003e4406 	br	8dcc <___vfiprintf_internal_r+0x37c>
    94bc:	ad400814 	ori	r21,r21,32
    94c0:	80c00007 	ldb	r3,0(r16)
    94c4:	003dc106 	br	8bcc <___vfiprintf_internal_r+0x17c>
    94c8:	ad401014 	ori	r21,r21,64
    94cc:	80c00007 	ldb	r3,0(r16)
    94d0:	003dbe06 	br	8bcc <___vfiprintf_internal_r+0x17c>
    94d4:	80c00007 	ldb	r3,0(r16)
    94d8:	19c1de26 	beq	r3,r7,9c54 <___vfiprintf_internal_r+0x1204>
    94dc:	ad400414 	ori	r21,r21,16
    94e0:	003dba06 	br	8bcc <___vfiprintf_internal_r+0x17c>
    94e4:	00800074 	movhi	r2,1
    94e8:	10bff404 	addi	r2,r2,-48
    94ec:	d8812615 	stw	r2,1176(sp)
    94f0:	d9811d85 	stb	r6,1142(sp)
    94f4:	a900080c 	andi	r4,r21,32
    94f8:	d8812117 	ldw	r2,1156(sp)
    94fc:	203f5b1e 	bne	r4,zero,926c <___vfiprintf_internal_r+0x81c>
    9500:	a900040c 	andi	r4,r21,16
    9504:	2001a826 	beq	r4,zero,9ba8 <___vfiprintf_internal_r+0x1158>
    9508:	dac12117 	ldw	r11,1156(sp)
    950c:	14800017 	ldw	r18,0(r2)
    9510:	002d883a 	mov	r22,zero
    9514:	5ac00104 	addi	r11,r11,4
    9518:	dac12115 	stw	r11,1156(sp)
    951c:	003f5806 	br	9280 <___vfiprintf_internal_r+0x830>
    9520:	da812117 	ldw	r10,1156(sp)
    9524:	54c00017 	ldw	r19,0(r10)
    9528:	50800104 	addi	r2,r10,4
    952c:	983f2f16 	blt	r19,zero,91ec <___vfiprintf_internal_r+0x79c>
    9530:	d8812115 	stw	r2,1156(sp)
    9534:	80c00007 	ldb	r3,0(r16)
    9538:	003da406 	br	8bcc <___vfiprintf_internal_r+0x17c>
    953c:	01800ac4 	movi	r6,43
    9540:	80c00007 	ldb	r3,0(r16)
    9544:	003da106 	br	8bcc <___vfiprintf_internal_r+0x17c>
    9548:	ad400054 	ori	r21,r21,1
    954c:	80c00007 	ldb	r3,0(r16)
    9550:	003d9e06 	br	8bcc <___vfiprintf_internal_r+0x17c>
    9554:	d9811d85 	stb	r6,1142(sp)
    9558:	18007126 	beq	r3,zero,9720 <___vfiprintf_internal_r+0xcd0>
    955c:	04800044 	movi	r18,1
    9560:	d8c10005 	stb	r3,1024(sp)
    9564:	d8c10004 	addi	r3,sp,1024
    9568:	d8011d85 	stb	zero,1142(sp)
    956c:	9023883a 	mov	r17,r18
    9570:	d8c12415 	stw	r3,1168(sp)
    9574:	003f5606 	br	92d0 <___vfiprintf_internal_r+0x880>
    9578:	dac12117 	ldw	r11,1156(sp)
    957c:	002d883a 	mov	r22,zero
    9580:	00800044 	movi	r2,1
    9584:	5c800017 	ldw	r18,0(r11)
    9588:	5ac00104 	addi	r11,r11,4
    958c:	dac12115 	stw	r11,1156(sp)
    9590:	9009883a 	mov	r4,r18
    9594:	003e0d06 	br	8dcc <___vfiprintf_internal_r+0x37c>
    9598:	dac12117 	ldw	r11,1156(sp)
    959c:	002d883a 	mov	r22,zero
    95a0:	0005883a 	mov	r2,zero
    95a4:	5c800017 	ldw	r18,0(r11)
    95a8:	5ac00104 	addi	r11,r11,4
    95ac:	dac12115 	stw	r11,1156(sp)
    95b0:	9009883a 	mov	r4,r18
    95b4:	003e0506 	br	8dcc <___vfiprintf_internal_r+0x37c>
    95b8:	d9012017 	ldw	r4,1152(sp)
    95bc:	a00b883a 	mov	r5,r20
    95c0:	d9811a04 	addi	r6,sp,1128
    95c4:	d8c12a15 	stw	r3,1192(sp)
    95c8:	db012b15 	stw	r12,1196(sp)
    95cc:	000893c0 	call	893c <__sprint_r.part.0>
    95d0:	d8c12a17 	ldw	r3,1192(sp)
    95d4:	db012b17 	ldw	r12,1196(sp)
    95d8:	1000571e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    95dc:	d9811b17 	ldw	r6,1132(sp)
    95e0:	d8811c17 	ldw	r2,1136(sp)
    95e4:	d811883a 	mov	r8,sp
    95e8:	31400044 	addi	r5,r6,1
    95ec:	003e3306 	br	8ebc <___vfiprintf_internal_r+0x46c>
    95f0:	d9411b17 	ldw	r5,1132(sp)
    95f4:	d8c11c17 	ldw	r3,1136(sp)
    95f8:	28800044 	addi	r2,r5,1
    95fc:	d9011d87 	ldb	r4,1142(sp)
    9600:	203e4d26 	beq	r4,zero,8f38 <___vfiprintf_internal_r+0x4e8>
    9604:	01000044 	movi	r4,1
    9608:	d9411d84 	addi	r5,sp,1142
    960c:	1907883a 	add	r3,r3,r4
    9610:	41400015 	stw	r5,0(r8)
    9614:	41000115 	stw	r4,4(r8)
    9618:	d8c11c15 	stw	r3,1136(sp)
    961c:	d8811b15 	stw	r2,1132(sp)
    9620:	014001c4 	movi	r5,7
    9624:	2880aa16 	blt	r5,r2,98d0 <___vfiprintf_internal_r+0xe80>
    9628:	100b883a 	mov	r5,r2
    962c:	42000204 	addi	r8,r8,8
    9630:	10800044 	addi	r2,r2,1
    9634:	003e4006 	br	8f38 <___vfiprintf_internal_r+0x4e8>
    9638:	d9012017 	ldw	r4,1152(sp)
    963c:	a00b883a 	mov	r5,r20
    9640:	d9811a04 	addi	r6,sp,1128
    9644:	d9c12a15 	stw	r7,1192(sp)
    9648:	db012b15 	stw	r12,1196(sp)
    964c:	000893c0 	call	893c <__sprint_r.part.0>
    9650:	d9c12a17 	ldw	r7,1192(sp)
    9654:	db012b17 	ldw	r12,1196(sp)
    9658:	1000371e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    965c:	d9411b17 	ldw	r5,1132(sp)
    9660:	d8c11c17 	ldw	r3,1136(sp)
    9664:	d811883a 	mov	r8,sp
    9668:	28800044 	addi	r2,r5,1
    966c:	003e4d06 	br	8fa4 <___vfiprintf_internal_r+0x554>
    9670:	10803fcc 	andi	r2,r2,255
    9674:	00c00044 	movi	r3,1
    9678:	10fddf1e 	bne	r2,r3,8df8 <___vfiprintf_internal_r+0x3a8>
    967c:	b000021e 	bne	r22,zero,9688 <___vfiprintf_internal_r+0xc38>
    9680:	00800244 	movi	r2,9
    9684:	1480202e 	bgeu	r2,r18,9708 <___vfiprintf_internal_r+0xcb8>
    9688:	dc012515 	stw	r16,1172(sp)
    968c:	dc410a04 	addi	r17,sp,1064
    9690:	9021883a 	mov	r16,r18
    9694:	da012415 	stw	r8,1168(sp)
    9698:	b025883a 	mov	r18,r22
    969c:	da412315 	stw	r9,1164(sp)
    96a0:	602d883a 	mov	r22,r12
    96a4:	8009883a 	mov	r4,r16
    96a8:	900b883a 	mov	r5,r18
    96ac:	01800284 	movi	r6,10
    96b0:	000f883a 	mov	r7,zero
    96b4:	000ab580 	call	ab58 <__umoddi3>
    96b8:	10800c04 	addi	r2,r2,48
    96bc:	8c7fffc4 	addi	r17,r17,-1
    96c0:	8009883a 	mov	r4,r16
    96c4:	900b883a 	mov	r5,r18
    96c8:	01800284 	movi	r6,10
    96cc:	000f883a 	mov	r7,zero
    96d0:	88800005 	stb	r2,0(r17)
    96d4:	000a5980 	call	a598 <__udivdi3>
    96d8:	1021883a 	mov	r16,r2
    96dc:	10c4b03a 	or	r2,r2,r3
    96e0:	1825883a 	mov	r18,r3
    96e4:	103fef1e 	bne	r2,zero,96a4 <___vfiprintf_internal_r+0xc54>
    96e8:	da811e17 	ldw	r10,1144(sp)
    96ec:	da012417 	ldw	r8,1168(sp)
    96f0:	da412317 	ldw	r9,1164(sp)
    96f4:	dc412415 	stw	r17,1168(sp)
    96f8:	b019883a 	mov	r12,r22
    96fc:	dc012517 	ldw	r16,1172(sp)
    9700:	5463c83a 	sub	r17,r10,r17
    9704:	003dce06 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9708:	94800c04 	addi	r18,r18,48
    970c:	d8c109c4 	addi	r3,sp,1063
    9710:	dc8109c5 	stb	r18,1063(sp)
    9714:	dc412717 	ldw	r17,1180(sp)
    9718:	d8c12415 	stw	r3,1168(sp)
    971c:	003dc806 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9720:	d8811c17 	ldw	r2,1136(sp)
    9724:	10000426 	beq	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9728:	d9012017 	ldw	r4,1152(sp)
    972c:	a00b883a 	mov	r5,r20
    9730:	d9811a04 	addi	r6,sp,1128
    9734:	000893c0 	call	893c <__sprint_r.part.0>
    9738:	a080030b 	ldhu	r2,12(r20)
    973c:	1080100c 	andi	r2,r2,64
    9740:	103e9b1e 	bne	r2,zero,91b0 <___vfiprintf_internal_r+0x760>
    9744:	d8812217 	ldw	r2,1160(sp)
    9748:	003e9a06 	br	91b4 <___vfiprintf_internal_r+0x764>
    974c:	d9012017 	ldw	r4,1152(sp)
    9750:	a00b883a 	mov	r5,r20
    9754:	d9811a04 	addi	r6,sp,1128
    9758:	000893c0 	call	893c <__sprint_r.part.0>
    975c:	103ff61e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9760:	d9011b17 	ldw	r4,1132(sp)
    9764:	d8c11c17 	ldw	r3,1136(sp)
    9768:	d811883a 	mov	r8,sp
    976c:	21400044 	addi	r5,r4,1
    9770:	003e4006 	br	9074 <___vfiprintf_internal_r+0x624>
    9774:	1800d61e 	bne	r3,zero,9ad0 <___vfiprintf_internal_r+0x1080>
    9778:	dac12417 	ldw	r11,1168(sp)
    977c:	00800044 	movi	r2,1
    9780:	dc400115 	stw	r17,4(sp)
    9784:	dac00015 	stw	r11,0(sp)
    9788:	dc411c15 	stw	r17,1136(sp)
    978c:	d8811b15 	stw	r2,1132(sp)
    9790:	8807883a 	mov	r3,r17
    9794:	d811883a 	mov	r8,sp
    9798:	42000204 	addi	r8,r8,8
    979c:	aac0010c 	andi	r11,r21,4
    97a0:	58000226 	beq	r11,zero,97ac <___vfiprintf_internal_r+0xd5c>
    97a4:	9ca3c83a 	sub	r17,r19,r18
    97a8:	047e2616 	blt	zero,r17,9044 <___vfiprintf_internal_r+0x5f4>
    97ac:	94c0010e 	bge	r18,r19,97b4 <___vfiprintf_internal_r+0xd64>
    97b0:	9825883a 	mov	r18,r19
    97b4:	da812217 	ldw	r10,1160(sp)
    97b8:	5495883a 	add	r10,r10,r18
    97bc:	da812215 	stw	r10,1160(sp)
    97c0:	183e4826 	beq	r3,zero,90e4 <___vfiprintf_internal_r+0x694>
    97c4:	d9012017 	ldw	r4,1152(sp)
    97c8:	a00b883a 	mov	r5,r20
    97cc:	d9811a04 	addi	r6,sp,1128
    97d0:	000893c0 	call	893c <__sprint_r.part.0>
    97d4:	103e4326 	beq	r2,zero,90e4 <___vfiprintf_internal_r+0x694>
    97d8:	003fd706 	br	9738 <___vfiprintf_internal_r+0xce8>
    97dc:	9cadc83a 	sub	r22,r19,r18
    97e0:	05bde40e 	bge	zero,r22,8f74 <___vfiprintf_internal_r+0x524>
    97e4:	03000404 	movi	r12,16
    97e8:	6581500e 	bge	r12,r22,9d2c <___vfiprintf_internal_r+0x12dc>
    97ec:	00800074 	movhi	r2,1
    97f0:	10805404 	addi	r2,r2,336
    97f4:	d8812315 	stw	r2,1164(sp)
    97f8:	8005883a 	mov	r2,r16
    97fc:	038001c4 	movi	r14,7
    9800:	b021883a 	mov	r16,r22
    9804:	da412515 	stw	r9,1172(sp)
    9808:	102d883a 	mov	r22,r2
    980c:	00000506 	br	9824 <___vfiprintf_internal_r+0xdd4>
    9810:	29000084 	addi	r4,r5,2
    9814:	42000204 	addi	r8,r8,8
    9818:	100b883a 	mov	r5,r2
    981c:	843ffc04 	addi	r16,r16,-16
    9820:	64000d0e 	bge	r12,r16,9858 <___vfiprintf_internal_r+0xe08>
    9824:	18c00404 	addi	r3,r3,16
    9828:	28800044 	addi	r2,r5,1
    982c:	45c00015 	stw	r23,0(r8)
    9830:	43000115 	stw	r12,4(r8)
    9834:	d8c11c15 	stw	r3,1136(sp)
    9838:	d8811b15 	stw	r2,1132(sp)
    983c:	70bff40e 	bge	r14,r2,9810 <___vfiprintf_internal_r+0xdc0>
    9840:	1800151e 	bne	r3,zero,9898 <___vfiprintf_internal_r+0xe48>
    9844:	843ffc04 	addi	r16,r16,-16
    9848:	000b883a 	mov	r5,zero
    984c:	01000044 	movi	r4,1
    9850:	d811883a 	mov	r8,sp
    9854:	643ff316 	blt	r12,r16,9824 <___vfiprintf_internal_r+0xdd4>
    9858:	da412517 	ldw	r9,1172(sp)
    985c:	b005883a 	mov	r2,r22
    9860:	802d883a 	mov	r22,r16
    9864:	1021883a 	mov	r16,r2
    9868:	da812317 	ldw	r10,1164(sp)
    986c:	1d87883a 	add	r3,r3,r22
    9870:	45800115 	stw	r22,4(r8)
    9874:	42800015 	stw	r10,0(r8)
    9878:	d8c11c15 	stw	r3,1136(sp)
    987c:	d9011b15 	stw	r4,1132(sp)
    9880:	008001c4 	movi	r2,7
    9884:	11008d16 	blt	r2,r4,9abc <___vfiprintf_internal_r+0x106c>
    9888:	42000204 	addi	r8,r8,8
    988c:	20800044 	addi	r2,r4,1
    9890:	200b883a 	mov	r5,r4
    9894:	003db706 	br	8f74 <___vfiprintf_internal_r+0x524>
    9898:	d9012017 	ldw	r4,1152(sp)
    989c:	a00b883a 	mov	r5,r20
    98a0:	d9811a04 	addi	r6,sp,1128
    98a4:	db012b15 	stw	r12,1196(sp)
    98a8:	db812a15 	stw	r14,1192(sp)
    98ac:	000893c0 	call	893c <__sprint_r.part.0>
    98b0:	db012b17 	ldw	r12,1196(sp)
    98b4:	db812a17 	ldw	r14,1192(sp)
    98b8:	103f9f1e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    98bc:	d9411b17 	ldw	r5,1132(sp)
    98c0:	d8c11c17 	ldw	r3,1136(sp)
    98c4:	d811883a 	mov	r8,sp
    98c8:	29000044 	addi	r4,r5,1
    98cc:	003fd306 	br	981c <___vfiprintf_internal_r+0xdcc>
    98d0:	18006c1e 	bne	r3,zero,9a84 <___vfiprintf_internal_r+0x1034>
    98d4:	70004f26 	beq	r14,zero,9a14 <___vfiprintf_internal_r+0xfc4>
    98d8:	d8811d04 	addi	r2,sp,1140
    98dc:	00c00084 	movi	r3,2
    98e0:	d8800015 	stw	r2,0(sp)
    98e4:	d8c00115 	stw	r3,4(sp)
    98e8:	2005883a 	mov	r2,r4
    98ec:	d811883a 	mov	r8,sp
    98f0:	003d9b06 	br	8f60 <___vfiprintf_internal_r+0x510>
    98f4:	1800571e 	bne	r3,zero,9a54 <___vfiprintf_internal_r+0x1004>
    98f8:	000b883a 	mov	r5,zero
    98fc:	00800044 	movi	r2,1
    9900:	d811883a 	mov	r8,sp
    9904:	003d9906 	br	8f6c <___vfiprintf_internal_r+0x51c>
    9908:	10803fcc 	andi	r2,r2,255
    990c:	1000251e 	bne	r2,zero,99a4 <___vfiprintf_internal_r+0xf54>
    9910:	a880004c 	andi	r2,r21,1
    9914:	10007826 	beq	r2,zero,9af8 <___vfiprintf_internal_r+0x10a8>
    9918:	00800c04 	movi	r2,48
    991c:	d8c109c4 	addi	r3,sp,1063
    9920:	d88109c5 	stb	r2,1063(sp)
    9924:	dc412717 	ldw	r17,1180(sp)
    9928:	d8c12415 	stw	r3,1168(sp)
    992c:	003d4406 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9930:	d9012617 	ldw	r4,1176(sp)
    9934:	dc410a04 	addi	r17,sp,1064
    9938:	908003cc 	andi	r2,r18,15
    993c:	b006973a 	slli	r3,r22,28
    9940:	2085883a 	add	r2,r4,r2
    9944:	9024d13a 	srli	r18,r18,4
    9948:	10800003 	ldbu	r2,0(r2)
    994c:	b02cd13a 	srli	r22,r22,4
    9950:	8c7fffc4 	addi	r17,r17,-1
    9954:	1ca4b03a 	or	r18,r3,r18
    9958:	88800005 	stb	r2,0(r17)
    995c:	9584b03a 	or	r2,r18,r22
    9960:	103ff51e 	bne	r2,zero,9938 <___vfiprintf_internal_r+0xee8>
    9964:	dac11e17 	ldw	r11,1144(sp)
    9968:	dc412415 	stw	r17,1168(sp)
    996c:	5c63c83a 	sub	r17,r11,r17
    9970:	003d3306 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9974:	1800941e 	bne	r3,zero,9bc8 <___vfiprintf_internal_r+0x1178>
    9978:	d8811d87 	ldb	r2,1142(sp)
    997c:	10006b26 	beq	r2,zero,9b2c <___vfiprintf_internal_r+0x10dc>
    9980:	00c00044 	movi	r3,1
    9984:	d9011d84 	addi	r4,sp,1142
    9988:	1805883a 	mov	r2,r3
    998c:	d9000015 	stw	r4,0(sp)
    9990:	d8c00115 	stw	r3,4(sp)
    9994:	d811883a 	mov	r8,sp
    9998:	003f2306 	br	9628 <___vfiprintf_internal_r+0xbd8>
    999c:	8023883a 	mov	r17,r16
    99a0:	003c7d06 	br	8b98 <___vfiprintf_internal_r+0x148>
    99a4:	da810a04 	addi	r10,sp,1064
    99a8:	da812415 	stw	r10,1168(sp)
    99ac:	003d2406 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    99b0:	d9012017 	ldw	r4,1152(sp)
    99b4:	a00b883a 	mov	r5,r20
    99b8:	d9811a04 	addi	r6,sp,1128
    99bc:	000893c0 	call	893c <__sprint_r.part.0>
    99c0:	103f5d1e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    99c4:	d8c11c17 	ldw	r3,1136(sp)
    99c8:	d811883a 	mov	r8,sp
    99cc:	003f7306 	br	979c <___vfiprintf_internal_r+0xd4c>
    99d0:	1c800017 	ldw	r18,0(r3)
    99d4:	dac12117 	ldw	r11,1156(sp)
    99d8:	902dd7fa 	srai	r22,r18,31
    99dc:	5ac00104 	addi	r11,r11,4
    99e0:	dac12115 	stw	r11,1156(sp)
    99e4:	b005883a 	mov	r2,r22
    99e8:	003e5406 	br	933c <___vfiprintf_internal_r+0x8ec>
    99ec:	00800084 	movi	r2,2
    99f0:	9588b03a 	or	r4,r18,r22
    99f4:	003cf506 	br	8dcc <___vfiprintf_internal_r+0x37c>
    99f8:	d9012017 	ldw	r4,1152(sp)
    99fc:	a00b883a 	mov	r5,r20
    9a00:	d9811a04 	addi	r6,sp,1128
    9a04:	000893c0 	call	893c <__sprint_r.part.0>
    9a08:	103f4b1e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9a0c:	d811883a 	mov	r8,sp
    9a10:	003cd106 	br	8d58 <___vfiprintf_internal_r+0x308>
    9a14:	000b883a 	mov	r5,zero
    9a18:	2005883a 	mov	r2,r4
    9a1c:	d811883a 	mov	r8,sp
    9a20:	003d5206 	br	8f6c <___vfiprintf_internal_r+0x51c>
    9a24:	10803fcc 	andi	r2,r2,255
    9a28:	1080201c 	xori	r2,r2,128
    9a2c:	10bfe004 	addi	r2,r2,-128
    9a30:	01000c04 	movi	r4,48
    9a34:	11008e26 	beq	r2,r4,9c70 <___vfiprintf_internal_r+0x1220>
    9a38:	da812417 	ldw	r10,1168(sp)
    9a3c:	dac11e17 	ldw	r11,1144(sp)
    9a40:	193fffc5 	stb	r4,-1(r3)
    9a44:	52bfffc4 	addi	r10,r10,-1
    9a48:	da812415 	stw	r10,1168(sp)
    9a4c:	5aa3c83a 	sub	r17,r11,r10
    9a50:	003cfb06 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9a54:	d9012017 	ldw	r4,1152(sp)
    9a58:	a00b883a 	mov	r5,r20
    9a5c:	d9811a04 	addi	r6,sp,1128
    9a60:	da412b15 	stw	r9,1196(sp)
    9a64:	000893c0 	call	893c <__sprint_r.part.0>
    9a68:	da412b17 	ldw	r9,1196(sp)
    9a6c:	103f321e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9a70:	d9411b17 	ldw	r5,1132(sp)
    9a74:	d8c11c17 	ldw	r3,1136(sp)
    9a78:	d811883a 	mov	r8,sp
    9a7c:	28800044 	addi	r2,r5,1
    9a80:	003d3a06 	br	8f6c <___vfiprintf_internal_r+0x51c>
    9a84:	d9012017 	ldw	r4,1152(sp)
    9a88:	a00b883a 	mov	r5,r20
    9a8c:	d9811a04 	addi	r6,sp,1128
    9a90:	da412b15 	stw	r9,1196(sp)
    9a94:	db812a15 	stw	r14,1192(sp)
    9a98:	000893c0 	call	893c <__sprint_r.part.0>
    9a9c:	da412b17 	ldw	r9,1196(sp)
    9aa0:	db812a17 	ldw	r14,1192(sp)
    9aa4:	103f241e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9aa8:	d9411b17 	ldw	r5,1132(sp)
    9aac:	d8c11c17 	ldw	r3,1136(sp)
    9ab0:	d811883a 	mov	r8,sp
    9ab4:	28800044 	addi	r2,r5,1
    9ab8:	003d1f06 	br	8f38 <___vfiprintf_internal_r+0x4e8>
    9abc:	1800781e 	bne	r3,zero,9ca0 <___vfiprintf_internal_r+0x1250>
    9ac0:	000b883a 	mov	r5,zero
    9ac4:	00800044 	movi	r2,1
    9ac8:	d811883a 	mov	r8,sp
    9acc:	003d2906 	br	8f74 <___vfiprintf_internal_r+0x524>
    9ad0:	d9012017 	ldw	r4,1152(sp)
    9ad4:	a00b883a 	mov	r5,r20
    9ad8:	d9811a04 	addi	r6,sp,1128
    9adc:	000893c0 	call	893c <__sprint_r.part.0>
    9ae0:	103f151e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9ae4:	d8811b17 	ldw	r2,1132(sp)
    9ae8:	d8c11c17 	ldw	r3,1136(sp)
    9aec:	d811883a 	mov	r8,sp
    9af0:	10800044 	addi	r2,r2,1
    9af4:	003d4406 	br	9008 <___vfiprintf_internal_r+0x5b8>
    9af8:	dac10a04 	addi	r11,sp,1064
    9afc:	dac12415 	stw	r11,1168(sp)
    9b00:	003ccf06 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9b04:	04a5c83a 	sub	r18,zero,r18
    9b08:	9004c03a 	cmpne	r2,r18,zero
    9b0c:	05adc83a 	sub	r22,zero,r22
    9b10:	b0adc83a 	sub	r22,r22,r2
    9b14:	03000b44 	movi	r12,45
    9b18:	db011d85 	stb	r12,1142(sp)
    9b1c:	4823883a 	mov	r17,r9
    9b20:	00800044 	movi	r2,1
    9b24:	9588b03a 	or	r4,r18,r22
    9b28:	003cab06 	br	8dd8 <___vfiprintf_internal_r+0x388>
    9b2c:	000b883a 	mov	r5,zero
    9b30:	00800044 	movi	r2,1
    9b34:	d811883a 	mov	r8,sp
    9b38:	703d0c26 	beq	r14,zero,8f6c <___vfiprintf_internal_r+0x51c>
    9b3c:	00c00084 	movi	r3,2
    9b40:	d9011d04 	addi	r4,sp,1140
    9b44:	d9000015 	stw	r4,0(sp)
    9b48:	d8c00115 	stw	r3,4(sp)
    9b4c:	003d0406 	br	8f60 <___vfiprintf_internal_r+0x510>
    9b50:	80c00007 	ldb	r3,0(r16)
    9b54:	003c1d06 	br	8bcc <___vfiprintf_internal_r+0x17c>
    9b58:	a880040c 	andi	r2,r21,16
    9b5c:	1000091e 	bne	r2,zero,9b84 <___vfiprintf_internal_r+0x1134>
    9b60:	aac0100c 	andi	r11,r21,64
    9b64:	58000726 	beq	r11,zero,9b84 <___vfiprintf_internal_r+0x1134>
    9b68:	da812117 	ldw	r10,1156(sp)
    9b6c:	dac12217 	ldw	r11,1160(sp)
    9b70:	50800017 	ldw	r2,0(r10)
    9b74:	52800104 	addi	r10,r10,4
    9b78:	da812115 	stw	r10,1156(sp)
    9b7c:	12c0000d 	sth	r11,0(r2)
    9b80:	003be806 	br	8b24 <___vfiprintf_internal_r+0xd4>
    9b84:	da812117 	ldw	r10,1156(sp)
    9b88:	dac12217 	ldw	r11,1160(sp)
    9b8c:	50800017 	ldw	r2,0(r10)
    9b90:	52800104 	addi	r10,r10,4
    9b94:	da812115 	stw	r10,1156(sp)
    9b98:	12c00015 	stw	r11,0(r2)
    9b9c:	003be106 	br	8b24 <___vfiprintf_internal_r+0xd4>
    9ba0:	00800084 	movi	r2,2
    9ba4:	003c8906 	br	8dcc <___vfiprintf_internal_r+0x37c>
    9ba8:	a900100c 	andi	r4,r21,64
    9bac:	20001f26 	beq	r4,zero,9c2c <___vfiprintf_internal_r+0x11dc>
    9bb0:	da812117 	ldw	r10,1156(sp)
    9bb4:	1480000b 	ldhu	r18,0(r2)
    9bb8:	002d883a 	mov	r22,zero
    9bbc:	52800104 	addi	r10,r10,4
    9bc0:	da812115 	stw	r10,1156(sp)
    9bc4:	003dae06 	br	9280 <___vfiprintf_internal_r+0x830>
    9bc8:	d9012017 	ldw	r4,1152(sp)
    9bcc:	a00b883a 	mov	r5,r20
    9bd0:	d9811a04 	addi	r6,sp,1128
    9bd4:	da412b15 	stw	r9,1196(sp)
    9bd8:	db812a15 	stw	r14,1192(sp)
    9bdc:	000893c0 	call	893c <__sprint_r.part.0>
    9be0:	da412b17 	ldw	r9,1196(sp)
    9be4:	db812a17 	ldw	r14,1192(sp)
    9be8:	103ed31e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9bec:	d9411b17 	ldw	r5,1132(sp)
    9bf0:	d8c11c17 	ldw	r3,1136(sp)
    9bf4:	d811883a 	mov	r8,sp
    9bf8:	28800044 	addi	r2,r5,1
    9bfc:	003e7f06 	br	95fc <___vfiprintf_internal_r+0xbac>
    9c00:	9825883a 	mov	r18,r19
    9c04:	003d3406 	br	90d8 <___vfiprintf_internal_r+0x688>
    9c08:	4823883a 	mov	r17,r9
    9c0c:	003e0806 	br	9430 <___vfiprintf_internal_r+0x9e0>
    9c10:	d9012017 	ldw	r4,1152(sp)
    9c14:	a00b883a 	mov	r5,r20
    9c18:	d9811a04 	addi	r6,sp,1128
    9c1c:	000893c0 	call	893c <__sprint_r.part.0>
    9c20:	103ec51e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9c24:	d8c11c17 	ldw	r3,1136(sp)
    9c28:	003ee006 	br	97ac <___vfiprintf_internal_r+0xd5c>
    9c2c:	dac12117 	ldw	r11,1156(sp)
    9c30:	14800017 	ldw	r18,0(r2)
    9c34:	002d883a 	mov	r22,zero
    9c38:	5ac00104 	addi	r11,r11,4
    9c3c:	dac12115 	stw	r11,1156(sp)
    9c40:	003d8f06 	br	9280 <___vfiprintf_internal_r+0x830>
    9c44:	02c00074 	movhi	r11,1
    9c48:	5ac05404 	addi	r11,r11,336
    9c4c:	dac12315 	stw	r11,1164(sp)
    9c50:	003ce306 	br	8fe0 <___vfiprintf_internal_r+0x590>
    9c54:	80c00043 	ldbu	r3,1(r16)
    9c58:	ad400814 	ori	r21,r21,32
    9c5c:	84000044 	addi	r16,r16,1
    9c60:	18c03fcc 	andi	r3,r3,255
    9c64:	18c0201c 	xori	r3,r3,128
    9c68:	18ffe004 	addi	r3,r3,-128
    9c6c:	003bd706 	br	8bcc <___vfiprintf_internal_r+0x17c>
    9c70:	dac11e17 	ldw	r11,1144(sp)
    9c74:	d8c12417 	ldw	r3,1168(sp)
    9c78:	58e3c83a 	sub	r17,r11,r3
    9c7c:	003c7006 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9c80:	da012a15 	stw	r8,1192(sp)
    9c84:	00023840 	call	2384 <strlen>
    9c88:	1023883a 	mov	r17,r2
    9c8c:	db011d83 	ldbu	r12,1142(sp)
    9c90:	dd812115 	stw	r22,1156(sp)
    9c94:	0013883a 	mov	r9,zero
    9c98:	da012a17 	ldw	r8,1192(sp)
    9c9c:	003c6806 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9ca0:	d9012017 	ldw	r4,1152(sp)
    9ca4:	a00b883a 	mov	r5,r20
    9ca8:	d9811a04 	addi	r6,sp,1128
    9cac:	da412b15 	stw	r9,1196(sp)
    9cb0:	000893c0 	call	893c <__sprint_r.part.0>
    9cb4:	da412b17 	ldw	r9,1196(sp)
    9cb8:	103e9f1e 	bne	r2,zero,9738 <___vfiprintf_internal_r+0xce8>
    9cbc:	d9411b17 	ldw	r5,1132(sp)
    9cc0:	d8c11c17 	ldw	r3,1136(sp)
    9cc4:	d811883a 	mov	r8,sp
    9cc8:	28800044 	addi	r2,r5,1
    9ccc:	003ca906 	br	8f74 <___vfiprintf_internal_r+0x524>
    9cd0:	d9411b17 	ldw	r5,1132(sp)
    9cd4:	01000074 	movhi	r4,1
    9cd8:	21005804 	addi	r4,r4,352
    9cdc:	d9012315 	stw	r4,1164(sp)
    9ce0:	29400044 	addi	r5,r5,1
    9ce4:	003c8806 	br	8f08 <___vfiprintf_internal_r+0x4b8>
    9ce8:	00800184 	movi	r2,6
    9cec:	1240012e 	bgeu	r2,r9,9cf4 <___vfiprintf_internal_r+0x12a4>
    9cf0:	1013883a 	mov	r9,r2
    9cf4:	4823883a 	mov	r17,r9
    9cf8:	4825883a 	mov	r18,r9
    9cfc:	48001516 	blt	r9,zero,9d54 <___vfiprintf_internal_r+0x1304>
    9d00:	00800074 	movhi	r2,1
    9d04:	10bff904 	addi	r2,r2,-28
    9d08:	dd812115 	stw	r22,1156(sp)
    9d0c:	d8812415 	stw	r2,1168(sp)
    9d10:	003d6f06 	br	92d0 <___vfiprintf_internal_r+0x880>
    9d14:	d9411b17 	ldw	r5,1132(sp)
    9d18:	02c00074 	movhi	r11,1
    9d1c:	5ac05804 	addi	r11,r11,352
    9d20:	dac12315 	stw	r11,1164(sp)
    9d24:	29400044 	addi	r5,r5,1
    9d28:	003ce106 	br	90b0 <___vfiprintf_internal_r+0x660>
    9d2c:	01000074 	movhi	r4,1
    9d30:	21005404 	addi	r4,r4,336
    9d34:	d9012315 	stw	r4,1164(sp)
    9d38:	1009883a 	mov	r4,r2
    9d3c:	003eca06 	br	9868 <___vfiprintf_internal_r+0xe18>
    9d40:	4823883a 	mov	r17,r9
    9d44:	db011d83 	ldbu	r12,1142(sp)
    9d48:	dd812115 	stw	r22,1156(sp)
    9d4c:	0013883a 	mov	r9,zero
    9d50:	003c3b06 	br	8e40 <___vfiprintf_internal_r+0x3f0>
    9d54:	0025883a 	mov	r18,zero
    9d58:	003fe906 	br	9d00 <___vfiprintf_internal_r+0x12b0>
    9d5c:	dac12117 	ldw	r11,1156(sp)
    9d60:	8005883a 	mov	r2,r16
    9d64:	5021883a 	mov	r16,r10
    9d68:	5a400017 	ldw	r9,0(r11)
    9d6c:	58c00104 	addi	r3,r11,4
    9d70:	d8c12115 	stw	r3,1156(sp)
    9d74:	48000a16 	blt	r9,zero,9da0 <___vfiprintf_internal_r+0x1350>
    9d78:	10c00047 	ldb	r3,1(r2)
    9d7c:	003b9306 	br	8bcc <___vfiprintf_internal_r+0x17c>
    9d80:	043fffc4 	movi	r16,-1
    9d84:	003d0206 	br	9190 <___vfiprintf_internal_r+0x740>
    9d88:	94c0010e 	bge	r18,r19,9d90 <___vfiprintf_internal_r+0x1340>
    9d8c:	9825883a 	mov	r18,r19
    9d90:	da812217 	ldw	r10,1160(sp)
    9d94:	5495883a 	add	r10,r10,r18
    9d98:	da812215 	stw	r10,1160(sp)
    9d9c:	003cd106 	br	90e4 <___vfiprintf_internal_r+0x694>
    9da0:	027fffc4 	movi	r9,-1
    9da4:	10c00047 	ldb	r3,1(r2)
    9da8:	003b8806 	br	8bcc <___vfiprintf_internal_r+0x17c>

00009dac <__vfiprintf_internal>:
    9dac:	2007883a 	mov	r3,r4
    9db0:	01000074 	movhi	r4,1
    9db4:	21075304 	addi	r4,r4,7500
    9db8:	21000017 	ldw	r4,0(r4)
    9dbc:	2805883a 	mov	r2,r5
    9dc0:	300f883a 	mov	r7,r6
    9dc4:	180b883a 	mov	r5,r3
    9dc8:	100d883a 	mov	r6,r2
    9dcc:	0008a501 	jmpi	8a50 <___vfiprintf_internal_r>

00009dd0 <_write_r>:
    9dd0:	defffd04 	addi	sp,sp,-12
    9dd4:	dc000015 	stw	r16,0(sp)
    9dd8:	04000074 	movhi	r16,1
    9ddc:	dc400115 	stw	r17,4(sp)
    9de0:	840e2004 	addi	r16,r16,14464
    9de4:	2023883a 	mov	r17,r4
    9de8:	2809883a 	mov	r4,r5
    9dec:	300b883a 	mov	r5,r6
    9df0:	380d883a 	mov	r6,r7
    9df4:	dfc00215 	stw	ra,8(sp)
    9df8:	80000015 	stw	zero,0(r16)
    9dfc:	000dfc40 	call	dfc4 <write>
    9e00:	00ffffc4 	movi	r3,-1
    9e04:	10c00526 	beq	r2,r3,9e1c <_write_r+0x4c>
    9e08:	dfc00217 	ldw	ra,8(sp)
    9e0c:	dc400117 	ldw	r17,4(sp)
    9e10:	dc000017 	ldw	r16,0(sp)
    9e14:	dec00304 	addi	sp,sp,12
    9e18:	f800283a 	ret
    9e1c:	80c00017 	ldw	r3,0(r16)
    9e20:	183ff926 	beq	r3,zero,9e08 <_write_r+0x38>
    9e24:	88c00015 	stw	r3,0(r17)
    9e28:	003ff706 	br	9e08 <_write_r+0x38>

00009e2c <_close_r>:
    9e2c:	defffd04 	addi	sp,sp,-12
    9e30:	dc000015 	stw	r16,0(sp)
    9e34:	04000074 	movhi	r16,1
    9e38:	dc400115 	stw	r17,4(sp)
    9e3c:	840e2004 	addi	r16,r16,14464
    9e40:	2023883a 	mov	r17,r4
    9e44:	2809883a 	mov	r4,r5
    9e48:	dfc00215 	stw	ra,8(sp)
    9e4c:	80000015 	stw	zero,0(r16)
    9e50:	000d7380 	call	d738 <close>
    9e54:	00ffffc4 	movi	r3,-1
    9e58:	10c00526 	beq	r2,r3,9e70 <_close_r+0x44>
    9e5c:	dfc00217 	ldw	ra,8(sp)
    9e60:	dc400117 	ldw	r17,4(sp)
    9e64:	dc000017 	ldw	r16,0(sp)
    9e68:	dec00304 	addi	sp,sp,12
    9e6c:	f800283a 	ret
    9e70:	80c00017 	ldw	r3,0(r16)
    9e74:	183ff926 	beq	r3,zero,9e5c <_close_r+0x30>
    9e78:	88c00015 	stw	r3,0(r17)
    9e7c:	003ff706 	br	9e5c <_close_r+0x30>

00009e80 <_calloc_r>:
    9e80:	298b383a 	mul	r5,r5,r6
    9e84:	defffe04 	addi	sp,sp,-8
    9e88:	dc000015 	stw	r16,0(sp)
    9e8c:	dfc00115 	stw	ra,4(sp)
    9e90:	00013300 	call	1330 <_malloc_r>
    9e94:	1021883a 	mov	r16,r2
    9e98:	10002826 	beq	r2,zero,9f3c <_calloc_r+0xbc>
    9e9c:	11bfff17 	ldw	r6,-4(r2)
    9ea0:	00bfff04 	movi	r2,-4
    9ea4:	00c00904 	movi	r3,36
    9ea8:	308c703a 	and	r6,r6,r2
    9eac:	308d883a 	add	r6,r6,r2
    9eb0:	19801436 	bltu	r3,r6,9f04 <_calloc_r+0x84>
    9eb4:	008004c4 	movi	r2,19
    9eb8:	11800936 	bltu	r2,r6,9ee0 <_calloc_r+0x60>
    9ebc:	8005883a 	mov	r2,r16
    9ec0:	10000015 	stw	zero,0(r2)
    9ec4:	10000115 	stw	zero,4(r2)
    9ec8:	10000215 	stw	zero,8(r2)
    9ecc:	8005883a 	mov	r2,r16
    9ed0:	dfc00117 	ldw	ra,4(sp)
    9ed4:	dc000017 	ldw	r16,0(sp)
    9ed8:	dec00204 	addi	sp,sp,8
    9edc:	f800283a 	ret
    9ee0:	80000015 	stw	zero,0(r16)
    9ee4:	80000115 	stw	zero,4(r16)
    9ee8:	008006c4 	movi	r2,27
    9eec:	11800d2e 	bgeu	r2,r6,9f24 <_calloc_r+0xa4>
    9ef0:	80000215 	stw	zero,8(r16)
    9ef4:	80000315 	stw	zero,12(r16)
    9ef8:	30c00c26 	beq	r6,r3,9f2c <_calloc_r+0xac>
    9efc:	80800404 	addi	r2,r16,16
    9f00:	003fef06 	br	9ec0 <_calloc_r+0x40>
    9f04:	8009883a 	mov	r4,r16
    9f08:	000b883a 	mov	r5,zero
    9f0c:	00076380 	call	7638 <memset>
    9f10:	8005883a 	mov	r2,r16
    9f14:	dfc00117 	ldw	ra,4(sp)
    9f18:	dc000017 	ldw	r16,0(sp)
    9f1c:	dec00204 	addi	sp,sp,8
    9f20:	f800283a 	ret
    9f24:	80800204 	addi	r2,r16,8
    9f28:	003fe506 	br	9ec0 <_calloc_r+0x40>
    9f2c:	80000415 	stw	zero,16(r16)
    9f30:	80800604 	addi	r2,r16,24
    9f34:	80000515 	stw	zero,20(r16)
    9f38:	003fe106 	br	9ec0 <_calloc_r+0x40>
    9f3c:	0005883a 	mov	r2,zero
    9f40:	003fe306 	br	9ed0 <_calloc_r+0x50>

00009f44 <_fclose_r>:
    9f44:	28003226 	beq	r5,zero,a010 <_fclose_r+0xcc>
    9f48:	defffc04 	addi	sp,sp,-16
    9f4c:	dc400115 	stw	r17,4(sp)
    9f50:	2023883a 	mov	r17,r4
    9f54:	dc000015 	stw	r16,0(sp)
    9f58:	dfc00315 	stw	ra,12(sp)
    9f5c:	dc800215 	stw	r18,8(sp)
    9f60:	2821883a 	mov	r16,r5
    9f64:	00065bc0 	call	65bc <__sfp_lock_acquire>
    9f68:	88000226 	beq	r17,zero,9f74 <_fclose_r+0x30>
    9f6c:	88800e17 	ldw	r2,56(r17)
    9f70:	10002926 	beq	r2,zero,a018 <_fclose_r+0xd4>
    9f74:	8080030f 	ldh	r2,12(r16)
    9f78:	10002226 	beq	r2,zero,a004 <_fclose_r+0xc0>
    9f7c:	8809883a 	mov	r4,r17
    9f80:	800b883a 	mov	r5,r16
    9f84:	00060040 	call	6004 <_fflush_r>
    9f88:	1025883a 	mov	r18,r2
    9f8c:	80800b17 	ldw	r2,44(r16)
    9f90:	10000426 	beq	r2,zero,9fa4 <_fclose_r+0x60>
    9f94:	81400717 	ldw	r5,28(r16)
    9f98:	8809883a 	mov	r4,r17
    9f9c:	103ee83a 	callr	r2
    9fa0:	10002616 	blt	r2,zero,a03c <_fclose_r+0xf8>
    9fa4:	8080030b 	ldhu	r2,12(r16)
    9fa8:	1080200c 	andi	r2,r2,128
    9fac:	10001f1e 	bne	r2,zero,a02c <_fclose_r+0xe8>
    9fb0:	81400c17 	ldw	r5,48(r16)
    9fb4:	28000526 	beq	r5,zero,9fcc <_fclose_r+0x88>
    9fb8:	80801004 	addi	r2,r16,64
    9fbc:	28800226 	beq	r5,r2,9fc8 <_fclose_r+0x84>
    9fc0:	8809883a 	mov	r4,r17
    9fc4:	00067200 	call	6720 <_free_r>
    9fc8:	80000c15 	stw	zero,48(r16)
    9fcc:	81401117 	ldw	r5,68(r16)
    9fd0:	28000326 	beq	r5,zero,9fe0 <_fclose_r+0x9c>
    9fd4:	8809883a 	mov	r4,r17
    9fd8:	00067200 	call	6720 <_free_r>
    9fdc:	80001115 	stw	zero,68(r16)
    9fe0:	8000030d 	sth	zero,12(r16)
    9fe4:	00065c00 	call	65c0 <__sfp_lock_release>
    9fe8:	9005883a 	mov	r2,r18
    9fec:	dfc00317 	ldw	ra,12(sp)
    9ff0:	dc800217 	ldw	r18,8(sp)
    9ff4:	dc400117 	ldw	r17,4(sp)
    9ff8:	dc000017 	ldw	r16,0(sp)
    9ffc:	dec00404 	addi	sp,sp,16
    a000:	f800283a 	ret
    a004:	00065c00 	call	65c0 <__sfp_lock_release>
    a008:	0005883a 	mov	r2,zero
    a00c:	003ff706 	br	9fec <_fclose_r+0xa8>
    a010:	0005883a 	mov	r2,zero
    a014:	f800283a 	ret
    a018:	8809883a 	mov	r4,r17
    a01c:	00065ac0 	call	65ac <__sinit>
    a020:	8080030f 	ldh	r2,12(r16)
    a024:	103fd51e 	bne	r2,zero,9f7c <_fclose_r+0x38>
    a028:	003ff606 	br	a004 <_fclose_r+0xc0>
    a02c:	81400417 	ldw	r5,16(r16)
    a030:	8809883a 	mov	r4,r17
    a034:	00067200 	call	6720 <_free_r>
    a038:	003fdd06 	br	9fb0 <_fclose_r+0x6c>
    a03c:	04bfffc4 	movi	r18,-1
    a040:	003fd806 	br	9fa4 <_fclose_r+0x60>

0000a044 <fclose>:
    a044:	00800074 	movhi	r2,1
    a048:	10875304 	addi	r2,r2,7500
    a04c:	200b883a 	mov	r5,r4
    a050:	11000017 	ldw	r4,0(r2)
    a054:	0009f441 	jmpi	9f44 <_fclose_r>

0000a058 <_fputwc_r>:
    a058:	3080030b 	ldhu	r2,12(r6)
    a05c:	defff804 	addi	sp,sp,-32
    a060:	dcc00415 	stw	r19,16(sp)
    a064:	dc800315 	stw	r18,12(sp)
    a068:	dc000115 	stw	r16,4(sp)
    a06c:	dfc00715 	stw	ra,28(sp)
    a070:	dd400615 	stw	r21,24(sp)
    a074:	dd000515 	stw	r20,20(sp)
    a078:	dc400215 	stw	r17,8(sp)
    a07c:	10c8000c 	andi	r3,r2,8192
    a080:	3021883a 	mov	r16,r6
    a084:	2027883a 	mov	r19,r4
    a088:	2825883a 	mov	r18,r5
    a08c:	1800051e 	bne	r3,zero,a0a4 <_fputwc_r+0x4c>
    a090:	30c01917 	ldw	r3,100(r6)
    a094:	10880014 	ori	r2,r2,8192
    a098:	3080030d 	sth	r2,12(r6)
    a09c:	18880014 	ori	r2,r3,8192
    a0a0:	30801915 	stw	r2,100(r6)
    a0a4:	00070ac0 	call	70ac <__locale_mb_cur_max>
    a0a8:	00c00044 	movi	r3,1
    a0ac:	10c03e26 	beq	r2,r3,a1a8 <_fputwc_r+0x150>
    a0b0:	9809883a 	mov	r4,r19
    a0b4:	d80b883a 	mov	r5,sp
    a0b8:	900d883a 	mov	r6,r18
    a0bc:	81c01704 	addi	r7,r16,92
    a0c0:	000a3980 	call	a398 <_wcrtomb_r>
    a0c4:	1029883a 	mov	r20,r2
    a0c8:	00bfffc4 	movi	r2,-1
    a0cc:	a0802026 	beq	r20,r2,a150 <_fputwc_r+0xf8>
    a0d0:	d9400003 	ldbu	r5,0(sp)
    a0d4:	a0001c26 	beq	r20,zero,a148 <_fputwc_r+0xf0>
    a0d8:	0023883a 	mov	r17,zero
    a0dc:	05400284 	movi	r21,10
    a0e0:	00000906 	br	a108 <_fputwc_r+0xb0>
    a0e4:	80800017 	ldw	r2,0(r16)
    a0e8:	11400005 	stb	r5,0(r2)
    a0ec:	80c00017 	ldw	r3,0(r16)
    a0f0:	18c00044 	addi	r3,r3,1
    a0f4:	80c00015 	stw	r3,0(r16)
    a0f8:	8c400044 	addi	r17,r17,1
    a0fc:	dc45883a 	add	r2,sp,r17
    a100:	8d00112e 	bgeu	r17,r20,a148 <_fputwc_r+0xf0>
    a104:	11400003 	ldbu	r5,0(r2)
    a108:	80c00217 	ldw	r3,8(r16)
    a10c:	18ffffc4 	addi	r3,r3,-1
    a110:	80c00215 	stw	r3,8(r16)
    a114:	183ff30e 	bge	r3,zero,a0e4 <_fputwc_r+0x8c>
    a118:	80800617 	ldw	r2,24(r16)
    a11c:	18801916 	blt	r3,r2,a184 <_fputwc_r+0x12c>
    a120:	80800017 	ldw	r2,0(r16)
    a124:	11400005 	stb	r5,0(r2)
    a128:	80800017 	ldw	r2,0(r16)
    a12c:	10c00003 	ldbu	r3,0(r2)
    a130:	10800044 	addi	r2,r2,1
    a134:	1d402326 	beq	r3,r21,a1c4 <_fputwc_r+0x16c>
    a138:	80800015 	stw	r2,0(r16)
    a13c:	8c400044 	addi	r17,r17,1
    a140:	dc45883a 	add	r2,sp,r17
    a144:	8d3fef36 	bltu	r17,r20,a104 <_fputwc_r+0xac>
    a148:	9005883a 	mov	r2,r18
    a14c:	00000406 	br	a160 <_fputwc_r+0x108>
    a150:	80c0030b 	ldhu	r3,12(r16)
    a154:	a005883a 	mov	r2,r20
    a158:	18c01014 	ori	r3,r3,64
    a15c:	80c0030d 	sth	r3,12(r16)
    a160:	dfc00717 	ldw	ra,28(sp)
    a164:	dd400617 	ldw	r21,24(sp)
    a168:	dd000517 	ldw	r20,20(sp)
    a16c:	dcc00417 	ldw	r19,16(sp)
    a170:	dc800317 	ldw	r18,12(sp)
    a174:	dc400217 	ldw	r17,8(sp)
    a178:	dc000117 	ldw	r16,4(sp)
    a17c:	dec00804 	addi	sp,sp,32
    a180:	f800283a 	ret
    a184:	9809883a 	mov	r4,r19
    a188:	29403fcc 	andi	r5,r5,255
    a18c:	800d883a 	mov	r6,r16
    a190:	000443c0 	call	443c <__swbuf_r>
    a194:	10bfffe0 	cmpeqi	r2,r2,-1
    a198:	10803fcc 	andi	r2,r2,255
    a19c:	103fd626 	beq	r2,zero,a0f8 <_fputwc_r+0xa0>
    a1a0:	00bfffc4 	movi	r2,-1
    a1a4:	003fee06 	br	a160 <_fputwc_r+0x108>
    a1a8:	90ffffc4 	addi	r3,r18,-1
    a1ac:	01003f84 	movi	r4,254
    a1b0:	20ffbf36 	bltu	r4,r3,a0b0 <_fputwc_r+0x58>
    a1b4:	900b883a 	mov	r5,r18
    a1b8:	dc800005 	stb	r18,0(sp)
    a1bc:	1029883a 	mov	r20,r2
    a1c0:	003fc506 	br	a0d8 <_fputwc_r+0x80>
    a1c4:	9809883a 	mov	r4,r19
    a1c8:	a80b883a 	mov	r5,r21
    a1cc:	800d883a 	mov	r6,r16
    a1d0:	000443c0 	call	443c <__swbuf_r>
    a1d4:	10bfffe0 	cmpeqi	r2,r2,-1
    a1d8:	003fef06 	br	a198 <_fputwc_r+0x140>

0000a1dc <fputwc>:
    a1dc:	defffc04 	addi	sp,sp,-16
    a1e0:	dc000115 	stw	r16,4(sp)
    a1e4:	04000074 	movhi	r16,1
    a1e8:	84075304 	addi	r16,r16,7500
    a1ec:	dc400215 	stw	r17,8(sp)
    a1f0:	2023883a 	mov	r17,r4
    a1f4:	81000017 	ldw	r4,0(r16)
    a1f8:	dfc00315 	stw	ra,12(sp)
    a1fc:	280d883a 	mov	r6,r5
    a200:	20000626 	beq	r4,zero,a21c <fputwc+0x40>
    a204:	20800e17 	ldw	r2,56(r4)
    a208:	1000041e 	bne	r2,zero,a21c <fputwc+0x40>
    a20c:	d9400015 	stw	r5,0(sp)
    a210:	00065ac0 	call	65ac <__sinit>
    a214:	81000017 	ldw	r4,0(r16)
    a218:	d9800017 	ldw	r6,0(sp)
    a21c:	880b883a 	mov	r5,r17
    a220:	dfc00317 	ldw	ra,12(sp)
    a224:	dc400217 	ldw	r17,8(sp)
    a228:	dc000117 	ldw	r16,4(sp)
    a22c:	dec00404 	addi	sp,sp,16
    a230:	000a0581 	jmpi	a058 <_fputwc_r>

0000a234 <_fstat_r>:
    a234:	defffd04 	addi	sp,sp,-12
    a238:	dc000015 	stw	r16,0(sp)
    a23c:	04000074 	movhi	r16,1
    a240:	dc400115 	stw	r17,4(sp)
    a244:	840e2004 	addi	r16,r16,14464
    a248:	2023883a 	mov	r17,r4
    a24c:	2809883a 	mov	r4,r5
    a250:	300b883a 	mov	r5,r6
    a254:	dfc00215 	stw	ra,8(sp)
    a258:	80000015 	stw	zero,0(r16)
    a25c:	000d8840 	call	d884 <fstat>
    a260:	00ffffc4 	movi	r3,-1
    a264:	10c00526 	beq	r2,r3,a27c <_fstat_r+0x48>
    a268:	dfc00217 	ldw	ra,8(sp)
    a26c:	dc400117 	ldw	r17,4(sp)
    a270:	dc000017 	ldw	r16,0(sp)
    a274:	dec00304 	addi	sp,sp,12
    a278:	f800283a 	ret
    a27c:	80c00017 	ldw	r3,0(r16)
    a280:	183ff926 	beq	r3,zero,a268 <_fstat_r+0x34>
    a284:	88c00015 	stw	r3,0(r17)
    a288:	003ff706 	br	a268 <_fstat_r+0x34>

0000a28c <_isatty_r>:
    a28c:	defffd04 	addi	sp,sp,-12
    a290:	dc000015 	stw	r16,0(sp)
    a294:	04000074 	movhi	r16,1
    a298:	dc400115 	stw	r17,4(sp)
    a29c:	840e2004 	addi	r16,r16,14464
    a2a0:	2023883a 	mov	r17,r4
    a2a4:	2809883a 	mov	r4,r5
    a2a8:	dfc00215 	stw	ra,8(sp)
    a2ac:	80000015 	stw	zero,0(r16)
    a2b0:	000d9840 	call	d984 <isatty>
    a2b4:	00ffffc4 	movi	r3,-1
    a2b8:	10c00526 	beq	r2,r3,a2d0 <_isatty_r+0x44>
    a2bc:	dfc00217 	ldw	ra,8(sp)
    a2c0:	dc400117 	ldw	r17,4(sp)
    a2c4:	dc000017 	ldw	r16,0(sp)
    a2c8:	dec00304 	addi	sp,sp,12
    a2cc:	f800283a 	ret
    a2d0:	80c00017 	ldw	r3,0(r16)
    a2d4:	183ff926 	beq	r3,zero,a2bc <_isatty_r+0x30>
    a2d8:	88c00015 	stw	r3,0(r17)
    a2dc:	003ff706 	br	a2bc <_isatty_r+0x30>

0000a2e0 <_lseek_r>:
    a2e0:	defffd04 	addi	sp,sp,-12
    a2e4:	dc000015 	stw	r16,0(sp)
    a2e8:	04000074 	movhi	r16,1
    a2ec:	dc400115 	stw	r17,4(sp)
    a2f0:	840e2004 	addi	r16,r16,14464
    a2f4:	2023883a 	mov	r17,r4
    a2f8:	2809883a 	mov	r4,r5
    a2fc:	300b883a 	mov	r5,r6
    a300:	380d883a 	mov	r6,r7
    a304:	dfc00215 	stw	ra,8(sp)
    a308:	80000015 	stw	zero,0(r16)
    a30c:	000db5c0 	call	db5c <lseek>
    a310:	00ffffc4 	movi	r3,-1
    a314:	10c00526 	beq	r2,r3,a32c <_lseek_r+0x4c>
    a318:	dfc00217 	ldw	ra,8(sp)
    a31c:	dc400117 	ldw	r17,4(sp)
    a320:	dc000017 	ldw	r16,0(sp)
    a324:	dec00304 	addi	sp,sp,12
    a328:	f800283a 	ret
    a32c:	80c00017 	ldw	r3,0(r16)
    a330:	183ff926 	beq	r3,zero,a318 <_lseek_r+0x38>
    a334:	88c00015 	stw	r3,0(r17)
    a338:	003ff706 	br	a318 <_lseek_r+0x38>

0000a33c <_read_r>:
    a33c:	defffd04 	addi	sp,sp,-12
    a340:	dc000015 	stw	r16,0(sp)
    a344:	04000074 	movhi	r16,1
    a348:	dc400115 	stw	r17,4(sp)
    a34c:	840e2004 	addi	r16,r16,14464
    a350:	2023883a 	mov	r17,r4
    a354:	2809883a 	mov	r4,r5
    a358:	300b883a 	mov	r5,r6
    a35c:	380d883a 	mov	r6,r7
    a360:	dfc00215 	stw	ra,8(sp)
    a364:	80000015 	stw	zero,0(r16)
    a368:	000dd380 	call	dd38 <read>
    a36c:	00ffffc4 	movi	r3,-1
    a370:	10c00526 	beq	r2,r3,a388 <_read_r+0x4c>
    a374:	dfc00217 	ldw	ra,8(sp)
    a378:	dc400117 	ldw	r17,4(sp)
    a37c:	dc000017 	ldw	r16,0(sp)
    a380:	dec00304 	addi	sp,sp,12
    a384:	f800283a 	ret
    a388:	80c00017 	ldw	r3,0(r16)
    a38c:	183ff926 	beq	r3,zero,a374 <_read_r+0x38>
    a390:	88c00015 	stw	r3,0(r17)
    a394:	003ff706 	br	a374 <_read_r+0x38>

0000a398 <_wcrtomb_r>:
    a398:	defff604 	addi	sp,sp,-40
    a39c:	00800074 	movhi	r2,1
    a3a0:	dc800815 	stw	r18,32(sp)
    a3a4:	dc400715 	stw	r17,28(sp)
    a3a8:	dc000615 	stw	r16,24(sp)
    a3ac:	10875704 	addi	r2,r2,7516
    a3b0:	dfc00915 	stw	ra,36(sp)
    a3b4:	2021883a 	mov	r16,r4
    a3b8:	3823883a 	mov	r17,r7
    a3bc:	14800017 	ldw	r18,0(r2)
    a3c0:	28001426 	beq	r5,zero,a414 <_wcrtomb_r+0x7c>
    a3c4:	d9400415 	stw	r5,16(sp)
    a3c8:	d9800515 	stw	r6,20(sp)
    a3cc:	00070a00 	call	70a0 <__locale_charset>
    a3d0:	d9400417 	ldw	r5,16(sp)
    a3d4:	d9800517 	ldw	r6,20(sp)
    a3d8:	8009883a 	mov	r4,r16
    a3dc:	dc400015 	stw	r17,0(sp)
    a3e0:	100f883a 	mov	r7,r2
    a3e4:	903ee83a 	callr	r18
    a3e8:	00ffffc4 	movi	r3,-1
    a3ec:	10c0031e 	bne	r2,r3,a3fc <_wcrtomb_r+0x64>
    a3f0:	88000015 	stw	zero,0(r17)
    a3f4:	00c02284 	movi	r3,138
    a3f8:	80c00015 	stw	r3,0(r16)
    a3fc:	dfc00917 	ldw	ra,36(sp)
    a400:	dc800817 	ldw	r18,32(sp)
    a404:	dc400717 	ldw	r17,28(sp)
    a408:	dc000617 	ldw	r16,24(sp)
    a40c:	dec00a04 	addi	sp,sp,40
    a410:	f800283a 	ret
    a414:	00070a00 	call	70a0 <__locale_charset>
    a418:	8009883a 	mov	r4,r16
    a41c:	dc400015 	stw	r17,0(sp)
    a420:	d9400104 	addi	r5,sp,4
    a424:	000d883a 	mov	r6,zero
    a428:	100f883a 	mov	r7,r2
    a42c:	903ee83a 	callr	r18
    a430:	003fed06 	br	a3e8 <_wcrtomb_r+0x50>

0000a434 <wcrtomb>:
    a434:	defff504 	addi	sp,sp,-44
    a438:	dc400515 	stw	r17,20(sp)
    a43c:	dc000415 	stw	r16,16(sp)
    a440:	dfc00a15 	stw	ra,40(sp)
    a444:	dd400915 	stw	r21,36(sp)
    a448:	dd000815 	stw	r20,32(sp)
    a44c:	dcc00715 	stw	r19,28(sp)
    a450:	dc800615 	stw	r18,24(sp)
    a454:	2021883a 	mov	r16,r4
    a458:	3023883a 	mov	r17,r6
    a45c:	20001d26 	beq	r4,zero,a4d4 <wcrtomb+0xa0>
    a460:	04800074 	movhi	r18,1
    a464:	94875304 	addi	r18,r18,7500
    a468:	00800074 	movhi	r2,1
    a46c:	95400017 	ldw	r21,0(r18)
    a470:	10875704 	addi	r2,r2,7516
    a474:	15000017 	ldw	r20,0(r2)
    a478:	2827883a 	mov	r19,r5
    a47c:	00070a00 	call	70a0 <__locale_charset>
    a480:	a809883a 	mov	r4,r21
    a484:	dc400015 	stw	r17,0(sp)
    a488:	800b883a 	mov	r5,r16
    a48c:	980d883a 	mov	r6,r19
    a490:	100f883a 	mov	r7,r2
    a494:	a03ee83a 	callr	r20
    a498:	00ffffc4 	movi	r3,-1
    a49c:	10c0041e 	bne	r2,r3,a4b0 <wcrtomb+0x7c>
    a4a0:	90c00017 	ldw	r3,0(r18)
    a4a4:	01002284 	movi	r4,138
    a4a8:	88000015 	stw	zero,0(r17)
    a4ac:	19000015 	stw	r4,0(r3)
    a4b0:	dfc00a17 	ldw	ra,40(sp)
    a4b4:	dd400917 	ldw	r21,36(sp)
    a4b8:	dd000817 	ldw	r20,32(sp)
    a4bc:	dcc00717 	ldw	r19,28(sp)
    a4c0:	dc800617 	ldw	r18,24(sp)
    a4c4:	dc400517 	ldw	r17,20(sp)
    a4c8:	dc000417 	ldw	r16,16(sp)
    a4cc:	dec00b04 	addi	sp,sp,44
    a4d0:	f800283a 	ret
    a4d4:	04800074 	movhi	r18,1
    a4d8:	94875304 	addi	r18,r18,7500
    a4dc:	00800074 	movhi	r2,1
    a4e0:	94c00017 	ldw	r19,0(r18)
    a4e4:	10875704 	addi	r2,r2,7516
    a4e8:	14000017 	ldw	r16,0(r2)
    a4ec:	00070a00 	call	70a0 <__locale_charset>
    a4f0:	9809883a 	mov	r4,r19
    a4f4:	dc400015 	stw	r17,0(sp)
    a4f8:	d9400104 	addi	r5,sp,4
    a4fc:	000d883a 	mov	r6,zero
    a500:	100f883a 	mov	r7,r2
    a504:	803ee83a 	callr	r16
    a508:	003fe306 	br	a498 <wcrtomb+0x64>

0000a50c <__ascii_wctomb>:
    a50c:	28000526 	beq	r5,zero,a524 <__ascii_wctomb+0x18>
    a510:	00803fc4 	movi	r2,255
    a514:	11800536 	bltu	r2,r6,a52c <__ascii_wctomb+0x20>
    a518:	29800005 	stb	r6,0(r5)
    a51c:	00800044 	movi	r2,1
    a520:	f800283a 	ret
    a524:	0005883a 	mov	r2,zero
    a528:	f800283a 	ret
    a52c:	00802284 	movi	r2,138
    a530:	20800015 	stw	r2,0(r4)
    a534:	00bfffc4 	movi	r2,-1
    a538:	f800283a 	ret

0000a53c <_wctomb_r>:
    a53c:	00800074 	movhi	r2,1
    a540:	defff904 	addi	sp,sp,-28
    a544:	10875704 	addi	r2,r2,7516
    a548:	dfc00615 	stw	ra,24(sp)
    a54c:	dc400515 	stw	r17,20(sp)
    a550:	dc000415 	stw	r16,16(sp)
    a554:	3823883a 	mov	r17,r7
    a558:	14000017 	ldw	r16,0(r2)
    a55c:	d9000115 	stw	r4,4(sp)
    a560:	d9400215 	stw	r5,8(sp)
    a564:	d9800315 	stw	r6,12(sp)
    a568:	00070a00 	call	70a0 <__locale_charset>
    a56c:	d9000117 	ldw	r4,4(sp)
    a570:	d9400217 	ldw	r5,8(sp)
    a574:	d9800317 	ldw	r6,12(sp)
    a578:	dc400015 	stw	r17,0(sp)
    a57c:	100f883a 	mov	r7,r2
    a580:	803ee83a 	callr	r16
    a584:	dfc00617 	ldw	ra,24(sp)
    a588:	dc400517 	ldw	r17,20(sp)
    a58c:	dc000417 	ldw	r16,16(sp)
    a590:	dec00704 	addi	sp,sp,28
    a594:	f800283a 	ret

0000a598 <__udivdi3>:
    a598:	defff504 	addi	sp,sp,-44
    a59c:	dcc00415 	stw	r19,16(sp)
    a5a0:	dc000115 	stw	r16,4(sp)
    a5a4:	dfc00a15 	stw	ra,40(sp)
    a5a8:	df000915 	stw	fp,36(sp)
    a5ac:	ddc00815 	stw	r23,32(sp)
    a5b0:	dd800715 	stw	r22,28(sp)
    a5b4:	dd400615 	stw	r21,24(sp)
    a5b8:	dd000515 	stw	r20,20(sp)
    a5bc:	dc800315 	stw	r18,12(sp)
    a5c0:	dc400215 	stw	r17,8(sp)
    a5c4:	2027883a 	mov	r19,r4
    a5c8:	2821883a 	mov	r16,r5
    a5cc:	3800421e 	bne	r7,zero,a6d8 <__udivdi3+0x140>
    a5d0:	3025883a 	mov	r18,r6
    a5d4:	2023883a 	mov	r17,r4
    a5d8:	2980542e 	bgeu	r5,r6,a72c <__udivdi3+0x194>
    a5dc:	00bfffd4 	movui	r2,65535
    a5e0:	282d883a 	mov	r22,r5
    a5e4:	1180a836 	bltu	r2,r6,a888 <__udivdi3+0x2f0>
    a5e8:	00803fc4 	movi	r2,255
    a5ec:	1181422e 	bgeu	r2,r6,aaf8 <__udivdi3+0x560>
    a5f0:	00800204 	movi	r2,8
    a5f4:	1007883a 	mov	r3,r2
    a5f8:	3084d83a 	srl	r2,r6,r2
    a5fc:	01000074 	movhi	r4,1
    a600:	21005c04 	addi	r4,r4,368
    a604:	2085883a 	add	r2,r4,r2
    a608:	10800003 	ldbu	r2,0(r2)
    a60c:	10c7883a 	add	r3,r2,r3
    a610:	00800804 	movi	r2,32
    a614:	10c5c83a 	sub	r2,r2,r3
    a618:	10000526 	beq	r2,zero,a630 <__udivdi3+0x98>
    a61c:	80a0983a 	sll	r16,r16,r2
    a620:	98c6d83a 	srl	r3,r19,r3
    a624:	30a4983a 	sll	r18,r6,r2
    a628:	98a2983a 	sll	r17,r19,r2
    a62c:	80ecb03a 	or	r22,r16,r3
    a630:	902ad43a 	srli	r21,r18,16
    a634:	b009883a 	mov	r4,r22
    a638:	953fffcc 	andi	r20,r18,65535
    a63c:	a80b883a 	mov	r5,r21
    a640:	00013000 	call	1300 <__umodsi3>
    a644:	b009883a 	mov	r4,r22
    a648:	a80b883a 	mov	r5,r21
    a64c:	1027883a 	mov	r19,r2
    a650:	00012f80 	call	12f8 <__udivsi3>
    a654:	1021883a 	mov	r16,r2
    a658:	8806d43a 	srli	r3,r17,16
    a65c:	9804943a 	slli	r2,r19,16
    a660:	8527383a 	mul	r19,r16,r20
    a664:	10c4b03a 	or	r2,r2,r3
    a668:	14c0052e 	bgeu	r2,r19,a680 <__udivdi3+0xe8>
    a66c:	1485883a 	add	r2,r2,r18
    a670:	80ffffc4 	addi	r3,r16,-1
    a674:	14800136 	bltu	r2,r18,a67c <__udivdi3+0xe4>
    a678:	14c13436 	bltu	r2,r19,ab4c <__udivdi3+0x5b4>
    a67c:	1821883a 	mov	r16,r3
    a680:	14e7c83a 	sub	r19,r2,r19
    a684:	9809883a 	mov	r4,r19
    a688:	a80b883a 	mov	r5,r21
    a68c:	00013000 	call	1300 <__umodsi3>
    a690:	102d883a 	mov	r22,r2
    a694:	9809883a 	mov	r4,r19
    a698:	a80b883a 	mov	r5,r21
    a69c:	00012f80 	call	12f8 <__udivsi3>
    a6a0:	b02c943a 	slli	r22,r22,16
    a6a4:	1529383a 	mul	r20,r2,r20
    a6a8:	8c7fffcc 	andi	r17,r17,65535
    a6ac:	b462b03a 	or	r17,r22,r17
    a6b0:	8d00052e 	bgeu	r17,r20,a6c8 <__udivdi3+0x130>
    a6b4:	8ca3883a 	add	r17,r17,r18
    a6b8:	10ffffc4 	addi	r3,r2,-1
    a6bc:	8c80f636 	bltu	r17,r18,aa98 <__udivdi3+0x500>
    a6c0:	8d00f52e 	bgeu	r17,r20,aa98 <__udivdi3+0x500>
    a6c4:	10bfff84 	addi	r2,r2,-2
    a6c8:	8020943a 	slli	r16,r16,16
    a6cc:	0007883a 	mov	r3,zero
    a6d0:	1404b03a 	or	r2,r2,r16
    a6d4:	00005b06 	br	a844 <__udivdi3+0x2ac>
    a6d8:	29c05836 	bltu	r5,r7,a83c <__udivdi3+0x2a4>
    a6dc:	00bfffd4 	movui	r2,65535
    a6e0:	11c0642e 	bgeu	r2,r7,a874 <__udivdi3+0x2dc>
    a6e4:	00804034 	movhi	r2,256
    a6e8:	10bfffc4 	addi	r2,r2,-1
    a6ec:	11c0f32e 	bgeu	r2,r7,aabc <__udivdi3+0x524>
    a6f0:	00c00604 	movi	r3,24
    a6f4:	180b883a 	mov	r5,r3
    a6f8:	38c6d83a 	srl	r3,r7,r3
    a6fc:	00800074 	movhi	r2,1
    a700:	10805c04 	addi	r2,r2,368
    a704:	10c7883a 	add	r3,r2,r3
    a708:	18c00003 	ldbu	r3,0(r3)
    a70c:	01000804 	movi	r4,32
    a710:	1947883a 	add	r3,r3,r5
    a714:	20e5c83a 	sub	r18,r4,r3
    a718:	9000661e 	bne	r18,zero,a8b4 <__udivdi3+0x31c>
    a71c:	3c00f936 	bltu	r7,r16,ab04 <__udivdi3+0x56c>
    a720:	9985403a 	cmpgeu	r2,r19,r6
    a724:	0007883a 	mov	r3,zero
    a728:	00004606 	br	a844 <__udivdi3+0x2ac>
    a72c:	3000041e 	bne	r6,zero,a740 <__udivdi3+0x1a8>
    a730:	01000044 	movi	r4,1
    a734:	000b883a 	mov	r5,zero
    a738:	00012f80 	call	12f8 <__udivsi3>
    a73c:	1025883a 	mov	r18,r2
    a740:	00bfffd4 	movui	r2,65535
    a744:	1480562e 	bgeu	r2,r18,a8a0 <__udivdi3+0x308>
    a748:	00804034 	movhi	r2,256
    a74c:	10bfffc4 	addi	r2,r2,-1
    a750:	1480e32e 	bgeu	r2,r18,aae0 <__udivdi3+0x548>
    a754:	00800604 	movi	r2,24
    a758:	1007883a 	mov	r3,r2
    a75c:	9084d83a 	srl	r2,r18,r2
    a760:	01000074 	movhi	r4,1
    a764:	21005c04 	addi	r4,r4,368
    a768:	2085883a 	add	r2,r4,r2
    a76c:	10800003 	ldbu	r2,0(r2)
    a770:	10c5883a 	add	r2,r2,r3
    a774:	00c00804 	movi	r3,32
    a778:	1887c83a 	sub	r3,r3,r2
    a77c:	1800911e 	bne	r3,zero,a9c4 <__udivdi3+0x42c>
    a780:	9028d43a 	srli	r20,r18,16
    a784:	84a1c83a 	sub	r16,r16,r18
    a788:	957fffcc 	andi	r21,r18,65535
    a78c:	00c00044 	movi	r3,1
    a790:	8009883a 	mov	r4,r16
    a794:	a00b883a 	mov	r5,r20
    a798:	d8c00015 	stw	r3,0(sp)
    a79c:	00013000 	call	1300 <__umodsi3>
    a7a0:	8009883a 	mov	r4,r16
    a7a4:	a00b883a 	mov	r5,r20
    a7a8:	1027883a 	mov	r19,r2
    a7ac:	00012f80 	call	12f8 <__udivsi3>
    a7b0:	1021883a 	mov	r16,r2
    a7b4:	880cd43a 	srli	r6,r17,16
    a7b8:	9804943a 	slli	r2,r19,16
    a7bc:	8567383a 	mul	r19,r16,r21
    a7c0:	d8c00017 	ldw	r3,0(sp)
    a7c4:	1188b03a 	or	r4,r2,r6
    a7c8:	24c0052e 	bgeu	r4,r19,a7e0 <__udivdi3+0x248>
    a7cc:	2489883a 	add	r4,r4,r18
    a7d0:	80bfffc4 	addi	r2,r16,-1
    a7d4:	24800136 	bltu	r4,r18,a7dc <__udivdi3+0x244>
    a7d8:	24c0d936 	bltu	r4,r19,ab40 <__udivdi3+0x5a8>
    a7dc:	1021883a 	mov	r16,r2
    a7e0:	24e7c83a 	sub	r19,r4,r19
    a7e4:	9809883a 	mov	r4,r19
    a7e8:	a00b883a 	mov	r5,r20
    a7ec:	d8c00015 	stw	r3,0(sp)
    a7f0:	00013000 	call	1300 <__umodsi3>
    a7f4:	102d883a 	mov	r22,r2
    a7f8:	9809883a 	mov	r4,r19
    a7fc:	a00b883a 	mov	r5,r20
    a800:	00012f80 	call	12f8 <__udivsi3>
    a804:	b02c943a 	slli	r22,r22,16
    a808:	156b383a 	mul	r21,r2,r21
    a80c:	8c7fffcc 	andi	r17,r17,65535
    a810:	b462b03a 	or	r17,r22,r17
    a814:	d8c00017 	ldw	r3,0(sp)
    a818:	8d40052e 	bgeu	r17,r21,a830 <__udivdi3+0x298>
    a81c:	8ca3883a 	add	r17,r17,r18
    a820:	113fffc4 	addi	r4,r2,-1
    a824:	8c809a36 	bltu	r17,r18,aa90 <__udivdi3+0x4f8>
    a828:	8d40992e 	bgeu	r17,r21,aa90 <__udivdi3+0x4f8>
    a82c:	10bfff84 	addi	r2,r2,-2
    a830:	8020943a 	slli	r16,r16,16
    a834:	1404b03a 	or	r2,r2,r16
    a838:	00000206 	br	a844 <__udivdi3+0x2ac>
    a83c:	0007883a 	mov	r3,zero
    a840:	0005883a 	mov	r2,zero
    a844:	dfc00a17 	ldw	ra,40(sp)
    a848:	df000917 	ldw	fp,36(sp)
    a84c:	ddc00817 	ldw	r23,32(sp)
    a850:	dd800717 	ldw	r22,28(sp)
    a854:	dd400617 	ldw	r21,24(sp)
    a858:	dd000517 	ldw	r20,20(sp)
    a85c:	dcc00417 	ldw	r19,16(sp)
    a860:	dc800317 	ldw	r18,12(sp)
    a864:	dc400217 	ldw	r17,8(sp)
    a868:	dc000117 	ldw	r16,4(sp)
    a86c:	dec00b04 	addi	sp,sp,44
    a870:	f800283a 	ret
    a874:	00803fc4 	movi	r2,255
    a878:	11c0932e 	bgeu	r2,r7,aac8 <__udivdi3+0x530>
    a87c:	00c00204 	movi	r3,8
    a880:	180b883a 	mov	r5,r3
    a884:	003f9c06 	br	a6f8 <__udivdi3+0x160>
    a888:	00804034 	movhi	r2,256
    a88c:	10bfffc4 	addi	r2,r2,-1
    a890:	1180902e 	bgeu	r2,r6,aad4 <__udivdi3+0x53c>
    a894:	00800604 	movi	r2,24
    a898:	1007883a 	mov	r3,r2
    a89c:	003f5606 	br	a5f8 <__udivdi3+0x60>
    a8a0:	00803fc4 	movi	r2,255
    a8a4:	1480912e 	bgeu	r2,r18,aaec <__udivdi3+0x554>
    a8a8:	00800204 	movi	r2,8
    a8ac:	1007883a 	mov	r3,r2
    a8b0:	003faa06 	br	a75c <__udivdi3+0x1c4>
    a8b4:	30eed83a 	srl	r23,r6,r3
    a8b8:	3c8e983a 	sll	r7,r7,r18
    a8bc:	80f8d83a 	srl	fp,r16,r3
    a8c0:	98c6d83a 	srl	r3,r19,r3
    a8c4:	3deeb03a 	or	r23,r7,r23
    a8c8:	b828d43a 	srli	r20,r23,16
    a8cc:	84a0983a 	sll	r16,r16,r18
    a8d0:	e009883a 	mov	r4,fp
    a8d4:	a00b883a 	mov	r5,r20
    a8d8:	80e2b03a 	or	r17,r16,r3
    a8dc:	34aa983a 	sll	r21,r6,r18
    a8e0:	00013000 	call	1300 <__umodsi3>
    a8e4:	e009883a 	mov	r4,fp
    a8e8:	a00b883a 	mov	r5,r20
    a8ec:	102d883a 	mov	r22,r2
    a8f0:	00012f80 	call	12f8 <__udivsi3>
    a8f4:	1021883a 	mov	r16,r2
    a8f8:	bf3fffcc 	andi	fp,r23,65535
    a8fc:	b004943a 	slli	r2,r22,16
    a900:	8808d43a 	srli	r4,r17,16
    a904:	872d383a 	mul	r22,r16,fp
    a908:	1104b03a 	or	r2,r2,r4
    a90c:	1580042e 	bgeu	r2,r22,a920 <__udivdi3+0x388>
    a910:	15c5883a 	add	r2,r2,r23
    a914:	80ffffc4 	addi	r3,r16,-1
    a918:	15c0812e 	bgeu	r2,r23,ab20 <__udivdi3+0x588>
    a91c:	1821883a 	mov	r16,r3
    a920:	15adc83a 	sub	r22,r2,r22
    a924:	b009883a 	mov	r4,r22
    a928:	a00b883a 	mov	r5,r20
    a92c:	00013000 	call	1300 <__umodsi3>
    a930:	a00b883a 	mov	r5,r20
    a934:	b009883a 	mov	r4,r22
    a938:	d8800015 	stw	r2,0(sp)
    a93c:	00012f80 	call	12f8 <__udivsi3>
    a940:	d8c00017 	ldw	r3,0(sp)
    a944:	170b383a 	mul	r5,r2,fp
    a948:	8c7fffcc 	andi	r17,r17,65535
    a94c:	1806943a 	slli	r3,r3,16
    a950:	1c46b03a 	or	r3,r3,r17
    a954:	1940042e 	bgeu	r3,r5,a968 <__udivdi3+0x3d0>
    a958:	1dc7883a 	add	r3,r3,r23
    a95c:	113fffc4 	addi	r4,r2,-1
    a960:	1dc06b2e 	bgeu	r3,r23,ab10 <__udivdi3+0x578>
    a964:	2005883a 	mov	r2,r4
    a968:	8020943a 	slli	r16,r16,16
    a96c:	a9ffffcc 	andi	r7,r21,65535
    a970:	a82ad43a 	srli	r21,r21,16
    a974:	1404b03a 	or	r2,r2,r16
    a978:	113fffcc 	andi	r4,r2,65535
    a97c:	100cd43a 	srli	r6,r2,16
    a980:	21d3383a 	mul	r9,r4,r7
    a984:	2549383a 	mul	r4,r4,r21
    a988:	31cf383a 	mul	r7,r6,r7
    a98c:	4810d43a 	srli	r8,r9,16
    a990:	1947c83a 	sub	r3,r3,r5
    a994:	3909883a 	add	r4,r7,r4
    a998:	2209883a 	add	r4,r4,r8
    a99c:	354d383a 	mul	r6,r6,r21
    a9a0:	21c0022e 	bgeu	r4,r7,a9ac <__udivdi3+0x414>
    a9a4:	01400074 	movhi	r5,1
    a9a8:	314d883a 	add	r6,r6,r5
    a9ac:	202ad43a 	srli	r21,r4,16
    a9b0:	354d883a 	add	r6,r6,r21
    a9b4:	19803f36 	bltu	r3,r6,aab4 <__udivdi3+0x51c>
    a9b8:	19803926 	beq	r3,r6,aaa0 <__udivdi3+0x508>
    a9bc:	0007883a 	mov	r3,zero
    a9c0:	003fa006 	br	a844 <__udivdi3+0x2ac>
    a9c4:	90e4983a 	sll	r18,r18,r3
    a9c8:	80aad83a 	srl	r21,r16,r2
    a9cc:	80e0983a 	sll	r16,r16,r3
    a9d0:	9028d43a 	srli	r20,r18,16
    a9d4:	9884d83a 	srl	r2,r19,r2
    a9d8:	a809883a 	mov	r4,r21
    a9dc:	a00b883a 	mov	r5,r20
    a9e0:	80acb03a 	or	r22,r16,r2
    a9e4:	98e2983a 	sll	r17,r19,r3
    a9e8:	00013000 	call	1300 <__umodsi3>
    a9ec:	a809883a 	mov	r4,r21
    a9f0:	a00b883a 	mov	r5,r20
    a9f4:	1021883a 	mov	r16,r2
    a9f8:	00012f80 	call	12f8 <__udivsi3>
    a9fc:	957fffcc 	andi	r21,r18,65535
    aa00:	8020943a 	slli	r16,r16,16
    aa04:	b00ad43a 	srli	r5,r22,16
    aa08:	1567383a 	mul	r19,r2,r21
    aa0c:	102f883a 	mov	r23,r2
    aa10:	8148b03a 	or	r4,r16,r5
    aa14:	24c0062e 	bgeu	r4,r19,aa30 <__udivdi3+0x498>
    aa18:	2489883a 	add	r4,r4,r18
    aa1c:	10bfffc4 	addi	r2,r2,-1
    aa20:	24804536 	bltu	r4,r18,ab38 <__udivdi3+0x5a0>
    aa24:	24c0442e 	bgeu	r4,r19,ab38 <__udivdi3+0x5a0>
    aa28:	bdffff84 	addi	r23,r23,-2
    aa2c:	2489883a 	add	r4,r4,r18
    aa30:	24e7c83a 	sub	r19,r4,r19
    aa34:	9809883a 	mov	r4,r19
    aa38:	a00b883a 	mov	r5,r20
    aa3c:	00013000 	call	1300 <__umodsi3>
    aa40:	1021883a 	mov	r16,r2
    aa44:	9809883a 	mov	r4,r19
    aa48:	a00b883a 	mov	r5,r20
    aa4c:	00012f80 	call	12f8 <__udivsi3>
    aa50:	8020943a 	slli	r16,r16,16
    aa54:	1007883a 	mov	r3,r2
    aa58:	1545383a 	mul	r2,r2,r21
    aa5c:	b13fffcc 	andi	r4,r22,65535
    aa60:	8108b03a 	or	r4,r16,r4
    aa64:	2080062e 	bgeu	r4,r2,aa80 <__udivdi3+0x4e8>
    aa68:	2489883a 	add	r4,r4,r18
    aa6c:	197fffc4 	addi	r5,r3,-1
    aa70:	24802f36 	bltu	r4,r18,ab30 <__udivdi3+0x598>
    aa74:	20802e2e 	bgeu	r4,r2,ab30 <__udivdi3+0x598>
    aa78:	18ffff84 	addi	r3,r3,-2
    aa7c:	2489883a 	add	r4,r4,r18
    aa80:	b82e943a 	slli	r23,r23,16
    aa84:	20a1c83a 	sub	r16,r4,r2
    aa88:	1dc6b03a 	or	r3,r3,r23
    aa8c:	003f4006 	br	a790 <__udivdi3+0x1f8>
    aa90:	2005883a 	mov	r2,r4
    aa94:	003f6606 	br	a830 <__udivdi3+0x298>
    aa98:	1805883a 	mov	r2,r3
    aa9c:	003f0a06 	br	a6c8 <__udivdi3+0x130>
    aaa0:	2006943a 	slli	r3,r4,16
    aaa4:	9c88983a 	sll	r4,r19,r18
    aaa8:	4a7fffcc 	andi	r9,r9,65535
    aaac:	1a47883a 	add	r3,r3,r9
    aab0:	20ffc22e 	bgeu	r4,r3,a9bc <__udivdi3+0x424>
    aab4:	10bfffc4 	addi	r2,r2,-1
    aab8:	003fc006 	br	a9bc <__udivdi3+0x424>
    aabc:	00c00404 	movi	r3,16
    aac0:	180b883a 	mov	r5,r3
    aac4:	003f0c06 	br	a6f8 <__udivdi3+0x160>
    aac8:	0007883a 	mov	r3,zero
    aacc:	000b883a 	mov	r5,zero
    aad0:	003f0906 	br	a6f8 <__udivdi3+0x160>
    aad4:	00800404 	movi	r2,16
    aad8:	1007883a 	mov	r3,r2
    aadc:	003ec606 	br	a5f8 <__udivdi3+0x60>
    aae0:	00800404 	movi	r2,16
    aae4:	1007883a 	mov	r3,r2
    aae8:	003f1c06 	br	a75c <__udivdi3+0x1c4>
    aaec:	0005883a 	mov	r2,zero
    aaf0:	0007883a 	mov	r3,zero
    aaf4:	003f1906 	br	a75c <__udivdi3+0x1c4>
    aaf8:	0005883a 	mov	r2,zero
    aafc:	0007883a 	mov	r3,zero
    ab00:	003ebd06 	br	a5f8 <__udivdi3+0x60>
    ab04:	0007883a 	mov	r3,zero
    ab08:	00800044 	movi	r2,1
    ab0c:	003f4d06 	br	a844 <__udivdi3+0x2ac>
    ab10:	197f942e 	bgeu	r3,r5,a964 <__udivdi3+0x3cc>
    ab14:	10bfff84 	addi	r2,r2,-2
    ab18:	1dc7883a 	add	r3,r3,r23
    ab1c:	003f9206 	br	a968 <__udivdi3+0x3d0>
    ab20:	15bf7e2e 	bgeu	r2,r22,a91c <__udivdi3+0x384>
    ab24:	843fff84 	addi	r16,r16,-2
    ab28:	15c5883a 	add	r2,r2,r23
    ab2c:	003f7c06 	br	a920 <__udivdi3+0x388>
    ab30:	2807883a 	mov	r3,r5
    ab34:	003fd206 	br	aa80 <__udivdi3+0x4e8>
    ab38:	102f883a 	mov	r23,r2
    ab3c:	003fbc06 	br	aa30 <__udivdi3+0x498>
    ab40:	843fff84 	addi	r16,r16,-2
    ab44:	2489883a 	add	r4,r4,r18
    ab48:	003f2506 	br	a7e0 <__udivdi3+0x248>
    ab4c:	843fff84 	addi	r16,r16,-2
    ab50:	1485883a 	add	r2,r2,r18
    ab54:	003eca06 	br	a680 <__udivdi3+0xe8>

0000ab58 <__umoddi3>:
    ab58:	defff404 	addi	sp,sp,-48
    ab5c:	ddc00915 	stw	r23,36(sp)
    ab60:	dc400315 	stw	r17,12(sp)
    ab64:	dc000215 	stw	r16,8(sp)
    ab68:	dfc00b15 	stw	ra,44(sp)
    ab6c:	df000a15 	stw	fp,40(sp)
    ab70:	dd800815 	stw	r22,32(sp)
    ab74:	dd400715 	stw	r21,28(sp)
    ab78:	dd000615 	stw	r20,24(sp)
    ab7c:	dcc00515 	stw	r19,20(sp)
    ab80:	dc800415 	stw	r18,16(sp)
    ab84:	2021883a 	mov	r16,r4
    ab88:	2823883a 	mov	r17,r5
    ab8c:	282f883a 	mov	r23,r5
    ab90:	3800381e 	bne	r7,zero,ac74 <__umoddi3+0x11c>
    ab94:	3027883a 	mov	r19,r6
    ab98:	2029883a 	mov	r20,r4
    ab9c:	29804e2e 	bgeu	r5,r6,acd8 <__umoddi3+0x180>
    aba0:	00bfffd4 	movui	r2,65535
    aba4:	11809c36 	bltu	r2,r6,ae18 <__umoddi3+0x2c0>
    aba8:	00803fc4 	movi	r2,255
    abac:	11813b2e 	bgeu	r2,r6,b09c <__umoddi3+0x544>
    abb0:	01400204 	movi	r5,8
    abb4:	2805883a 	mov	r2,r5
    abb8:	314ad83a 	srl	r5,r6,r5
    abbc:	00c00074 	movhi	r3,1
    abc0:	18c05c04 	addi	r3,r3,368
    abc4:	194b883a 	add	r5,r3,r5
    abc8:	29000003 	ldbu	r4,0(r5)
    abcc:	2089883a 	add	r4,r4,r2
    abd0:	00800804 	movi	r2,32
    abd4:	1105c83a 	sub	r2,r2,r4
    abd8:	1000ec26 	beq	r2,zero,af8c <__umoddi3+0x434>
    abdc:	88a2983a 	sll	r17,r17,r2
    abe0:	8108d83a 	srl	r4,r16,r4
    abe4:	30a6983a 	sll	r19,r6,r2
    abe8:	80a8983a 	sll	r20,r16,r2
    abec:	1025883a 	mov	r18,r2
    abf0:	892eb03a 	or	r23,r17,r4
    abf4:	982cd43a 	srli	r22,r19,16
    abf8:	b809883a 	mov	r4,r23
    abfc:	9d7fffcc 	andi	r21,r19,65535
    ac00:	b00b883a 	mov	r5,r22
    ac04:	00013000 	call	1300 <__umodsi3>
    ac08:	b809883a 	mov	r4,r23
    ac0c:	b00b883a 	mov	r5,r22
    ac10:	1021883a 	mov	r16,r2
    ac14:	00012f80 	call	12f8 <__udivsi3>
    ac18:	8020943a 	slli	r16,r16,16
    ac1c:	a00cd43a 	srli	r6,r20,16
    ac20:	1545383a 	mul	r2,r2,r21
    ac24:	8188b03a 	or	r4,r16,r6
    ac28:	2080042e 	bgeu	r4,r2,ac3c <__umoddi3+0xe4>
    ac2c:	24c9883a 	add	r4,r4,r19
    ac30:	24c00236 	bltu	r4,r19,ac3c <__umoddi3+0xe4>
    ac34:	2080012e 	bgeu	r4,r2,ac3c <__umoddi3+0xe4>
    ac38:	24c9883a 	add	r4,r4,r19
    ac3c:	20a3c83a 	sub	r17,r4,r2
    ac40:	8809883a 	mov	r4,r17
    ac44:	b00b883a 	mov	r5,r22
    ac48:	00013000 	call	1300 <__umodsi3>
    ac4c:	8809883a 	mov	r4,r17
    ac50:	b00b883a 	mov	r5,r22
    ac54:	1021883a 	mov	r16,r2
    ac58:	00012f80 	call	12f8 <__udivsi3>
    ac5c:	8006943a 	slli	r3,r16,16
    ac60:	1545383a 	mul	r2,r2,r21
    ac64:	a13fffcc 	andi	r4,r20,65535
    ac68:	1906b03a 	or	r3,r3,r4
    ac6c:	1880532e 	bgeu	r3,r2,adbc <__umoddi3+0x264>
    ac70:	00004e06 	br	adac <__umoddi3+0x254>
    ac74:	29c05536 	bltu	r5,r7,adcc <__umoddi3+0x274>
    ac78:	00bfffd4 	movui	r2,65535
    ac7c:	11c0612e 	bgeu	r2,r7,ae04 <__umoddi3+0x2ac>
    ac80:	00804034 	movhi	r2,256
    ac84:	10bfffc4 	addi	r2,r2,-1
    ac88:	11c0f82e 	bgeu	r2,r7,b06c <__umoddi3+0x514>
    ac8c:	01400604 	movi	r5,24
    ac90:	282b883a 	mov	r21,r5
    ac94:	394ad83a 	srl	r5,r7,r5
    ac98:	00c00074 	movhi	r3,1
    ac9c:	18c05c04 	addi	r3,r3,368
    aca0:	194b883a 	add	r5,r3,r5
    aca4:	28800003 	ldbu	r2,0(r5)
    aca8:	00c00804 	movi	r3,32
    acac:	156b883a 	add	r21,r2,r21
    acb0:	1d69c83a 	sub	r20,r3,r21
    acb4:	a000631e 	bne	r20,zero,ae44 <__umoddi3+0x2ec>
    acb8:	3c400136 	bltu	r7,r17,acc0 <__umoddi3+0x168>
    acbc:	81810436 	bltu	r16,r6,b0d0 <__umoddi3+0x578>
    acc0:	8185c83a 	sub	r2,r16,r6
    acc4:	89e3c83a 	sub	r17,r17,r7
    acc8:	8087803a 	cmpltu	r3,r16,r2
    accc:	88efc83a 	sub	r23,r17,r3
    acd0:	b807883a 	mov	r3,r23
    acd4:	00003f06 	br	add4 <__umoddi3+0x27c>
    acd8:	3000041e 	bne	r6,zero,acec <__umoddi3+0x194>
    acdc:	01000044 	movi	r4,1
    ace0:	000b883a 	mov	r5,zero
    ace4:	00012f80 	call	12f8 <__udivsi3>
    ace8:	1027883a 	mov	r19,r2
    acec:	00bfffd4 	movui	r2,65535
    acf0:	14c04f2e 	bgeu	r2,r19,ae30 <__umoddi3+0x2d8>
    acf4:	00804034 	movhi	r2,256
    acf8:	10bfffc4 	addi	r2,r2,-1
    acfc:	14c0e42e 	bgeu	r2,r19,b090 <__umoddi3+0x538>
    ad00:	00800604 	movi	r2,24
    ad04:	1007883a 	mov	r3,r2
    ad08:	9884d83a 	srl	r2,r19,r2
    ad0c:	01000074 	movhi	r4,1
    ad10:	21005c04 	addi	r4,r4,368
    ad14:	2085883a 	add	r2,r4,r2
    ad18:	11000003 	ldbu	r4,0(r2)
    ad1c:	00800804 	movi	r2,32
    ad20:	20c7883a 	add	r3,r4,r3
    ad24:	10c5c83a 	sub	r2,r2,r3
    ad28:	10009a1e 	bne	r2,zero,af94 <__umoddi3+0x43c>
    ad2c:	982cd43a 	srli	r22,r19,16
    ad30:	8ce3c83a 	sub	r17,r17,r19
    ad34:	9c3fffcc 	andi	r16,r19,65535
    ad38:	0025883a 	mov	r18,zero
    ad3c:	8809883a 	mov	r4,r17
    ad40:	b00b883a 	mov	r5,r22
    ad44:	00013000 	call	1300 <__umodsi3>
    ad48:	8809883a 	mov	r4,r17
    ad4c:	b00b883a 	mov	r5,r22
    ad50:	102b883a 	mov	r21,r2
    ad54:	00012f80 	call	12f8 <__udivsi3>
    ad58:	a806943a 	slli	r3,r21,16
    ad5c:	a008d43a 	srli	r4,r20,16
    ad60:	1405383a 	mul	r2,r2,r16
    ad64:	190cb03a 	or	r6,r3,r4
    ad68:	3080032e 	bgeu	r6,r2,ad78 <__umoddi3+0x220>
    ad6c:	34cd883a 	add	r6,r6,r19
    ad70:	34c00136 	bltu	r6,r19,ad78 <__umoddi3+0x220>
    ad74:	3080d436 	bltu	r6,r2,b0c8 <__umoddi3+0x570>
    ad78:	30abc83a 	sub	r21,r6,r2
    ad7c:	a809883a 	mov	r4,r21
    ad80:	b00b883a 	mov	r5,r22
    ad84:	00013000 	call	1300 <__umodsi3>
    ad88:	1023883a 	mov	r17,r2
    ad8c:	a809883a 	mov	r4,r21
    ad90:	b00b883a 	mov	r5,r22
    ad94:	00012f80 	call	12f8 <__udivsi3>
    ad98:	8822943a 	slli	r17,r17,16
    ad9c:	1405383a 	mul	r2,r2,r16
    ada0:	a13fffcc 	andi	r4,r20,65535
    ada4:	8906b03a 	or	r3,r17,r4
    ada8:	1880042e 	bgeu	r3,r2,adbc <__umoddi3+0x264>
    adac:	1cc7883a 	add	r3,r3,r19
    adb0:	1cc00236 	bltu	r3,r19,adbc <__umoddi3+0x264>
    adb4:	1880012e 	bgeu	r3,r2,adbc <__umoddi3+0x264>
    adb8:	1cc7883a 	add	r3,r3,r19
    adbc:	1887c83a 	sub	r3,r3,r2
    adc0:	1c84d83a 	srl	r2,r3,r18
    adc4:	0007883a 	mov	r3,zero
    adc8:	00000206 	br	add4 <__umoddi3+0x27c>
    adcc:	2005883a 	mov	r2,r4
    add0:	2807883a 	mov	r3,r5
    add4:	dfc00b17 	ldw	ra,44(sp)
    add8:	df000a17 	ldw	fp,40(sp)
    addc:	ddc00917 	ldw	r23,36(sp)
    ade0:	dd800817 	ldw	r22,32(sp)
    ade4:	dd400717 	ldw	r21,28(sp)
    ade8:	dd000617 	ldw	r20,24(sp)
    adec:	dcc00517 	ldw	r19,20(sp)
    adf0:	dc800417 	ldw	r18,16(sp)
    adf4:	dc400317 	ldw	r17,12(sp)
    adf8:	dc000217 	ldw	r16,8(sp)
    adfc:	dec00c04 	addi	sp,sp,48
    ae00:	f800283a 	ret
    ae04:	00803fc4 	movi	r2,255
    ae08:	11c0952e 	bgeu	r2,r7,b060 <__umoddi3+0x508>
    ae0c:	01400204 	movi	r5,8
    ae10:	282b883a 	mov	r21,r5
    ae14:	003f9f06 	br	ac94 <__umoddi3+0x13c>
    ae18:	00804034 	movhi	r2,256
    ae1c:	10bfffc4 	addi	r2,r2,-1
    ae20:	1180952e 	bgeu	r2,r6,b078 <__umoddi3+0x520>
    ae24:	01400604 	movi	r5,24
    ae28:	2805883a 	mov	r2,r5
    ae2c:	003f6206 	br	abb8 <__umoddi3+0x60>
    ae30:	00803fc4 	movi	r2,255
    ae34:	14c0932e 	bgeu	r2,r19,b084 <__umoddi3+0x52c>
    ae38:	00800204 	movi	r2,8
    ae3c:	1007883a 	mov	r3,r2
    ae40:	003fb106 	br	ad08 <__umoddi3+0x1b0>
    ae44:	3548d83a 	srl	r4,r6,r21
    ae48:	3d0e983a 	sll	r7,r7,r20
    ae4c:	8d10983a 	sll	r8,r17,r20
    ae50:	8d6cd83a 	srl	r22,r17,r21
    ae54:	3922b03a 	or	r17,r7,r4
    ae58:	882ed43a 	srli	r23,r17,16
    ae5c:	8564d83a 	srl	r18,r16,r21
    ae60:	b009883a 	mov	r4,r22
    ae64:	b80b883a 	mov	r5,r23
    ae68:	44a4b03a 	or	r18,r8,r18
    ae6c:	3526983a 	sll	r19,r6,r20
    ae70:	00013000 	call	1300 <__umodsi3>
    ae74:	b009883a 	mov	r4,r22
    ae78:	b80b883a 	mov	r5,r23
    ae7c:	1039883a 	mov	fp,r2
    ae80:	00012f80 	call	12f8 <__udivsi3>
    ae84:	102d883a 	mov	r22,r2
    ae88:	8a3fffcc 	andi	r8,r17,65535
    ae8c:	e004943a 	slli	r2,fp,16
    ae90:	900cd43a 	srli	r6,r18,16
    ae94:	b239383a 	mul	fp,r22,r8
    ae98:	8520983a 	sll	r16,r16,r20
    ae9c:	118ab03a 	or	r5,r2,r6
    aea0:	2f00042e 	bgeu	r5,fp,aeb4 <__umoddi3+0x35c>
    aea4:	2c4b883a 	add	r5,r5,r17
    aea8:	b0bfffc4 	addi	r2,r22,-1
    aeac:	2c40822e 	bgeu	r5,r17,b0b8 <__umoddi3+0x560>
    aeb0:	102d883a 	mov	r22,r2
    aeb4:	2f39c83a 	sub	fp,r5,fp
    aeb8:	e009883a 	mov	r4,fp
    aebc:	b80b883a 	mov	r5,r23
    aec0:	da000115 	stw	r8,4(sp)
    aec4:	00013000 	call	1300 <__umodsi3>
    aec8:	e009883a 	mov	r4,fp
    aecc:	b80b883a 	mov	r5,r23
    aed0:	d8800015 	stw	r2,0(sp)
    aed4:	00012f80 	call	12f8 <__udivsi3>
    aed8:	d9800017 	ldw	r6,0(sp)
    aedc:	da000117 	ldw	r8,4(sp)
    aee0:	94bfffcc 	andi	r18,r18,65535
    aee4:	300c943a 	slli	r6,r6,16
    aee8:	1209383a 	mul	r4,r2,r8
    aeec:	3490b03a 	or	r8,r6,r18
    aef0:	4100042e 	bgeu	r8,r4,af04 <__umoddi3+0x3ac>
    aef4:	4451883a 	add	r8,r8,r17
    aef8:	10ffffc4 	addi	r3,r2,-1
    aefc:	44406a2e 	bgeu	r8,r17,b0a8 <__umoddi3+0x550>
    af00:	1805883a 	mov	r2,r3
    af04:	b012943a 	slli	r9,r22,16
    af08:	9abfffcc 	andi	r10,r19,65535
    af0c:	980ed43a 	srli	r7,r19,16
    af10:	124ab03a 	or	r5,r2,r9
    af14:	2a7fffcc 	andi	r9,r5,65535
    af18:	280ad43a 	srli	r5,r5,16
    af1c:	4a8d383a 	mul	r6,r9,r10
    af20:	49d3383a 	mul	r9,r9,r7
    af24:	2a95383a 	mul	r10,r5,r10
    af28:	3004d43a 	srli	r2,r6,16
    af2c:	4111c83a 	sub	r8,r8,r4
    af30:	5253883a 	add	r9,r10,r9
    af34:	4893883a 	add	r9,r9,r2
    af38:	29cb383a 	mul	r5,r5,r7
    af3c:	4a80022e 	bgeu	r9,r10,af48 <__umoddi3+0x3f0>
    af40:	00800074 	movhi	r2,1
    af44:	288b883a 	add	r5,r5,r2
    af48:	4808d43a 	srli	r4,r9,16
    af4c:	4812943a 	slli	r9,r9,16
    af50:	31bfffcc 	andi	r6,r6,65535
    af54:	290b883a 	add	r5,r5,r4
    af58:	498d883a 	add	r6,r9,r6
    af5c:	41403a36 	bltu	r8,r5,b048 <__umoddi3+0x4f0>
    af60:	41405d26 	beq	r8,r5,b0d8 <__umoddi3+0x580>
    af64:	4149c83a 	sub	r4,r8,r5
    af68:	300f883a 	mov	r7,r6
    af6c:	81cfc83a 	sub	r7,r16,r7
    af70:	81c7803a 	cmpltu	r3,r16,r7
    af74:	20c7c83a 	sub	r3,r4,r3
    af78:	1d44983a 	sll	r2,r3,r21
    af7c:	3d0ed83a 	srl	r7,r7,r20
    af80:	1d06d83a 	srl	r3,r3,r20
    af84:	11c4b03a 	or	r2,r2,r7
    af88:	003f9206 	br	add4 <__umoddi3+0x27c>
    af8c:	0025883a 	mov	r18,zero
    af90:	003f1806 	br	abf4 <__umoddi3+0x9c>
    af94:	98a6983a 	sll	r19,r19,r2
    af98:	88e8d83a 	srl	r20,r17,r3
    af9c:	80c6d83a 	srl	r3,r16,r3
    afa0:	982cd43a 	srli	r22,r19,16
    afa4:	88a2983a 	sll	r17,r17,r2
    afa8:	a009883a 	mov	r4,r20
    afac:	b00b883a 	mov	r5,r22
    afb0:	88eab03a 	or	r21,r17,r3
    afb4:	1025883a 	mov	r18,r2
    afb8:	00013000 	call	1300 <__umodsi3>
    afbc:	a009883a 	mov	r4,r20
    afc0:	b00b883a 	mov	r5,r22
    afc4:	1023883a 	mov	r17,r2
    afc8:	00012f80 	call	12f8 <__udivsi3>
    afcc:	9f3fffcc 	andi	fp,r19,65535
    afd0:	8822943a 	slli	r17,r17,16
    afd4:	a80ad43a 	srli	r5,r21,16
    afd8:	1705383a 	mul	r2,r2,fp
    afdc:	84a8983a 	sll	r20,r16,r18
    afe0:	8948b03a 	or	r4,r17,r5
    afe4:	2080042e 	bgeu	r4,r2,aff8 <__umoddi3+0x4a0>
    afe8:	24c9883a 	add	r4,r4,r19
    afec:	24c00236 	bltu	r4,r19,aff8 <__umoddi3+0x4a0>
    aff0:	2080012e 	bgeu	r4,r2,aff8 <__umoddi3+0x4a0>
    aff4:	24c9883a 	add	r4,r4,r19
    aff8:	20afc83a 	sub	r23,r4,r2
    affc:	b809883a 	mov	r4,r23
    b000:	b00b883a 	mov	r5,r22
    b004:	00013000 	call	1300 <__umodsi3>
    b008:	1023883a 	mov	r17,r2
    b00c:	b809883a 	mov	r4,r23
    b010:	b00b883a 	mov	r5,r22
    b014:	00012f80 	call	12f8 <__udivsi3>
    b018:	8822943a 	slli	r17,r17,16
    b01c:	1705383a 	mul	r2,r2,fp
    b020:	a93fffcc 	andi	r4,r21,65535
    b024:	8908b03a 	or	r4,r17,r4
    b028:	2080042e 	bgeu	r4,r2,b03c <__umoddi3+0x4e4>
    b02c:	24c9883a 	add	r4,r4,r19
    b030:	24c00236 	bltu	r4,r19,b03c <__umoddi3+0x4e4>
    b034:	2080012e 	bgeu	r4,r2,b03c <__umoddi3+0x4e4>
    b038:	24c9883a 	add	r4,r4,r19
    b03c:	20a3c83a 	sub	r17,r4,r2
    b040:	e021883a 	mov	r16,fp
    b044:	003f3d06 	br	ad3c <__umoddi3+0x1e4>
    b048:	34cfc83a 	sub	r7,r6,r19
    b04c:	2c4bc83a 	sub	r5,r5,r17
    b050:	31cd803a 	cmpltu	r6,r6,r7
    b054:	298dc83a 	sub	r6,r5,r6
    b058:	4189c83a 	sub	r4,r8,r6
    b05c:	003fc306 	br	af6c <__umoddi3+0x414>
    b060:	000b883a 	mov	r5,zero
    b064:	002b883a 	mov	r21,zero
    b068:	003f0a06 	br	ac94 <__umoddi3+0x13c>
    b06c:	01400404 	movi	r5,16
    b070:	282b883a 	mov	r21,r5
    b074:	003f0706 	br	ac94 <__umoddi3+0x13c>
    b078:	01400404 	movi	r5,16
    b07c:	2805883a 	mov	r2,r5
    b080:	003ecd06 	br	abb8 <__umoddi3+0x60>
    b084:	0005883a 	mov	r2,zero
    b088:	0007883a 	mov	r3,zero
    b08c:	003f1e06 	br	ad08 <__umoddi3+0x1b0>
    b090:	00800404 	movi	r2,16
    b094:	1007883a 	mov	r3,r2
    b098:	003f1b06 	br	ad08 <__umoddi3+0x1b0>
    b09c:	000b883a 	mov	r5,zero
    b0a0:	0005883a 	mov	r2,zero
    b0a4:	003ec406 	br	abb8 <__umoddi3+0x60>
    b0a8:	413f952e 	bgeu	r8,r4,af00 <__umoddi3+0x3a8>
    b0ac:	10bfff84 	addi	r2,r2,-2
    b0b0:	4451883a 	add	r8,r8,r17
    b0b4:	003f9306 	br	af04 <__umoddi3+0x3ac>
    b0b8:	2f3f7d2e 	bgeu	r5,fp,aeb0 <__umoddi3+0x358>
    b0bc:	b5bfff84 	addi	r22,r22,-2
    b0c0:	2c4b883a 	add	r5,r5,r17
    b0c4:	003f7b06 	br	aeb4 <__umoddi3+0x35c>
    b0c8:	34cd883a 	add	r6,r6,r19
    b0cc:	003f2a06 	br	ad78 <__umoddi3+0x220>
    b0d0:	8005883a 	mov	r2,r16
    b0d4:	003efe06 	br	acd0 <__umoddi3+0x178>
    b0d8:	81bfdb36 	bltu	r16,r6,b048 <__umoddi3+0x4f0>
    b0dc:	300f883a 	mov	r7,r6
    b0e0:	0009883a 	mov	r4,zero
    b0e4:	003fa106 	br	af6c <__umoddi3+0x414>

0000b0e8 <__adddf3>:
    b0e8:	02000434 	movhi	r8,16
    b0ec:	423fffc4 	addi	r8,r8,-1
    b0f0:	defffb04 	addi	sp,sp,-20
    b0f4:	2a12703a 	and	r9,r5,r8
    b0f8:	2806d7fa 	srli	r3,r5,31
    b0fc:	3a10703a 	and	r8,r7,r8
    b100:	3804d53a 	srli	r2,r7,20
    b104:	3014d77a 	srli	r10,r6,29
    b108:	dc000015 	stw	r16,0(sp)
    b10c:	481290fa 	slli	r9,r9,3
    b110:	2820d53a 	srli	r16,r5,20
    b114:	401090fa 	slli	r8,r8,3
    b118:	200ad77a 	srli	r5,r4,29
    b11c:	380ed7fa 	srli	r7,r7,31
    b120:	dc800215 	stw	r18,8(sp)
    b124:	dc400115 	stw	r17,4(sp)
    b128:	dfc00415 	stw	ra,16(sp)
    b12c:	dcc00315 	stw	r19,12(sp)
    b130:	1c803fcc 	andi	r18,r3,255
    b134:	8401ffcc 	andi	r16,r16,2047
    b138:	494ab03a 	or	r5,r9,r5
    b13c:	202290fa 	slli	r17,r4,3
    b140:	1081ffcc 	andi	r2,r2,2047
    b144:	4290b03a 	or	r8,r8,r10
    b148:	300c90fa 	slli	r6,r6,3
    b14c:	91c07026 	beq	r18,r7,b310 <__adddf3+0x228>
    b150:	8087c83a 	sub	r3,r16,r2
    b154:	00c0b30e 	bge	zero,r3,b424 <__adddf3+0x33c>
    b158:	10002a1e 	bne	r2,zero,b204 <__adddf3+0x11c>
    b15c:	4184b03a 	or	r2,r8,r6
    b160:	1000991e 	bne	r2,zero,b3c8 <__adddf3+0x2e0>
    b164:	888001cc 	andi	r2,r17,7
    b168:	10005b26 	beq	r2,zero,b2d8 <__adddf3+0x1f0>
    b16c:	88c003cc 	andi	r3,r17,15
    b170:	00800104 	movi	r2,4
    b174:	18805826 	beq	r3,r2,b2d8 <__adddf3+0x1f0>
    b178:	89800104 	addi	r6,r17,4
    b17c:	3463803a 	cmpltu	r17,r6,r17
    b180:	2c4b883a 	add	r5,r5,r17
    b184:	2880202c 	andhi	r2,r5,128
    b188:	9007883a 	mov	r3,r18
    b18c:	3023883a 	mov	r17,r6
    b190:	10005426 	beq	r2,zero,b2e4 <__adddf3+0x1fc>
    b194:	84000044 	addi	r16,r16,1
    b198:	0081ffc4 	movi	r2,2047
    b19c:	8080c126 	beq	r16,r2,b4a4 <__adddf3+0x3bc>
    b1a0:	013fe034 	movhi	r4,65408
    b1a4:	213fffc4 	addi	r4,r4,-1
    b1a8:	290a703a 	and	r5,r5,r4
    b1ac:	2804977a 	slli	r2,r5,29
    b1b0:	280a927a 	slli	r5,r5,9
    b1b4:	8822d0fa 	srli	r17,r17,3
    b1b8:	8401ffcc 	andi	r16,r16,2047
    b1bc:	2808d33a 	srli	r4,r5,12
    b1c0:	1444b03a 	or	r2,r2,r17
    b1c4:	8401ffcc 	andi	r16,r16,2047
    b1c8:	800a953a 	slli	r5,r16,20
    b1cc:	18c03fcc 	andi	r3,r3,255
    b1d0:	04000434 	movhi	r16,16
    b1d4:	180697fa 	slli	r3,r3,31
    b1d8:	843fffc4 	addi	r16,r16,-1
    b1dc:	2420703a 	and	r16,r4,r16
    b1e0:	8160b03a 	or	r16,r16,r5
    b1e4:	80c6b03a 	or	r3,r16,r3
    b1e8:	dfc00417 	ldw	ra,16(sp)
    b1ec:	dcc00317 	ldw	r19,12(sp)
    b1f0:	dc800217 	ldw	r18,8(sp)
    b1f4:	dc400117 	ldw	r17,4(sp)
    b1f8:	dc000017 	ldw	r16,0(sp)
    b1fc:	dec00504 	addi	sp,sp,20
    b200:	f800283a 	ret
    b204:	0081ffc4 	movi	r2,2047
    b208:	80bfd626 	beq	r16,r2,b164 <__adddf3+0x7c>
    b20c:	42002034 	orhi	r8,r8,128
    b210:	00800e04 	movi	r2,56
    b214:	10c0a616 	blt	r2,r3,b4b0 <__adddf3+0x3c8>
    b218:	008007c4 	movi	r2,31
    b21c:	10c0c916 	blt	r2,r3,b544 <__adddf3+0x45c>
    b220:	00800804 	movi	r2,32
    b224:	10c5c83a 	sub	r2,r2,r3
    b228:	408e983a 	sll	r7,r8,r2
    b22c:	30c8d83a 	srl	r4,r6,r3
    b230:	3084983a 	sll	r2,r6,r2
    b234:	40c6d83a 	srl	r3,r8,r3
    b238:	390cb03a 	or	r6,r7,r4
    b23c:	1004c03a 	cmpne	r2,r2,zero
    b240:	308cb03a 	or	r6,r6,r2
    b244:	898dc83a 	sub	r6,r17,r6
    b248:	89a3803a 	cmpltu	r17,r17,r6
    b24c:	28cbc83a 	sub	r5,r5,r3
    b250:	2c4bc83a 	sub	r5,r5,r17
    b254:	3023883a 	mov	r17,r6
    b258:	2880202c 	andhi	r2,r5,128
    b25c:	10006d26 	beq	r2,zero,b414 <__adddf3+0x32c>
    b260:	04c02034 	movhi	r19,128
    b264:	9cffffc4 	addi	r19,r19,-1
    b268:	2ce6703a 	and	r19,r5,r19
    b26c:	98007e26 	beq	r19,zero,b468 <__adddf3+0x380>
    b270:	9809883a 	mov	r4,r19
    b274:	000d6840 	call	d684 <__clzsi2>
    b278:	10fffe04 	addi	r3,r2,-8
    b27c:	010007c4 	movi	r4,31
    b280:	20c07f16 	blt	r4,r3,b480 <__adddf3+0x398>
    b284:	01400a04 	movi	r5,40
    b288:	2885c83a 	sub	r2,r5,r2
    b28c:	888ad83a 	srl	r5,r17,r2
    b290:	98e6983a 	sll	r19,r19,r3
    b294:	88e2983a 	sll	r17,r17,r3
    b298:	2ce6b03a 	or	r19,r5,r19
    b29c:	1c007c16 	blt	r3,r16,b490 <__adddf3+0x3a8>
    b2a0:	1c21c83a 	sub	r16,r3,r16
    b2a4:	81400044 	addi	r5,r16,1
    b2a8:	00c007c4 	movi	r3,31
    b2ac:	19409816 	blt	r3,r5,b510 <__adddf3+0x428>
    b2b0:	1c21c83a 	sub	r16,r3,r16
    b2b4:	8c08983a 	sll	r4,r17,r16
    b2b8:	8946d83a 	srl	r3,r17,r5
    b2bc:	9c20983a 	sll	r16,r19,r16
    b2c0:	2008c03a 	cmpne	r4,r4,zero
    b2c4:	994ad83a 	srl	r5,r19,r5
    b2c8:	1c06b03a 	or	r3,r3,r16
    b2cc:	1922b03a 	or	r17,r3,r4
    b2d0:	0021883a 	mov	r16,zero
    b2d4:	003fa306 	br	b164 <__adddf3+0x7c>
    b2d8:	2880202c 	andhi	r2,r5,128
    b2dc:	9007883a 	mov	r3,r18
    b2e0:	103fac1e 	bne	r2,zero,b194 <__adddf3+0xac>
    b2e4:	2804977a 	slli	r2,r5,29
    b2e8:	8822d0fa 	srli	r17,r17,3
    b2ec:	0101ffc4 	movi	r4,2047
    b2f0:	280ad0fa 	srli	r5,r5,3
    b2f4:	1444b03a 	or	r2,r2,r17
    b2f8:	81002c26 	beq	r16,r4,b3ac <__adddf3+0x2c4>
    b2fc:	8120703a 	and	r16,r16,r4
    b300:	01000434 	movhi	r4,16
    b304:	213fffc4 	addi	r4,r4,-1
    b308:	2908703a 	and	r4,r5,r4
    b30c:	003fad06 	br	b1c4 <__adddf3+0xdc>
    b310:	8089c83a 	sub	r4,r16,r2
    b314:	01006a0e 	bge	zero,r4,b4c0 <__adddf3+0x3d8>
    b318:	10003326 	beq	r2,zero,b3e8 <__adddf3+0x300>
    b31c:	0081ffc4 	movi	r2,2047
    b320:	80bf9026 	beq	r16,r2,b164 <__adddf3+0x7c>
    b324:	42002034 	orhi	r8,r8,128
    b328:	00800e04 	movi	r2,56
    b32c:	1100b116 	blt	r2,r4,b5f4 <__adddf3+0x50c>
    b330:	008007c4 	movi	r2,31
    b334:	1100e216 	blt	r2,r4,b6c0 <__adddf3+0x5d8>
    b338:	00800804 	movi	r2,32
    b33c:	1105c83a 	sub	r2,r2,r4
    b340:	4092983a 	sll	r9,r8,r2
    b344:	310ed83a 	srl	r7,r6,r4
    b348:	3084983a 	sll	r2,r6,r2
    b34c:	4110d83a 	srl	r8,r8,r4
    b350:	49ccb03a 	or	r6,r9,r7
    b354:	1004c03a 	cmpne	r2,r2,zero
    b358:	308cb03a 	or	r6,r6,r2
    b35c:	344d883a 	add	r6,r6,r17
    b360:	3463803a 	cmpltu	r17,r6,r17
    b364:	414b883a 	add	r5,r8,r5
    b368:	2c4b883a 	add	r5,r5,r17
    b36c:	3023883a 	mov	r17,r6
    b370:	2880202c 	andhi	r2,r5,128
    b374:	10002726 	beq	r2,zero,b414 <__adddf3+0x32c>
    b378:	84000044 	addi	r16,r16,1
    b37c:	0081ffc4 	movi	r2,2047
    b380:	8080ae26 	beq	r16,r2,b63c <__adddf3+0x554>
    b384:	00bfe034 	movhi	r2,65408
    b388:	10bfffc4 	addi	r2,r2,-1
    b38c:	288a703a 	and	r5,r5,r2
    b390:	880cd07a 	srli	r6,r17,1
    b394:	280897fa 	slli	r4,r5,31
    b398:	88c0004c 	andi	r3,r17,1
    b39c:	30e2b03a 	or	r17,r6,r3
    b3a0:	280ad07a 	srli	r5,r5,1
    b3a4:	8922b03a 	or	r17,r17,r4
    b3a8:	003f6e06 	br	b164 <__adddf3+0x7c>
    b3ac:	1148b03a 	or	r4,r2,r5
    b3b0:	20003c26 	beq	r4,zero,b4a4 <__adddf3+0x3bc>
    b3b4:	29000234 	orhi	r4,r5,8
    b3b8:	01400434 	movhi	r5,16
    b3bc:	297fffc4 	addi	r5,r5,-1
    b3c0:	2148703a 	and	r4,r4,r5
    b3c4:	003f7f06 	br	b1c4 <__adddf3+0xdc>
    b3c8:	18ffffc4 	addi	r3,r3,-1
    b3cc:	18004d1e 	bne	r3,zero,b504 <__adddf3+0x41c>
    b3d0:	898dc83a 	sub	r6,r17,r6
    b3d4:	89a3803a 	cmpltu	r17,r17,r6
    b3d8:	2a0bc83a 	sub	r5,r5,r8
    b3dc:	2c4bc83a 	sub	r5,r5,r17
    b3e0:	3023883a 	mov	r17,r6
    b3e4:	003f9c06 	br	b258 <__adddf3+0x170>
    b3e8:	4184b03a 	or	r2,r8,r6
    b3ec:	103f5d26 	beq	r2,zero,b164 <__adddf3+0x7c>
    b3f0:	213fffc4 	addi	r4,r4,-1
    b3f4:	203fd926 	beq	r4,zero,b35c <__adddf3+0x274>
    b3f8:	0081ffc4 	movi	r2,2047
    b3fc:	80bfca1e 	bne	r16,r2,b328 <__adddf3+0x240>
    b400:	003f5806 	br	b164 <__adddf3+0x7c>
    b404:	10c8b03a 	or	r4,r2,r3
    b408:	20008b26 	beq	r4,zero,b638 <__adddf3+0x550>
    b40c:	100b883a 	mov	r5,r2
    b410:	1823883a 	mov	r17,r3
    b414:	888001cc 	andi	r2,r17,7
    b418:	103f541e 	bne	r2,zero,b16c <__adddf3+0x84>
    b41c:	9007883a 	mov	r3,r18
    b420:	003fb006 	br	b2e4 <__adddf3+0x1fc>
    b424:	1800531e 	bne	r3,zero,b574 <__adddf3+0x48c>
    b428:	80800044 	addi	r2,r16,1
    b42c:	1081ffcc 	andi	r2,r2,2047
    b430:	00c00044 	movi	r3,1
    b434:	1880990e 	bge	r3,r2,b69c <__adddf3+0x5b4>
    b438:	8985c83a 	sub	r2,r17,r6
    b43c:	8887803a 	cmpltu	r3,r17,r2
    b440:	2a27c83a 	sub	r19,r5,r8
    b444:	98e7c83a 	sub	r19,r19,r3
    b448:	98c0202c 	andhi	r3,r19,128
    b44c:	18006226 	beq	r3,zero,b5d8 <__adddf3+0x4f0>
    b450:	3463c83a 	sub	r17,r6,r17
    b454:	4151c83a 	sub	r8,r8,r5
    b458:	344d803a 	cmpltu	r6,r6,r17
    b45c:	41a7c83a 	sub	r19,r8,r6
    b460:	3825883a 	mov	r18,r7
    b464:	983f821e 	bne	r19,zero,b270 <__adddf3+0x188>
    b468:	8809883a 	mov	r4,r17
    b46c:	000d6840 	call	d684 <__clzsi2>
    b470:	10800804 	addi	r2,r2,32
    b474:	10fffe04 	addi	r3,r2,-8
    b478:	010007c4 	movi	r4,31
    b47c:	20ff810e 	bge	r4,r3,b284 <__adddf3+0x19c>
    b480:	14fff604 	addi	r19,r2,-40
    b484:	8ce6983a 	sll	r19,r17,r19
    b488:	0023883a 	mov	r17,zero
    b48c:	1c3f840e 	bge	r3,r16,b2a0 <__adddf3+0x1b8>
    b490:	017fe034 	movhi	r5,65408
    b494:	297fffc4 	addi	r5,r5,-1
    b498:	80e1c83a 	sub	r16,r16,r3
    b49c:	994a703a 	and	r5,r19,r5
    b4a0:	003f3006 	br	b164 <__adddf3+0x7c>
    b4a4:	0009883a 	mov	r4,zero
    b4a8:	0005883a 	mov	r2,zero
    b4ac:	003f4506 	br	b1c4 <__adddf3+0xdc>
    b4b0:	418cb03a 	or	r6,r8,r6
    b4b4:	300cc03a 	cmpne	r6,r6,zero
    b4b8:	0007883a 	mov	r3,zero
    b4bc:	003f6106 	br	b244 <__adddf3+0x15c>
    b4c0:	2000921e 	bne	r4,zero,b70c <__adddf3+0x624>
    b4c4:	80800044 	addi	r2,r16,1
    b4c8:	11c1ffcc 	andi	r7,r2,2047
    b4cc:	01000044 	movi	r4,1
    b4d0:	21c0610e 	bge	r4,r7,b658 <__adddf3+0x570>
    b4d4:	0101ffc4 	movi	r4,2047
    b4d8:	1100a326 	beq	r2,r4,b768 <__adddf3+0x680>
    b4dc:	344d883a 	add	r6,r6,r17
    b4e0:	3463803a 	cmpltu	r17,r6,r17
    b4e4:	414b883a 	add	r5,r8,r5
    b4e8:	2c4b883a 	add	r5,r5,r17
    b4ec:	282297fa 	slli	r17,r5,31
    b4f0:	300cd07a 	srli	r6,r6,1
    b4f4:	280ad07a 	srli	r5,r5,1
    b4f8:	1021883a 	mov	r16,r2
    b4fc:	89a2b03a 	or	r17,r17,r6
    b500:	003f1806 	br	b164 <__adddf3+0x7c>
    b504:	0081ffc4 	movi	r2,2047
    b508:	80bf411e 	bne	r16,r2,b210 <__adddf3+0x128>
    b50c:	003f1506 	br	b164 <__adddf3+0x7c>
    b510:	80bff844 	addi	r2,r16,-31
    b514:	00c00804 	movi	r3,32
    b518:	9884d83a 	srl	r2,r19,r2
    b51c:	28c04a26 	beq	r5,r3,b648 <__adddf3+0x560>
    b520:	00c00fc4 	movi	r3,63
    b524:	1c21c83a 	sub	r16,r3,r16
    b528:	9c26983a 	sll	r19,r19,r16
    b52c:	9c62b03a 	or	r17,r19,r17
    b530:	8822c03a 	cmpne	r17,r17,zero
    b534:	88a2b03a 	or	r17,r17,r2
    b538:	000b883a 	mov	r5,zero
    b53c:	0021883a 	mov	r16,zero
    b540:	003fb406 	br	b414 <__adddf3+0x32c>
    b544:	18bff804 	addi	r2,r3,-32
    b548:	01000804 	movi	r4,32
    b54c:	4084d83a 	srl	r2,r8,r2
    b550:	19003f26 	beq	r3,r4,b650 <__adddf3+0x568>
    b554:	01001004 	movi	r4,64
    b558:	20c7c83a 	sub	r3,r4,r3
    b55c:	40d0983a 	sll	r8,r8,r3
    b560:	418cb03a 	or	r6,r8,r6
    b564:	300cc03a 	cmpne	r6,r6,zero
    b568:	308cb03a 	or	r6,r6,r2
    b56c:	0007883a 	mov	r3,zero
    b570:	003f3406 	br	b244 <__adddf3+0x15c>
    b574:	80002326 	beq	r16,zero,b604 <__adddf3+0x51c>
    b578:	0101ffc4 	movi	r4,2047
    b57c:	11005e26 	beq	r2,r4,b6f8 <__adddf3+0x610>
    b580:	00c7c83a 	sub	r3,zero,r3
    b584:	29402034 	orhi	r5,r5,128
    b588:	01000e04 	movi	r4,56
    b58c:	20c07216 	blt	r4,r3,b758 <__adddf3+0x670>
    b590:	010007c4 	movi	r4,31
    b594:	20c0ce16 	blt	r4,r3,b8d0 <__adddf3+0x7e8>
    b598:	01000804 	movi	r4,32
    b59c:	20c9c83a 	sub	r4,r4,r3
    b5a0:	2914983a 	sll	r10,r5,r4
    b5a4:	88d2d83a 	srl	r9,r17,r3
    b5a8:	8908983a 	sll	r4,r17,r4
    b5ac:	28c6d83a 	srl	r3,r5,r3
    b5b0:	5262b03a 	or	r17,r10,r9
    b5b4:	2008c03a 	cmpne	r4,r4,zero
    b5b8:	8922b03a 	or	r17,r17,r4
    b5bc:	3463c83a 	sub	r17,r6,r17
    b5c0:	40c7c83a 	sub	r3,r8,r3
    b5c4:	344d803a 	cmpltu	r6,r6,r17
    b5c8:	198bc83a 	sub	r5,r3,r6
    b5cc:	1021883a 	mov	r16,r2
    b5d0:	3825883a 	mov	r18,r7
    b5d4:	003f2006 	br	b258 <__adddf3+0x170>
    b5d8:	9886b03a 	or	r3,r19,r2
    b5dc:	1800141e 	bne	r3,zero,b630 <__adddf3+0x548>
    b5e0:	0007883a 	mov	r3,zero
    b5e4:	000b883a 	mov	r5,zero
    b5e8:	0023883a 	mov	r17,zero
    b5ec:	0021883a 	mov	r16,zero
    b5f0:	003f3c06 	br	b2e4 <__adddf3+0x1fc>
    b5f4:	418cb03a 	or	r6,r8,r6
    b5f8:	300cc03a 	cmpne	r6,r6,zero
    b5fc:	0011883a 	mov	r8,zero
    b600:	003f5606 	br	b35c <__adddf3+0x274>
    b604:	2c48b03a 	or	r4,r5,r17
    b608:	20003b26 	beq	r4,zero,b6f8 <__adddf3+0x610>
    b60c:	00c6303a 	nor	r3,zero,r3
    b610:	1800371e 	bne	r3,zero,b6f0 <__adddf3+0x608>
    b614:	3463c83a 	sub	r17,r6,r17
    b618:	414bc83a 	sub	r5,r8,r5
    b61c:	344d803a 	cmpltu	r6,r6,r17
    b620:	298bc83a 	sub	r5,r5,r6
    b624:	1021883a 	mov	r16,r2
    b628:	3825883a 	mov	r18,r7
    b62c:	003f0a06 	br	b258 <__adddf3+0x170>
    b630:	1023883a 	mov	r17,r2
    b634:	003f0d06 	br	b26c <__adddf3+0x184>
    b638:	0007883a 	mov	r3,zero
    b63c:	000b883a 	mov	r5,zero
    b640:	0023883a 	mov	r17,zero
    b644:	003f2706 	br	b2e4 <__adddf3+0x1fc>
    b648:	0027883a 	mov	r19,zero
    b64c:	003fb706 	br	b52c <__adddf3+0x444>
    b650:	0011883a 	mov	r8,zero
    b654:	003fc206 	br	b560 <__adddf3+0x478>
    b658:	2c44b03a 	or	r2,r5,r17
    b65c:	8000871e 	bne	r16,zero,b87c <__adddf3+0x794>
    b660:	1000b126 	beq	r2,zero,b928 <__adddf3+0x840>
    b664:	4184b03a 	or	r2,r8,r6
    b668:	103ebe26 	beq	r2,zero,b164 <__adddf3+0x7c>
    b66c:	3445883a 	add	r2,r6,r17
    b670:	1463803a 	cmpltu	r17,r2,r17
    b674:	414b883a 	add	r5,r8,r5
    b678:	2c4b883a 	add	r5,r5,r17
    b67c:	28c0202c 	andhi	r3,r5,128
    b680:	1023883a 	mov	r17,r2
    b684:	183f6326 	beq	r3,zero,b414 <__adddf3+0x32c>
    b688:	00bfe034 	movhi	r2,65408
    b68c:	10bfffc4 	addi	r2,r2,-1
    b690:	2021883a 	mov	r16,r4
    b694:	288a703a 	and	r5,r5,r2
    b698:	003eb206 	br	b164 <__adddf3+0x7c>
    b69c:	2c44b03a 	or	r2,r5,r17
    b6a0:	8000251e 	bne	r16,zero,b738 <__adddf3+0x650>
    b6a4:	10004b1e 	bne	r2,zero,b7d4 <__adddf3+0x6ec>
    b6a8:	4184b03a 	or	r2,r8,r6
    b6ac:	103fe226 	beq	r2,zero,b638 <__adddf3+0x550>
    b6b0:	400b883a 	mov	r5,r8
    b6b4:	3023883a 	mov	r17,r6
    b6b8:	3825883a 	mov	r18,r7
    b6bc:	003ea906 	br	b164 <__adddf3+0x7c>
    b6c0:	20bff804 	addi	r2,r4,-32
    b6c4:	01c00804 	movi	r7,32
    b6c8:	4084d83a 	srl	r2,r8,r2
    b6cc:	21c07e26 	beq	r4,r7,b8c8 <__adddf3+0x7e0>
    b6d0:	01c01004 	movi	r7,64
    b6d4:	3909c83a 	sub	r4,r7,r4
    b6d8:	4110983a 	sll	r8,r8,r4
    b6dc:	418cb03a 	or	r6,r8,r6
    b6e0:	300cc03a 	cmpne	r6,r6,zero
    b6e4:	308cb03a 	or	r6,r6,r2
    b6e8:	0011883a 	mov	r8,zero
    b6ec:	003f1b06 	br	b35c <__adddf3+0x274>
    b6f0:	0101ffc4 	movi	r4,2047
    b6f4:	113fa41e 	bne	r2,r4,b588 <__adddf3+0x4a0>
    b6f8:	400b883a 	mov	r5,r8
    b6fc:	3023883a 	mov	r17,r6
    b700:	1021883a 	mov	r16,r2
    b704:	3825883a 	mov	r18,r7
    b708:	003e9606 	br	b164 <__adddf3+0x7c>
    b70c:	80001a1e 	bne	r16,zero,b778 <__adddf3+0x690>
    b710:	2c4eb03a 	or	r7,r5,r17
    b714:	38005526 	beq	r7,zero,b86c <__adddf3+0x784>
    b718:	0108303a 	nor	r4,zero,r4
    b71c:	2000511e 	bne	r4,zero,b864 <__adddf3+0x77c>
    b720:	89a3883a 	add	r17,r17,r6
    b724:	414b883a 	add	r5,r8,r5
    b728:	898d803a 	cmpltu	r6,r17,r6
    b72c:	298b883a 	add	r5,r5,r6
    b730:	1021883a 	mov	r16,r2
    b734:	003f0e06 	br	b370 <__adddf3+0x288>
    b738:	1000341e 	bne	r2,zero,b80c <__adddf3+0x724>
    b73c:	4184b03a 	or	r2,r8,r6
    b740:	10006f26 	beq	r2,zero,b900 <__adddf3+0x818>
    b744:	400b883a 	mov	r5,r8
    b748:	3023883a 	mov	r17,r6
    b74c:	3825883a 	mov	r18,r7
    b750:	0401ffc4 	movi	r16,2047
    b754:	003e8306 	br	b164 <__adddf3+0x7c>
    b758:	2c62b03a 	or	r17,r5,r17
    b75c:	8822c03a 	cmpne	r17,r17,zero
    b760:	0007883a 	mov	r3,zero
    b764:	003f9506 	br	b5bc <__adddf3+0x4d4>
    b768:	1021883a 	mov	r16,r2
    b76c:	000b883a 	mov	r5,zero
    b770:	0023883a 	mov	r17,zero
    b774:	003edb06 	br	b2e4 <__adddf3+0x1fc>
    b778:	01c1ffc4 	movi	r7,2047
    b77c:	11c03b26 	beq	r2,r7,b86c <__adddf3+0x784>
    b780:	0109c83a 	sub	r4,zero,r4
    b784:	29402034 	orhi	r5,r5,128
    b788:	01c00e04 	movi	r7,56
    b78c:	39006216 	blt	r7,r4,b918 <__adddf3+0x830>
    b790:	01c007c4 	movi	r7,31
    b794:	39006b16 	blt	r7,r4,b944 <__adddf3+0x85c>
    b798:	01c00804 	movi	r7,32
    b79c:	390fc83a 	sub	r7,r7,r4
    b7a0:	29d4983a 	sll	r10,r5,r7
    b7a4:	8912d83a 	srl	r9,r17,r4
    b7a8:	89ce983a 	sll	r7,r17,r7
    b7ac:	2908d83a 	srl	r4,r5,r4
    b7b0:	5262b03a 	or	r17,r10,r9
    b7b4:	380ac03a 	cmpne	r5,r7,zero
    b7b8:	8962b03a 	or	r17,r17,r5
    b7bc:	89a3883a 	add	r17,r17,r6
    b7c0:	2211883a 	add	r8,r4,r8
    b7c4:	898d803a 	cmpltu	r6,r17,r6
    b7c8:	418b883a 	add	r5,r8,r6
    b7cc:	1021883a 	mov	r16,r2
    b7d0:	003ee706 	br	b370 <__adddf3+0x288>
    b7d4:	4184b03a 	or	r2,r8,r6
    b7d8:	103e6226 	beq	r2,zero,b164 <__adddf3+0x7c>
    b7dc:	8987c83a 	sub	r3,r17,r6
    b7e0:	88c9803a 	cmpltu	r4,r17,r3
    b7e4:	2a05c83a 	sub	r2,r5,r8
    b7e8:	1105c83a 	sub	r2,r2,r4
    b7ec:	1100202c 	andhi	r4,r2,128
    b7f0:	203f0426 	beq	r4,zero,b404 <__adddf3+0x31c>
    b7f4:	3463c83a 	sub	r17,r6,r17
    b7f8:	414bc83a 	sub	r5,r8,r5
    b7fc:	344d803a 	cmpltu	r6,r6,r17
    b800:	298bc83a 	sub	r5,r5,r6
    b804:	3825883a 	mov	r18,r7
    b808:	003e5606 	br	b164 <__adddf3+0x7c>
    b80c:	4184b03a 	or	r2,r8,r6
    b810:	10002b26 	beq	r2,zero,b8c0 <__adddf3+0x7d8>
    b814:	2804d0fa 	srli	r2,r5,3
    b818:	8822d0fa 	srli	r17,r17,3
    b81c:	280a977a 	slli	r5,r5,29
    b820:	10c0022c 	andhi	r3,r2,8
    b824:	2c62b03a 	or	r17,r5,r17
    b828:	18000826 	beq	r3,zero,b84c <__adddf3+0x764>
    b82c:	4008d0fa 	srli	r4,r8,3
    b830:	20c0022c 	andhi	r3,r4,8
    b834:	1800051e 	bne	r3,zero,b84c <__adddf3+0x764>
    b838:	300cd0fa 	srli	r6,r6,3
    b83c:	4010977a 	slli	r8,r8,29
    b840:	2005883a 	mov	r2,r4
    b844:	3825883a 	mov	r18,r7
    b848:	41a2b03a 	or	r17,r8,r6
    b84c:	880ad77a 	srli	r5,r17,29
    b850:	100490fa 	slli	r2,r2,3
    b854:	882290fa 	slli	r17,r17,3
    b858:	0401ffc4 	movi	r16,2047
    b85c:	288ab03a 	or	r5,r5,r2
    b860:	003e4006 	br	b164 <__adddf3+0x7c>
    b864:	01c1ffc4 	movi	r7,2047
    b868:	11ffc71e 	bne	r2,r7,b788 <__adddf3+0x6a0>
    b86c:	400b883a 	mov	r5,r8
    b870:	3023883a 	mov	r17,r6
    b874:	1021883a 	mov	r16,r2
    b878:	003e3a06 	br	b164 <__adddf3+0x7c>
    b87c:	10002d26 	beq	r2,zero,b934 <__adddf3+0x84c>
    b880:	4184b03a 	or	r2,r8,r6
    b884:	10000e26 	beq	r2,zero,b8c0 <__adddf3+0x7d8>
    b888:	2804d0fa 	srli	r2,r5,3
    b88c:	8822d0fa 	srli	r17,r17,3
    b890:	280a977a 	slli	r5,r5,29
    b894:	10c0022c 	andhi	r3,r2,8
    b898:	2c62b03a 	or	r17,r5,r17
    b89c:	183feb26 	beq	r3,zero,b84c <__adddf3+0x764>
    b8a0:	4008d0fa 	srli	r4,r8,3
    b8a4:	20c0022c 	andhi	r3,r4,8
    b8a8:	183fe81e 	bne	r3,zero,b84c <__adddf3+0x764>
    b8ac:	300cd0fa 	srli	r6,r6,3
    b8b0:	4010977a 	slli	r8,r8,29
    b8b4:	2005883a 	mov	r2,r4
    b8b8:	41a2b03a 	or	r17,r8,r6
    b8bc:	003fe306 	br	b84c <__adddf3+0x764>
    b8c0:	0401ffc4 	movi	r16,2047
    b8c4:	003e2706 	br	b164 <__adddf3+0x7c>
    b8c8:	0011883a 	mov	r8,zero
    b8cc:	003f8306 	br	b6dc <__adddf3+0x5f4>
    b8d0:	193ff804 	addi	r4,r3,-32
    b8d4:	02400804 	movi	r9,32
    b8d8:	2908d83a 	srl	r4,r5,r4
    b8dc:	1a402526 	beq	r3,r9,b974 <__adddf3+0x88c>
    b8e0:	02401004 	movi	r9,64
    b8e4:	48c7c83a 	sub	r3,r9,r3
    b8e8:	28ca983a 	sll	r5,r5,r3
    b8ec:	2c62b03a 	or	r17,r5,r17
    b8f0:	8822c03a 	cmpne	r17,r17,zero
    b8f4:	8922b03a 	or	r17,r17,r4
    b8f8:	0007883a 	mov	r3,zero
    b8fc:	003f2f06 	br	b5bc <__adddf3+0x4d4>
    b900:	01402034 	movhi	r5,128
    b904:	0007883a 	mov	r3,zero
    b908:	297fffc4 	addi	r5,r5,-1
    b90c:	047ffe04 	movi	r17,-8
    b910:	0401ffc4 	movi	r16,2047
    b914:	003e7306 	br	b2e4 <__adddf3+0x1fc>
    b918:	2c62b03a 	or	r17,r5,r17
    b91c:	8822c03a 	cmpne	r17,r17,zero
    b920:	0009883a 	mov	r4,zero
    b924:	003fa506 	br	b7bc <__adddf3+0x6d4>
    b928:	400b883a 	mov	r5,r8
    b92c:	3023883a 	mov	r17,r6
    b930:	003e0c06 	br	b164 <__adddf3+0x7c>
    b934:	400b883a 	mov	r5,r8
    b938:	3023883a 	mov	r17,r6
    b93c:	0401ffc4 	movi	r16,2047
    b940:	003e0806 	br	b164 <__adddf3+0x7c>
    b944:	21fff804 	addi	r7,r4,-32
    b948:	02400804 	movi	r9,32
    b94c:	29ced83a 	srl	r7,r5,r7
    b950:	22400a26 	beq	r4,r9,b97c <__adddf3+0x894>
    b954:	02401004 	movi	r9,64
    b958:	4909c83a 	sub	r4,r9,r4
    b95c:	290a983a 	sll	r5,r5,r4
    b960:	2c62b03a 	or	r17,r5,r17
    b964:	8822c03a 	cmpne	r17,r17,zero
    b968:	89e2b03a 	or	r17,r17,r7
    b96c:	0009883a 	mov	r4,zero
    b970:	003f9206 	br	b7bc <__adddf3+0x6d4>
    b974:	000b883a 	mov	r5,zero
    b978:	003fdc06 	br	b8ec <__adddf3+0x804>
    b97c:	000b883a 	mov	r5,zero
    b980:	003ff706 	br	b960 <__adddf3+0x878>

0000b984 <__divdf3>:
    b984:	defff204 	addi	sp,sp,-56
    b988:	dd000815 	stw	r20,32(sp)
    b98c:	2828d53a 	srli	r20,r5,20
    b990:	dd800a15 	stw	r22,40(sp)
    b994:	282cd7fa 	srli	r22,r5,31
    b998:	dc000415 	stw	r16,16(sp)
    b99c:	04000434 	movhi	r16,16
    b9a0:	df000c15 	stw	fp,48(sp)
    b9a4:	dcc00715 	stw	r19,28(sp)
    b9a8:	dc800615 	stw	r18,24(sp)
    b9ac:	dc400515 	stw	r17,20(sp)
    b9b0:	843fffc4 	addi	r16,r16,-1
    b9b4:	dfc00d15 	stw	ra,52(sp)
    b9b8:	ddc00b15 	stw	r23,44(sp)
    b9bc:	dd400915 	stw	r21,36(sp)
    b9c0:	a501ffcc 	andi	r20,r20,2047
    b9c4:	2025883a 	mov	r18,r4
    b9c8:	2027883a 	mov	r19,r4
    b9cc:	2c22703a 	and	r17,r5,r16
    b9d0:	b7003fcc 	andi	fp,r22,255
    b9d4:	a0005e26 	beq	r20,zero,bb50 <__divdf3+0x1cc>
    b9d8:	0081ffc4 	movi	r2,2047
    b9dc:	a0803526 	beq	r20,r2,bab4 <__divdf3+0x130>
    b9e0:	8c000434 	orhi	r16,r17,16
    b9e4:	2004d77a 	srli	r2,r4,29
    b9e8:	802090fa 	slli	r16,r16,3
    b9ec:	202690fa 	slli	r19,r4,3
    b9f0:	a53f0044 	addi	r20,r20,-1023
    b9f4:	80a2b03a 	or	r17,r16,r2
    b9f8:	0025883a 	mov	r18,zero
    b9fc:	0011883a 	mov	r8,zero
    ba00:	380ad53a 	srli	r5,r7,20
    ba04:	382ed7fa 	srli	r23,r7,31
    ba08:	04000434 	movhi	r16,16
    ba0c:	843fffc4 	addi	r16,r16,-1
    ba10:	2941ffcc 	andi	r5,r5,2047
    ba14:	302b883a 	mov	r21,r6
    ba18:	3c20703a 	and	r16,r7,r16
    ba1c:	ba403fcc 	andi	r9,r23,255
    ba20:	28006726 	beq	r5,zero,bbc0 <__divdf3+0x23c>
    ba24:	0081ffc4 	movi	r2,2047
    ba28:	28805f26 	beq	r5,r2,bba8 <__divdf3+0x224>
    ba2c:	84000434 	orhi	r16,r16,16
    ba30:	3004d77a 	srli	r2,r6,29
    ba34:	802090fa 	slli	r16,r16,3
    ba38:	302a90fa 	slli	r21,r6,3
    ba3c:	297f0044 	addi	r5,r5,-1023
    ba40:	80a0b03a 	or	r16,r16,r2
    ba44:	000f883a 	mov	r7,zero
    ba48:	3c86b03a 	or	r3,r7,r18
    ba4c:	180690ba 	slli	r3,r3,2
    ba50:	00800074 	movhi	r2,1
    ba54:	10ae9d04 	addi	r2,r2,-17804
    ba58:	1887883a 	add	r3,r3,r2
    ba5c:	18c00017 	ldw	r3,0(r3)
    ba60:	b5c8f03a 	xor	r4,r22,r23
    ba64:	200d883a 	mov	r6,r4
    ba68:	24803fcc 	andi	r18,r4,255
    ba6c:	a169c83a 	sub	r20,r20,r5
    ba70:	1800683a 	jmp	r3
    ba74:	0000bcbc 	xorhi	zero,zero,754
    ba78:	0000baec 	andhi	zero,zero,747
    ba7c:	0000bc80 	call	bc8 <i2c_configure+0x18>
    ba80:	0000bad0 	cmplti	zero,zero,747
    ba84:	0000bc80 	call	bc8 <i2c_configure+0x18>
    ba88:	0000bc54 	movui	zero,753
    ba8c:	0000bc80 	call	bc8 <i2c_configure+0x18>
    ba90:	0000bad0 	cmplti	zero,zero,747
    ba94:	0000baec 	andhi	zero,zero,747
    ba98:	0000baec 	andhi	zero,zero,747
    ba9c:	0000bc54 	movui	zero,753
    baa0:	0000bad0 	cmplti	zero,zero,747
    baa4:	0000bae0 	cmpeqi	zero,zero,747
    baa8:	0000bae0 	cmpeqi	zero,zero,747
    baac:	0000bae0 	cmpeqi	zero,zero,747
    bab0:	0000bc90 	cmplti	zero,zero,754
    bab4:	8904b03a 	or	r2,r17,r4
    bab8:	1000631e 	bne	r2,zero,bc48 <__divdf3+0x2c4>
    babc:	04800204 	movi	r18,8
    bac0:	0023883a 	mov	r17,zero
    bac4:	0027883a 	mov	r19,zero
    bac8:	02000084 	movi	r8,2
    bacc:	003fcc06 	br	ba00 <__divdf3+0x7c>
    bad0:	8023883a 	mov	r17,r16
    bad4:	a827883a 	mov	r19,r21
    bad8:	4839883a 	mov	fp,r9
    badc:	3811883a 	mov	r8,r7
    bae0:	00800084 	movi	r2,2
    bae4:	40812a1e 	bne	r8,r2,bf90 <__divdf3+0x60c>
    bae8:	e025883a 	mov	r18,fp
    baec:	9180004c 	andi	r6,r18,1
    baf0:	0101ffc4 	movi	r4,2047
    baf4:	000b883a 	mov	r5,zero
    baf8:	0027883a 	mov	r19,zero
    bafc:	2008953a 	slli	r4,r4,20
    bb00:	30c03fcc 	andi	r3,r6,255
    bb04:	04000434 	movhi	r16,16
    bb08:	180697fa 	slli	r3,r3,31
    bb0c:	843fffc4 	addi	r16,r16,-1
    bb10:	2c20703a 	and	r16,r5,r16
    bb14:	8120b03a 	or	r16,r16,r4
    bb18:	80c6b03a 	or	r3,r16,r3
    bb1c:	9805883a 	mov	r2,r19
    bb20:	dfc00d17 	ldw	ra,52(sp)
    bb24:	df000c17 	ldw	fp,48(sp)
    bb28:	ddc00b17 	ldw	r23,44(sp)
    bb2c:	dd800a17 	ldw	r22,40(sp)
    bb30:	dd400917 	ldw	r21,36(sp)
    bb34:	dd000817 	ldw	r20,32(sp)
    bb38:	dcc00717 	ldw	r19,28(sp)
    bb3c:	dc800617 	ldw	r18,24(sp)
    bb40:	dc400517 	ldw	r17,20(sp)
    bb44:	dc000417 	ldw	r16,16(sp)
    bb48:	dec00e04 	addi	sp,sp,56
    bb4c:	f800283a 	ret
    bb50:	8904b03a 	or	r2,r17,r4
    bb54:	10003726 	beq	r2,zero,bc34 <__divdf3+0x2b0>
    bb58:	88011c26 	beq	r17,zero,bfcc <__divdf3+0x648>
    bb5c:	8809883a 	mov	r4,r17
    bb60:	d9800315 	stw	r6,12(sp)
    bb64:	d9c00115 	stw	r7,4(sp)
    bb68:	000d6840 	call	d684 <__clzsi2>
    bb6c:	d9800317 	ldw	r6,12(sp)
    bb70:	d9c00117 	ldw	r7,4(sp)
    bb74:	1007883a 	mov	r3,r2
    bb78:	01000a04 	movi	r4,40
    bb7c:	1cfffe04 	addi	r19,r3,-8
    bb80:	20c9c83a 	sub	r4,r4,r3
    bb84:	8cca983a 	sll	r5,r17,r19
    bb88:	9108d83a 	srl	r4,r18,r4
    bb8c:	94e6983a 	sll	r19,r18,r19
    bb90:	2162b03a 	or	r17,r4,r5
    bb94:	053f0344 	movi	r20,-1011
    bb98:	a0e9c83a 	sub	r20,r20,r3
    bb9c:	0025883a 	mov	r18,zero
    bba0:	0011883a 	mov	r8,zero
    bba4:	003f9606 	br	ba00 <__divdf3+0x7c>
    bba8:	8184b03a 	or	r2,r16,r6
    bbac:	10001f1e 	bne	r2,zero,bc2c <__divdf3+0x2a8>
    bbb0:	0021883a 	mov	r16,zero
    bbb4:	002b883a 	mov	r21,zero
    bbb8:	01c00084 	movi	r7,2
    bbbc:	003fa206 	br	ba48 <__divdf3+0xc4>
    bbc0:	8184b03a 	or	r2,r16,r6
    bbc4:	10001526 	beq	r2,zero,bc1c <__divdf3+0x298>
    bbc8:	80010c26 	beq	r16,zero,bffc <__divdf3+0x678>
    bbcc:	8009883a 	mov	r4,r16
    bbd0:	d9800315 	stw	r6,12(sp)
    bbd4:	da000215 	stw	r8,8(sp)
    bbd8:	da400015 	stw	r9,0(sp)
    bbdc:	000d6840 	call	d684 <__clzsi2>
    bbe0:	d9800317 	ldw	r6,12(sp)
    bbe4:	da000217 	ldw	r8,8(sp)
    bbe8:	da400017 	ldw	r9,0(sp)
    bbec:	1007883a 	mov	r3,r2
    bbf0:	01000a04 	movi	r4,40
    bbf4:	1d7ffe04 	addi	r21,r3,-8
    bbf8:	20c9c83a 	sub	r4,r4,r3
    bbfc:	8560983a 	sll	r16,r16,r21
    bc00:	3108d83a 	srl	r4,r6,r4
    bc04:	356a983a 	sll	r21,r6,r21
    bc08:	2420b03a 	or	r16,r4,r16
    bc0c:	017f0344 	movi	r5,-1011
    bc10:	28cbc83a 	sub	r5,r5,r3
    bc14:	000f883a 	mov	r7,zero
    bc18:	003f8b06 	br	ba48 <__divdf3+0xc4>
    bc1c:	0021883a 	mov	r16,zero
    bc20:	002b883a 	mov	r21,zero
    bc24:	01c00044 	movi	r7,1
    bc28:	003f8706 	br	ba48 <__divdf3+0xc4>
    bc2c:	01c000c4 	movi	r7,3
    bc30:	003f8506 	br	ba48 <__divdf3+0xc4>
    bc34:	04800104 	movi	r18,4
    bc38:	0023883a 	mov	r17,zero
    bc3c:	0027883a 	mov	r19,zero
    bc40:	02000044 	movi	r8,1
    bc44:	003f6e06 	br	ba00 <__divdf3+0x7c>
    bc48:	04800304 	movi	r18,12
    bc4c:	020000c4 	movi	r8,3
    bc50:	003f6b06 	br	ba00 <__divdf3+0x7c>
    bc54:	01400434 	movhi	r5,16
    bc58:	000d883a 	mov	r6,zero
    bc5c:	297fffc4 	addi	r5,r5,-1
    bc60:	04ffffc4 	movi	r19,-1
    bc64:	0101ffc4 	movi	r4,2047
    bc68:	003fa406 	br	bafc <__divdf3+0x178>
    bc6c:	043f0084 	movi	r16,-1022
    bc70:	8521c83a 	sub	r16,r16,r20
    bc74:	00800e04 	movi	r2,56
    bc78:	1401200e 	bge	r2,r16,c0fc <__divdf3+0x778>
    bc7c:	9180004c 	andi	r6,r18,1
    bc80:	0009883a 	mov	r4,zero
    bc84:	000b883a 	mov	r5,zero
    bc88:	0027883a 	mov	r19,zero
    bc8c:	003f9b06 	br	bafc <__divdf3+0x178>
    bc90:	8880022c 	andhi	r2,r17,8
    bc94:	1000c726 	beq	r2,zero,bfb4 <__divdf3+0x630>
    bc98:	8080022c 	andhi	r2,r16,8
    bc9c:	1000c51e 	bne	r2,zero,bfb4 <__divdf3+0x630>
    bca0:	00800434 	movhi	r2,16
    bca4:	81400234 	orhi	r5,r16,8
    bca8:	10bfffc4 	addi	r2,r2,-1
    bcac:	b80d883a 	mov	r6,r23
    bcb0:	288a703a 	and	r5,r5,r2
    bcb4:	a827883a 	mov	r19,r21
    bcb8:	003fea06 	br	bc64 <__divdf3+0x2e0>
    bcbc:	8440ea36 	bltu	r16,r17,c068 <__divdf3+0x6e4>
    bcc0:	8c00e826 	beq	r17,r16,c064 <__divdf3+0x6e0>
    bcc4:	a53fffc4 	addi	r20,r20,-1
    bcc8:	882d883a 	mov	r22,r17
    bccc:	000d883a 	mov	r6,zero
    bcd0:	a804d63a 	srli	r2,r21,24
    bcd4:	8020923a 	slli	r16,r16,8
    bcd8:	b009883a 	mov	r4,r22
    bcdc:	d9800315 	stw	r6,12(sp)
    bce0:	1420b03a 	or	r16,r2,r16
    bce4:	802ed43a 	srli	r23,r16,16
    bce8:	873fffcc 	andi	fp,r16,65535
    bcec:	a82a923a 	slli	r21,r21,8
    bcf0:	b80b883a 	mov	r5,r23
    bcf4:	00012f80 	call	12f8 <__udivsi3>
    bcf8:	b009883a 	mov	r4,r22
    bcfc:	b80b883a 	mov	r5,r23
    bd00:	1023883a 	mov	r17,r2
    bd04:	00013000 	call	1300 <__umodsi3>
    bd08:	1004943a 	slli	r2,r2,16
    bd0c:	9808d43a 	srli	r4,r19,16
    bd10:	8f2d383a 	mul	r22,r17,fp
    bd14:	d9800317 	ldw	r6,12(sp)
    bd18:	1106b03a 	or	r3,r2,r4
    bd1c:	1d80062e 	bgeu	r3,r22,bd38 <__divdf3+0x3b4>
    bd20:	1c07883a 	add	r3,r3,r16
    bd24:	88bfffc4 	addi	r2,r17,-1
    bd28:	1c00dc36 	bltu	r3,r16,c09c <__divdf3+0x718>
    bd2c:	1d80db2e 	bgeu	r3,r22,c09c <__divdf3+0x718>
    bd30:	8c7fff84 	addi	r17,r17,-2
    bd34:	1c07883a 	add	r3,r3,r16
    bd38:	1dadc83a 	sub	r22,r3,r22
    bd3c:	b009883a 	mov	r4,r22
    bd40:	b80b883a 	mov	r5,r23
    bd44:	d9800315 	stw	r6,12(sp)
    bd48:	00012f80 	call	12f8 <__udivsi3>
    bd4c:	b009883a 	mov	r4,r22
    bd50:	b80b883a 	mov	r5,r23
    bd54:	d8800015 	stw	r2,0(sp)
    bd58:	00013000 	call	1300 <__umodsi3>
    bd5c:	da400017 	ldw	r9,0(sp)
    bd60:	1004943a 	slli	r2,r2,16
    bd64:	9cffffcc 	andi	r19,r19,65535
    bd68:	4f07383a 	mul	r3,r9,fp
    bd6c:	14c8b03a 	or	r4,r2,r19
    bd70:	d9800317 	ldw	r6,12(sp)
    bd74:	20c0062e 	bgeu	r4,r3,bd90 <__divdf3+0x40c>
    bd78:	2409883a 	add	r4,r4,r16
    bd7c:	48bfffc4 	addi	r2,r9,-1
    bd80:	2400c436 	bltu	r4,r16,c094 <__divdf3+0x710>
    bd84:	20c0c32e 	bgeu	r4,r3,c094 <__divdf3+0x710>
    bd88:	4a7fff84 	addi	r9,r9,-2
    bd8c:	2409883a 	add	r4,r4,r16
    bd90:	8822943a 	slli	r17,r17,16
    bd94:	a80ed43a 	srli	r7,r21,16
    bd98:	aa3fffcc 	andi	r8,r21,65535
    bd9c:	4c62b03a 	or	r17,r9,r17
    bda0:	8816d43a 	srli	r11,r17,16
    bda4:	897fffcc 	andi	r5,r17,65535
    bda8:	2a15383a 	mul	r10,r5,r8
    bdac:	5a19383a 	mul	r12,r11,r8
    bdb0:	29cb383a 	mul	r5,r5,r7
    bdb4:	5012d43a 	srli	r9,r10,16
    bdb8:	20c5c83a 	sub	r2,r4,r3
    bdbc:	614b883a 	add	r5,r12,r5
    bdc0:	2a4b883a 	add	r5,r5,r9
    bdc4:	59c7383a 	mul	r3,r11,r7
    bdc8:	2b00022e 	bgeu	r5,r12,bdd4 <__divdf3+0x450>
    bdcc:	01000074 	movhi	r4,1
    bdd0:	1907883a 	add	r3,r3,r4
    bdd4:	2808d43a 	srli	r4,r5,16
    bdd8:	280a943a 	slli	r5,r5,16
    bddc:	54ffffcc 	andi	r19,r10,65535
    bde0:	1907883a 	add	r3,r3,r4
    bde4:	2ccb883a 	add	r5,r5,r19
    bde8:	10c09336 	bltu	r2,r3,c038 <__divdf3+0x6b4>
    bdec:	10c0ad26 	beq	r2,r3,c0a4 <__divdf3+0x720>
    bdf0:	10c7c83a 	sub	r3,r2,r3
    bdf4:	3167c83a 	sub	r19,r6,r5
    bdf8:	34ed803a 	cmpltu	r22,r6,r19
    bdfc:	1dadc83a 	sub	r22,r3,r22
    be00:	b400b226 	beq	r22,r16,c0cc <__divdf3+0x748>
    be04:	b009883a 	mov	r4,r22
    be08:	b80b883a 	mov	r5,r23
    be0c:	d9c00115 	stw	r7,4(sp)
    be10:	da000215 	stw	r8,8(sp)
    be14:	00012f80 	call	12f8 <__udivsi3>
    be18:	b009883a 	mov	r4,r22
    be1c:	b80b883a 	mov	r5,r23
    be20:	d8800315 	stw	r2,12(sp)
    be24:	00013000 	call	1300 <__umodsi3>
    be28:	d9800317 	ldw	r6,12(sp)
    be2c:	1004943a 	slli	r2,r2,16
    be30:	9808d43a 	srli	r4,r19,16
    be34:	372d383a 	mul	r22,r6,fp
    be38:	d9c00117 	ldw	r7,4(sp)
    be3c:	1106b03a 	or	r3,r2,r4
    be40:	da000217 	ldw	r8,8(sp)
    be44:	1d80062e 	bgeu	r3,r22,be60 <__divdf3+0x4dc>
    be48:	1c07883a 	add	r3,r3,r16
    be4c:	30bfffc4 	addi	r2,r6,-1
    be50:	1c00a036 	bltu	r3,r16,c0d4 <__divdf3+0x750>
    be54:	1d809f2e 	bgeu	r3,r22,c0d4 <__divdf3+0x750>
    be58:	31bfff84 	addi	r6,r6,-2
    be5c:	1c07883a 	add	r3,r3,r16
    be60:	1dadc83a 	sub	r22,r3,r22
    be64:	b009883a 	mov	r4,r22
    be68:	b80b883a 	mov	r5,r23
    be6c:	d9800315 	stw	r6,12(sp)
    be70:	d9c00115 	stw	r7,4(sp)
    be74:	da000215 	stw	r8,8(sp)
    be78:	00012f80 	call	12f8 <__udivsi3>
    be7c:	b009883a 	mov	r4,r22
    be80:	b80b883a 	mov	r5,r23
    be84:	d8800015 	stw	r2,0(sp)
    be88:	00013000 	call	1300 <__umodsi3>
    be8c:	da400017 	ldw	r9,0(sp)
    be90:	1004943a 	slli	r2,r2,16
    be94:	993fffcc 	andi	r4,r19,65535
    be98:	4f39383a 	mul	fp,r9,fp
    be9c:	1106b03a 	or	r3,r2,r4
    bea0:	d9800317 	ldw	r6,12(sp)
    bea4:	d9c00117 	ldw	r7,4(sp)
    bea8:	da000217 	ldw	r8,8(sp)
    beac:	1f00062e 	bgeu	r3,fp,bec8 <__divdf3+0x544>
    beb0:	1c07883a 	add	r3,r3,r16
    beb4:	48bfffc4 	addi	r2,r9,-1
    beb8:	1c008836 	bltu	r3,r16,c0dc <__divdf3+0x758>
    bebc:	1f00872e 	bgeu	r3,fp,c0dc <__divdf3+0x758>
    bec0:	4a7fff84 	addi	r9,r9,-2
    bec4:	1c07883a 	add	r3,r3,r16
    bec8:	3008943a 	slli	r4,r6,16
    becc:	1f07c83a 	sub	r3,r3,fp
    bed0:	4926b03a 	or	r19,r9,r4
    bed4:	993fffcc 	andi	r4,r19,65535
    bed8:	980cd43a 	srli	r6,r19,16
    bedc:	220b383a 	mul	r5,r4,r8
    bee0:	21c5383a 	mul	r2,r4,r7
    bee4:	3211383a 	mul	r8,r6,r8
    bee8:	2808d43a 	srli	r4,r5,16
    beec:	31cf383a 	mul	r7,r6,r7
    bef0:	4085883a 	add	r2,r8,r2
    bef4:	1105883a 	add	r2,r2,r4
    bef8:	1200022e 	bgeu	r2,r8,bf04 <__divdf3+0x580>
    befc:	01000074 	movhi	r4,1
    bf00:	390f883a 	add	r7,r7,r4
    bf04:	1008d43a 	srli	r4,r2,16
    bf08:	1004943a 	slli	r2,r2,16
    bf0c:	297fffcc 	andi	r5,r5,65535
    bf10:	390f883a 	add	r7,r7,r4
    bf14:	1145883a 	add	r2,r2,r5
    bf18:	19c06536 	bltu	r3,r7,c0b0 <__divdf3+0x72c>
    bf1c:	19c09f26 	beq	r3,r7,c19c <__divdf3+0x818>
    bf20:	9cc00054 	ori	r19,r19,1
    bf24:	a100ffc4 	addi	r4,r20,1023
    bf28:	013f500e 	bge	zero,r4,bc6c <__divdf3+0x2e8>
    bf2c:	988001cc 	andi	r2,r19,7
    bf30:	10000726 	beq	r2,zero,bf50 <__divdf3+0x5cc>
    bf34:	98c003cc 	andi	r3,r19,15
    bf38:	00800104 	movi	r2,4
    bf3c:	18800426 	beq	r3,r2,bf50 <__divdf3+0x5cc>
    bf40:	9885883a 	add	r2,r19,r2
    bf44:	14e1803a 	cmpltu	r16,r2,r19
    bf48:	8c23883a 	add	r17,r17,r16
    bf4c:	1027883a 	mov	r19,r2
    bf50:	8880402c 	andhi	r2,r17,256
    bf54:	10000426 	beq	r2,zero,bf68 <__divdf3+0x5e4>
    bf58:	00bfc034 	movhi	r2,65280
    bf5c:	10bfffc4 	addi	r2,r2,-1
    bf60:	a1010004 	addi	r4,r20,1024
    bf64:	88a2703a 	and	r17,r17,r2
    bf68:	0081ff84 	movi	r2,2046
    bf6c:	113edf16 	blt	r2,r4,baec <__divdf3+0x168>
    bf70:	9826d0fa 	srli	r19,r19,3
    bf74:	8804977a 	slli	r2,r17,29
    bf78:	8820927a 	slli	r16,r17,9
    bf7c:	2101ffcc 	andi	r4,r4,2047
    bf80:	14e6b03a 	or	r19,r2,r19
    bf84:	800ad33a 	srli	r5,r16,12
    bf88:	9180004c 	andi	r6,r18,1
    bf8c:	003edb06 	br	bafc <__divdf3+0x178>
    bf90:	008000c4 	movi	r2,3
    bf94:	4080a826 	beq	r8,r2,c238 <__divdf3+0x8b4>
    bf98:	00800044 	movi	r2,1
    bf9c:	4080551e 	bne	r8,r2,c0f4 <__divdf3+0x770>
    bfa0:	e00d883a 	mov	r6,fp
    bfa4:	0009883a 	mov	r4,zero
    bfa8:	000b883a 	mov	r5,zero
    bfac:	0027883a 	mov	r19,zero
    bfb0:	003ed206 	br	bafc <__divdf3+0x178>
    bfb4:	00800434 	movhi	r2,16
    bfb8:	89400234 	orhi	r5,r17,8
    bfbc:	10bfffc4 	addi	r2,r2,-1
    bfc0:	b00d883a 	mov	r6,r22
    bfc4:	288a703a 	and	r5,r5,r2
    bfc8:	003f2606 	br	bc64 <__divdf3+0x2e0>
    bfcc:	d9800315 	stw	r6,12(sp)
    bfd0:	d9c00115 	stw	r7,4(sp)
    bfd4:	000d6840 	call	d684 <__clzsi2>
    bfd8:	10c00804 	addi	r3,r2,32
    bfdc:	010009c4 	movi	r4,39
    bfe0:	d9800317 	ldw	r6,12(sp)
    bfe4:	d9c00117 	ldw	r7,4(sp)
    bfe8:	20fee30e 	bge	r4,r3,bb78 <__divdf3+0x1f4>
    bfec:	117ffe04 	addi	r5,r2,-8
    bff0:	9162983a 	sll	r17,r18,r5
    bff4:	0027883a 	mov	r19,zero
    bff8:	003ee606 	br	bb94 <__divdf3+0x210>
    bffc:	3009883a 	mov	r4,r6
    c000:	d9800315 	stw	r6,12(sp)
    c004:	da000215 	stw	r8,8(sp)
    c008:	da400015 	stw	r9,0(sp)
    c00c:	000d6840 	call	d684 <__clzsi2>
    c010:	10c00804 	addi	r3,r2,32
    c014:	010009c4 	movi	r4,39
    c018:	d9800317 	ldw	r6,12(sp)
    c01c:	da000217 	ldw	r8,8(sp)
    c020:	da400017 	ldw	r9,0(sp)
    c024:	20fef20e 	bge	r4,r3,bbf0 <__divdf3+0x26c>
    c028:	10bffe04 	addi	r2,r2,-8
    c02c:	a8a0983a 	sll	r16,r21,r2
    c030:	002b883a 	mov	r21,zero
    c034:	003ef506 	br	bc0c <__divdf3+0x288>
    c038:	354d883a 	add	r6,r6,r21
    c03c:	3549803a 	cmpltu	r4,r6,r21
    c040:	2409883a 	add	r4,r4,r16
    c044:	2089883a 	add	r4,r4,r2
    c048:	88bfffc4 	addi	r2,r17,-1
    c04c:	81000c2e 	bgeu	r16,r4,c080 <__divdf3+0x6fc>
    c050:	20c04436 	bltu	r4,r3,c164 <__divdf3+0x7e0>
    c054:	19006f26 	beq	r3,r4,c214 <__divdf3+0x890>
    c058:	20c7c83a 	sub	r3,r4,r3
    c05c:	1023883a 	mov	r17,r2
    c060:	003f6406 	br	bdf4 <__divdf3+0x470>
    c064:	9d7f1736 	bltu	r19,r21,bcc4 <__divdf3+0x340>
    c068:	9806d07a 	srli	r3,r19,1
    c06c:	880497fa 	slli	r2,r17,31
    c070:	980c97fa 	slli	r6,r19,31
    c074:	882cd07a 	srli	r22,r17,1
    c078:	18a6b03a 	or	r19,r3,r2
    c07c:	003f1406 	br	bcd0 <__divdf3+0x34c>
    c080:	243ff51e 	bne	r4,r16,c058 <__divdf3+0x6d4>
    c084:	357ff22e 	bgeu	r6,r21,c050 <__divdf3+0x6cc>
    c088:	80c7c83a 	sub	r3,r16,r3
    c08c:	1023883a 	mov	r17,r2
    c090:	003f5806 	br	bdf4 <__divdf3+0x470>
    c094:	1013883a 	mov	r9,r2
    c098:	003f3d06 	br	bd90 <__divdf3+0x40c>
    c09c:	1023883a 	mov	r17,r2
    c0a0:	003f2506 	br	bd38 <__divdf3+0x3b4>
    c0a4:	317fe436 	bltu	r6,r5,c038 <__divdf3+0x6b4>
    c0a8:	0007883a 	mov	r3,zero
    c0ac:	003f5106 	br	bdf4 <__divdf3+0x470>
    c0b0:	1c07883a 	add	r3,r3,r16
    c0b4:	993fffc4 	addi	r4,r19,-1
    c0b8:	1c000a2e 	bgeu	r3,r16,c0e4 <__divdf3+0x760>
    c0bc:	2027883a 	mov	r19,r4
    c0c0:	19ff971e 	bne	r3,r7,bf20 <__divdf3+0x59c>
    c0c4:	a8bf961e 	bne	r21,r2,bf20 <__divdf3+0x59c>
    c0c8:	003f9606 	br	bf24 <__divdf3+0x5a0>
    c0cc:	04ffffc4 	movi	r19,-1
    c0d0:	003f9406 	br	bf24 <__divdf3+0x5a0>
    c0d4:	100d883a 	mov	r6,r2
    c0d8:	003f6106 	br	be60 <__divdf3+0x4dc>
    c0dc:	1013883a 	mov	r9,r2
    c0e0:	003f7906 	br	bec8 <__divdf3+0x544>
    c0e4:	19c02636 	bltu	r3,r7,c180 <__divdf3+0x7fc>
    c0e8:	38c04d26 	beq	r7,r3,c220 <__divdf3+0x89c>
    c0ec:	2027883a 	mov	r19,r4
    c0f0:	003f8b06 	br	bf20 <__divdf3+0x59c>
    c0f4:	e025883a 	mov	r18,fp
    c0f8:	003f8a06 	br	bf24 <__divdf3+0x5a0>
    c0fc:	008007c4 	movi	r2,31
    c100:	14002a16 	blt	r2,r16,c1ac <__divdf3+0x828>
    c104:	a5010784 	addi	r20,r20,1054
    c108:	8d04983a 	sll	r2,r17,r20
    c10c:	9c06d83a 	srl	r3,r19,r16
    c110:	9d28983a 	sll	r20,r19,r20
    c114:	8c20d83a 	srl	r16,r17,r16
    c118:	1886b03a 	or	r3,r3,r2
    c11c:	a004c03a 	cmpne	r2,r20,zero
    c120:	1884b03a 	or	r2,r3,r2
    c124:	10c001cc 	andi	r3,r2,7
    c128:	18000726 	beq	r3,zero,c148 <__divdf3+0x7c4>
    c12c:	110003cc 	andi	r4,r2,15
    c130:	00c00104 	movi	r3,4
    c134:	20c00426 	beq	r4,r3,c148 <__divdf3+0x7c4>
    c138:	10c00104 	addi	r3,r2,4
    c13c:	1885803a 	cmpltu	r2,r3,r2
    c140:	80a1883a 	add	r16,r16,r2
    c144:	1805883a 	mov	r2,r3
    c148:	80c0202c 	andhi	r3,r16,128
    c14c:	18002d26 	beq	r3,zero,c204 <__divdf3+0x880>
    c150:	9180004c 	andi	r6,r18,1
    c154:	01000044 	movi	r4,1
    c158:	000b883a 	mov	r5,zero
    c15c:	0027883a 	mov	r19,zero
    c160:	003e6606 	br	bafc <__divdf3+0x178>
    c164:	354d883a 	add	r6,r6,r21
    c168:	356d803a 	cmpltu	r22,r6,r21
    c16c:	b42d883a 	add	r22,r22,r16
    c170:	b12d883a 	add	r22,r22,r4
    c174:	8c7fff84 	addi	r17,r17,-2
    c178:	b0c7c83a 	sub	r3,r22,r3
    c17c:	003f1d06 	br	bdf4 <__divdf3+0x470>
    c180:	ad4b883a 	add	r5,r21,r21
    c184:	2d6b803a 	cmpltu	r21,r5,r21
    c188:	ac2b883a 	add	r21,r21,r16
    c18c:	1d47883a 	add	r3,r3,r21
    c190:	993fff84 	addi	r4,r19,-2
    c194:	282b883a 	mov	r21,r5
    c198:	003fc806 	br	c0bc <__divdf3+0x738>
    c19c:	103fc41e 	bne	r2,zero,c0b0 <__divdf3+0x72c>
    c1a0:	002b883a 	mov	r21,zero
    c1a4:	a8bf5e1e 	bne	r21,r2,bf20 <__divdf3+0x59c>
    c1a8:	003f5e06 	br	bf24 <__divdf3+0x5a0>
    c1ac:	00bef884 	movi	r2,-1054
    c1b0:	1505c83a 	sub	r2,r2,r20
    c1b4:	00c00804 	movi	r3,32
    c1b8:	8884d83a 	srl	r2,r17,r2
    c1bc:	80c01c26 	beq	r16,r3,c230 <__divdf3+0x8ac>
    c1c0:	a0c10f84 	addi	r3,r20,1086
    c1c4:	88c6983a 	sll	r3,r17,r3
    c1c8:	1cc6b03a 	or	r3,r3,r19
    c1cc:	1806c03a 	cmpne	r3,r3,zero
    c1d0:	1884b03a 	or	r2,r3,r2
    c1d4:	140001cc 	andi	r16,r2,7
    c1d8:	8000061e 	bne	r16,zero,c1f4 <__divdf3+0x870>
    c1dc:	000b883a 	mov	r5,zero
    c1e0:	1004d0fa 	srli	r2,r2,3
    c1e4:	9180004c 	andi	r6,r18,1
    c1e8:	0009883a 	mov	r4,zero
    c1ec:	1426b03a 	or	r19,r2,r16
    c1f0:	003e4206 	br	bafc <__divdf3+0x178>
    c1f4:	110003cc 	andi	r4,r2,15
    c1f8:	00c00104 	movi	r3,4
    c1fc:	0021883a 	mov	r16,zero
    c200:	20ffcd1e 	bne	r4,r3,c138 <__divdf3+0x7b4>
    c204:	800a927a 	slli	r5,r16,9
    c208:	8020977a 	slli	r16,r16,29
    c20c:	280ad33a 	srli	r5,r5,12
    c210:	003ff306 	br	c1e0 <__divdf3+0x85c>
    c214:	317fd336 	bltu	r6,r5,c164 <__divdf3+0x7e0>
    c218:	1023883a 	mov	r17,r2
    c21c:	003fa206 	br	c0a8 <__divdf3+0x724>
    c220:	a8bfd736 	bltu	r21,r2,c180 <__divdf3+0x7fc>
    c224:	2027883a 	mov	r19,r4
    c228:	a8bf3d1e 	bne	r21,r2,bf20 <__divdf3+0x59c>
    c22c:	003f3d06 	br	bf24 <__divdf3+0x5a0>
    c230:	0007883a 	mov	r3,zero
    c234:	003fe406 	br	c1c8 <__divdf3+0x844>
    c238:	00800434 	movhi	r2,16
    c23c:	89400234 	orhi	r5,r17,8
    c240:	10bfffc4 	addi	r2,r2,-1
    c244:	e00d883a 	mov	r6,fp
    c248:	288a703a 	and	r5,r5,r2
    c24c:	003e8506 	br	bc64 <__divdf3+0x2e0>

0000c250 <__eqdf2>:
    c250:	2804d53a 	srli	r2,r5,20
    c254:	3806d53a 	srli	r3,r7,20
    c258:	02000434 	movhi	r8,16
    c25c:	423fffc4 	addi	r8,r8,-1
    c260:	1081ffcc 	andi	r2,r2,2047
    c264:	0241ffc4 	movi	r9,2047
    c268:	2a14703a 	and	r10,r5,r8
    c26c:	18c1ffcc 	andi	r3,r3,2047
    c270:	3a10703a 	and	r8,r7,r8
    c274:	280ad7fa 	srli	r5,r5,31
    c278:	380ed7fa 	srli	r7,r7,31
    c27c:	12400f26 	beq	r2,r9,c2bc <__eqdf2+0x6c>
    c280:	0241ffc4 	movi	r9,2047
    c284:	1a400326 	beq	r3,r9,c294 <__eqdf2+0x44>
    c288:	10c00526 	beq	r2,r3,c2a0 <__eqdf2+0x50>
    c28c:	00800044 	movi	r2,1
    c290:	f800283a 	ret
    c294:	4192b03a 	or	r9,r8,r6
    c298:	483ffc1e 	bne	r9,zero,c28c <__eqdf2+0x3c>
    c29c:	10fffb1e 	bne	r2,r3,c28c <__eqdf2+0x3c>
    c2a0:	523ffa1e 	bne	r10,r8,c28c <__eqdf2+0x3c>
    c2a4:	21bff91e 	bne	r4,r6,c28c <__eqdf2+0x3c>
    c2a8:	29c00826 	beq	r5,r7,c2cc <__eqdf2+0x7c>
    c2ac:	103ff71e 	bne	r2,zero,c28c <__eqdf2+0x3c>
    c2b0:	5104b03a 	or	r2,r10,r4
    c2b4:	1004c03a 	cmpne	r2,r2,zero
    c2b8:	f800283a 	ret
    c2bc:	5112b03a 	or	r9,r10,r4
    c2c0:	483fef26 	beq	r9,zero,c280 <__eqdf2+0x30>
    c2c4:	00800044 	movi	r2,1
    c2c8:	f800283a 	ret
    c2cc:	0005883a 	mov	r2,zero
    c2d0:	f800283a 	ret

0000c2d4 <__gedf2>:
    c2d4:	2804d53a 	srli	r2,r5,20
    c2d8:	3806d53a 	srli	r3,r7,20
    c2dc:	02000434 	movhi	r8,16
    c2e0:	423fffc4 	addi	r8,r8,-1
    c2e4:	0241ffc4 	movi	r9,2047
    c2e8:	1081ffcc 	andi	r2,r2,2047
    c2ec:	2a14703a 	and	r10,r5,r8
    c2f0:	1a46703a 	and	r3,r3,r9
    c2f4:	3a10703a 	and	r8,r7,r8
    c2f8:	280ad7fa 	srli	r5,r5,31
    c2fc:	380ed7fa 	srli	r7,r7,31
    c300:	12400b26 	beq	r2,r9,c330 <__gedf2+0x5c>
    c304:	1a401626 	beq	r3,r9,c360 <__gedf2+0x8c>
    c308:	10000c1e 	bne	r2,zero,c33c <__gedf2+0x68>
    c30c:	5112b03a 	or	r9,r10,r4
    c310:	4813003a 	cmpeq	r9,r9,zero
    c314:	4817883a 	mov	r11,r9
    c318:	18000c1e 	bne	r3,zero,c34c <__gedf2+0x78>
    c31c:	4198b03a 	or	r12,r8,r6
    c320:	60000a1e 	bne	r12,zero,c34c <__gedf2+0x78>
    c324:	48001326 	beq	r9,zero,c374 <__gedf2+0xa0>
    c328:	0005883a 	mov	r2,zero
    c32c:	f800283a 	ret
    c330:	5112b03a 	or	r9,r10,r4
    c334:	4800191e 	bne	r9,zero,c39c <__gedf2+0xc8>
    c338:	18800926 	beq	r3,r2,c360 <__gedf2+0x8c>
    c33c:	18000b1e 	bne	r3,zero,c36c <__gedf2+0x98>
    c340:	4192b03a 	or	r9,r8,r6
    c344:	0017883a 	mov	r11,zero
    c348:	48000a26 	beq	r9,zero,c374 <__gedf2+0xa0>
    c34c:	39c03fcc 	andi	r7,r7,255
    c350:	58000726 	beq	r11,zero,c370 <__gedf2+0x9c>
    c354:	3800081e 	bne	r7,zero,c378 <__gedf2+0xa4>
    c358:	00bfffc4 	movi	r2,-1
    c35c:	f800283a 	ret
    c360:	4192b03a 	or	r9,r8,r6
    c364:	48000d1e 	bne	r9,zero,c39c <__gedf2+0xc8>
    c368:	103fe826 	beq	r2,zero,c30c <__gedf2+0x38>
    c36c:	39c03fcc 	andi	r7,r7,255
    c370:	29c00326 	beq	r5,r7,c380 <__gedf2+0xac>
    c374:	283ff81e 	bne	r5,zero,c358 <__gedf2+0x84>
    c378:	00800044 	movi	r2,1
    c37c:	f800283a 	ret
    c380:	18bffc16 	blt	r3,r2,c374 <__gedf2+0xa0>
    c384:	10c00316 	blt	r2,r3,c394 <__gedf2+0xc0>
    c388:	42bffa36 	bltu	r8,r10,c374 <__gedf2+0xa0>
    c38c:	52000526 	beq	r10,r8,c3a4 <__gedf2+0xd0>
    c390:	523fe52e 	bgeu	r10,r8,c328 <__gedf2+0x54>
    c394:	283ff026 	beq	r5,zero,c358 <__gedf2+0x84>
    c398:	003ff706 	br	c378 <__gedf2+0xa4>
    c39c:	00bfff84 	movi	r2,-2
    c3a0:	f800283a 	ret
    c3a4:	313ff336 	bltu	r6,r4,c374 <__gedf2+0xa0>
    c3a8:	21bfdf2e 	bgeu	r4,r6,c328 <__gedf2+0x54>
    c3ac:	283fea26 	beq	r5,zero,c358 <__gedf2+0x84>
    c3b0:	003ff106 	br	c378 <__gedf2+0xa4>

0000c3b4 <__ledf2>:
    c3b4:	2804d53a 	srli	r2,r5,20
    c3b8:	3810d53a 	srli	r8,r7,20
    c3bc:	00c00434 	movhi	r3,16
    c3c0:	18ffffc4 	addi	r3,r3,-1
    c3c4:	0241ffc4 	movi	r9,2047
    c3c8:	1081ffcc 	andi	r2,r2,2047
    c3cc:	28d4703a 	and	r10,r5,r3
    c3d0:	4250703a 	and	r8,r8,r9
    c3d4:	38c6703a 	and	r3,r7,r3
    c3d8:	280ad7fa 	srli	r5,r5,31
    c3dc:	380ed7fa 	srli	r7,r7,31
    c3e0:	12400b26 	beq	r2,r9,c410 <__ledf2+0x5c>
    c3e4:	42401926 	beq	r8,r9,c44c <__ledf2+0x98>
    c3e8:	10000c1e 	bne	r2,zero,c41c <__ledf2+0x68>
    c3ec:	5112b03a 	or	r9,r10,r4
    c3f0:	4813003a 	cmpeq	r9,r9,zero
    c3f4:	4817883a 	mov	r11,r9
    c3f8:	40000f26 	beq	r8,zero,c438 <__ledf2+0x84>
    c3fc:	39c03fcc 	andi	r7,r7,255
    c400:	58001826 	beq	r11,zero,c464 <__ledf2+0xb0>
    c404:	38000a1e 	bne	r7,zero,c430 <__ledf2+0x7c>
    c408:	00bfffc4 	movi	r2,-1
    c40c:	f800283a 	ret
    c410:	5112b03a 	or	r9,r10,r4
    c414:	48000f1e 	bne	r9,zero,c454 <__ledf2+0xa0>
    c418:	40800c26 	beq	r8,r2,c44c <__ledf2+0x98>
    c41c:	4000101e 	bne	r8,zero,c460 <__ledf2+0xac>
    c420:	1992b03a 	or	r9,r3,r6
    c424:	0017883a 	mov	r11,zero
    c428:	483ff41e 	bne	r9,zero,c3fc <__ledf2+0x48>
    c42c:	283ff61e 	bne	r5,zero,c408 <__ledf2+0x54>
    c430:	00800044 	movi	r2,1
    c434:	f800283a 	ret
    c438:	1998b03a 	or	r12,r3,r6
    c43c:	603fef1e 	bne	r12,zero,c3fc <__ledf2+0x48>
    c440:	483ffa26 	beq	r9,zero,c42c <__ledf2+0x78>
    c444:	0005883a 	mov	r2,zero
    c448:	f800283a 	ret
    c44c:	1992b03a 	or	r9,r3,r6
    c450:	48000226 	beq	r9,zero,c45c <__ledf2+0xa8>
    c454:	00800084 	movi	r2,2
    c458:	f800283a 	ret
    c45c:	103fe326 	beq	r2,zero,c3ec <__ledf2+0x38>
    c460:	39c03fcc 	andi	r7,r7,255
    c464:	29fff11e 	bne	r5,r7,c42c <__ledf2+0x78>
    c468:	40bff016 	blt	r8,r2,c42c <__ledf2+0x78>
    c46c:	12000316 	blt	r2,r8,c47c <__ledf2+0xc8>
    c470:	1abfee36 	bltu	r3,r10,c42c <__ledf2+0x78>
    c474:	50c00326 	beq	r10,r3,c484 <__ledf2+0xd0>
    c478:	50fff22e 	bgeu	r10,r3,c444 <__ledf2+0x90>
    c47c:	283fe226 	beq	r5,zero,c408 <__ledf2+0x54>
    c480:	003feb06 	br	c430 <__ledf2+0x7c>
    c484:	313fe936 	bltu	r6,r4,c42c <__ledf2+0x78>
    c488:	21bfee2e 	bgeu	r4,r6,c444 <__ledf2+0x90>
    c48c:	283fde26 	beq	r5,zero,c408 <__ledf2+0x54>
    c490:	003fe706 	br	c430 <__ledf2+0x7c>

0000c494 <__muldf3>:
    c494:	defff204 	addi	sp,sp,-56
    c498:	2804d53a 	srli	r2,r5,20
    c49c:	dd800a15 	stw	r22,40(sp)
    c4a0:	282cd7fa 	srli	r22,r5,31
    c4a4:	dc000415 	stw	r16,16(sp)
    c4a8:	04000434 	movhi	r16,16
    c4ac:	df000c15 	stw	fp,48(sp)
    c4b0:	dd000815 	stw	r20,32(sp)
    c4b4:	dcc00715 	stw	r19,28(sp)
    c4b8:	dc800615 	stw	r18,24(sp)
    c4bc:	dc400515 	stw	r17,20(sp)
    c4c0:	843fffc4 	addi	r16,r16,-1
    c4c4:	dfc00d15 	stw	ra,52(sp)
    c4c8:	ddc00b15 	stw	r23,44(sp)
    c4cc:	dd400915 	stw	r21,36(sp)
    c4d0:	1501ffcc 	andi	r20,r2,2047
    c4d4:	2023883a 	mov	r17,r4
    c4d8:	2025883a 	mov	r18,r4
    c4dc:	2c20703a 	and	r16,r5,r16
    c4e0:	b027883a 	mov	r19,r22
    c4e4:	b7003fcc 	andi	fp,r22,255
    c4e8:	a0005926 	beq	r20,zero,c650 <__muldf3+0x1bc>
    c4ec:	0081ffc4 	movi	r2,2047
    c4f0:	a0803426 	beq	r20,r2,c5c4 <__muldf3+0x130>
    c4f4:	84000434 	orhi	r16,r16,16
    c4f8:	2004d77a 	srli	r2,r4,29
    c4fc:	802090fa 	slli	r16,r16,3
    c500:	202490fa 	slli	r18,r4,3
    c504:	a53f0044 	addi	r20,r20,-1023
    c508:	80a0b03a 	or	r16,r16,r2
    c50c:	002b883a 	mov	r21,zero
    c510:	0015883a 	mov	r10,zero
    c514:	3812d53a 	srli	r9,r7,20
    c518:	3806d7fa 	srli	r3,r7,31
    c51c:	02000434 	movhi	r8,16
    c520:	423fffc4 	addi	r8,r8,-1
    c524:	4941ffcc 	andi	r5,r9,2047
    c528:	302f883a 	mov	r23,r6
    c52c:	3a22703a 	and	r17,r7,r8
    c530:	1ac03fcc 	andi	r11,r3,255
    c534:	28006226 	beq	r5,zero,c6c0 <__muldf3+0x22c>
    c538:	0081ffc4 	movi	r2,2047
    c53c:	28805a26 	beq	r5,r2,c6a8 <__muldf3+0x214>
    c540:	8a000434 	orhi	r8,r17,16
    c544:	3004d77a 	srli	r2,r6,29
    c548:	401090fa 	slli	r8,r8,3
    c54c:	302e90fa 	slli	r23,r6,3
    c550:	297f0044 	addi	r5,r5,-1023
    c554:	40a2b03a 	or	r17,r8,r2
    c558:	0013883a 	mov	r9,zero
    c55c:	4d4cb03a 	or	r6,r9,r21
    c560:	300c90ba 	slli	r6,r6,2
    c564:	02000074 	movhi	r8,1
    c568:	42316104 	addi	r8,r8,-14972
    c56c:	320d883a 	add	r6,r6,r8
    c570:	31800017 	ldw	r6,0(r6)
    c574:	a14b883a 	add	r5,r20,r5
    c578:	1dacf03a 	xor	r22,r3,r22
    c57c:	2b000044 	addi	r12,r5,1
    c580:	3000683a 	jmp	r6
    c584:	0000c7c0 	call	c7c <i2c_write+0x50>
    c588:	0000c7ac 	andhi	zero,zero,798
    c58c:	0000c7ac 	andhi	zero,zero,798
    c590:	0000c798 	cmpnei	zero,zero,798
    c594:	0000c5e0 	cmpeqi	zero,zero,791
    c598:	0000c5e0 	cmpeqi	zero,zero,791
    c59c:	0000c780 	call	c78 <i2c_write+0x4c>
    c5a0:	0000c798 	cmpnei	zero,zero,798
    c5a4:	0000c5e0 	cmpeqi	zero,zero,791
    c5a8:	0000c780 	call	c78 <i2c_write+0x4c>
    c5ac:	0000c5e0 	cmpeqi	zero,zero,791
    c5b0:	0000c798 	cmpnei	zero,zero,798
    c5b4:	0000c5e4 	muli	zero,zero,791
    c5b8:	0000c5e4 	muli	zero,zero,791
    c5bc:	0000c5e4 	muli	zero,zero,791
    c5c0:	0000c9bc 	xorhi	zero,zero,806
    c5c4:	8104b03a 	or	r2,r16,r4
    c5c8:	10006a1e 	bne	r2,zero,c774 <__muldf3+0x2e0>
    c5cc:	05400204 	movi	r21,8
    c5d0:	0021883a 	mov	r16,zero
    c5d4:	0025883a 	mov	r18,zero
    c5d8:	02800084 	movi	r10,2
    c5dc:	003fcd06 	br	c514 <__muldf3+0x80>
    c5e0:	b039883a 	mov	fp,r22
    c5e4:	00800084 	movi	r2,2
    c5e8:	50804e1e 	bne	r10,r2,c724 <__muldf3+0x290>
    c5ec:	e4c0004c 	andi	r19,fp,1
    c5f0:	0101ffc4 	movi	r4,2047
    c5f4:	0021883a 	mov	r16,zero
    c5f8:	0025883a 	mov	r18,zero
    c5fc:	2008953a 	slli	r4,r4,20
    c600:	98c03fcc 	andi	r3,r19,255
    c604:	01400434 	movhi	r5,16
    c608:	297fffc4 	addi	r5,r5,-1
    c60c:	180697fa 	slli	r3,r3,31
    c610:	8160703a 	and	r16,r16,r5
    c614:	8120b03a 	or	r16,r16,r4
    c618:	80c6b03a 	or	r3,r16,r3
    c61c:	9005883a 	mov	r2,r18
    c620:	dfc00d17 	ldw	ra,52(sp)
    c624:	df000c17 	ldw	fp,48(sp)
    c628:	ddc00b17 	ldw	r23,44(sp)
    c62c:	dd800a17 	ldw	r22,40(sp)
    c630:	dd400917 	ldw	r21,36(sp)
    c634:	dd000817 	ldw	r20,32(sp)
    c638:	dcc00717 	ldw	r19,28(sp)
    c63c:	dc800617 	ldw	r18,24(sp)
    c640:	dc400517 	ldw	r17,20(sp)
    c644:	dc000417 	ldw	r16,16(sp)
    c648:	dec00e04 	addi	sp,sp,56
    c64c:	f800283a 	ret
    c650:	8104b03a 	or	r2,r16,r4
    c654:	10004226 	beq	r2,zero,c760 <__muldf3+0x2cc>
    c658:	8000f926 	beq	r16,zero,ca40 <__muldf3+0x5ac>
    c65c:	8009883a 	mov	r4,r16
    c660:	d9800315 	stw	r6,12(sp)
    c664:	d9c00015 	stw	r7,0(sp)
    c668:	000d6840 	call	d684 <__clzsi2>
    c66c:	d9800317 	ldw	r6,12(sp)
    c670:	d9c00017 	ldw	r7,0(sp)
    c674:	1007883a 	mov	r3,r2
    c678:	01000a04 	movi	r4,40
    c67c:	18bffe04 	addi	r2,r3,-8
    c680:	20c9c83a 	sub	r4,r4,r3
    c684:	80a0983a 	sll	r16,r16,r2
    c688:	8908d83a 	srl	r4,r17,r4
    c68c:	88a4983a 	sll	r18,r17,r2
    c690:	2420b03a 	or	r16,r4,r16
    c694:	017f0344 	movi	r5,-1011
    c698:	28e9c83a 	sub	r20,r5,r3
    c69c:	002b883a 	mov	r21,zero
    c6a0:	0015883a 	mov	r10,zero
    c6a4:	003f9b06 	br	c514 <__muldf3+0x80>
    c6a8:	8984b03a 	or	r2,r17,r6
    c6ac:	10002a1e 	bne	r2,zero,c758 <__muldf3+0x2c4>
    c6b0:	0023883a 	mov	r17,zero
    c6b4:	002f883a 	mov	r23,zero
    c6b8:	02400084 	movi	r9,2
    c6bc:	003fa706 	br	c55c <__muldf3+0xc8>
    c6c0:	8984b03a 	or	r2,r17,r6
    c6c4:	10002026 	beq	r2,zero,c748 <__muldf3+0x2b4>
    c6c8:	8800cc26 	beq	r17,zero,c9fc <__muldf3+0x568>
    c6cc:	8809883a 	mov	r4,r17
    c6d0:	d8c00215 	stw	r3,8(sp)
    c6d4:	d9800315 	stw	r6,12(sp)
    c6d8:	da800015 	stw	r10,0(sp)
    c6dc:	dac00115 	stw	r11,4(sp)
    c6e0:	000d6840 	call	d684 <__clzsi2>
    c6e4:	d8c00217 	ldw	r3,8(sp)
    c6e8:	d9800317 	ldw	r6,12(sp)
    c6ec:	da800017 	ldw	r10,0(sp)
    c6f0:	dac00117 	ldw	r11,4(sp)
    c6f4:	1009883a 	mov	r4,r2
    c6f8:	01400a04 	movi	r5,40
    c6fc:	25fffe04 	addi	r23,r4,-8
    c700:	290bc83a 	sub	r5,r5,r4
    c704:	8dd0983a 	sll	r8,r17,r23
    c708:	314ad83a 	srl	r5,r6,r5
    c70c:	35ee983a 	sll	r23,r6,r23
    c710:	2a22b03a 	or	r17,r5,r8
    c714:	017f0344 	movi	r5,-1011
    c718:	290bc83a 	sub	r5,r5,r4
    c71c:	0013883a 	mov	r9,zero
    c720:	003f8e06 	br	c55c <__muldf3+0xc8>
    c724:	008000c4 	movi	r2,3
    c728:	50811d26 	beq	r10,r2,cba0 <__muldf3+0x70c>
    c72c:	00800044 	movi	r2,1
    c730:	5080e01e 	bne	r10,r2,cab4 <__muldf3+0x620>
    c734:	e0a6703a 	and	r19,fp,r2
    c738:	0009883a 	mov	r4,zero
    c73c:	0021883a 	mov	r16,zero
    c740:	0025883a 	mov	r18,zero
    c744:	003fad06 	br	c5fc <__muldf3+0x168>
    c748:	0023883a 	mov	r17,zero
    c74c:	002f883a 	mov	r23,zero
    c750:	02400044 	movi	r9,1
    c754:	003f8106 	br	c55c <__muldf3+0xc8>
    c758:	024000c4 	movi	r9,3
    c75c:	003f7f06 	br	c55c <__muldf3+0xc8>
    c760:	05400104 	movi	r21,4
    c764:	0021883a 	mov	r16,zero
    c768:	0025883a 	mov	r18,zero
    c76c:	02800044 	movi	r10,1
    c770:	003f6806 	br	c514 <__muldf3+0x80>
    c774:	05400304 	movi	r21,12
    c778:	028000c4 	movi	r10,3
    c77c:	003f6506 	br	c514 <__muldf3+0x80>
    c780:	04000434 	movhi	r16,16
    c784:	0027883a 	mov	r19,zero
    c788:	843fffc4 	addi	r16,r16,-1
    c78c:	04bfffc4 	movi	r18,-1
    c790:	0101ffc4 	movi	r4,2047
    c794:	003f9906 	br	c5fc <__muldf3+0x168>
    c798:	8821883a 	mov	r16,r17
    c79c:	b825883a 	mov	r18,r23
    c7a0:	5839883a 	mov	fp,r11
    c7a4:	4815883a 	mov	r10,r9
    c7a8:	003f8e06 	br	c5e4 <__muldf3+0x150>
    c7ac:	8821883a 	mov	r16,r17
    c7b0:	b825883a 	mov	r18,r23
    c7b4:	b039883a 	mov	fp,r22
    c7b8:	4815883a 	mov	r10,r9
    c7bc:	003f8906 	br	c5e4 <__muldf3+0x150>
    c7c0:	b80cd43a 	srli	r6,r23,16
    c7c4:	9006d43a 	srli	r3,r18,16
    c7c8:	90bfffcc 	andi	r2,r18,65535
    c7cc:	bdffffcc 	andi	r23,r23,65535
    c7d0:	b891383a 	mul	r8,r23,r2
    c7d4:	b8c9383a 	mul	r4,r23,r3
    c7d8:	309b383a 	mul	r13,r6,r2
    c7dc:	400ed43a 	srli	r7,r8,16
    c7e0:	30df383a 	mul	r15,r6,r3
    c7e4:	235b883a 	add	r13,r4,r13
    c7e8:	69db883a 	add	r13,r13,r7
    c7ec:	6900022e 	bgeu	r13,r4,c7f8 <__muldf3+0x364>
    c7f0:	01000074 	movhi	r4,1
    c7f4:	791f883a 	add	r15,r15,r4
    c7f8:	8828d43a 	srli	r20,r17,16
    c7fc:	8c7fffcc 	andi	r17,r17,65535
    c800:	888f383a 	mul	r7,r17,r2
    c804:	88d3383a 	mul	r9,r17,r3
    c808:	a0a5383a 	mul	r18,r20,r2
    c80c:	3816d43a 	srli	r11,r7,16
    c810:	6814943a 	slli	r10,r13,16
    c814:	4ca5883a 	add	r18,r9,r18
    c818:	423fffcc 	andi	r8,r8,65535
    c81c:	92e5883a 	add	r18,r18,r11
    c820:	6808d43a 	srli	r4,r13,16
    c824:	5215883a 	add	r10,r10,r8
    c828:	a0c7383a 	mul	r3,r20,r3
    c82c:	9240022e 	bgeu	r18,r9,c838 <__muldf3+0x3a4>
    c830:	00800074 	movhi	r2,1
    c834:	1887883a 	add	r3,r3,r2
    c838:	802ad43a 	srli	r21,r16,16
    c83c:	80bfffcc 	andi	r2,r16,65535
    c840:	b893383a 	mul	r9,r23,r2
    c844:	3091383a 	mul	r8,r6,r2
    c848:	bd6f383a 	mul	r23,r23,r21
    c84c:	9026943a 	slli	r19,r18,16
    c850:	481ad43a 	srli	r13,r9,16
    c854:	9024d43a 	srli	r18,r18,16
    c858:	39ffffcc 	andi	r7,r7,65535
    c85c:	ba11883a 	add	r8,r23,r8
    c860:	99e7883a 	add	r19,r19,r7
    c864:	4351883a 	add	r8,r8,r13
    c868:	1c97883a 	add	r11,r3,r18
    c86c:	354d383a 	mul	r6,r6,r21
    c870:	9925883a 	add	r18,r19,r4
    c874:	45c0022e 	bgeu	r8,r23,c880 <__muldf3+0x3ec>
    c878:	00c00074 	movhi	r3,1
    c87c:	30cd883a 	add	r6,r6,r3
    c880:	8889383a 	mul	r4,r17,r2
    c884:	8d63383a 	mul	r17,r17,r21
    c888:	a085383a 	mul	r2,r20,r2
    c88c:	200ed43a 	srli	r7,r4,16
    c890:	401cd43a 	srli	r14,r8,16
    c894:	401a943a 	slli	r13,r8,16
    c898:	8885883a 	add	r2,r17,r2
    c89c:	4a3fffcc 	andi	r8,r9,65535
    c8a0:	11c5883a 	add	r2,r2,r7
    c8a4:	339d883a 	add	r14,r6,r14
    c8a8:	6a11883a 	add	r8,r13,r8
    c8ac:	a561383a 	mul	r16,r20,r21
    c8b0:	1440022e 	bgeu	r2,r17,c8bc <__muldf3+0x428>
    c8b4:	00c00074 	movhi	r3,1
    c8b8:	80e1883a 	add	r16,r16,r3
    c8bc:	1006943a 	slli	r3,r2,16
    c8c0:	213fffcc 	andi	r4,r4,65535
    c8c4:	93db883a 	add	r13,r18,r15
    c8c8:	1909883a 	add	r4,r3,r4
    c8cc:	22c7883a 	add	r3,r4,r11
    c8d0:	6cd3803a 	cmpltu	r9,r13,r19
    c8d4:	6a09883a 	add	r4,r13,r8
    c8d8:	1a5b883a 	add	r13,r3,r9
    c8dc:	2211803a 	cmpltu	r8,r4,r8
    c8e0:	734d883a 	add	r6,r14,r13
    c8e4:	100ed43a 	srli	r7,r2,16
    c8e8:	6a53803a 	cmpltu	r9,r13,r9
    c8ec:	3205883a 	add	r2,r6,r8
    c8f0:	1ac7803a 	cmpltu	r3,r3,r11
    c8f4:	1211803a 	cmpltu	r8,r2,r8
    c8f8:	48c6b03a 	or	r3,r9,r3
    c8fc:	338d803a 	cmpltu	r6,r6,r14
    c900:	19c7883a 	add	r3,r3,r7
    c904:	418cb03a 	or	r6,r8,r6
    c908:	1987883a 	add	r3,r3,r6
    c90c:	2024927a 	slli	r18,r4,9
    c910:	1c07883a 	add	r3,r3,r16
    c914:	1806927a 	slli	r3,r3,9
    c918:	1020d5fa 	srli	r16,r2,23
    c91c:	2008d5fa 	srli	r4,r4,23
    c920:	9294b03a 	or	r10,r18,r10
    c924:	1004927a 	slli	r2,r2,9
    c928:	5024c03a 	cmpne	r18,r10,zero
    c92c:	1c20b03a 	or	r16,r3,r16
    c930:	9108b03a 	or	r4,r18,r4
    c934:	80c0402c 	andhi	r3,r16,256
    c938:	20a4b03a 	or	r18,r4,r2
    c93c:	18000726 	beq	r3,zero,c95c <__muldf3+0x4c8>
    c940:	9006d07a 	srli	r3,r18,1
    c944:	800897fa 	slli	r4,r16,31
    c948:	9080004c 	andi	r2,r18,1
    c94c:	8020d07a 	srli	r16,r16,1
    c950:	10c4b03a 	or	r2,r2,r3
    c954:	1124b03a 	or	r18,r2,r4
    c958:	600b883a 	mov	r5,r12
    c95c:	2900ffc4 	addi	r4,r5,1023
    c960:	01004b0e 	bge	zero,r4,ca90 <__muldf3+0x5fc>
    c964:	908001cc 	andi	r2,r18,7
    c968:	10000726 	beq	r2,zero,c988 <__muldf3+0x4f4>
    c96c:	90c003cc 	andi	r3,r18,15
    c970:	00800104 	movi	r2,4
    c974:	18800426 	beq	r3,r2,c988 <__muldf3+0x4f4>
    c978:	9087883a 	add	r3,r18,r2
    c97c:	1c85803a 	cmpltu	r2,r3,r18
    c980:	80a1883a 	add	r16,r16,r2
    c984:	1825883a 	mov	r18,r3
    c988:	8080402c 	andhi	r2,r16,256
    c98c:	10000426 	beq	r2,zero,c9a0 <__muldf3+0x50c>
    c990:	00bfc034 	movhi	r2,65280
    c994:	10bfffc4 	addi	r2,r2,-1
    c998:	29010004 	addi	r4,r5,1024
    c99c:	80a0703a 	and	r16,r16,r2
    c9a0:	0081ff84 	movi	r2,2046
    c9a4:	1100320e 	bge	r2,r4,ca70 <__muldf3+0x5dc>
    c9a8:	b4c0004c 	andi	r19,r22,1
    c9ac:	0101ffc4 	movi	r4,2047
    c9b0:	0021883a 	mov	r16,zero
    c9b4:	0025883a 	mov	r18,zero
    c9b8:	003f1006 	br	c5fc <__muldf3+0x168>
    c9bc:	8080022c 	andhi	r2,r16,8
    c9c0:	10000926 	beq	r2,zero,c9e8 <__muldf3+0x554>
    c9c4:	8880022c 	andhi	r2,r17,8
    c9c8:	1000071e 	bne	r2,zero,c9e8 <__muldf3+0x554>
    c9cc:	00800434 	movhi	r2,16
    c9d0:	8c000234 	orhi	r16,r17,8
    c9d4:	10bfffc4 	addi	r2,r2,-1
    c9d8:	1827883a 	mov	r19,r3
    c9dc:	80a0703a 	and	r16,r16,r2
    c9e0:	b825883a 	mov	r18,r23
    c9e4:	003f6a06 	br	c790 <__muldf3+0x2fc>
    c9e8:	00800434 	movhi	r2,16
    c9ec:	84000234 	orhi	r16,r16,8
    c9f0:	10bfffc4 	addi	r2,r2,-1
    c9f4:	80a0703a 	and	r16,r16,r2
    c9f8:	003f6506 	br	c790 <__muldf3+0x2fc>
    c9fc:	3009883a 	mov	r4,r6
    ca00:	d8c00215 	stw	r3,8(sp)
    ca04:	d9800315 	stw	r6,12(sp)
    ca08:	da800015 	stw	r10,0(sp)
    ca0c:	dac00115 	stw	r11,4(sp)
    ca10:	000d6840 	call	d684 <__clzsi2>
    ca14:	11000804 	addi	r4,r2,32
    ca18:	014009c4 	movi	r5,39
    ca1c:	d8c00217 	ldw	r3,8(sp)
    ca20:	d9800317 	ldw	r6,12(sp)
    ca24:	da800017 	ldw	r10,0(sp)
    ca28:	dac00117 	ldw	r11,4(sp)
    ca2c:	293f320e 	bge	r5,r4,c6f8 <__muldf3+0x264>
    ca30:	10bffe04 	addi	r2,r2,-8
    ca34:	b8a2983a 	sll	r17,r23,r2
    ca38:	002f883a 	mov	r23,zero
    ca3c:	003f3506 	br	c714 <__muldf3+0x280>
    ca40:	d9800315 	stw	r6,12(sp)
    ca44:	d9c00015 	stw	r7,0(sp)
    ca48:	000d6840 	call	d684 <__clzsi2>
    ca4c:	10c00804 	addi	r3,r2,32
    ca50:	010009c4 	movi	r4,39
    ca54:	d9800317 	ldw	r6,12(sp)
    ca58:	d9c00017 	ldw	r7,0(sp)
    ca5c:	20ff060e 	bge	r4,r3,c678 <__muldf3+0x1e4>
    ca60:	10bffe04 	addi	r2,r2,-8
    ca64:	88a0983a 	sll	r16,r17,r2
    ca68:	0025883a 	mov	r18,zero
    ca6c:	003f0906 	br	c694 <__muldf3+0x200>
    ca70:	9004d0fa 	srli	r2,r18,3
    ca74:	8024977a 	slli	r18,r16,29
    ca78:	8020927a 	slli	r16,r16,9
    ca7c:	2101ffcc 	andi	r4,r4,2047
    ca80:	90a4b03a 	or	r18,r18,r2
    ca84:	8020d33a 	srli	r16,r16,12
    ca88:	b4c0004c 	andi	r19,r22,1
    ca8c:	003edb06 	br	c5fc <__muldf3+0x168>
    ca90:	00ff0084 	movi	r3,-1022
    ca94:	1947c83a 	sub	r3,r3,r5
    ca98:	00800e04 	movi	r2,56
    ca9c:	10c0080e 	bge	r2,r3,cac0 <__muldf3+0x62c>
    caa0:	b4c0004c 	andi	r19,r22,1
    caa4:	0009883a 	mov	r4,zero
    caa8:	0021883a 	mov	r16,zero
    caac:	0025883a 	mov	r18,zero
    cab0:	003ed206 	br	c5fc <__muldf3+0x168>
    cab4:	600b883a 	mov	r5,r12
    cab8:	e02d883a 	mov	r22,fp
    cabc:	003fa706 	br	c95c <__muldf3+0x4c8>
    cac0:	008007c4 	movi	r2,31
    cac4:	10c01816 	blt	r2,r3,cb28 <__muldf3+0x694>
    cac8:	29410784 	addi	r5,r5,1054
    cacc:	8144983a 	sll	r2,r16,r5
    cad0:	90c8d83a 	srl	r4,r18,r3
    cad4:	914a983a 	sll	r5,r18,r5
    cad8:	80c6d83a 	srl	r3,r16,r3
    cadc:	2088b03a 	or	r4,r4,r2
    cae0:	2804c03a 	cmpne	r2,r5,zero
    cae4:	2084b03a 	or	r2,r4,r2
    cae8:	110001cc 	andi	r4,r2,7
    caec:	20000726 	beq	r4,zero,cb0c <__muldf3+0x678>
    caf0:	114003cc 	andi	r5,r2,15
    caf4:	01000104 	movi	r4,4
    caf8:	29000426 	beq	r5,r4,cb0c <__muldf3+0x678>
    cafc:	11000104 	addi	r4,r2,4
    cb00:	2085803a 	cmpltu	r2,r4,r2
    cb04:	1887883a 	add	r3,r3,r2
    cb08:	2005883a 	mov	r2,r4
    cb0c:	1900202c 	andhi	r4,r3,128
    cb10:	20001826 	beq	r4,zero,cb74 <__muldf3+0x6e0>
    cb14:	b4c0004c 	andi	r19,r22,1
    cb18:	01000044 	movi	r4,1
    cb1c:	0021883a 	mov	r16,zero
    cb20:	0025883a 	mov	r18,zero
    cb24:	003eb506 	br	c5fc <__muldf3+0x168>
    cb28:	00bef884 	movi	r2,-1054
    cb2c:	1145c83a 	sub	r2,r2,r5
    cb30:	8088d83a 	srl	r4,r16,r2
    cb34:	00800804 	movi	r2,32
    cb38:	18801726 	beq	r3,r2,cb98 <__muldf3+0x704>
    cb3c:	28810f84 	addi	r2,r5,1086
    cb40:	8084983a 	sll	r2,r16,r2
    cb44:	1484b03a 	or	r2,r2,r18
    cb48:	1004c03a 	cmpne	r2,r2,zero
    cb4c:	1104b03a 	or	r2,r2,r4
    cb50:	10c001cc 	andi	r3,r2,7
    cb54:	18000b1e 	bne	r3,zero,cb84 <__muldf3+0x6f0>
    cb58:	0021883a 	mov	r16,zero
    cb5c:	1004d0fa 	srli	r2,r2,3
    cb60:	b4c0004c 	andi	r19,r22,1
    cb64:	0009883a 	mov	r4,zero
    cb68:	10e4b03a 	or	r18,r2,r3
    cb6c:	003ea306 	br	c5fc <__muldf3+0x168>
    cb70:	0007883a 	mov	r3,zero
    cb74:	1820927a 	slli	r16,r3,9
    cb78:	1806977a 	slli	r3,r3,29
    cb7c:	8020d33a 	srli	r16,r16,12
    cb80:	003ff606 	br	cb5c <__muldf3+0x6c8>
    cb84:	110003cc 	andi	r4,r2,15
    cb88:	00c00104 	movi	r3,4
    cb8c:	20fff826 	beq	r4,r3,cb70 <__muldf3+0x6dc>
    cb90:	0007883a 	mov	r3,zero
    cb94:	003fd906 	br	cafc <__muldf3+0x668>
    cb98:	0005883a 	mov	r2,zero
    cb9c:	003fe906 	br	cb44 <__muldf3+0x6b0>
    cba0:	00800434 	movhi	r2,16
    cba4:	84000234 	orhi	r16,r16,8
    cba8:	10bfffc4 	addi	r2,r2,-1
    cbac:	e4c0004c 	andi	r19,fp,1
    cbb0:	80a0703a 	and	r16,r16,r2
    cbb4:	003ef606 	br	c790 <__muldf3+0x2fc>

0000cbb8 <__subdf3>:
    cbb8:	00c00434 	movhi	r3,16
    cbbc:	18ffffc4 	addi	r3,r3,-1
    cbc0:	defffb04 	addi	sp,sp,-20
    cbc4:	28d2703a 	and	r9,r5,r3
    cbc8:	3814d53a 	srli	r10,r7,20
    cbcc:	38c6703a 	and	r3,r7,r3
    cbd0:	3004d77a 	srli	r2,r6,29
    cbd4:	dc800215 	stw	r18,8(sp)
    cbd8:	dc000015 	stw	r16,0(sp)
    cbdc:	2824d7fa 	srli	r18,r5,31
    cbe0:	2820d53a 	srli	r16,r5,20
    cbe4:	481290fa 	slli	r9,r9,3
    cbe8:	200ad77a 	srli	r5,r4,29
    cbec:	180690fa 	slli	r3,r3,3
    cbf0:	dc400115 	stw	r17,4(sp)
    cbf4:	dfc00415 	stw	ra,16(sp)
    cbf8:	202290fa 	slli	r17,r4,3
    cbfc:	dcc00315 	stw	r19,12(sp)
    cc00:	5281ffcc 	andi	r10,r10,2047
    cc04:	0101ffc4 	movi	r4,2047
    cc08:	9011883a 	mov	r8,r18
    cc0c:	8401ffcc 	andi	r16,r16,2047
    cc10:	94803fcc 	andi	r18,r18,255
    cc14:	494ab03a 	or	r5,r9,r5
    cc18:	380ed7fa 	srli	r7,r7,31
    cc1c:	1886b03a 	or	r3,r3,r2
    cc20:	300c90fa 	slli	r6,r6,3
    cc24:	51009026 	beq	r10,r4,ce68 <__subdf3+0x2b0>
    cc28:	39c0005c 	xori	r7,r7,1
    cc2c:	8285c83a 	sub	r2,r16,r10
    cc30:	91c06f26 	beq	r18,r7,cdf0 <__subdf3+0x238>
    cc34:	0080b10e 	bge	zero,r2,cefc <__subdf3+0x344>
    cc38:	50002a1e 	bne	r10,zero,cce4 <__subdf3+0x12c>
    cc3c:	1988b03a 	or	r4,r3,r6
    cc40:	2000941e 	bne	r4,zero,ce94 <__subdf3+0x2dc>
    cc44:	888001cc 	andi	r2,r17,7
    cc48:	10005b26 	beq	r2,zero,cdb8 <__subdf3+0x200>
    cc4c:	88c003cc 	andi	r3,r17,15
    cc50:	00800104 	movi	r2,4
    cc54:	18805826 	beq	r3,r2,cdb8 <__subdf3+0x200>
    cc58:	88c00104 	addi	r3,r17,4
    cc5c:	1c63803a 	cmpltu	r17,r3,r17
    cc60:	2c4b883a 	add	r5,r5,r17
    cc64:	2880202c 	andhi	r2,r5,128
    cc68:	9200004c 	andi	r8,r18,1
    cc6c:	1823883a 	mov	r17,r3
    cc70:	10005426 	beq	r2,zero,cdc4 <__subdf3+0x20c>
    cc74:	84000044 	addi	r16,r16,1
    cc78:	0081ffc4 	movi	r2,2047
    cc7c:	8080bf26 	beq	r16,r2,cf7c <__subdf3+0x3c4>
    cc80:	013fe034 	movhi	r4,65408
    cc84:	213fffc4 	addi	r4,r4,-1
    cc88:	290a703a 	and	r5,r5,r4
    cc8c:	2804977a 	slli	r2,r5,29
    cc90:	280a927a 	slli	r5,r5,9
    cc94:	8822d0fa 	srli	r17,r17,3
    cc98:	8401ffcc 	andi	r16,r16,2047
    cc9c:	2808d33a 	srli	r4,r5,12
    cca0:	1444b03a 	or	r2,r2,r17
    cca4:	8401ffcc 	andi	r16,r16,2047
    cca8:	800a953a 	slli	r5,r16,20
    ccac:	40c03fcc 	andi	r3,r8,255
    ccb0:	04000434 	movhi	r16,16
    ccb4:	180697fa 	slli	r3,r3,31
    ccb8:	843fffc4 	addi	r16,r16,-1
    ccbc:	2420703a 	and	r16,r4,r16
    ccc0:	8160b03a 	or	r16,r16,r5
    ccc4:	80c6b03a 	or	r3,r16,r3
    ccc8:	dfc00417 	ldw	ra,16(sp)
    cccc:	dcc00317 	ldw	r19,12(sp)
    ccd0:	dc800217 	ldw	r18,8(sp)
    ccd4:	dc400117 	ldw	r17,4(sp)
    ccd8:	dc000017 	ldw	r16,0(sp)
    ccdc:	dec00504 	addi	sp,sp,20
    cce0:	f800283a 	ret
    cce4:	0101ffc4 	movi	r4,2047
    cce8:	813fd626 	beq	r16,r4,cc44 <__subdf3+0x8c>
    ccec:	18c02034 	orhi	r3,r3,128
    ccf0:	01000e04 	movi	r4,56
    ccf4:	2080a416 	blt	r4,r2,cf88 <__subdf3+0x3d0>
    ccf8:	010007c4 	movi	r4,31
    ccfc:	2080c716 	blt	r4,r2,d01c <__subdf3+0x464>
    cd00:	01000804 	movi	r4,32
    cd04:	2089c83a 	sub	r4,r4,r2
    cd08:	1910983a 	sll	r8,r3,r4
    cd0c:	308ed83a 	srl	r7,r6,r2
    cd10:	3108983a 	sll	r4,r6,r4
    cd14:	1884d83a 	srl	r2,r3,r2
    cd18:	41ccb03a 	or	r6,r8,r7
    cd1c:	2008c03a 	cmpne	r4,r4,zero
    cd20:	310cb03a 	or	r6,r6,r4
    cd24:	898dc83a 	sub	r6,r17,r6
    cd28:	89a3803a 	cmpltu	r17,r17,r6
    cd2c:	288bc83a 	sub	r5,r5,r2
    cd30:	2c4bc83a 	sub	r5,r5,r17
    cd34:	3023883a 	mov	r17,r6
    cd38:	2880202c 	andhi	r2,r5,128
    cd3c:	10006b26 	beq	r2,zero,ceec <__subdf3+0x334>
    cd40:	04c02034 	movhi	r19,128
    cd44:	9cffffc4 	addi	r19,r19,-1
    cd48:	2ce6703a 	and	r19,r5,r19
    cd4c:	98007c26 	beq	r19,zero,cf40 <__subdf3+0x388>
    cd50:	9809883a 	mov	r4,r19
    cd54:	000d6840 	call	d684 <__clzsi2>
    cd58:	10fffe04 	addi	r3,r2,-8
    cd5c:	010007c4 	movi	r4,31
    cd60:	20c07d16 	blt	r4,r3,cf58 <__subdf3+0x3a0>
    cd64:	01400a04 	movi	r5,40
    cd68:	2885c83a 	sub	r2,r5,r2
    cd6c:	888ad83a 	srl	r5,r17,r2
    cd70:	98e6983a 	sll	r19,r19,r3
    cd74:	88e2983a 	sll	r17,r17,r3
    cd78:	2ce6b03a 	or	r19,r5,r19
    cd7c:	1c007a16 	blt	r3,r16,cf68 <__subdf3+0x3b0>
    cd80:	1c21c83a 	sub	r16,r3,r16
    cd84:	81400044 	addi	r5,r16,1
    cd88:	00c007c4 	movi	r3,31
    cd8c:	19409616 	blt	r3,r5,cfe8 <__subdf3+0x430>
    cd90:	1c21c83a 	sub	r16,r3,r16
    cd94:	8c08983a 	sll	r4,r17,r16
    cd98:	8946d83a 	srl	r3,r17,r5
    cd9c:	9c20983a 	sll	r16,r19,r16
    cda0:	2008c03a 	cmpne	r4,r4,zero
    cda4:	994ad83a 	srl	r5,r19,r5
    cda8:	1c06b03a 	or	r3,r3,r16
    cdac:	1922b03a 	or	r17,r3,r4
    cdb0:	0021883a 	mov	r16,zero
    cdb4:	003fa306 	br	cc44 <__subdf3+0x8c>
    cdb8:	2880202c 	andhi	r2,r5,128
    cdbc:	9200004c 	andi	r8,r18,1
    cdc0:	103fac1e 	bne	r2,zero,cc74 <__subdf3+0xbc>
    cdc4:	2804977a 	slli	r2,r5,29
    cdc8:	8822d0fa 	srli	r17,r17,3
    cdcc:	00c1ffc4 	movi	r3,2047
    cdd0:	280ad0fa 	srli	r5,r5,3
    cdd4:	1444b03a 	or	r2,r2,r17
    cdd8:	80c02726 	beq	r16,r3,ce78 <__subdf3+0x2c0>
    cddc:	01000434 	movhi	r4,16
    cde0:	213fffc4 	addi	r4,r4,-1
    cde4:	80e0703a 	and	r16,r16,r3
    cde8:	2908703a 	and	r4,r5,r4
    cdec:	003fad06 	br	cca4 <__subdf3+0xec>
    cdf0:	0080690e 	bge	zero,r2,cf98 <__subdf3+0x3e0>
    cdf4:	50002f26 	beq	r10,zero,ceb4 <__subdf3+0x2fc>
    cdf8:	0101ffc4 	movi	r4,2047
    cdfc:	813f9126 	beq	r16,r4,cc44 <__subdf3+0x8c>
    ce00:	18c02034 	orhi	r3,r3,128
    ce04:	01000e04 	movi	r4,56
    ce08:	2080b00e 	bge	r4,r2,d0cc <__subdf3+0x514>
    ce0c:	198cb03a 	or	r6,r3,r6
    ce10:	300ec03a 	cmpne	r7,r6,zero
    ce14:	0005883a 	mov	r2,zero
    ce18:	3c4f883a 	add	r7,r7,r17
    ce1c:	3c63803a 	cmpltu	r17,r7,r17
    ce20:	114b883a 	add	r5,r2,r5
    ce24:	2c4b883a 	add	r5,r5,r17
    ce28:	3823883a 	mov	r17,r7
    ce2c:	2880202c 	andhi	r2,r5,128
    ce30:	10002e26 	beq	r2,zero,ceec <__subdf3+0x334>
    ce34:	84000044 	addi	r16,r16,1
    ce38:	0081ffc4 	movi	r2,2047
    ce3c:	8080de26 	beq	r16,r2,d1b8 <__subdf3+0x600>
    ce40:	00bfe034 	movhi	r2,65408
    ce44:	10bfffc4 	addi	r2,r2,-1
    ce48:	288a703a 	and	r5,r5,r2
    ce4c:	880cd07a 	srli	r6,r17,1
    ce50:	280897fa 	slli	r4,r5,31
    ce54:	88c0004c 	andi	r3,r17,1
    ce58:	30e2b03a 	or	r17,r6,r3
    ce5c:	280ad07a 	srli	r5,r5,1
    ce60:	8922b03a 	or	r17,r17,r4
    ce64:	003f7706 	br	cc44 <__subdf3+0x8c>
    ce68:	1984b03a 	or	r2,r3,r6
    ce6c:	103f6e26 	beq	r2,zero,cc28 <__subdf3+0x70>
    ce70:	39c03fcc 	andi	r7,r7,255
    ce74:	003f6d06 	br	cc2c <__subdf3+0x74>
    ce78:	1146b03a 	or	r3,r2,r5
    ce7c:	18003f26 	beq	r3,zero,cf7c <__subdf3+0x3c4>
    ce80:	00c00434 	movhi	r3,16
    ce84:	29000234 	orhi	r4,r5,8
    ce88:	18ffffc4 	addi	r3,r3,-1
    ce8c:	20c8703a 	and	r4,r4,r3
    ce90:	003f8406 	br	cca4 <__subdf3+0xec>
    ce94:	10bfffc4 	addi	r2,r2,-1
    ce98:	1000501e 	bne	r2,zero,cfdc <__subdf3+0x424>
    ce9c:	898fc83a 	sub	r7,r17,r6
    cea0:	89e3803a 	cmpltu	r17,r17,r7
    cea4:	28cbc83a 	sub	r5,r5,r3
    cea8:	2c4bc83a 	sub	r5,r5,r17
    ceac:	3823883a 	mov	r17,r7
    ceb0:	003fa106 	br	cd38 <__subdf3+0x180>
    ceb4:	1988b03a 	or	r4,r3,r6
    ceb8:	203f6226 	beq	r4,zero,cc44 <__subdf3+0x8c>
    cebc:	10bfffc4 	addi	r2,r2,-1
    cec0:	10009b1e 	bne	r2,zero,d130 <__subdf3+0x578>
    cec4:	344d883a 	add	r6,r6,r17
    cec8:	3463803a 	cmpltu	r17,r6,r17
    cecc:	194b883a 	add	r5,r3,r5
    ced0:	2c4b883a 	add	r5,r5,r17
    ced4:	3023883a 	mov	r17,r6
    ced8:	003fd406 	br	ce2c <__subdf3+0x274>
    cedc:	1106b03a 	or	r3,r2,r4
    cee0:	1800b426 	beq	r3,zero,d1b4 <__subdf3+0x5fc>
    cee4:	100b883a 	mov	r5,r2
    cee8:	2023883a 	mov	r17,r4
    ceec:	888001cc 	andi	r2,r17,7
    cef0:	103f561e 	bne	r2,zero,cc4c <__subdf3+0x94>
    cef4:	9200004c 	andi	r8,r18,1
    cef8:	003fb206 	br	cdc4 <__subdf3+0x20c>
    cefc:	1000531e 	bne	r2,zero,d04c <__subdf3+0x494>
    cf00:	80800044 	addi	r2,r16,1
    cf04:	1081ffcc 	andi	r2,r2,2047
    cf08:	01000044 	movi	r4,1
    cf0c:	2080a00e 	bge	r4,r2,d190 <__subdf3+0x5d8>
    cf10:	8985c83a 	sub	r2,r17,r6
    cf14:	8889803a 	cmpltu	r4,r17,r2
    cf18:	28e7c83a 	sub	r19,r5,r3
    cf1c:	9927c83a 	sub	r19,r19,r4
    cf20:	9900202c 	andhi	r4,r19,128
    cf24:	20006226 	beq	r4,zero,d0b0 <__subdf3+0x4f8>
    cf28:	3463c83a 	sub	r17,r6,r17
    cf2c:	194bc83a 	sub	r5,r3,r5
    cf30:	344d803a 	cmpltu	r6,r6,r17
    cf34:	29a7c83a 	sub	r19,r5,r6
    cf38:	3825883a 	mov	r18,r7
    cf3c:	983f841e 	bne	r19,zero,cd50 <__subdf3+0x198>
    cf40:	8809883a 	mov	r4,r17
    cf44:	000d6840 	call	d684 <__clzsi2>
    cf48:	10800804 	addi	r2,r2,32
    cf4c:	10fffe04 	addi	r3,r2,-8
    cf50:	010007c4 	movi	r4,31
    cf54:	20ff830e 	bge	r4,r3,cd64 <__subdf3+0x1ac>
    cf58:	14fff604 	addi	r19,r2,-40
    cf5c:	8ce6983a 	sll	r19,r17,r19
    cf60:	0023883a 	mov	r17,zero
    cf64:	1c3f860e 	bge	r3,r16,cd80 <__subdf3+0x1c8>
    cf68:	017fe034 	movhi	r5,65408
    cf6c:	297fffc4 	addi	r5,r5,-1
    cf70:	80e1c83a 	sub	r16,r16,r3
    cf74:	994a703a 	and	r5,r19,r5
    cf78:	003f3206 	br	cc44 <__subdf3+0x8c>
    cf7c:	0009883a 	mov	r4,zero
    cf80:	0005883a 	mov	r2,zero
    cf84:	003f4706 	br	cca4 <__subdf3+0xec>
    cf88:	198cb03a 	or	r6,r3,r6
    cf8c:	300cc03a 	cmpne	r6,r6,zero
    cf90:	0005883a 	mov	r2,zero
    cf94:	003f6306 	br	cd24 <__subdf3+0x16c>
    cf98:	10009d1e 	bne	r2,zero,d210 <__subdf3+0x658>
    cf9c:	81c00044 	addi	r7,r16,1
    cfa0:	3881ffcc 	andi	r2,r7,2047
    cfa4:	02400044 	movi	r9,1
    cfa8:	4880680e 	bge	r9,r2,d14c <__subdf3+0x594>
    cfac:	0081ffc4 	movi	r2,2047
    cfb0:	3880ae26 	beq	r7,r2,d26c <__subdf3+0x6b4>
    cfb4:	344d883a 	add	r6,r6,r17
    cfb8:	3463803a 	cmpltu	r17,r6,r17
    cfbc:	194b883a 	add	r5,r3,r5
    cfc0:	2c4b883a 	add	r5,r5,r17
    cfc4:	282297fa 	slli	r17,r5,31
    cfc8:	300cd07a 	srli	r6,r6,1
    cfcc:	280ad07a 	srli	r5,r5,1
    cfd0:	3821883a 	mov	r16,r7
    cfd4:	89a2b03a 	or	r17,r17,r6
    cfd8:	003f1a06 	br	cc44 <__subdf3+0x8c>
    cfdc:	0101ffc4 	movi	r4,2047
    cfe0:	813f431e 	bne	r16,r4,ccf0 <__subdf3+0x138>
    cfe4:	003f1706 	br	cc44 <__subdf3+0x8c>
    cfe8:	80bff844 	addi	r2,r16,-31
    cfec:	00c00804 	movi	r3,32
    cff0:	9884d83a 	srl	r2,r19,r2
    cff4:	28c05126 	beq	r5,r3,d13c <__subdf3+0x584>
    cff8:	00c00fc4 	movi	r3,63
    cffc:	1c21c83a 	sub	r16,r3,r16
    d000:	9c26983a 	sll	r19,r19,r16
    d004:	9c62b03a 	or	r17,r19,r17
    d008:	8822c03a 	cmpne	r17,r17,zero
    d00c:	88a2b03a 	or	r17,r17,r2
    d010:	000b883a 	mov	r5,zero
    d014:	0021883a 	mov	r16,zero
    d018:	003fb406 	br	ceec <__subdf3+0x334>
    d01c:	113ff804 	addi	r4,r2,-32
    d020:	01c00804 	movi	r7,32
    d024:	1908d83a 	srl	r4,r3,r4
    d028:	11c04626 	beq	r2,r7,d144 <__subdf3+0x58c>
    d02c:	01c01004 	movi	r7,64
    d030:	3885c83a 	sub	r2,r7,r2
    d034:	1884983a 	sll	r2,r3,r2
    d038:	118cb03a 	or	r6,r2,r6
    d03c:	300cc03a 	cmpne	r6,r6,zero
    d040:	310cb03a 	or	r6,r6,r4
    d044:	0005883a 	mov	r2,zero
    d048:	003f3606 	br	cd24 <__subdf3+0x16c>
    d04c:	80002b26 	beq	r16,zero,d0fc <__subdf3+0x544>
    d050:	0101ffc4 	movi	r4,2047
    d054:	51006926 	beq	r10,r4,d1fc <__subdf3+0x644>
    d058:	0085c83a 	sub	r2,zero,r2
    d05c:	29402034 	orhi	r5,r5,128
    d060:	01000e04 	movi	r4,56
    d064:	20807d16 	blt	r4,r2,d25c <__subdf3+0x6a4>
    d068:	010007c4 	movi	r4,31
    d06c:	2080d916 	blt	r4,r2,d3d4 <__subdf3+0x81c>
    d070:	01000804 	movi	r4,32
    d074:	2089c83a 	sub	r4,r4,r2
    d078:	2912983a 	sll	r9,r5,r4
    d07c:	8890d83a 	srl	r8,r17,r2
    d080:	8908983a 	sll	r4,r17,r4
    d084:	2884d83a 	srl	r2,r5,r2
    d088:	4a22b03a 	or	r17,r9,r8
    d08c:	2008c03a 	cmpne	r4,r4,zero
    d090:	8922b03a 	or	r17,r17,r4
    d094:	3463c83a 	sub	r17,r6,r17
    d098:	1885c83a 	sub	r2,r3,r2
    d09c:	344d803a 	cmpltu	r6,r6,r17
    d0a0:	118bc83a 	sub	r5,r2,r6
    d0a4:	5021883a 	mov	r16,r10
    d0a8:	3825883a 	mov	r18,r7
    d0ac:	003f2206 	br	cd38 <__subdf3+0x180>
    d0b0:	9886b03a 	or	r3,r19,r2
    d0b4:	18001c1e 	bne	r3,zero,d128 <__subdf3+0x570>
    d0b8:	0011883a 	mov	r8,zero
    d0bc:	000b883a 	mov	r5,zero
    d0c0:	0023883a 	mov	r17,zero
    d0c4:	0021883a 	mov	r16,zero
    d0c8:	003f3e06 	br	cdc4 <__subdf3+0x20c>
    d0cc:	010007c4 	movi	r4,31
    d0d0:	20803c16 	blt	r4,r2,d1c4 <__subdf3+0x60c>
    d0d4:	01000804 	movi	r4,32
    d0d8:	2089c83a 	sub	r4,r4,r2
    d0dc:	1912983a 	sll	r9,r3,r4
    d0e0:	308ed83a 	srl	r7,r6,r2
    d0e4:	3108983a 	sll	r4,r6,r4
    d0e8:	1884d83a 	srl	r2,r3,r2
    d0ec:	49ceb03a 	or	r7,r9,r7
    d0f0:	2008c03a 	cmpne	r4,r4,zero
    d0f4:	390eb03a 	or	r7,r7,r4
    d0f8:	003f4706 	br	ce18 <__subdf3+0x260>
    d0fc:	2c48b03a 	or	r4,r5,r17
    d100:	20003e26 	beq	r4,zero,d1fc <__subdf3+0x644>
    d104:	0084303a 	nor	r2,zero,r2
    d108:	10003a1e 	bne	r2,zero,d1f4 <__subdf3+0x63c>
    d10c:	3463c83a 	sub	r17,r6,r17
    d110:	194bc83a 	sub	r5,r3,r5
    d114:	344d803a 	cmpltu	r6,r6,r17
    d118:	298bc83a 	sub	r5,r5,r6
    d11c:	5021883a 	mov	r16,r10
    d120:	3825883a 	mov	r18,r7
    d124:	003f0406 	br	cd38 <__subdf3+0x180>
    d128:	1023883a 	mov	r17,r2
    d12c:	003f0706 	br	cd4c <__subdf3+0x194>
    d130:	0101ffc4 	movi	r4,2047
    d134:	813f331e 	bne	r16,r4,ce04 <__subdf3+0x24c>
    d138:	003ec206 	br	cc44 <__subdf3+0x8c>
    d13c:	0027883a 	mov	r19,zero
    d140:	003fb006 	br	d004 <__subdf3+0x44c>
    d144:	0005883a 	mov	r2,zero
    d148:	003fbb06 	br	d038 <__subdf3+0x480>
    d14c:	2c44b03a 	or	r2,r5,r17
    d150:	80008b1e 	bne	r16,zero,d380 <__subdf3+0x7c8>
    d154:	1000b526 	beq	r2,zero,d42c <__subdf3+0x874>
    d158:	1984b03a 	or	r2,r3,r6
    d15c:	103eb926 	beq	r2,zero,cc44 <__subdf3+0x8c>
    d160:	3449883a 	add	r4,r6,r17
    d164:	2463803a 	cmpltu	r17,r4,r17
    d168:	194b883a 	add	r5,r3,r5
    d16c:	2c4b883a 	add	r5,r5,r17
    d170:	2880202c 	andhi	r2,r5,128
    d174:	2023883a 	mov	r17,r4
    d178:	103f5c26 	beq	r2,zero,ceec <__subdf3+0x334>
    d17c:	00bfe034 	movhi	r2,65408
    d180:	10bfffc4 	addi	r2,r2,-1
    d184:	4821883a 	mov	r16,r9
    d188:	288a703a 	and	r5,r5,r2
    d18c:	003ead06 	br	cc44 <__subdf3+0x8c>
    d190:	2c44b03a 	or	r2,r5,r17
    d194:	8000291e 	bne	r16,zero,d23c <__subdf3+0x684>
    d198:	10004f1e 	bne	r2,zero,d2d8 <__subdf3+0x720>
    d19c:	1984b03a 	or	r2,r3,r6
    d1a0:	10000426 	beq	r2,zero,d1b4 <__subdf3+0x5fc>
    d1a4:	180b883a 	mov	r5,r3
    d1a8:	3023883a 	mov	r17,r6
    d1ac:	3825883a 	mov	r18,r7
    d1b0:	003ea406 	br	cc44 <__subdf3+0x8c>
    d1b4:	0011883a 	mov	r8,zero
    d1b8:	000b883a 	mov	r5,zero
    d1bc:	0023883a 	mov	r17,zero
    d1c0:	003f0006 	br	cdc4 <__subdf3+0x20c>
    d1c4:	11fff804 	addi	r7,r2,-32
    d1c8:	19c8d83a 	srl	r4,r3,r7
    d1cc:	01c00804 	movi	r7,32
    d1d0:	11c07e26 	beq	r2,r7,d3cc <__subdf3+0x814>
    d1d4:	01c01004 	movi	r7,64
    d1d8:	3885c83a 	sub	r2,r7,r2
    d1dc:	1884983a 	sll	r2,r3,r2
    d1e0:	118cb03a 	or	r6,r2,r6
    d1e4:	300ec03a 	cmpne	r7,r6,zero
    d1e8:	390eb03a 	or	r7,r7,r4
    d1ec:	0005883a 	mov	r2,zero
    d1f0:	003f0906 	br	ce18 <__subdf3+0x260>
    d1f4:	0101ffc4 	movi	r4,2047
    d1f8:	513f991e 	bne	r10,r4,d060 <__subdf3+0x4a8>
    d1fc:	180b883a 	mov	r5,r3
    d200:	3023883a 	mov	r17,r6
    d204:	5021883a 	mov	r16,r10
    d208:	3825883a 	mov	r18,r7
    d20c:	003e8d06 	br	cc44 <__subdf3+0x8c>
    d210:	80001a1e 	bne	r16,zero,d27c <__subdf3+0x6c4>
    d214:	2c48b03a 	or	r4,r5,r17
    d218:	20005526 	beq	r4,zero,d370 <__subdf3+0x7b8>
    d21c:	0084303a 	nor	r2,zero,r2
    d220:	1000511e 	bne	r2,zero,d368 <__subdf3+0x7b0>
    d224:	89a3883a 	add	r17,r17,r6
    d228:	194b883a 	add	r5,r3,r5
    d22c:	898d803a 	cmpltu	r6,r17,r6
    d230:	298b883a 	add	r5,r5,r6
    d234:	5021883a 	mov	r16,r10
    d238:	003efc06 	br	ce2c <__subdf3+0x274>
    d23c:	1000341e 	bne	r2,zero,d310 <__subdf3+0x758>
    d240:	1984b03a 	or	r2,r3,r6
    d244:	10006f26 	beq	r2,zero,d404 <__subdf3+0x84c>
    d248:	180b883a 	mov	r5,r3
    d24c:	3023883a 	mov	r17,r6
    d250:	3825883a 	mov	r18,r7
    d254:	0401ffc4 	movi	r16,2047
    d258:	003e7a06 	br	cc44 <__subdf3+0x8c>
    d25c:	2c62b03a 	or	r17,r5,r17
    d260:	8822c03a 	cmpne	r17,r17,zero
    d264:	0005883a 	mov	r2,zero
    d268:	003f8a06 	br	d094 <__subdf3+0x4dc>
    d26c:	3821883a 	mov	r16,r7
    d270:	000b883a 	mov	r5,zero
    d274:	0023883a 	mov	r17,zero
    d278:	003ed206 	br	cdc4 <__subdf3+0x20c>
    d27c:	0101ffc4 	movi	r4,2047
    d280:	51003b26 	beq	r10,r4,d370 <__subdf3+0x7b8>
    d284:	0085c83a 	sub	r2,zero,r2
    d288:	29402034 	orhi	r5,r5,128
    d28c:	01000e04 	movi	r4,56
    d290:	20806216 	blt	r4,r2,d41c <__subdf3+0x864>
    d294:	010007c4 	movi	r4,31
    d298:	20806b16 	blt	r4,r2,d448 <__subdf3+0x890>
    d29c:	01000804 	movi	r4,32
    d2a0:	2089c83a 	sub	r4,r4,r2
    d2a4:	2912983a 	sll	r9,r5,r4
    d2a8:	888ed83a 	srl	r7,r17,r2
    d2ac:	8908983a 	sll	r4,r17,r4
    d2b0:	2884d83a 	srl	r2,r5,r2
    d2b4:	49e2b03a 	or	r17,r9,r7
    d2b8:	2008c03a 	cmpne	r4,r4,zero
    d2bc:	8922b03a 	or	r17,r17,r4
    d2c0:	89a3883a 	add	r17,r17,r6
    d2c4:	10c5883a 	add	r2,r2,r3
    d2c8:	898d803a 	cmpltu	r6,r17,r6
    d2cc:	118b883a 	add	r5,r2,r6
    d2d0:	5021883a 	mov	r16,r10
    d2d4:	003ed506 	br	ce2c <__subdf3+0x274>
    d2d8:	1984b03a 	or	r2,r3,r6
    d2dc:	103e5926 	beq	r2,zero,cc44 <__subdf3+0x8c>
    d2e0:	8989c83a 	sub	r4,r17,r6
    d2e4:	8911803a 	cmpltu	r8,r17,r4
    d2e8:	28c5c83a 	sub	r2,r5,r3
    d2ec:	1205c83a 	sub	r2,r2,r8
    d2f0:	1200202c 	andhi	r8,r2,128
    d2f4:	403ef926 	beq	r8,zero,cedc <__subdf3+0x324>
    d2f8:	3463c83a 	sub	r17,r6,r17
    d2fc:	194bc83a 	sub	r5,r3,r5
    d300:	344d803a 	cmpltu	r6,r6,r17
    d304:	298bc83a 	sub	r5,r5,r6
    d308:	3825883a 	mov	r18,r7
    d30c:	003e4d06 	br	cc44 <__subdf3+0x8c>
    d310:	1984b03a 	or	r2,r3,r6
    d314:	10002b26 	beq	r2,zero,d3c4 <__subdf3+0x80c>
    d318:	2808d0fa 	srli	r4,r5,3
    d31c:	8822d0fa 	srli	r17,r17,3
    d320:	280a977a 	slli	r5,r5,29
    d324:	2080022c 	andhi	r2,r4,8
    d328:	2c62b03a 	or	r17,r5,r17
    d32c:	10000826 	beq	r2,zero,d350 <__subdf3+0x798>
    d330:	1810d0fa 	srli	r8,r3,3
    d334:	4080022c 	andhi	r2,r8,8
    d338:	1000051e 	bne	r2,zero,d350 <__subdf3+0x798>
    d33c:	300cd0fa 	srli	r6,r6,3
    d340:	1804977a 	slli	r2,r3,29
    d344:	4009883a 	mov	r4,r8
    d348:	3825883a 	mov	r18,r7
    d34c:	11a2b03a 	or	r17,r2,r6
    d350:	880ad77a 	srli	r5,r17,29
    d354:	200890fa 	slli	r4,r4,3
    d358:	882290fa 	slli	r17,r17,3
    d35c:	0401ffc4 	movi	r16,2047
    d360:	290ab03a 	or	r5,r5,r4
    d364:	003e3706 	br	cc44 <__subdf3+0x8c>
    d368:	0101ffc4 	movi	r4,2047
    d36c:	513fc71e 	bne	r10,r4,d28c <__subdf3+0x6d4>
    d370:	180b883a 	mov	r5,r3
    d374:	3023883a 	mov	r17,r6
    d378:	5021883a 	mov	r16,r10
    d37c:	003e3106 	br	cc44 <__subdf3+0x8c>
    d380:	10002d26 	beq	r2,zero,d438 <__subdf3+0x880>
    d384:	1984b03a 	or	r2,r3,r6
    d388:	10000e26 	beq	r2,zero,d3c4 <__subdf3+0x80c>
    d38c:	2808d0fa 	srli	r4,r5,3
    d390:	8822d0fa 	srli	r17,r17,3
    d394:	280a977a 	slli	r5,r5,29
    d398:	2080022c 	andhi	r2,r4,8
    d39c:	2c62b03a 	or	r17,r5,r17
    d3a0:	103feb26 	beq	r2,zero,d350 <__subdf3+0x798>
    d3a4:	180ed0fa 	srli	r7,r3,3
    d3a8:	3880022c 	andhi	r2,r7,8
    d3ac:	103fe81e 	bne	r2,zero,d350 <__subdf3+0x798>
    d3b0:	300cd0fa 	srli	r6,r6,3
    d3b4:	1804977a 	slli	r2,r3,29
    d3b8:	3809883a 	mov	r4,r7
    d3bc:	11a2b03a 	or	r17,r2,r6
    d3c0:	003fe306 	br	d350 <__subdf3+0x798>
    d3c4:	0401ffc4 	movi	r16,2047
    d3c8:	003e1e06 	br	cc44 <__subdf3+0x8c>
    d3cc:	0005883a 	mov	r2,zero
    d3d0:	003f8306 	br	d1e0 <__subdf3+0x628>
    d3d4:	113ff804 	addi	r4,r2,-32
    d3d8:	02000804 	movi	r8,32
    d3dc:	2908d83a 	srl	r4,r5,r4
    d3e0:	12002526 	beq	r2,r8,d478 <__subdf3+0x8c0>
    d3e4:	02001004 	movi	r8,64
    d3e8:	4085c83a 	sub	r2,r8,r2
    d3ec:	288a983a 	sll	r5,r5,r2
    d3f0:	2c62b03a 	or	r17,r5,r17
    d3f4:	8822c03a 	cmpne	r17,r17,zero
    d3f8:	8922b03a 	or	r17,r17,r4
    d3fc:	0005883a 	mov	r2,zero
    d400:	003f2406 	br	d094 <__subdf3+0x4dc>
    d404:	01402034 	movhi	r5,128
    d408:	0011883a 	mov	r8,zero
    d40c:	297fffc4 	addi	r5,r5,-1
    d410:	047ffe04 	movi	r17,-8
    d414:	0401ffc4 	movi	r16,2047
    d418:	003e6a06 	br	cdc4 <__subdf3+0x20c>
    d41c:	2c62b03a 	or	r17,r5,r17
    d420:	8822c03a 	cmpne	r17,r17,zero
    d424:	0005883a 	mov	r2,zero
    d428:	003fa506 	br	d2c0 <__subdf3+0x708>
    d42c:	180b883a 	mov	r5,r3
    d430:	3023883a 	mov	r17,r6
    d434:	003e0306 	br	cc44 <__subdf3+0x8c>
    d438:	180b883a 	mov	r5,r3
    d43c:	3023883a 	mov	r17,r6
    d440:	0401ffc4 	movi	r16,2047
    d444:	003dff06 	br	cc44 <__subdf3+0x8c>
    d448:	113ff804 	addi	r4,r2,-32
    d44c:	01c00804 	movi	r7,32
    d450:	2908d83a 	srl	r4,r5,r4
    d454:	11c00a26 	beq	r2,r7,d480 <__subdf3+0x8c8>
    d458:	01c01004 	movi	r7,64
    d45c:	3885c83a 	sub	r2,r7,r2
    d460:	288a983a 	sll	r5,r5,r2
    d464:	2c62b03a 	or	r17,r5,r17
    d468:	8822c03a 	cmpne	r17,r17,zero
    d46c:	8922b03a 	or	r17,r17,r4
    d470:	0005883a 	mov	r2,zero
    d474:	003f9206 	br	d2c0 <__subdf3+0x708>
    d478:	000b883a 	mov	r5,zero
    d47c:	003fdc06 	br	d3f0 <__subdf3+0x838>
    d480:	000b883a 	mov	r5,zero
    d484:	003ff706 	br	d464 <__subdf3+0x8ac>

0000d488 <__fixdfsi>:
    d488:	2806d53a 	srli	r3,r5,20
    d48c:	00800434 	movhi	r2,16
    d490:	10bfffc4 	addi	r2,r2,-1
    d494:	18c1ffcc 	andi	r3,r3,2047
    d498:	0180ff84 	movi	r6,1022
    d49c:	2884703a 	and	r2,r5,r2
    d4a0:	280ad7fa 	srli	r5,r5,31
    d4a4:	30c0130e 	bge	r6,r3,d4f4 <__fixdfsi+0x6c>
    d4a8:	01810744 	movi	r6,1053
    d4ac:	30c00d16 	blt	r6,r3,d4e4 <__fixdfsi+0x5c>
    d4b0:	01810cc4 	movi	r6,1075
    d4b4:	30cdc83a 	sub	r6,r6,r3
    d4b8:	01c007c4 	movi	r7,31
    d4bc:	10800434 	orhi	r2,r2,16
    d4c0:	39800e0e 	bge	r7,r6,d4fc <__fixdfsi+0x74>
    d4c4:	010104c4 	movi	r4,1043
    d4c8:	20c7c83a 	sub	r3,r4,r3
    d4cc:	10c6d83a 	srl	r3,r2,r3
    d4d0:	29403fcc 	andi	r5,r5,255
    d4d4:	0145c83a 	sub	r2,zero,r5
    d4d8:	1884f03a 	xor	r2,r3,r2
    d4dc:	1145883a 	add	r2,r2,r5
    d4e0:	f800283a 	ret
    d4e4:	00a00034 	movhi	r2,32768
    d4e8:	10bfffc4 	addi	r2,r2,-1
    d4ec:	2885883a 	add	r2,r5,r2
    d4f0:	f800283a 	ret
    d4f4:	0005883a 	mov	r2,zero
    d4f8:	f800283a 	ret
    d4fc:	18fefb44 	addi	r3,r3,-1043
    d500:	2188d83a 	srl	r4,r4,r6
    d504:	10c6983a 	sll	r3,r2,r3
    d508:	20c6b03a 	or	r3,r4,r3
    d50c:	003ff006 	br	d4d0 <__fixdfsi+0x48>

0000d510 <__floatsidf>:
    d510:	defffd04 	addi	sp,sp,-12
    d514:	dc400115 	stw	r17,4(sp)
    d518:	dfc00215 	stw	ra,8(sp)
    d51c:	dc000015 	stw	r16,0(sp)
    d520:	2023883a 	mov	r17,r4
    d524:	20001426 	beq	r4,zero,d578 <__floatsidf+0x68>
    d528:	2020d7fa 	srli	r16,r4,31
    d52c:	80000126 	beq	r16,zero,d534 <__floatsidf+0x24>
    d530:	0123c83a 	sub	r17,zero,r4
    d534:	8809883a 	mov	r4,r17
    d538:	000d6840 	call	d684 <__clzsi2>
    d53c:	01410784 	movi	r5,1054
    d540:	00c00284 	movi	r3,10
    d544:	288bc83a 	sub	r5,r5,r2
    d548:	18801c16 	blt	r3,r2,d5bc <__floatsidf+0xac>
    d54c:	00c002c4 	movi	r3,11
    d550:	1887c83a 	sub	r3,r3,r2
    d554:	88c8d83a 	srl	r4,r17,r3
    d558:	00c00434 	movhi	r3,16
    d55c:	18ffffc4 	addi	r3,r3,-1
    d560:	10800544 	addi	r2,r2,21
    d564:	20c8703a 	and	r4,r4,r3
    d568:	8884983a 	sll	r2,r17,r2
    d56c:	28c1ffcc 	andi	r3,r5,2047
    d570:	800d883a 	mov	r6,r16
    d574:	00000406 	br	d588 <__floatsidf+0x78>
    d578:	000d883a 	mov	r6,zero
    d57c:	0007883a 	mov	r3,zero
    d580:	0009883a 	mov	r4,zero
    d584:	0005883a 	mov	r2,zero
    d588:	180a953a 	slli	r5,r3,20
    d58c:	31803fcc 	andi	r6,r6,255
    d590:	00c00434 	movhi	r3,16
    d594:	300c97fa 	slli	r6,r6,31
    d598:	18ffffc4 	addi	r3,r3,-1
    d59c:	20c6703a 	and	r3,r4,r3
    d5a0:	1946b03a 	or	r3,r3,r5
    d5a4:	1986b03a 	or	r3,r3,r6
    d5a8:	dfc00217 	ldw	ra,8(sp)
    d5ac:	dc400117 	ldw	r17,4(sp)
    d5b0:	dc000017 	ldw	r16,0(sp)
    d5b4:	dec00304 	addi	sp,sp,12
    d5b8:	f800283a 	ret
    d5bc:	10fffd44 	addi	r3,r2,-11
    d5c0:	88c8983a 	sll	r4,r17,r3
    d5c4:	00800434 	movhi	r2,16
    d5c8:	10bfffc4 	addi	r2,r2,-1
    d5cc:	2088703a 	and	r4,r4,r2
    d5d0:	28c1ffcc 	andi	r3,r5,2047
    d5d4:	800d883a 	mov	r6,r16
    d5d8:	0005883a 	mov	r2,zero
    d5dc:	003fea06 	br	d588 <__floatsidf+0x78>

0000d5e0 <__floatunsidf>:
    d5e0:	defffe04 	addi	sp,sp,-8
    d5e4:	dc000015 	stw	r16,0(sp)
    d5e8:	dfc00115 	stw	ra,4(sp)
    d5ec:	2021883a 	mov	r16,r4
    d5f0:	20001026 	beq	r4,zero,d634 <__floatunsidf+0x54>
    d5f4:	000d6840 	call	d684 <__clzsi2>
    d5f8:	01410784 	movi	r5,1054
    d5fc:	100d883a 	mov	r6,r2
    d600:	288bc83a 	sub	r5,r5,r2
    d604:	00800284 	movi	r2,10
    d608:	11801616 	blt	r2,r6,d664 <__floatunsidf+0x84>
    d60c:	008002c4 	movi	r2,11
    d610:	1185c83a 	sub	r2,r2,r6
    d614:	8084d83a 	srl	r2,r16,r2
    d618:	00c00434 	movhi	r3,16
    d61c:	31c00544 	addi	r7,r6,21
    d620:	18ffffc4 	addi	r3,r3,-1
    d624:	81e0983a 	sll	r16,r16,r7
    d628:	10cc703a 	and	r6,r2,r3
    d62c:	2941ffcc 	andi	r5,r5,2047
    d630:	00000206 	br	d63c <__floatunsidf+0x5c>
    d634:	000b883a 	mov	r5,zero
    d638:	000d883a 	mov	r6,zero
    d63c:	280a953a 	slli	r5,r5,20
    d640:	00c00434 	movhi	r3,16
    d644:	18ffffc4 	addi	r3,r3,-1
    d648:	30c6703a 	and	r3,r6,r3
    d64c:	8005883a 	mov	r2,r16
    d650:	1946b03a 	or	r3,r3,r5
    d654:	dfc00117 	ldw	ra,4(sp)
    d658:	dc000017 	ldw	r16,0(sp)
    d65c:	dec00204 	addi	sp,sp,8
    d660:	f800283a 	ret
    d664:	31bffd44 	addi	r6,r6,-11
    d668:	818c983a 	sll	r6,r16,r6
    d66c:	00800434 	movhi	r2,16
    d670:	10bfffc4 	addi	r2,r2,-1
    d674:	2941ffcc 	andi	r5,r5,2047
    d678:	0021883a 	mov	r16,zero
    d67c:	308c703a 	and	r6,r6,r2
    d680:	003fee06 	br	d63c <__floatunsidf+0x5c>

0000d684 <__clzsi2>:
    d684:	00bfffd4 	movui	r2,65535
    d688:	11000b36 	bltu	r2,r4,d6b8 <__clzsi2+0x34>
    d68c:	00803fc4 	movi	r2,255
    d690:	1100122e 	bgeu	r2,r4,d6dc <__clzsi2+0x58>
    d694:	00c00204 	movi	r3,8
    d698:	01400604 	movi	r5,24
    d69c:	20c8d83a 	srl	r4,r4,r3
    d6a0:	00800074 	movhi	r2,1
    d6a4:	10805c04 	addi	r2,r2,368
    d6a8:	1109883a 	add	r4,r2,r4
    d6ac:	20800003 	ldbu	r2,0(r4)
    d6b0:	2885c83a 	sub	r2,r5,r2
    d6b4:	f800283a 	ret
    d6b8:	00804034 	movhi	r2,256
    d6bc:	10bfffc4 	addi	r2,r2,-1
    d6c0:	11000336 	bltu	r2,r4,d6d0 <__clzsi2+0x4c>
    d6c4:	00c00404 	movi	r3,16
    d6c8:	180b883a 	mov	r5,r3
    d6cc:	003ff306 	br	d69c <__clzsi2+0x18>
    d6d0:	00c00604 	movi	r3,24
    d6d4:	01400204 	movi	r5,8
    d6d8:	003ff006 	br	d69c <__clzsi2+0x18>
    d6dc:	0007883a 	mov	r3,zero
    d6e0:	01400804 	movi	r5,32
    d6e4:	003fed06 	br	d69c <__clzsi2+0x18>

0000d6e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6e8:	defffe04 	addi	sp,sp,-8
    d6ec:	dfc00115 	stw	ra,4(sp)
    d6f0:	df000015 	stw	fp,0(sp)
    d6f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6f8:	00800074 	movhi	r2,1
    d6fc:	10875d04 	addi	r2,r2,7540
    d700:	10800017 	ldw	r2,0(r2)
    d704:	10000526 	beq	r2,zero,d71c <alt_get_errno+0x34>
    d708:	00800074 	movhi	r2,1
    d70c:	10875d04 	addi	r2,r2,7540
    d710:	10800017 	ldw	r2,0(r2)
    d714:	103ee83a 	callr	r2
    d718:	00000206 	br	d724 <alt_get_errno+0x3c>
    d71c:	00800074 	movhi	r2,1
    d720:	108e2004 	addi	r2,r2,14464
}
    d724:	e037883a 	mov	sp,fp
    d728:	dfc00117 	ldw	ra,4(sp)
    d72c:	df000017 	ldw	fp,0(sp)
    d730:	dec00204 	addi	sp,sp,8
    d734:	f800283a 	ret

0000d738 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d738:	defffb04 	addi	sp,sp,-20
    d73c:	dfc00415 	stw	ra,16(sp)
    d740:	df000315 	stw	fp,12(sp)
    d744:	df000304 	addi	fp,sp,12
    d748:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d74c:	e0bfff17 	ldw	r2,-4(fp)
    d750:	10000616 	blt	r2,zero,d76c <close+0x34>
    d754:	e0bfff17 	ldw	r2,-4(fp)
    d758:	10c00324 	muli	r3,r2,12
    d75c:	00800074 	movhi	r2,1
    d760:	1082da04 	addi	r2,r2,2920
    d764:	1885883a 	add	r2,r3,r2
    d768:	00000106 	br	d770 <close+0x38>
    d76c:	0005883a 	mov	r2,zero
    d770:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d774:	e0bffd17 	ldw	r2,-12(fp)
    d778:	10001926 	beq	r2,zero,d7e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d77c:	e0bffd17 	ldw	r2,-12(fp)
    d780:	10800017 	ldw	r2,0(r2)
    d784:	10800417 	ldw	r2,16(r2)
    d788:	10000626 	beq	r2,zero,d7a4 <close+0x6c>
    d78c:	e0bffd17 	ldw	r2,-12(fp)
    d790:	10800017 	ldw	r2,0(r2)
    d794:	10800417 	ldw	r2,16(r2)
    d798:	e13ffd17 	ldw	r4,-12(fp)
    d79c:	103ee83a 	callr	r2
    d7a0:	00000106 	br	d7a8 <close+0x70>
    d7a4:	0005883a 	mov	r2,zero
    d7a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d7ac:	e13fff17 	ldw	r4,-4(fp)
    d7b0:	000de340 	call	de34 <alt_release_fd>
    if (rval < 0)
    d7b4:	e0bffe17 	ldw	r2,-8(fp)
    d7b8:	1000070e 	bge	r2,zero,d7d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d7bc:	000d6e80 	call	d6e8 <alt_get_errno>
    d7c0:	1007883a 	mov	r3,r2
    d7c4:	e0bffe17 	ldw	r2,-8(fp)
    d7c8:	0085c83a 	sub	r2,zero,r2
    d7cc:	18800015 	stw	r2,0(r3)
      return -1;
    d7d0:	00bfffc4 	movi	r2,-1
    d7d4:	00000706 	br	d7f4 <close+0xbc>
    }
    return 0;
    d7d8:	0005883a 	mov	r2,zero
    d7dc:	00000506 	br	d7f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d7e0:	000d6e80 	call	d6e8 <alt_get_errno>
    d7e4:	1007883a 	mov	r3,r2
    d7e8:	00801444 	movi	r2,81
    d7ec:	18800015 	stw	r2,0(r3)
    return -1;
    d7f0:	00bfffc4 	movi	r2,-1
  }
}
    d7f4:	e037883a 	mov	sp,fp
    d7f8:	dfc00117 	ldw	ra,4(sp)
    d7fc:	df000017 	ldw	fp,0(sp)
    d800:	dec00204 	addi	sp,sp,8
    d804:	f800283a 	ret

0000d808 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d808:	defffc04 	addi	sp,sp,-16
    d80c:	df000315 	stw	fp,12(sp)
    d810:	df000304 	addi	fp,sp,12
    d814:	e13ffd15 	stw	r4,-12(fp)
    d818:	e17ffe15 	stw	r5,-8(fp)
    d81c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d820:	e0bfff17 	ldw	r2,-4(fp)
}
    d824:	e037883a 	mov	sp,fp
    d828:	df000017 	ldw	fp,0(sp)
    d82c:	dec00104 	addi	sp,sp,4
    d830:	f800283a 	ret

0000d834 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d834:	defffe04 	addi	sp,sp,-8
    d838:	dfc00115 	stw	ra,4(sp)
    d83c:	df000015 	stw	fp,0(sp)
    d840:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d844:	00800074 	movhi	r2,1
    d848:	10875d04 	addi	r2,r2,7540
    d84c:	10800017 	ldw	r2,0(r2)
    d850:	10000526 	beq	r2,zero,d868 <alt_get_errno+0x34>
    d854:	00800074 	movhi	r2,1
    d858:	10875d04 	addi	r2,r2,7540
    d85c:	10800017 	ldw	r2,0(r2)
    d860:	103ee83a 	callr	r2
    d864:	00000206 	br	d870 <alt_get_errno+0x3c>
    d868:	00800074 	movhi	r2,1
    d86c:	108e2004 	addi	r2,r2,14464
}
    d870:	e037883a 	mov	sp,fp
    d874:	dfc00117 	ldw	ra,4(sp)
    d878:	df000017 	ldw	fp,0(sp)
    d87c:	dec00204 	addi	sp,sp,8
    d880:	f800283a 	ret

0000d884 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d884:	defffb04 	addi	sp,sp,-20
    d888:	dfc00415 	stw	ra,16(sp)
    d88c:	df000315 	stw	fp,12(sp)
    d890:	df000304 	addi	fp,sp,12
    d894:	e13ffe15 	stw	r4,-8(fp)
    d898:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d89c:	e0bffe17 	ldw	r2,-8(fp)
    d8a0:	10000616 	blt	r2,zero,d8bc <fstat+0x38>
    d8a4:	e0bffe17 	ldw	r2,-8(fp)
    d8a8:	10c00324 	muli	r3,r2,12
    d8ac:	00800074 	movhi	r2,1
    d8b0:	1082da04 	addi	r2,r2,2920
    d8b4:	1885883a 	add	r2,r3,r2
    d8b8:	00000106 	br	d8c0 <fstat+0x3c>
    d8bc:	0005883a 	mov	r2,zero
    d8c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d8c4:	e0bffd17 	ldw	r2,-12(fp)
    d8c8:	10001026 	beq	r2,zero,d90c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d8cc:	e0bffd17 	ldw	r2,-12(fp)
    d8d0:	10800017 	ldw	r2,0(r2)
    d8d4:	10800817 	ldw	r2,32(r2)
    d8d8:	10000726 	beq	r2,zero,d8f8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d8dc:	e0bffd17 	ldw	r2,-12(fp)
    d8e0:	10800017 	ldw	r2,0(r2)
    d8e4:	10800817 	ldw	r2,32(r2)
    d8e8:	e13ffd17 	ldw	r4,-12(fp)
    d8ec:	e17fff17 	ldw	r5,-4(fp)
    d8f0:	103ee83a 	callr	r2
    d8f4:	00000a06 	br	d920 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d8f8:	e0bfff17 	ldw	r2,-4(fp)
    d8fc:	00c80004 	movi	r3,8192
    d900:	10c00115 	stw	r3,4(r2)
      return 0;
    d904:	0005883a 	mov	r2,zero
    d908:	00000506 	br	d920 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d90c:	000d8340 	call	d834 <alt_get_errno>
    d910:	1007883a 	mov	r3,r2
    d914:	00801444 	movi	r2,81
    d918:	18800015 	stw	r2,0(r3)
    return -1;
    d91c:	00bfffc4 	movi	r2,-1
  }
}
    d920:	e037883a 	mov	sp,fp
    d924:	dfc00117 	ldw	ra,4(sp)
    d928:	df000017 	ldw	fp,0(sp)
    d92c:	dec00204 	addi	sp,sp,8
    d930:	f800283a 	ret

0000d934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d934:	defffe04 	addi	sp,sp,-8
    d938:	dfc00115 	stw	ra,4(sp)
    d93c:	df000015 	stw	fp,0(sp)
    d940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d944:	00800074 	movhi	r2,1
    d948:	10875d04 	addi	r2,r2,7540
    d94c:	10800017 	ldw	r2,0(r2)
    d950:	10000526 	beq	r2,zero,d968 <alt_get_errno+0x34>
    d954:	00800074 	movhi	r2,1
    d958:	10875d04 	addi	r2,r2,7540
    d95c:	10800017 	ldw	r2,0(r2)
    d960:	103ee83a 	callr	r2
    d964:	00000206 	br	d970 <alt_get_errno+0x3c>
    d968:	00800074 	movhi	r2,1
    d96c:	108e2004 	addi	r2,r2,14464
}
    d970:	e037883a 	mov	sp,fp
    d974:	dfc00117 	ldw	ra,4(sp)
    d978:	df000017 	ldw	fp,0(sp)
    d97c:	dec00204 	addi	sp,sp,8
    d980:	f800283a 	ret

0000d984 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d984:	deffed04 	addi	sp,sp,-76
    d988:	dfc01215 	stw	ra,72(sp)
    d98c:	df001115 	stw	fp,68(sp)
    d990:	df001104 	addi	fp,sp,68
    d994:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d998:	e0bfff17 	ldw	r2,-4(fp)
    d99c:	10000616 	blt	r2,zero,d9b8 <isatty+0x34>
    d9a0:	e0bfff17 	ldw	r2,-4(fp)
    d9a4:	10c00324 	muli	r3,r2,12
    d9a8:	00800074 	movhi	r2,1
    d9ac:	1082da04 	addi	r2,r2,2920
    d9b0:	1885883a 	add	r2,r3,r2
    d9b4:	00000106 	br	d9bc <isatty+0x38>
    d9b8:	0005883a 	mov	r2,zero
    d9bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d9c0:	e0bfef17 	ldw	r2,-68(fp)
    d9c4:	10000e26 	beq	r2,zero,da00 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d9c8:	e0bfef17 	ldw	r2,-68(fp)
    d9cc:	10800017 	ldw	r2,0(r2)
    d9d0:	10800817 	ldw	r2,32(r2)
    d9d4:	1000021e 	bne	r2,zero,d9e0 <isatty+0x5c>
    {
      return 1;
    d9d8:	00800044 	movi	r2,1
    d9dc:	00000d06 	br	da14 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d9e0:	e0bff004 	addi	r2,fp,-64
    d9e4:	e13fff17 	ldw	r4,-4(fp)
    d9e8:	100b883a 	mov	r5,r2
    d9ec:	000d8840 	call	d884 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d9f0:	e0bff117 	ldw	r2,-60(fp)
    d9f4:	10880020 	cmpeqi	r2,r2,8192
    d9f8:	10803fcc 	andi	r2,r2,255
    d9fc:	00000506 	br	da14 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    da00:	000d9340 	call	d934 <alt_get_errno>
    da04:	1007883a 	mov	r3,r2
    da08:	00801444 	movi	r2,81
    da0c:	18800015 	stw	r2,0(r3)
    return 0;
    da10:	0005883a 	mov	r2,zero
  }
}
    da14:	e037883a 	mov	sp,fp
    da18:	dfc00117 	ldw	ra,4(sp)
    da1c:	df000017 	ldw	fp,0(sp)
    da20:	dec00204 	addi	sp,sp,8
    da24:	f800283a 	ret

0000da28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    da28:	defffc04 	addi	sp,sp,-16
    da2c:	df000315 	stw	fp,12(sp)
    da30:	df000304 	addi	fp,sp,12
    da34:	e13ffd15 	stw	r4,-12(fp)
    da38:	e17ffe15 	stw	r5,-8(fp)
    da3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    da40:	e0fffe17 	ldw	r3,-8(fp)
    da44:	e0bffd17 	ldw	r2,-12(fp)
    da48:	18800c26 	beq	r3,r2,da7c <alt_load_section+0x54>
  {
    while( to != end )
    da4c:	00000806 	br	da70 <alt_load_section+0x48>
    {
      *to++ = *from++;
    da50:	e0bffe17 	ldw	r2,-8(fp)
    da54:	10c00104 	addi	r3,r2,4
    da58:	e0fffe15 	stw	r3,-8(fp)
    da5c:	e0fffd17 	ldw	r3,-12(fp)
    da60:	19000104 	addi	r4,r3,4
    da64:	e13ffd15 	stw	r4,-12(fp)
    da68:	18c00017 	ldw	r3,0(r3)
    da6c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    da70:	e0fffe17 	ldw	r3,-8(fp)
    da74:	e0bfff17 	ldw	r2,-4(fp)
    da78:	18bff51e 	bne	r3,r2,da50 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    da7c:	e037883a 	mov	sp,fp
    da80:	df000017 	ldw	fp,0(sp)
    da84:	dec00104 	addi	sp,sp,4
    da88:	f800283a 	ret

0000da8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    da8c:	defffe04 	addi	sp,sp,-8
    da90:	dfc00115 	stw	ra,4(sp)
    da94:	df000015 	stw	fp,0(sp)
    da98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    da9c:	01000074 	movhi	r4,1
    daa0:	21076204 	addi	r4,r4,7560
    daa4:	01400074 	movhi	r5,1
    daa8:	2940a704 	addi	r5,r5,668
    daac:	01800074 	movhi	r6,1
    dab0:	31876204 	addi	r6,r6,7560
    dab4:	000da280 	call	da28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    dab8:	01000034 	movhi	r4,0
    dabc:	21000804 	addi	r4,r4,32
    dac0:	01400034 	movhi	r5,0
    dac4:	29400804 	addi	r5,r5,32
    dac8:	01800034 	movhi	r6,0
    dacc:	31806f04 	addi	r6,r6,444
    dad0:	000da280 	call	da28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    dad4:	01000074 	movhi	r4,1
    dad8:	213fc204 	addi	r4,r4,-248
    dadc:	01400074 	movhi	r5,1
    dae0:	297fc204 	addi	r5,r5,-248
    dae4:	01800074 	movhi	r6,1
    dae8:	3180a704 	addi	r6,r6,668
    daec:	000da280 	call	da28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    daf0:	000ee500 	call	ee50 <alt_dcache_flush_all>
  alt_icache_flush_all();
    daf4:	000f0180 	call	f018 <alt_icache_flush_all>
}
    daf8:	e037883a 	mov	sp,fp
    dafc:	dfc00117 	ldw	ra,4(sp)
    db00:	df000017 	ldw	fp,0(sp)
    db04:	dec00204 	addi	sp,sp,8
    db08:	f800283a 	ret

0000db0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db0c:	defffe04 	addi	sp,sp,-8
    db10:	dfc00115 	stw	ra,4(sp)
    db14:	df000015 	stw	fp,0(sp)
    db18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db1c:	00800074 	movhi	r2,1
    db20:	10875d04 	addi	r2,r2,7540
    db24:	10800017 	ldw	r2,0(r2)
    db28:	10000526 	beq	r2,zero,db40 <alt_get_errno+0x34>
    db2c:	00800074 	movhi	r2,1
    db30:	10875d04 	addi	r2,r2,7540
    db34:	10800017 	ldw	r2,0(r2)
    db38:	103ee83a 	callr	r2
    db3c:	00000206 	br	db48 <alt_get_errno+0x3c>
    db40:	00800074 	movhi	r2,1
    db44:	108e2004 	addi	r2,r2,14464
}
    db48:	e037883a 	mov	sp,fp
    db4c:	dfc00117 	ldw	ra,4(sp)
    db50:	df000017 	ldw	fp,0(sp)
    db54:	dec00204 	addi	sp,sp,8
    db58:	f800283a 	ret

0000db5c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    db5c:	defff904 	addi	sp,sp,-28
    db60:	dfc00615 	stw	ra,24(sp)
    db64:	df000515 	stw	fp,20(sp)
    db68:	df000504 	addi	fp,sp,20
    db6c:	e13ffd15 	stw	r4,-12(fp)
    db70:	e17ffe15 	stw	r5,-8(fp)
    db74:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    db78:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    db7c:	e0bffd17 	ldw	r2,-12(fp)
    db80:	10000616 	blt	r2,zero,db9c <lseek+0x40>
    db84:	e0bffd17 	ldw	r2,-12(fp)
    db88:	10c00324 	muli	r3,r2,12
    db8c:	00800074 	movhi	r2,1
    db90:	1082da04 	addi	r2,r2,2920
    db94:	1885883a 	add	r2,r3,r2
    db98:	00000106 	br	dba0 <lseek+0x44>
    db9c:	0005883a 	mov	r2,zero
    dba0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    dba4:	e0bffc17 	ldw	r2,-16(fp)
    dba8:	10001026 	beq	r2,zero,dbec <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    dbac:	e0bffc17 	ldw	r2,-16(fp)
    dbb0:	10800017 	ldw	r2,0(r2)
    dbb4:	10800717 	ldw	r2,28(r2)
    dbb8:	10000926 	beq	r2,zero,dbe0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    dbbc:	e0bffc17 	ldw	r2,-16(fp)
    dbc0:	10800017 	ldw	r2,0(r2)
    dbc4:	10800717 	ldw	r2,28(r2)
    dbc8:	e13ffc17 	ldw	r4,-16(fp)
    dbcc:	e17ffe17 	ldw	r5,-8(fp)
    dbd0:	e1bfff17 	ldw	r6,-4(fp)
    dbd4:	103ee83a 	callr	r2
    dbd8:	e0bffb15 	stw	r2,-20(fp)
    dbdc:	00000506 	br	dbf4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dbe0:	00bfde84 	movi	r2,-134
    dbe4:	e0bffb15 	stw	r2,-20(fp)
    dbe8:	00000206 	br	dbf4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    dbec:	00bfebc4 	movi	r2,-81
    dbf0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dbf4:	e0bffb17 	ldw	r2,-20(fp)
    dbf8:	1000070e 	bge	r2,zero,dc18 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    dbfc:	000db0c0 	call	db0c <alt_get_errno>
    dc00:	1007883a 	mov	r3,r2
    dc04:	e0bffb17 	ldw	r2,-20(fp)
    dc08:	0085c83a 	sub	r2,zero,r2
    dc0c:	18800015 	stw	r2,0(r3)
    rc = -1;
    dc10:	00bfffc4 	movi	r2,-1
    dc14:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    dc18:	e0bffb17 	ldw	r2,-20(fp)
}
    dc1c:	e037883a 	mov	sp,fp
    dc20:	dfc00117 	ldw	ra,4(sp)
    dc24:	df000017 	ldw	fp,0(sp)
    dc28:	dec00204 	addi	sp,sp,8
    dc2c:	f800283a 	ret

0000dc30 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    dc30:	defffd04 	addi	sp,sp,-12
    dc34:	dfc00215 	stw	ra,8(sp)
    dc38:	df000115 	stw	fp,4(sp)
    dc3c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    dc40:	0009883a 	mov	r4,zero
    dc44:	000e0f40 	call	e0f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    dc48:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    dc4c:	000e1280 	call	e128 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    dc50:	01000074 	movhi	r4,1
    dc54:	21009f04 	addi	r4,r4,636
    dc58:	01400074 	movhi	r5,1
    dc5c:	29409f04 	addi	r5,r5,636
    dc60:	01800074 	movhi	r6,1
    dc64:	31809f04 	addi	r6,r6,636
    dc68:	000f3d80 	call	f3d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    dc6c:	000ef600 	call	ef60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    dc70:	01000074 	movhi	r4,1
    dc74:	213bef04 	addi	r4,r4,-4164
    dc78:	000fb640 	call	fb64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    dc7c:	d126d217 	ldw	r4,-25784(gp)
    dc80:	d0e6d317 	ldw	r3,-25780(gp)
    dc84:	d0a6d417 	ldw	r2,-25776(gp)
    dc88:	180b883a 	mov	r5,r3
    dc8c:	100d883a 	mov	r6,r2
    dc90:	00008980 	call	898 <main>
    dc94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    dc98:	01000044 	movi	r4,1
    dc9c:	000d7380 	call	d738 <close>
  exit (result);
    dca0:	e13fff17 	ldw	r4,-4(fp)
    dca4:	000fb780 	call	fb78 <exit>

0000dca8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    dca8:	defffe04 	addi	sp,sp,-8
    dcac:	df000115 	stw	fp,4(sp)
    dcb0:	df000104 	addi	fp,sp,4
    dcb4:	e13fff15 	stw	r4,-4(fp)
}
    dcb8:	e037883a 	mov	sp,fp
    dcbc:	df000017 	ldw	fp,0(sp)
    dcc0:	dec00104 	addi	sp,sp,4
    dcc4:	f800283a 	ret

0000dcc8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dcc8:	defffe04 	addi	sp,sp,-8
    dccc:	df000115 	stw	fp,4(sp)
    dcd0:	df000104 	addi	fp,sp,4
    dcd4:	e13fff15 	stw	r4,-4(fp)
}
    dcd8:	e037883a 	mov	sp,fp
    dcdc:	df000017 	ldw	fp,0(sp)
    dce0:	dec00104 	addi	sp,sp,4
    dce4:	f800283a 	ret

0000dce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dce8:	defffe04 	addi	sp,sp,-8
    dcec:	dfc00115 	stw	ra,4(sp)
    dcf0:	df000015 	stw	fp,0(sp)
    dcf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dcf8:	00800074 	movhi	r2,1
    dcfc:	10875d04 	addi	r2,r2,7540
    dd00:	10800017 	ldw	r2,0(r2)
    dd04:	10000526 	beq	r2,zero,dd1c <alt_get_errno+0x34>
    dd08:	00800074 	movhi	r2,1
    dd0c:	10875d04 	addi	r2,r2,7540
    dd10:	10800017 	ldw	r2,0(r2)
    dd14:	103ee83a 	callr	r2
    dd18:	00000206 	br	dd24 <alt_get_errno+0x3c>
    dd1c:	00800074 	movhi	r2,1
    dd20:	108e2004 	addi	r2,r2,14464
}
    dd24:	e037883a 	mov	sp,fp
    dd28:	dfc00117 	ldw	ra,4(sp)
    dd2c:	df000017 	ldw	fp,0(sp)
    dd30:	dec00204 	addi	sp,sp,8
    dd34:	f800283a 	ret

0000dd38 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    dd38:	defff904 	addi	sp,sp,-28
    dd3c:	dfc00615 	stw	ra,24(sp)
    dd40:	df000515 	stw	fp,20(sp)
    dd44:	df000504 	addi	fp,sp,20
    dd48:	e13ffd15 	stw	r4,-12(fp)
    dd4c:	e17ffe15 	stw	r5,-8(fp)
    dd50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dd54:	e0bffd17 	ldw	r2,-12(fp)
    dd58:	10000616 	blt	r2,zero,dd74 <read+0x3c>
    dd5c:	e0bffd17 	ldw	r2,-12(fp)
    dd60:	10c00324 	muli	r3,r2,12
    dd64:	00800074 	movhi	r2,1
    dd68:	1082da04 	addi	r2,r2,2920
    dd6c:	1885883a 	add	r2,r3,r2
    dd70:	00000106 	br	dd78 <read+0x40>
    dd74:	0005883a 	mov	r2,zero
    dd78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dd7c:	e0bffb17 	ldw	r2,-20(fp)
    dd80:	10002226 	beq	r2,zero,de0c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dd84:	e0bffb17 	ldw	r2,-20(fp)
    dd88:	10800217 	ldw	r2,8(r2)
    dd8c:	108000cc 	andi	r2,r2,3
    dd90:	10800060 	cmpeqi	r2,r2,1
    dd94:	1000181e 	bne	r2,zero,ddf8 <read+0xc0>
        (fd->dev->read))
    dd98:	e0bffb17 	ldw	r2,-20(fp)
    dd9c:	10800017 	ldw	r2,0(r2)
    dda0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dda4:	10001426 	beq	r2,zero,ddf8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    dda8:	e0bffb17 	ldw	r2,-20(fp)
    ddac:	10800017 	ldw	r2,0(r2)
    ddb0:	10800517 	ldw	r2,20(r2)
    ddb4:	e0ffff17 	ldw	r3,-4(fp)
    ddb8:	e13ffb17 	ldw	r4,-20(fp)
    ddbc:	e17ffe17 	ldw	r5,-8(fp)
    ddc0:	180d883a 	mov	r6,r3
    ddc4:	103ee83a 	callr	r2
    ddc8:	e0bffc15 	stw	r2,-16(fp)
    ddcc:	e0bffc17 	ldw	r2,-16(fp)
    ddd0:	1000070e 	bge	r2,zero,ddf0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ddd4:	000dce80 	call	dce8 <alt_get_errno>
    ddd8:	1007883a 	mov	r3,r2
    dddc:	e0bffc17 	ldw	r2,-16(fp)
    dde0:	0085c83a 	sub	r2,zero,r2
    dde4:	18800015 	stw	r2,0(r3)
          return -1;
    dde8:	00bfffc4 	movi	r2,-1
    ddec:	00000c06 	br	de20 <read+0xe8>
        }
        return rval;
    ddf0:	e0bffc17 	ldw	r2,-16(fp)
    ddf4:	00000a06 	br	de20 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ddf8:	000dce80 	call	dce8 <alt_get_errno>
    ddfc:	1007883a 	mov	r3,r2
    de00:	00800344 	movi	r2,13
    de04:	18800015 	stw	r2,0(r3)
    de08:	00000406 	br	de1c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    de0c:	000dce80 	call	dce8 <alt_get_errno>
    de10:	1007883a 	mov	r3,r2
    de14:	00801444 	movi	r2,81
    de18:	18800015 	stw	r2,0(r3)
  }
  return -1;
    de1c:	00bfffc4 	movi	r2,-1
}
    de20:	e037883a 	mov	sp,fp
    de24:	dfc00117 	ldw	ra,4(sp)
    de28:	df000017 	ldw	fp,0(sp)
    de2c:	dec00204 	addi	sp,sp,8
    de30:	f800283a 	ret

0000de34 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    de34:	defffe04 	addi	sp,sp,-8
    de38:	df000115 	stw	fp,4(sp)
    de3c:	df000104 	addi	fp,sp,4
    de40:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    de44:	e0bfff17 	ldw	r2,-4(fp)
    de48:	108000d0 	cmplti	r2,r2,3
    de4c:	10000d1e 	bne	r2,zero,de84 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    de50:	00800074 	movhi	r2,1
    de54:	1082da04 	addi	r2,r2,2920
    de58:	e0ffff17 	ldw	r3,-4(fp)
    de5c:	18c00324 	muli	r3,r3,12
    de60:	10c5883a 	add	r2,r2,r3
    de64:	10800204 	addi	r2,r2,8
    de68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    de6c:	00800074 	movhi	r2,1
    de70:	1082da04 	addi	r2,r2,2920
    de74:	e0ffff17 	ldw	r3,-4(fp)
    de78:	18c00324 	muli	r3,r3,12
    de7c:	10c5883a 	add	r2,r2,r3
    de80:	10000015 	stw	zero,0(r2)
  }
}
    de84:	e037883a 	mov	sp,fp
    de88:	df000017 	ldw	fp,0(sp)
    de8c:	dec00104 	addi	sp,sp,4
    de90:	f800283a 	ret

0000de94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    de94:	defff904 	addi	sp,sp,-28
    de98:	df000615 	stw	fp,24(sp)
    de9c:	df000604 	addi	fp,sp,24
    dea0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dea4:	0005303a 	rdctl	r2,status
    dea8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    deac:	e0fffc17 	ldw	r3,-16(fp)
    deb0:	00bfff84 	movi	r2,-2
    deb4:	1884703a 	and	r2,r3,r2
    deb8:	1001703a 	wrctl	status,r2
  
  return context;
    debc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dec0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dec4:	d0a00c17 	ldw	r2,-32720(gp)
    dec8:	10c000c4 	addi	r3,r2,3
    decc:	00bfff04 	movi	r2,-4
    ded0:	1884703a 	and	r2,r3,r2
    ded4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ded8:	d0e00c17 	ldw	r3,-32720(gp)
    dedc:	e0bfff17 	ldw	r2,-4(fp)
    dee0:	1887883a 	add	r3,r3,r2
    dee4:	00808034 	movhi	r2,512
    dee8:	10800004 	addi	r2,r2,0
    deec:	10c0062e 	bgeu	r2,r3,df08 <sbrk+0x74>
    def0:	e0bffa17 	ldw	r2,-24(fp)
    def4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    def8:	e0bffd17 	ldw	r2,-12(fp)
    defc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    df00:	00bfffc4 	movi	r2,-1
    df04:	00000b06 	br	df34 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    df08:	d0a00c17 	ldw	r2,-32720(gp)
    df0c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    df10:	d0e00c17 	ldw	r3,-32720(gp)
    df14:	e0bfff17 	ldw	r2,-4(fp)
    df18:	1885883a 	add	r2,r3,r2
    df1c:	d0a00c15 	stw	r2,-32720(gp)
    df20:	e0bffa17 	ldw	r2,-24(fp)
    df24:	e0bffe15 	stw	r2,-8(fp)
    df28:	e0bffe17 	ldw	r2,-8(fp)
    df2c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    df30:	e0bffb17 	ldw	r2,-20(fp)
} 
    df34:	e037883a 	mov	sp,fp
    df38:	df000017 	ldw	fp,0(sp)
    df3c:	dec00104 	addi	sp,sp,4
    df40:	f800283a 	ret

0000df44 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    df44:	defffd04 	addi	sp,sp,-12
    df48:	dfc00215 	stw	ra,8(sp)
    df4c:	df000115 	stw	fp,4(sp)
    df50:	df000104 	addi	fp,sp,4
    df54:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    df58:	e13fff17 	ldw	r4,-4(fp)
    df5c:	000ecf80 	call	ecf8 <alt_busy_sleep>
}
    df60:	e037883a 	mov	sp,fp
    df64:	dfc00117 	ldw	ra,4(sp)
    df68:	df000017 	ldw	fp,0(sp)
    df6c:	dec00204 	addi	sp,sp,8
    df70:	f800283a 	ret

0000df74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    df74:	defffe04 	addi	sp,sp,-8
    df78:	dfc00115 	stw	ra,4(sp)
    df7c:	df000015 	stw	fp,0(sp)
    df80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    df84:	00800074 	movhi	r2,1
    df88:	10875d04 	addi	r2,r2,7540
    df8c:	10800017 	ldw	r2,0(r2)
    df90:	10000526 	beq	r2,zero,dfa8 <alt_get_errno+0x34>
    df94:	00800074 	movhi	r2,1
    df98:	10875d04 	addi	r2,r2,7540
    df9c:	10800017 	ldw	r2,0(r2)
    dfa0:	103ee83a 	callr	r2
    dfa4:	00000206 	br	dfb0 <alt_get_errno+0x3c>
    dfa8:	00800074 	movhi	r2,1
    dfac:	108e2004 	addi	r2,r2,14464
}
    dfb0:	e037883a 	mov	sp,fp
    dfb4:	dfc00117 	ldw	ra,4(sp)
    dfb8:	df000017 	ldw	fp,0(sp)
    dfbc:	dec00204 	addi	sp,sp,8
    dfc0:	f800283a 	ret

0000dfc4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dfc4:	defff904 	addi	sp,sp,-28
    dfc8:	dfc00615 	stw	ra,24(sp)
    dfcc:	df000515 	stw	fp,20(sp)
    dfd0:	df000504 	addi	fp,sp,20
    dfd4:	e13ffd15 	stw	r4,-12(fp)
    dfd8:	e17ffe15 	stw	r5,-8(fp)
    dfdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dfe0:	e0bffd17 	ldw	r2,-12(fp)
    dfe4:	10000616 	blt	r2,zero,e000 <write+0x3c>
    dfe8:	e0bffd17 	ldw	r2,-12(fp)
    dfec:	10c00324 	muli	r3,r2,12
    dff0:	00800074 	movhi	r2,1
    dff4:	1082da04 	addi	r2,r2,2920
    dff8:	1885883a 	add	r2,r3,r2
    dffc:	00000106 	br	e004 <write+0x40>
    e000:	0005883a 	mov	r2,zero
    e004:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e008:	e0bffb17 	ldw	r2,-20(fp)
    e00c:	10002126 	beq	r2,zero,e094 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e010:	e0bffb17 	ldw	r2,-20(fp)
    e014:	10800217 	ldw	r2,8(r2)
    e018:	108000cc 	andi	r2,r2,3
    e01c:	10001826 	beq	r2,zero,e080 <write+0xbc>
    e020:	e0bffb17 	ldw	r2,-20(fp)
    e024:	10800017 	ldw	r2,0(r2)
    e028:	10800617 	ldw	r2,24(r2)
    e02c:	10001426 	beq	r2,zero,e080 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e030:	e0bffb17 	ldw	r2,-20(fp)
    e034:	10800017 	ldw	r2,0(r2)
    e038:	10800617 	ldw	r2,24(r2)
    e03c:	e0ffff17 	ldw	r3,-4(fp)
    e040:	e13ffb17 	ldw	r4,-20(fp)
    e044:	e17ffe17 	ldw	r5,-8(fp)
    e048:	180d883a 	mov	r6,r3
    e04c:	103ee83a 	callr	r2
    e050:	e0bffc15 	stw	r2,-16(fp)
    e054:	e0bffc17 	ldw	r2,-16(fp)
    e058:	1000070e 	bge	r2,zero,e078 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    e05c:	000df740 	call	df74 <alt_get_errno>
    e060:	1007883a 	mov	r3,r2
    e064:	e0bffc17 	ldw	r2,-16(fp)
    e068:	0085c83a 	sub	r2,zero,r2
    e06c:	18800015 	stw	r2,0(r3)
        return -1;
    e070:	00bfffc4 	movi	r2,-1
    e074:	00000c06 	br	e0a8 <write+0xe4>
      }
      return rval;
    e078:	e0bffc17 	ldw	r2,-16(fp)
    e07c:	00000a06 	br	e0a8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e080:	000df740 	call	df74 <alt_get_errno>
    e084:	1007883a 	mov	r3,r2
    e088:	00800344 	movi	r2,13
    e08c:	18800015 	stw	r2,0(r3)
    e090:	00000406 	br	e0a4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e094:	000df740 	call	df74 <alt_get_errno>
    e098:	1007883a 	mov	r3,r2
    e09c:	00801444 	movi	r2,81
    e0a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e0a4:	00bfffc4 	movi	r2,-1
}
    e0a8:	e037883a 	mov	sp,fp
    e0ac:	dfc00117 	ldw	ra,4(sp)
    e0b0:	df000017 	ldw	fp,0(sp)
    e0b4:	dec00204 	addi	sp,sp,8
    e0b8:	f800283a 	ret

0000e0bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e0bc:	defffd04 	addi	sp,sp,-12
    e0c0:	dfc00215 	stw	ra,8(sp)
    e0c4:	df000115 	stw	fp,4(sp)
    e0c8:	df000104 	addi	fp,sp,4
    e0cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e0d0:	e13fff17 	ldw	r4,-4(fp)
    e0d4:	01400074 	movhi	r5,1
    e0d8:	29475a04 	addi	r5,r5,7528
    e0dc:	000eebc0 	call	eebc <alt_dev_llist_insert>
}
    e0e0:	e037883a 	mov	sp,fp
    e0e4:	dfc00117 	ldw	ra,4(sp)
    e0e8:	df000017 	ldw	fp,0(sp)
    e0ec:	dec00204 	addi	sp,sp,8
    e0f0:	f800283a 	ret

0000e0f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e0f4:	defffd04 	addi	sp,sp,-12
    e0f8:	dfc00215 	stw	ra,8(sp)
    e0fc:	df000115 	stw	fp,4(sp)
    e100:	df000104 	addi	fp,sp,4
    e104:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    e108:	000f8600 	call	f860 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e10c:	00800044 	movi	r2,1
    e110:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e114:	e037883a 	mov	sp,fp
    e118:	dfc00117 	ldw	ra,4(sp)
    e11c:	df000017 	ldw	fp,0(sp)
    e120:	dec00204 	addi	sp,sp,8
    e124:	f800283a 	ret

0000e128 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e128:	defffe04 	addi	sp,sp,-8
    e12c:	dfc00115 	stw	ra,4(sp)
    e130:	df000015 	stw	fp,0(sp)
    e134:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    e138:	01000074 	movhi	r4,1
    e13c:	21034404 	addi	r4,r4,3344
    e140:	000b883a 	mov	r5,zero
    e144:	000d883a 	mov	r6,zero
    e148:	000e2d00 	call	e2d0 <altera_avalon_jtag_uart_init>
    e14c:	01000074 	movhi	r4,1
    e150:	21033a04 	addi	r4,r4,3304
    e154:	000e0bc0 	call	e0bc <alt_dev_reg>
}
    e158:	e037883a 	mov	sp,fp
    e15c:	dfc00117 	ldw	ra,4(sp)
    e160:	df000017 	ldw	fp,0(sp)
    e164:	dec00204 	addi	sp,sp,8
    e168:	f800283a 	ret

0000e16c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e16c:	defffa04 	addi	sp,sp,-24
    e170:	dfc00515 	stw	ra,20(sp)
    e174:	df000415 	stw	fp,16(sp)
    e178:	df000404 	addi	fp,sp,16
    e17c:	e13ffd15 	stw	r4,-12(fp)
    e180:	e17ffe15 	stw	r5,-8(fp)
    e184:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e188:	e0bffd17 	ldw	r2,-12(fp)
    e18c:	10800017 	ldw	r2,0(r2)
    e190:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e194:	e0bffc17 	ldw	r2,-16(fp)
    e198:	10c00a04 	addi	r3,r2,40
    e19c:	e0bffd17 	ldw	r2,-12(fp)
    e1a0:	10800217 	ldw	r2,8(r2)
    e1a4:	1809883a 	mov	r4,r3
    e1a8:	e17ffe17 	ldw	r5,-8(fp)
    e1ac:	e1bfff17 	ldw	r6,-4(fp)
    e1b0:	100f883a 	mov	r7,r2
    e1b4:	000e7940 	call	e794 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e1b8:	e037883a 	mov	sp,fp
    e1bc:	dfc00117 	ldw	ra,4(sp)
    e1c0:	df000017 	ldw	fp,0(sp)
    e1c4:	dec00204 	addi	sp,sp,8
    e1c8:	f800283a 	ret

0000e1cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e1cc:	defffa04 	addi	sp,sp,-24
    e1d0:	dfc00515 	stw	ra,20(sp)
    e1d4:	df000415 	stw	fp,16(sp)
    e1d8:	df000404 	addi	fp,sp,16
    e1dc:	e13ffd15 	stw	r4,-12(fp)
    e1e0:	e17ffe15 	stw	r5,-8(fp)
    e1e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e1e8:	e0bffd17 	ldw	r2,-12(fp)
    e1ec:	10800017 	ldw	r2,0(r2)
    e1f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e1f4:	e0bffc17 	ldw	r2,-16(fp)
    e1f8:	10c00a04 	addi	r3,r2,40
    e1fc:	e0bffd17 	ldw	r2,-12(fp)
    e200:	10800217 	ldw	r2,8(r2)
    e204:	1809883a 	mov	r4,r3
    e208:	e17ffe17 	ldw	r5,-8(fp)
    e20c:	e1bfff17 	ldw	r6,-4(fp)
    e210:	100f883a 	mov	r7,r2
    e214:	000e9a00 	call	e9a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e218:	e037883a 	mov	sp,fp
    e21c:	dfc00117 	ldw	ra,4(sp)
    e220:	df000017 	ldw	fp,0(sp)
    e224:	dec00204 	addi	sp,sp,8
    e228:	f800283a 	ret

0000e22c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e22c:	defffc04 	addi	sp,sp,-16
    e230:	dfc00315 	stw	ra,12(sp)
    e234:	df000215 	stw	fp,8(sp)
    e238:	df000204 	addi	fp,sp,8
    e23c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e240:	e0bfff17 	ldw	r2,-4(fp)
    e244:	10800017 	ldw	r2,0(r2)
    e248:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e24c:	e0bffe17 	ldw	r2,-8(fp)
    e250:	10c00a04 	addi	r3,r2,40
    e254:	e0bfff17 	ldw	r2,-4(fp)
    e258:	10800217 	ldw	r2,8(r2)
    e25c:	1809883a 	mov	r4,r3
    e260:	100b883a 	mov	r5,r2
    e264:	000e6400 	call	e640 <altera_avalon_jtag_uart_close>
}
    e268:	e037883a 	mov	sp,fp
    e26c:	dfc00117 	ldw	ra,4(sp)
    e270:	df000017 	ldw	fp,0(sp)
    e274:	dec00204 	addi	sp,sp,8
    e278:	f800283a 	ret

0000e27c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e27c:	defffa04 	addi	sp,sp,-24
    e280:	dfc00515 	stw	ra,20(sp)
    e284:	df000415 	stw	fp,16(sp)
    e288:	df000404 	addi	fp,sp,16
    e28c:	e13ffd15 	stw	r4,-12(fp)
    e290:	e17ffe15 	stw	r5,-8(fp)
    e294:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e298:	e0bffd17 	ldw	r2,-12(fp)
    e29c:	10800017 	ldw	r2,0(r2)
    e2a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e2a4:	e0bffc17 	ldw	r2,-16(fp)
    e2a8:	10800a04 	addi	r2,r2,40
    e2ac:	1009883a 	mov	r4,r2
    e2b0:	e17ffe17 	ldw	r5,-8(fp)
    e2b4:	e1bfff17 	ldw	r6,-4(fp)
    e2b8:	000e6a80 	call	e6a8 <altera_avalon_jtag_uart_ioctl>
}
    e2bc:	e037883a 	mov	sp,fp
    e2c0:	dfc00117 	ldw	ra,4(sp)
    e2c4:	df000017 	ldw	fp,0(sp)
    e2c8:	dec00204 	addi	sp,sp,8
    e2cc:	f800283a 	ret

0000e2d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e2d0:	defffa04 	addi	sp,sp,-24
    e2d4:	dfc00515 	stw	ra,20(sp)
    e2d8:	df000415 	stw	fp,16(sp)
    e2dc:	df000404 	addi	fp,sp,16
    e2e0:	e13ffd15 	stw	r4,-12(fp)
    e2e4:	e17ffe15 	stw	r5,-8(fp)
    e2e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e2ec:	e0bffd17 	ldw	r2,-12(fp)
    e2f0:	00c00044 	movi	r3,1
    e2f4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e2f8:	e0bffd17 	ldw	r2,-12(fp)
    e2fc:	10800017 	ldw	r2,0(r2)
    e300:	10800104 	addi	r2,r2,4
    e304:	1007883a 	mov	r3,r2
    e308:	e0bffd17 	ldw	r2,-12(fp)
    e30c:	10800817 	ldw	r2,32(r2)
    e310:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e314:	e0fffe17 	ldw	r3,-8(fp)
    e318:	e0bfff17 	ldw	r2,-4(fp)
    e31c:	d8000015 	stw	zero,0(sp)
    e320:	1809883a 	mov	r4,r3
    e324:	100b883a 	mov	r5,r2
    e328:	01800074 	movhi	r6,1
    e32c:	31b8e504 	addi	r6,r6,-7276
    e330:	e1fffd17 	ldw	r7,-12(fp)
    e334:	000f0480 	call	f048 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e338:	e0bffd17 	ldw	r2,-12(fp)
    e33c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e340:	e0bffd17 	ldw	r2,-12(fp)
    e344:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e348:	00800074 	movhi	r2,1
    e34c:	108e2804 	addi	r2,r2,14496
    e350:	10800017 	ldw	r2,0(r2)
    e354:	1809883a 	mov	r4,r3
    e358:	100b883a 	mov	r5,r2
    e35c:	01800074 	movhi	r6,1
    e360:	31b96604 	addi	r6,r6,-6760
    e364:	e1fffd17 	ldw	r7,-12(fp)
    e368:	000ebb80 	call	ebb8 <alt_alarm_start>
    e36c:	1000040e 	bge	r2,zero,e380 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e370:	e0fffd17 	ldw	r3,-12(fp)
    e374:	00a00034 	movhi	r2,32768
    e378:	10bfffc4 	addi	r2,r2,-1
    e37c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e380:	e037883a 	mov	sp,fp
    e384:	dfc00117 	ldw	ra,4(sp)
    e388:	df000017 	ldw	fp,0(sp)
    e38c:	dec00204 	addi	sp,sp,8
    e390:	f800283a 	ret

0000e394 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e394:	defff804 	addi	sp,sp,-32
    e398:	df000715 	stw	fp,28(sp)
    e39c:	df000704 	addi	fp,sp,28
    e3a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e3a4:	e0bfff17 	ldw	r2,-4(fp)
    e3a8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e3ac:	e0bffb17 	ldw	r2,-20(fp)
    e3b0:	10800017 	ldw	r2,0(r2)
    e3b4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e3b8:	e0bffc17 	ldw	r2,-16(fp)
    e3bc:	10800104 	addi	r2,r2,4
    e3c0:	10800037 	ldwio	r2,0(r2)
    e3c4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e3c8:	e0bffd17 	ldw	r2,-12(fp)
    e3cc:	1080c00c 	andi	r2,r2,768
    e3d0:	1000011e 	bne	r2,zero,e3d8 <altera_avalon_jtag_uart_irq+0x44>
      break;
    e3d4:	00006c06 	br	e588 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e3d8:	e0bffd17 	ldw	r2,-12(fp)
    e3dc:	1080400c 	andi	r2,r2,256
    e3e0:	10003426 	beq	r2,zero,e4b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e3e4:	00800074 	movhi	r2,1
    e3e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e3ec:	e0bffb17 	ldw	r2,-20(fp)
    e3f0:	10800a17 	ldw	r2,40(r2)
    e3f4:	10800044 	addi	r2,r2,1
    e3f8:	1081ffcc 	andi	r2,r2,2047
    e3fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e400:	e0bffb17 	ldw	r2,-20(fp)
    e404:	10c00b17 	ldw	r3,44(r2)
    e408:	e0bffe17 	ldw	r2,-8(fp)
    e40c:	1880011e 	bne	r3,r2,e414 <altera_avalon_jtag_uart_irq+0x80>
          break;
    e410:	00001606 	br	e46c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e414:	e0bffc17 	ldw	r2,-16(fp)
    e418:	10800037 	ldwio	r2,0(r2)
    e41c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e420:	e0bff917 	ldw	r2,-28(fp)
    e424:	10a0000c 	andi	r2,r2,32768
    e428:	1000011e 	bne	r2,zero,e430 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    e42c:	00000f06 	br	e46c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e430:	e0bffb17 	ldw	r2,-20(fp)
    e434:	10800a17 	ldw	r2,40(r2)
    e438:	e0fff917 	ldw	r3,-28(fp)
    e43c:	1809883a 	mov	r4,r3
    e440:	e0fffb17 	ldw	r3,-20(fp)
    e444:	1885883a 	add	r2,r3,r2
    e448:	10800e04 	addi	r2,r2,56
    e44c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e450:	e0bffb17 	ldw	r2,-20(fp)
    e454:	10800a17 	ldw	r2,40(r2)
    e458:	10800044 	addi	r2,r2,1
    e45c:	10c1ffcc 	andi	r3,r2,2047
    e460:	e0bffb17 	ldw	r2,-20(fp)
    e464:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e468:	003fe006 	br	e3ec <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e46c:	e0bff917 	ldw	r2,-28(fp)
    e470:	10bfffec 	andhi	r2,r2,65535
    e474:	10000f26 	beq	r2,zero,e4b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e478:	e0bffb17 	ldw	r2,-20(fp)
    e47c:	10c00817 	ldw	r3,32(r2)
    e480:	00bfff84 	movi	r2,-2
    e484:	1886703a 	and	r3,r3,r2
    e488:	e0bffb17 	ldw	r2,-20(fp)
    e48c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e490:	e0bffc17 	ldw	r2,-16(fp)
    e494:	10800104 	addi	r2,r2,4
    e498:	1007883a 	mov	r3,r2
    e49c:	e0bffb17 	ldw	r2,-20(fp)
    e4a0:	10800817 	ldw	r2,32(r2)
    e4a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e4a8:	e0bffc17 	ldw	r2,-16(fp)
    e4ac:	10800104 	addi	r2,r2,4
    e4b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e4b4:	e0bffd17 	ldw	r2,-12(fp)
    e4b8:	1080800c 	andi	r2,r2,512
    e4bc:	10003126 	beq	r2,zero,e584 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e4c0:	e0bffd17 	ldw	r2,-12(fp)
    e4c4:	1004d43a 	srli	r2,r2,16
    e4c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e4cc:	00001406 	br	e520 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e4d0:	e0bffc17 	ldw	r2,-16(fp)
    e4d4:	e0fffb17 	ldw	r3,-20(fp)
    e4d8:	18c00d17 	ldw	r3,52(r3)
    e4dc:	e13ffb17 	ldw	r4,-20(fp)
    e4e0:	20c7883a 	add	r3,r4,r3
    e4e4:	18c20e04 	addi	r3,r3,2104
    e4e8:	18c00003 	ldbu	r3,0(r3)
    e4ec:	18c03fcc 	andi	r3,r3,255
    e4f0:	18c0201c 	xori	r3,r3,128
    e4f4:	18ffe004 	addi	r3,r3,-128
    e4f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e4fc:	e0bffb17 	ldw	r2,-20(fp)
    e500:	10800d17 	ldw	r2,52(r2)
    e504:	10800044 	addi	r2,r2,1
    e508:	10c1ffcc 	andi	r3,r2,2047
    e50c:	e0bffb17 	ldw	r2,-20(fp)
    e510:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e514:	e0bffa17 	ldw	r2,-24(fp)
    e518:	10bfffc4 	addi	r2,r2,-1
    e51c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e520:	e0bffa17 	ldw	r2,-24(fp)
    e524:	10000526 	beq	r2,zero,e53c <altera_avalon_jtag_uart_irq+0x1a8>
    e528:	e0bffb17 	ldw	r2,-20(fp)
    e52c:	10c00d17 	ldw	r3,52(r2)
    e530:	e0bffb17 	ldw	r2,-20(fp)
    e534:	10800c17 	ldw	r2,48(r2)
    e538:	18bfe51e 	bne	r3,r2,e4d0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e53c:	e0bffa17 	ldw	r2,-24(fp)
    e540:	10001026 	beq	r2,zero,e584 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e544:	e0bffb17 	ldw	r2,-20(fp)
    e548:	10c00817 	ldw	r3,32(r2)
    e54c:	00bfff44 	movi	r2,-3
    e550:	1886703a 	and	r3,r3,r2
    e554:	e0bffb17 	ldw	r2,-20(fp)
    e558:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e55c:	e0bffb17 	ldw	r2,-20(fp)
    e560:	10800017 	ldw	r2,0(r2)
    e564:	10800104 	addi	r2,r2,4
    e568:	1007883a 	mov	r3,r2
    e56c:	e0bffb17 	ldw	r2,-20(fp)
    e570:	10800817 	ldw	r2,32(r2)
    e574:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e578:	e0bffc17 	ldw	r2,-16(fp)
    e57c:	10800104 	addi	r2,r2,4
    e580:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e584:	003f8c06 	br	e3b8 <altera_avalon_jtag_uart_irq+0x24>
}
    e588:	e037883a 	mov	sp,fp
    e58c:	df000017 	ldw	fp,0(sp)
    e590:	dec00104 	addi	sp,sp,4
    e594:	f800283a 	ret

0000e598 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e598:	defff804 	addi	sp,sp,-32
    e59c:	df000715 	stw	fp,28(sp)
    e5a0:	df000704 	addi	fp,sp,28
    e5a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e5a8:	e0bffb17 	ldw	r2,-20(fp)
    e5ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e5b0:	e0bff917 	ldw	r2,-28(fp)
    e5b4:	10800017 	ldw	r2,0(r2)
    e5b8:	10800104 	addi	r2,r2,4
    e5bc:	10800037 	ldwio	r2,0(r2)
    e5c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e5c4:	e0bffa17 	ldw	r2,-24(fp)
    e5c8:	1081000c 	andi	r2,r2,1024
    e5cc:	10000b26 	beq	r2,zero,e5fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e5d0:	e0bff917 	ldw	r2,-28(fp)
    e5d4:	10800017 	ldw	r2,0(r2)
    e5d8:	10800104 	addi	r2,r2,4
    e5dc:	1007883a 	mov	r3,r2
    e5e0:	e0bff917 	ldw	r2,-28(fp)
    e5e4:	10800817 	ldw	r2,32(r2)
    e5e8:	10810014 	ori	r2,r2,1024
    e5ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e5f0:	e0bff917 	ldw	r2,-28(fp)
    e5f4:	10000915 	stw	zero,36(r2)
    e5f8:	00000a06 	br	e624 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e5fc:	e0bff917 	ldw	r2,-28(fp)
    e600:	10c00917 	ldw	r3,36(r2)
    e604:	00a00034 	movhi	r2,32768
    e608:	10bfff04 	addi	r2,r2,-4
    e60c:	10c00536 	bltu	r2,r3,e624 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e610:	e0bff917 	ldw	r2,-28(fp)
    e614:	10800917 	ldw	r2,36(r2)
    e618:	10c00044 	addi	r3,r2,1
    e61c:	e0bff917 	ldw	r2,-28(fp)
    e620:	10c00915 	stw	r3,36(r2)
    e624:	00800074 	movhi	r2,1
    e628:	108e2804 	addi	r2,r2,14496
    e62c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e630:	e037883a 	mov	sp,fp
    e634:	df000017 	ldw	fp,0(sp)
    e638:	dec00104 	addi	sp,sp,4
    e63c:	f800283a 	ret

0000e640 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e640:	defffd04 	addi	sp,sp,-12
    e644:	df000215 	stw	fp,8(sp)
    e648:	df000204 	addi	fp,sp,8
    e64c:	e13ffe15 	stw	r4,-8(fp)
    e650:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e654:	00000506 	br	e66c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e658:	e0bfff17 	ldw	r2,-4(fp)
    e65c:	1090000c 	andi	r2,r2,16384
    e660:	10000226 	beq	r2,zero,e66c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e664:	00bffd44 	movi	r2,-11
    e668:	00000b06 	br	e698 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e66c:	e0bffe17 	ldw	r2,-8(fp)
    e670:	10c00d17 	ldw	r3,52(r2)
    e674:	e0bffe17 	ldw	r2,-8(fp)
    e678:	10800c17 	ldw	r2,48(r2)
    e67c:	18800526 	beq	r3,r2,e694 <altera_avalon_jtag_uart_close+0x54>
    e680:	e0bffe17 	ldw	r2,-8(fp)
    e684:	10c00917 	ldw	r3,36(r2)
    e688:	e0bffe17 	ldw	r2,-8(fp)
    e68c:	10800117 	ldw	r2,4(r2)
    e690:	18bff136 	bltu	r3,r2,e658 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e694:	0005883a 	mov	r2,zero
}
    e698:	e037883a 	mov	sp,fp
    e69c:	df000017 	ldw	fp,0(sp)
    e6a0:	dec00104 	addi	sp,sp,4
    e6a4:	f800283a 	ret

0000e6a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e6a8:	defffa04 	addi	sp,sp,-24
    e6ac:	df000515 	stw	fp,20(sp)
    e6b0:	df000504 	addi	fp,sp,20
    e6b4:	e13ffd15 	stw	r4,-12(fp)
    e6b8:	e17ffe15 	stw	r5,-8(fp)
    e6bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e6c0:	00bff9c4 	movi	r2,-25
    e6c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e6c8:	e0bffe17 	ldw	r2,-8(fp)
    e6cc:	10da8060 	cmpeqi	r3,r2,27137
    e6d0:	1800031e 	bne	r3,zero,e6e0 <altera_avalon_jtag_uart_ioctl+0x38>
    e6d4:	109a80a0 	cmpeqi	r2,r2,27138
    e6d8:	1000191e 	bne	r2,zero,e740 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    e6dc:	00002806 	br	e780 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e6e0:	e0bffd17 	ldw	r2,-12(fp)
    e6e4:	10c00117 	ldw	r3,4(r2)
    e6e8:	00a00034 	movhi	r2,32768
    e6ec:	10bfffc4 	addi	r2,r2,-1
    e6f0:	18801226 	beq	r3,r2,e73c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    e6f4:	e0bfff17 	ldw	r2,-4(fp)
    e6f8:	10800017 	ldw	r2,0(r2)
    e6fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e700:	e0bffc17 	ldw	r2,-16(fp)
    e704:	10800090 	cmplti	r2,r2,2
    e708:	1000061e 	bne	r2,zero,e724 <altera_avalon_jtag_uart_ioctl+0x7c>
    e70c:	e0fffc17 	ldw	r3,-16(fp)
    e710:	00a00034 	movhi	r2,32768
    e714:	10bfffc4 	addi	r2,r2,-1
    e718:	18800226 	beq	r3,r2,e724 <altera_avalon_jtag_uart_ioctl+0x7c>
    e71c:	e0bffc17 	ldw	r2,-16(fp)
    e720:	00000206 	br	e72c <altera_avalon_jtag_uart_ioctl+0x84>
    e724:	00a00034 	movhi	r2,32768
    e728:	10bfff84 	addi	r2,r2,-2
    e72c:	e0fffd17 	ldw	r3,-12(fp)
    e730:	18800115 	stw	r2,4(r3)
      rc = 0;
    e734:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e738:	00001106 	br	e780 <altera_avalon_jtag_uart_ioctl+0xd8>
    e73c:	00001006 	br	e780 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e740:	e0bffd17 	ldw	r2,-12(fp)
    e744:	10c00117 	ldw	r3,4(r2)
    e748:	00a00034 	movhi	r2,32768
    e74c:	10bfffc4 	addi	r2,r2,-1
    e750:	18800a26 	beq	r3,r2,e77c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e754:	e0bffd17 	ldw	r2,-12(fp)
    e758:	10c00917 	ldw	r3,36(r2)
    e75c:	e0bffd17 	ldw	r2,-12(fp)
    e760:	10800117 	ldw	r2,4(r2)
    e764:	1885803a 	cmpltu	r2,r3,r2
    e768:	10c03fcc 	andi	r3,r2,255
    e76c:	e0bfff17 	ldw	r2,-4(fp)
    e770:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e774:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e778:	00000006 	br	e77c <altera_avalon_jtag_uart_ioctl+0xd4>
    e77c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e780:	e0bffb17 	ldw	r2,-20(fp)
}
    e784:	e037883a 	mov	sp,fp
    e788:	df000017 	ldw	fp,0(sp)
    e78c:	dec00104 	addi	sp,sp,4
    e790:	f800283a 	ret

0000e794 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e794:	defff304 	addi	sp,sp,-52
    e798:	dfc00c15 	stw	ra,48(sp)
    e79c:	df000b15 	stw	fp,44(sp)
    e7a0:	df000b04 	addi	fp,sp,44
    e7a4:	e13ffc15 	stw	r4,-16(fp)
    e7a8:	e17ffd15 	stw	r5,-12(fp)
    e7ac:	e1bffe15 	stw	r6,-8(fp)
    e7b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e7b4:	e0bffd17 	ldw	r2,-12(fp)
    e7b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e7bc:	00004906 	br	e8e4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e7c0:	e0bffc17 	ldw	r2,-16(fp)
    e7c4:	10800a17 	ldw	r2,40(r2)
    e7c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e7cc:	e0bffc17 	ldw	r2,-16(fp)
    e7d0:	10800b17 	ldw	r2,44(r2)
    e7d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e7d8:	e0fff717 	ldw	r3,-36(fp)
    e7dc:	e0bff817 	ldw	r2,-32(fp)
    e7e0:	18800536 	bltu	r3,r2,e7f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e7e4:	e0fff717 	ldw	r3,-36(fp)
    e7e8:	e0bff817 	ldw	r2,-32(fp)
    e7ec:	1885c83a 	sub	r2,r3,r2
    e7f0:	e0bff615 	stw	r2,-40(fp)
    e7f4:	00000406 	br	e808 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e7f8:	00c20004 	movi	r3,2048
    e7fc:	e0bff817 	ldw	r2,-32(fp)
    e800:	1885c83a 	sub	r2,r3,r2
    e804:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e808:	e0bff617 	ldw	r2,-40(fp)
    e80c:	1000011e 	bne	r2,zero,e814 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    e810:	00001d06 	br	e888 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    e814:	e0fffe17 	ldw	r3,-8(fp)
    e818:	e0bff617 	ldw	r2,-40(fp)
    e81c:	1880022e 	bgeu	r3,r2,e828 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    e820:	e0bffe17 	ldw	r2,-8(fp)
    e824:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e828:	e0bff817 	ldw	r2,-32(fp)
    e82c:	10800e04 	addi	r2,r2,56
    e830:	e0fffc17 	ldw	r3,-16(fp)
    e834:	1885883a 	add	r2,r3,r2
    e838:	e13ff517 	ldw	r4,-44(fp)
    e83c:	100b883a 	mov	r5,r2
    e840:	e1bff617 	ldw	r6,-40(fp)
    e844:	00073a40 	call	73a4 <memcpy>
      ptr   += n;
    e848:	e0fff517 	ldw	r3,-44(fp)
    e84c:	e0bff617 	ldw	r2,-40(fp)
    e850:	1885883a 	add	r2,r3,r2
    e854:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e858:	e0fffe17 	ldw	r3,-8(fp)
    e85c:	e0bff617 	ldw	r2,-40(fp)
    e860:	1885c83a 	sub	r2,r3,r2
    e864:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e868:	e0fff817 	ldw	r3,-32(fp)
    e86c:	e0bff617 	ldw	r2,-40(fp)
    e870:	1885883a 	add	r2,r3,r2
    e874:	10c1ffcc 	andi	r3,r2,2047
    e878:	e0bffc17 	ldw	r2,-16(fp)
    e87c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e880:	e0bffe17 	ldw	r2,-8(fp)
    e884:	00bfce16 	blt	zero,r2,e7c0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    e888:	e0fff517 	ldw	r3,-44(fp)
    e88c:	e0bffd17 	ldw	r2,-12(fp)
    e890:	18800126 	beq	r3,r2,e898 <altera_avalon_jtag_uart_read+0x104>
      break;
    e894:	00001506 	br	e8ec <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e898:	e0bfff17 	ldw	r2,-4(fp)
    e89c:	1090000c 	andi	r2,r2,16384
    e8a0:	10000126 	beq	r2,zero,e8a8 <altera_avalon_jtag_uart_read+0x114>
      break;
    e8a4:	00001106 	br	e8ec <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e8a8:	0001883a 	nop
    e8ac:	e0bffc17 	ldw	r2,-16(fp)
    e8b0:	10c00a17 	ldw	r3,40(r2)
    e8b4:	e0bff717 	ldw	r2,-36(fp)
    e8b8:	1880051e 	bne	r3,r2,e8d0 <altera_avalon_jtag_uart_read+0x13c>
    e8bc:	e0bffc17 	ldw	r2,-16(fp)
    e8c0:	10c00917 	ldw	r3,36(r2)
    e8c4:	e0bffc17 	ldw	r2,-16(fp)
    e8c8:	10800117 	ldw	r2,4(r2)
    e8cc:	18bff736 	bltu	r3,r2,e8ac <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e8d0:	e0bffc17 	ldw	r2,-16(fp)
    e8d4:	10c00a17 	ldw	r3,40(r2)
    e8d8:	e0bff717 	ldw	r2,-36(fp)
    e8dc:	1880011e 	bne	r3,r2,e8e4 <altera_avalon_jtag_uart_read+0x150>
      break;
    e8e0:	00000206 	br	e8ec <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e8e4:	e0bffe17 	ldw	r2,-8(fp)
    e8e8:	00bfb516 	blt	zero,r2,e7c0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e8ec:	e0fff517 	ldw	r3,-44(fp)
    e8f0:	e0bffd17 	ldw	r2,-12(fp)
    e8f4:	18801826 	beq	r3,r2,e958 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e8f8:	0005303a 	rdctl	r2,status
    e8fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e900:	e0fffa17 	ldw	r3,-24(fp)
    e904:	00bfff84 	movi	r2,-2
    e908:	1884703a 	and	r2,r3,r2
    e90c:	1001703a 	wrctl	status,r2
  
  return context;
    e910:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e914:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e918:	e0bffc17 	ldw	r2,-16(fp)
    e91c:	10800817 	ldw	r2,32(r2)
    e920:	10c00054 	ori	r3,r2,1
    e924:	e0bffc17 	ldw	r2,-16(fp)
    e928:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e92c:	e0bffc17 	ldw	r2,-16(fp)
    e930:	10800017 	ldw	r2,0(r2)
    e934:	10800104 	addi	r2,r2,4
    e938:	1007883a 	mov	r3,r2
    e93c:	e0bffc17 	ldw	r2,-16(fp)
    e940:	10800817 	ldw	r2,32(r2)
    e944:	18800035 	stwio	r2,0(r3)
    e948:	e0bff917 	ldw	r2,-28(fp)
    e94c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e950:	e0bffb17 	ldw	r2,-20(fp)
    e954:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e958:	e0fff517 	ldw	r3,-44(fp)
    e95c:	e0bffd17 	ldw	r2,-12(fp)
    e960:	18800426 	beq	r3,r2,e974 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    e964:	e0fff517 	ldw	r3,-44(fp)
    e968:	e0bffd17 	ldw	r2,-12(fp)
    e96c:	1885c83a 	sub	r2,r3,r2
    e970:	00000606 	br	e98c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    e974:	e0bfff17 	ldw	r2,-4(fp)
    e978:	1090000c 	andi	r2,r2,16384
    e97c:	10000226 	beq	r2,zero,e988 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    e980:	00bffd44 	movi	r2,-11
    e984:	00000106 	br	e98c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    e988:	00bffec4 	movi	r2,-5
}
    e98c:	e037883a 	mov	sp,fp
    e990:	dfc00117 	ldw	ra,4(sp)
    e994:	df000017 	ldw	fp,0(sp)
    e998:	dec00204 	addi	sp,sp,8
    e99c:	f800283a 	ret

0000e9a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e9a0:	defff304 	addi	sp,sp,-52
    e9a4:	dfc00c15 	stw	ra,48(sp)
    e9a8:	df000b15 	stw	fp,44(sp)
    e9ac:	df000b04 	addi	fp,sp,44
    e9b0:	e13ffc15 	stw	r4,-16(fp)
    e9b4:	e17ffd15 	stw	r5,-12(fp)
    e9b8:	e1bffe15 	stw	r6,-8(fp)
    e9bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e9c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e9c4:	e0bffd17 	ldw	r2,-12(fp)
    e9c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e9cc:	00003806 	br	eab0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e9d0:	e0bffc17 	ldw	r2,-16(fp)
    e9d4:	10800c17 	ldw	r2,48(r2)
    e9d8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    e9dc:	e0bffc17 	ldw	r2,-16(fp)
    e9e0:	10800d17 	ldw	r2,52(r2)
    e9e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e9e8:	e0fff817 	ldw	r3,-32(fp)
    e9ec:	e0bff517 	ldw	r2,-44(fp)
    e9f0:	1880062e 	bgeu	r3,r2,ea0c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e9f4:	e0fff517 	ldw	r3,-44(fp)
    e9f8:	e0bff817 	ldw	r2,-32(fp)
    e9fc:	1885c83a 	sub	r2,r3,r2
    ea00:	10bfffc4 	addi	r2,r2,-1
    ea04:	e0bff615 	stw	r2,-40(fp)
    ea08:	00000b06 	br	ea38 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    ea0c:	e0bff517 	ldw	r2,-44(fp)
    ea10:	10000526 	beq	r2,zero,ea28 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    ea14:	00c20004 	movi	r3,2048
    ea18:	e0bff817 	ldw	r2,-32(fp)
    ea1c:	1885c83a 	sub	r2,r3,r2
    ea20:	e0bff615 	stw	r2,-40(fp)
    ea24:	00000406 	br	ea38 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    ea28:	00c1ffc4 	movi	r3,2047
    ea2c:	e0bff817 	ldw	r2,-32(fp)
    ea30:	1885c83a 	sub	r2,r3,r2
    ea34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    ea38:	e0bff617 	ldw	r2,-40(fp)
    ea3c:	1000011e 	bne	r2,zero,ea44 <altera_avalon_jtag_uart_write+0xa4>
        break;
    ea40:	00001d06 	br	eab8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    ea44:	e0fffe17 	ldw	r3,-8(fp)
    ea48:	e0bff617 	ldw	r2,-40(fp)
    ea4c:	1880022e 	bgeu	r3,r2,ea58 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    ea50:	e0bffe17 	ldw	r2,-8(fp)
    ea54:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    ea58:	e0bff817 	ldw	r2,-32(fp)
    ea5c:	10820e04 	addi	r2,r2,2104
    ea60:	e0fffc17 	ldw	r3,-16(fp)
    ea64:	1885883a 	add	r2,r3,r2
    ea68:	1009883a 	mov	r4,r2
    ea6c:	e17ffd17 	ldw	r5,-12(fp)
    ea70:	e1bff617 	ldw	r6,-40(fp)
    ea74:	00073a40 	call	73a4 <memcpy>
      ptr   += n;
    ea78:	e0fffd17 	ldw	r3,-12(fp)
    ea7c:	e0bff617 	ldw	r2,-40(fp)
    ea80:	1885883a 	add	r2,r3,r2
    ea84:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    ea88:	e0fffe17 	ldw	r3,-8(fp)
    ea8c:	e0bff617 	ldw	r2,-40(fp)
    ea90:	1885c83a 	sub	r2,r3,r2
    ea94:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ea98:	e0fff817 	ldw	r3,-32(fp)
    ea9c:	e0bff617 	ldw	r2,-40(fp)
    eaa0:	1885883a 	add	r2,r3,r2
    eaa4:	10c1ffcc 	andi	r3,r2,2047
    eaa8:	e0bffc17 	ldw	r2,-16(fp)
    eaac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    eab0:	e0bffe17 	ldw	r2,-8(fp)
    eab4:	00bfc616 	blt	zero,r2,e9d0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eab8:	0005303a 	rdctl	r2,status
    eabc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eac0:	e0fffa17 	ldw	r3,-24(fp)
    eac4:	00bfff84 	movi	r2,-2
    eac8:	1884703a 	and	r2,r3,r2
    eacc:	1001703a 	wrctl	status,r2
  
  return context;
    ead0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ead4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ead8:	e0bffc17 	ldw	r2,-16(fp)
    eadc:	10800817 	ldw	r2,32(r2)
    eae0:	10c00094 	ori	r3,r2,2
    eae4:	e0bffc17 	ldw	r2,-16(fp)
    eae8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eaec:	e0bffc17 	ldw	r2,-16(fp)
    eaf0:	10800017 	ldw	r2,0(r2)
    eaf4:	10800104 	addi	r2,r2,4
    eaf8:	1007883a 	mov	r3,r2
    eafc:	e0bffc17 	ldw	r2,-16(fp)
    eb00:	10800817 	ldw	r2,32(r2)
    eb04:	18800035 	stwio	r2,0(r3)
    eb08:	e0bff917 	ldw	r2,-28(fp)
    eb0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb10:	e0bffb17 	ldw	r2,-20(fp)
    eb14:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    eb18:	e0bffe17 	ldw	r2,-8(fp)
    eb1c:	0080120e 	bge	zero,r2,eb68 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    eb20:	e0bfff17 	ldw	r2,-4(fp)
    eb24:	1090000c 	andi	r2,r2,16384
    eb28:	10000126 	beq	r2,zero,eb30 <altera_avalon_jtag_uart_write+0x190>
        break;
    eb2c:	00001006 	br	eb70 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    eb30:	0001883a 	nop
    eb34:	e0bffc17 	ldw	r2,-16(fp)
    eb38:	10c00d17 	ldw	r3,52(r2)
    eb3c:	e0bff517 	ldw	r2,-44(fp)
    eb40:	1880051e 	bne	r3,r2,eb58 <altera_avalon_jtag_uart_write+0x1b8>
    eb44:	e0bffc17 	ldw	r2,-16(fp)
    eb48:	10c00917 	ldw	r3,36(r2)
    eb4c:	e0bffc17 	ldw	r2,-16(fp)
    eb50:	10800117 	ldw	r2,4(r2)
    eb54:	18bff736 	bltu	r3,r2,eb34 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    eb58:	e0bffc17 	ldw	r2,-16(fp)
    eb5c:	10800917 	ldw	r2,36(r2)
    eb60:	10000126 	beq	r2,zero,eb68 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    eb64:	00000206 	br	eb70 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    eb68:	e0bffe17 	ldw	r2,-8(fp)
    eb6c:	00bf9716 	blt	zero,r2,e9cc <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    eb70:	e0fffd17 	ldw	r3,-12(fp)
    eb74:	e0bff717 	ldw	r2,-36(fp)
    eb78:	18800426 	beq	r3,r2,eb8c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    eb7c:	e0fffd17 	ldw	r3,-12(fp)
    eb80:	e0bff717 	ldw	r2,-36(fp)
    eb84:	1885c83a 	sub	r2,r3,r2
    eb88:	00000606 	br	eba4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    eb8c:	e0bfff17 	ldw	r2,-4(fp)
    eb90:	1090000c 	andi	r2,r2,16384
    eb94:	10000226 	beq	r2,zero,eba0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    eb98:	00bffd44 	movi	r2,-11
    eb9c:	00000106 	br	eba4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    eba0:	00bffec4 	movi	r2,-5
}
    eba4:	e037883a 	mov	sp,fp
    eba8:	dfc00117 	ldw	ra,4(sp)
    ebac:	df000017 	ldw	fp,0(sp)
    ebb0:	dec00204 	addi	sp,sp,8
    ebb4:	f800283a 	ret

0000ebb8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ebb8:	defff504 	addi	sp,sp,-44
    ebbc:	df000a15 	stw	fp,40(sp)
    ebc0:	df000a04 	addi	fp,sp,40
    ebc4:	e13ffc15 	stw	r4,-16(fp)
    ebc8:	e17ffd15 	stw	r5,-12(fp)
    ebcc:	e1bffe15 	stw	r6,-8(fp)
    ebd0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ebd4:	e03ff615 	stw	zero,-40(fp)
    ebd8:	00800074 	movhi	r2,1
    ebdc:	108e2804 	addi	r2,r2,14496
    ebe0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    ebe4:	10003f26 	beq	r2,zero,ece4 <alt_alarm_start+0x12c>
  {
    if (alarm)
    ebe8:	e0bffc17 	ldw	r2,-16(fp)
    ebec:	10003b26 	beq	r2,zero,ecdc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    ebf0:	e0bffc17 	ldw	r2,-16(fp)
    ebf4:	e0fffe17 	ldw	r3,-8(fp)
    ebf8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ebfc:	e0bffc17 	ldw	r2,-16(fp)
    ec00:	e0ffff17 	ldw	r3,-4(fp)
    ec04:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec08:	0005303a 	rdctl	r2,status
    ec0c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec10:	e0fff817 	ldw	r3,-32(fp)
    ec14:	00bfff84 	movi	r2,-2
    ec18:	1884703a 	and	r2,r3,r2
    ec1c:	1001703a 	wrctl	status,r2
  
  return context;
    ec20:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    ec24:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ec28:	00800074 	movhi	r2,1
    ec2c:	108e2904 	addi	r2,r2,14500
    ec30:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    ec34:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    ec38:	e0fffd17 	ldw	r3,-12(fp)
    ec3c:	e0bff617 	ldw	r2,-40(fp)
    ec40:	1885883a 	add	r2,r3,r2
    ec44:	10c00044 	addi	r3,r2,1
    ec48:	e0bffc17 	ldw	r2,-16(fp)
    ec4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ec50:	e0bffc17 	ldw	r2,-16(fp)
    ec54:	10c00217 	ldw	r3,8(r2)
    ec58:	e0bff617 	ldw	r2,-40(fp)
    ec5c:	1880042e 	bgeu	r3,r2,ec70 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    ec60:	e0bffc17 	ldw	r2,-16(fp)
    ec64:	00c00044 	movi	r3,1
    ec68:	10c00405 	stb	r3,16(r2)
    ec6c:	00000206 	br	ec78 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    ec70:	e0bffc17 	ldw	r2,-16(fp)
    ec74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ec78:	e0fffc17 	ldw	r3,-16(fp)
    ec7c:	00800074 	movhi	r2,1
    ec80:	10876004 	addi	r2,r2,7552
    ec84:	e0bff915 	stw	r2,-28(fp)
    ec88:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ec8c:	e0bffa17 	ldw	r2,-24(fp)
    ec90:	e0fff917 	ldw	r3,-28(fp)
    ec94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ec98:	e0bff917 	ldw	r2,-28(fp)
    ec9c:	10c00017 	ldw	r3,0(r2)
    eca0:	e0bffa17 	ldw	r2,-24(fp)
    eca4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eca8:	e0bff917 	ldw	r2,-28(fp)
    ecac:	10800017 	ldw	r2,0(r2)
    ecb0:	e0fffa17 	ldw	r3,-24(fp)
    ecb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ecb8:	e0bff917 	ldw	r2,-28(fp)
    ecbc:	e0fffa17 	ldw	r3,-24(fp)
    ecc0:	10c00015 	stw	r3,0(r2)
    ecc4:	e0bff717 	ldw	r2,-36(fp)
    ecc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eccc:	e0bffb17 	ldw	r2,-20(fp)
    ecd0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ecd4:	0005883a 	mov	r2,zero
    ecd8:	00000306 	br	ece8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    ecdc:	00bffa84 	movi	r2,-22
    ece0:	00000106 	br	ece8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    ece4:	00bfde84 	movi	r2,-134
  }
}
    ece8:	e037883a 	mov	sp,fp
    ecec:	df000017 	ldw	fp,0(sp)
    ecf0:	dec00104 	addi	sp,sp,4
    ecf4:	f800283a 	ret

0000ecf8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    ecf8:	defffa04 	addi	sp,sp,-24
    ecfc:	dfc00515 	stw	ra,20(sp)
    ed00:	df000415 	stw	fp,16(sp)
    ed04:	df000404 	addi	fp,sp,16
    ed08:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    ed0c:	008000c4 	movi	r2,3
    ed10:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    ed14:	e0fffd17 	ldw	r3,-12(fp)
    ed18:	008003f4 	movhi	r2,15
    ed1c:	10909004 	addi	r2,r2,16960
    ed20:	1885383a 	mul	r2,r3,r2
    ed24:	0100bef4 	movhi	r4,763
    ed28:	213c2004 	addi	r4,r4,-3968
    ed2c:	100b883a 	mov	r5,r2
    ed30:	00012f80 	call	12f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    ed34:	01200034 	movhi	r4,32768
    ed38:	213fffc4 	addi	r4,r4,-1
    ed3c:	100b883a 	mov	r5,r2
    ed40:	00012f80 	call	12f8 <__udivsi3>
    ed44:	e13fff17 	ldw	r4,-4(fp)
    ed48:	100b883a 	mov	r5,r2
    ed4c:	00012f80 	call	12f8 <__udivsi3>
    ed50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    ed54:	e0bffe17 	ldw	r2,-8(fp)
    ed58:	10002a26 	beq	r2,zero,ee04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    ed5c:	e03ffc15 	stw	zero,-16(fp)
    ed60:	00001706 	br	edc0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    ed64:	00a00034 	movhi	r2,32768
    ed68:	10bfffc4 	addi	r2,r2,-1
    ed6c:	10bfffc4 	addi	r2,r2,-1
    ed70:	103ffe1e 	bne	r2,zero,ed6c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    ed74:	e0fffd17 	ldw	r3,-12(fp)
    ed78:	008003f4 	movhi	r2,15
    ed7c:	10909004 	addi	r2,r2,16960
    ed80:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    ed84:	0100bef4 	movhi	r4,763
    ed88:	213c2004 	addi	r4,r4,-3968
    ed8c:	100b883a 	mov	r5,r2
    ed90:	00012f80 	call	12f8 <__udivsi3>
    ed94:	01200034 	movhi	r4,32768
    ed98:	213fffc4 	addi	r4,r4,-1
    ed9c:	100b883a 	mov	r5,r2
    eda0:	00012f80 	call	12f8 <__udivsi3>
    eda4:	1007883a 	mov	r3,r2
    eda8:	e0bfff17 	ldw	r2,-4(fp)
    edac:	10c5c83a 	sub	r2,r2,r3
    edb0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    edb4:	e0bffc17 	ldw	r2,-16(fp)
    edb8:	10800044 	addi	r2,r2,1
    edbc:	e0bffc15 	stw	r2,-16(fp)
    edc0:	e0fffc17 	ldw	r3,-16(fp)
    edc4:	e0bffe17 	ldw	r2,-8(fp)
    edc8:	18bfe616 	blt	r3,r2,ed64 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    edcc:	e0fffd17 	ldw	r3,-12(fp)
    edd0:	008003f4 	movhi	r2,15
    edd4:	10909004 	addi	r2,r2,16960
    edd8:	1885383a 	mul	r2,r3,r2
    eddc:	0100bef4 	movhi	r4,763
    ede0:	213c2004 	addi	r4,r4,-3968
    ede4:	100b883a 	mov	r5,r2
    ede8:	00012f80 	call	12f8 <__udivsi3>
    edec:	1007883a 	mov	r3,r2
    edf0:	e0bfff17 	ldw	r2,-4(fp)
    edf4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    edf8:	10bfffc4 	addi	r2,r2,-1
    edfc:	103ffe1e 	bne	r2,zero,edf8 <alt_busy_sleep+0x100>
    ee00:	00000d06 	br	ee38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    ee04:	e0fffd17 	ldw	r3,-12(fp)
    ee08:	008003f4 	movhi	r2,15
    ee0c:	10909004 	addi	r2,r2,16960
    ee10:	1885383a 	mul	r2,r3,r2
    ee14:	0100bef4 	movhi	r4,763
    ee18:	213c2004 	addi	r4,r4,-3968
    ee1c:	100b883a 	mov	r5,r2
    ee20:	00012f80 	call	12f8 <__udivsi3>
    ee24:	1007883a 	mov	r3,r2
    ee28:	e0bfff17 	ldw	r2,-4(fp)
    ee2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    ee30:	10bfffc4 	addi	r2,r2,-1
    ee34:	00bffe16 	blt	zero,r2,ee30 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    ee38:	0005883a 	mov	r2,zero
}
    ee3c:	e037883a 	mov	sp,fp
    ee40:	dfc00117 	ldw	ra,4(sp)
    ee44:	df000017 	ldw	fp,0(sp)
    ee48:	dec00204 	addi	sp,sp,8
    ee4c:	f800283a 	ret

0000ee50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ee50:	deffff04 	addi	sp,sp,-4
    ee54:	df000015 	stw	fp,0(sp)
    ee58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ee5c:	e037883a 	mov	sp,fp
    ee60:	df000017 	ldw	fp,0(sp)
    ee64:	dec00104 	addi	sp,sp,4
    ee68:	f800283a 	ret

0000ee6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee6c:	defffe04 	addi	sp,sp,-8
    ee70:	dfc00115 	stw	ra,4(sp)
    ee74:	df000015 	stw	fp,0(sp)
    ee78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee7c:	00800074 	movhi	r2,1
    ee80:	10875d04 	addi	r2,r2,7540
    ee84:	10800017 	ldw	r2,0(r2)
    ee88:	10000526 	beq	r2,zero,eea0 <alt_get_errno+0x34>
    ee8c:	00800074 	movhi	r2,1
    ee90:	10875d04 	addi	r2,r2,7540
    ee94:	10800017 	ldw	r2,0(r2)
    ee98:	103ee83a 	callr	r2
    ee9c:	00000206 	br	eea8 <alt_get_errno+0x3c>
    eea0:	00800074 	movhi	r2,1
    eea4:	108e2004 	addi	r2,r2,14464
}
    eea8:	e037883a 	mov	sp,fp
    eeac:	dfc00117 	ldw	ra,4(sp)
    eeb0:	df000017 	ldw	fp,0(sp)
    eeb4:	dec00204 	addi	sp,sp,8
    eeb8:	f800283a 	ret

0000eebc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    eebc:	defffa04 	addi	sp,sp,-24
    eec0:	dfc00515 	stw	ra,20(sp)
    eec4:	df000415 	stw	fp,16(sp)
    eec8:	df000404 	addi	fp,sp,16
    eecc:	e13ffe15 	stw	r4,-8(fp)
    eed0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    eed4:	e0bffe17 	ldw	r2,-8(fp)
    eed8:	10000326 	beq	r2,zero,eee8 <alt_dev_llist_insert+0x2c>
    eedc:	e0bffe17 	ldw	r2,-8(fp)
    eee0:	10800217 	ldw	r2,8(r2)
    eee4:	1000061e 	bne	r2,zero,ef00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    eee8:	000ee6c0 	call	ee6c <alt_get_errno>
    eeec:	1007883a 	mov	r3,r2
    eef0:	00800584 	movi	r2,22
    eef4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    eef8:	00bffa84 	movi	r2,-22
    eefc:	00001306 	br	ef4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ef00:	e0bffe17 	ldw	r2,-8(fp)
    ef04:	e0ffff17 	ldw	r3,-4(fp)
    ef08:	e0fffc15 	stw	r3,-16(fp)
    ef0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ef10:	e0bffd17 	ldw	r2,-12(fp)
    ef14:	e0fffc17 	ldw	r3,-16(fp)
    ef18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ef1c:	e0bffc17 	ldw	r2,-16(fp)
    ef20:	10c00017 	ldw	r3,0(r2)
    ef24:	e0bffd17 	ldw	r2,-12(fp)
    ef28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ef2c:	e0bffc17 	ldw	r2,-16(fp)
    ef30:	10800017 	ldw	r2,0(r2)
    ef34:	e0fffd17 	ldw	r3,-12(fp)
    ef38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ef3c:	e0bffc17 	ldw	r2,-16(fp)
    ef40:	e0fffd17 	ldw	r3,-12(fp)
    ef44:	10c00015 	stw	r3,0(r2)

  return 0;  
    ef48:	0005883a 	mov	r2,zero
}
    ef4c:	e037883a 	mov	sp,fp
    ef50:	dfc00117 	ldw	ra,4(sp)
    ef54:	df000017 	ldw	fp,0(sp)
    ef58:	dec00204 	addi	sp,sp,8
    ef5c:	f800283a 	ret

0000ef60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    ef60:	defffd04 	addi	sp,sp,-12
    ef64:	dfc00215 	stw	ra,8(sp)
    ef68:	df000115 	stw	fp,4(sp)
    ef6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ef70:	00800074 	movhi	r2,1
    ef74:	10bfc104 	addi	r2,r2,-252
    ef78:	e0bfff15 	stw	r2,-4(fp)
    ef7c:	00000606 	br	ef98 <_do_ctors+0x38>
        (*ctor) (); 
    ef80:	e0bfff17 	ldw	r2,-4(fp)
    ef84:	10800017 	ldw	r2,0(r2)
    ef88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ef8c:	e0bfff17 	ldw	r2,-4(fp)
    ef90:	10bfff04 	addi	r2,r2,-4
    ef94:	e0bfff15 	stw	r2,-4(fp)
    ef98:	e0ffff17 	ldw	r3,-4(fp)
    ef9c:	00800074 	movhi	r2,1
    efa0:	10bfc204 	addi	r2,r2,-248
    efa4:	18bff62e 	bgeu	r3,r2,ef80 <_do_ctors+0x20>
        (*ctor) (); 
}
    efa8:	e037883a 	mov	sp,fp
    efac:	dfc00117 	ldw	ra,4(sp)
    efb0:	df000017 	ldw	fp,0(sp)
    efb4:	dec00204 	addi	sp,sp,8
    efb8:	f800283a 	ret

0000efbc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    efbc:	defffd04 	addi	sp,sp,-12
    efc0:	dfc00215 	stw	ra,8(sp)
    efc4:	df000115 	stw	fp,4(sp)
    efc8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    efcc:	00800074 	movhi	r2,1
    efd0:	10bfc104 	addi	r2,r2,-252
    efd4:	e0bfff15 	stw	r2,-4(fp)
    efd8:	00000606 	br	eff4 <_do_dtors+0x38>
        (*dtor) (); 
    efdc:	e0bfff17 	ldw	r2,-4(fp)
    efe0:	10800017 	ldw	r2,0(r2)
    efe4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    efe8:	e0bfff17 	ldw	r2,-4(fp)
    efec:	10bfff04 	addi	r2,r2,-4
    eff0:	e0bfff15 	stw	r2,-4(fp)
    eff4:	e0ffff17 	ldw	r3,-4(fp)
    eff8:	00800074 	movhi	r2,1
    effc:	10bfc204 	addi	r2,r2,-248
    f000:	18bff62e 	bgeu	r3,r2,efdc <_do_dtors+0x20>
        (*dtor) (); 
}
    f004:	e037883a 	mov	sp,fp
    f008:	dfc00117 	ldw	ra,4(sp)
    f00c:	df000017 	ldw	fp,0(sp)
    f010:	dec00204 	addi	sp,sp,8
    f014:	f800283a 	ret

0000f018 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f018:	defffe04 	addi	sp,sp,-8
    f01c:	dfc00115 	stw	ra,4(sp)
    f020:	df000015 	stw	fp,0(sp)
    f024:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f028:	0009883a 	mov	r4,zero
    f02c:	01440004 	movi	r5,4096
    f030:	000fad80 	call	fad8 <alt_icache_flush>
#endif
}
    f034:	e037883a 	mov	sp,fp
    f038:	dfc00117 	ldw	ra,4(sp)
    f03c:	df000017 	ldw	fp,0(sp)
    f040:	dec00204 	addi	sp,sp,8
    f044:	f800283a 	ret

0000f048 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f048:	defff904 	addi	sp,sp,-28
    f04c:	dfc00615 	stw	ra,24(sp)
    f050:	df000515 	stw	fp,20(sp)
    f054:	df000504 	addi	fp,sp,20
    f058:	e13ffc15 	stw	r4,-16(fp)
    f05c:	e17ffd15 	stw	r5,-12(fp)
    f060:	e1bffe15 	stw	r6,-8(fp)
    f064:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f068:	e0800217 	ldw	r2,8(fp)
    f06c:	d8800015 	stw	r2,0(sp)
    f070:	e13ffc17 	ldw	r4,-16(fp)
    f074:	e17ffd17 	ldw	r5,-12(fp)
    f078:	e1bffe17 	ldw	r6,-8(fp)
    f07c:	e1ffff17 	ldw	r7,-4(fp)
    f080:	000f2280 	call	f228 <alt_iic_isr_register>
}  
    f084:	e037883a 	mov	sp,fp
    f088:	dfc00117 	ldw	ra,4(sp)
    f08c:	df000017 	ldw	fp,0(sp)
    f090:	dec00204 	addi	sp,sp,8
    f094:	f800283a 	ret

0000f098 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    f098:	defff904 	addi	sp,sp,-28
    f09c:	df000615 	stw	fp,24(sp)
    f0a0:	df000604 	addi	fp,sp,24
    f0a4:	e13ffe15 	stw	r4,-8(fp)
    f0a8:	e17fff15 	stw	r5,-4(fp)
    f0ac:	e0bfff17 	ldw	r2,-4(fp)
    f0b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0b4:	0005303a 	rdctl	r2,status
    f0b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0bc:	e0fffb17 	ldw	r3,-20(fp)
    f0c0:	00bfff84 	movi	r2,-2
    f0c4:	1884703a 	and	r2,r3,r2
    f0c8:	1001703a 	wrctl	status,r2
  
  return context;
    f0cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f0d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    f0d4:	e0bffa17 	ldw	r2,-24(fp)
    f0d8:	00c00044 	movi	r3,1
    f0dc:	1884983a 	sll	r2,r3,r2
    f0e0:	1007883a 	mov	r3,r2
    f0e4:	00800074 	movhi	r2,1
    f0e8:	108e2704 	addi	r2,r2,14492
    f0ec:	10800017 	ldw	r2,0(r2)
    f0f0:	1886b03a 	or	r3,r3,r2
    f0f4:	00800074 	movhi	r2,1
    f0f8:	108e2704 	addi	r2,r2,14492
    f0fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f100:	00800074 	movhi	r2,1
    f104:	108e2704 	addi	r2,r2,14492
    f108:	10800017 	ldw	r2,0(r2)
    f10c:	100170fa 	wrctl	ienable,r2
    f110:	e0bffc17 	ldw	r2,-16(fp)
    f114:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f118:	e0bffd17 	ldw	r2,-12(fp)
    f11c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f120:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    f124:	0001883a 	nop
}
    f128:	e037883a 	mov	sp,fp
    f12c:	df000017 	ldw	fp,0(sp)
    f130:	dec00104 	addi	sp,sp,4
    f134:	f800283a 	ret

0000f138 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    f138:	defff904 	addi	sp,sp,-28
    f13c:	df000615 	stw	fp,24(sp)
    f140:	df000604 	addi	fp,sp,24
    f144:	e13ffe15 	stw	r4,-8(fp)
    f148:	e17fff15 	stw	r5,-4(fp)
    f14c:	e0bfff17 	ldw	r2,-4(fp)
    f150:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f154:	0005303a 	rdctl	r2,status
    f158:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f15c:	e0fffb17 	ldw	r3,-20(fp)
    f160:	00bfff84 	movi	r2,-2
    f164:	1884703a 	and	r2,r3,r2
    f168:	1001703a 	wrctl	status,r2
  
  return context;
    f16c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f170:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    f174:	e0bffa17 	ldw	r2,-24(fp)
    f178:	00c00044 	movi	r3,1
    f17c:	1884983a 	sll	r2,r3,r2
    f180:	0084303a 	nor	r2,zero,r2
    f184:	1007883a 	mov	r3,r2
    f188:	00800074 	movhi	r2,1
    f18c:	108e2704 	addi	r2,r2,14492
    f190:	10800017 	ldw	r2,0(r2)
    f194:	1886703a 	and	r3,r3,r2
    f198:	00800074 	movhi	r2,1
    f19c:	108e2704 	addi	r2,r2,14492
    f1a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f1a4:	00800074 	movhi	r2,1
    f1a8:	108e2704 	addi	r2,r2,14492
    f1ac:	10800017 	ldw	r2,0(r2)
    f1b0:	100170fa 	wrctl	ienable,r2
    f1b4:	e0bffc17 	ldw	r2,-16(fp)
    f1b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1bc:	e0bffd17 	ldw	r2,-12(fp)
    f1c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f1c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    f1c8:	0001883a 	nop
}
    f1cc:	e037883a 	mov	sp,fp
    f1d0:	df000017 	ldw	fp,0(sp)
    f1d4:	dec00104 	addi	sp,sp,4
    f1d8:	f800283a 	ret

0000f1dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    f1dc:	defffc04 	addi	sp,sp,-16
    f1e0:	df000315 	stw	fp,12(sp)
    f1e4:	df000304 	addi	fp,sp,12
    f1e8:	e13ffe15 	stw	r4,-8(fp)
    f1ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f1f0:	000530fa 	rdctl	r2,ienable
    f1f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f1f8:	e0bfff17 	ldw	r2,-4(fp)
    f1fc:	00c00044 	movi	r3,1
    f200:	1884983a 	sll	r2,r3,r2
    f204:	1007883a 	mov	r3,r2
    f208:	e0bffd17 	ldw	r2,-12(fp)
    f20c:	1884703a 	and	r2,r3,r2
    f210:	1004c03a 	cmpne	r2,r2,zero
    f214:	10803fcc 	andi	r2,r2,255
}
    f218:	e037883a 	mov	sp,fp
    f21c:	df000017 	ldw	fp,0(sp)
    f220:	dec00104 	addi	sp,sp,4
    f224:	f800283a 	ret

0000f228 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f228:	defff504 	addi	sp,sp,-44
    f22c:	dfc00a15 	stw	ra,40(sp)
    f230:	df000915 	stw	fp,36(sp)
    f234:	df000904 	addi	fp,sp,36
    f238:	e13ffc15 	stw	r4,-16(fp)
    f23c:	e17ffd15 	stw	r5,-12(fp)
    f240:	e1bffe15 	stw	r6,-8(fp)
    f244:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    f248:	00bffa84 	movi	r2,-22
    f24c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    f250:	e0bffd17 	ldw	r2,-12(fp)
    f254:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f258:	e0bff817 	ldw	r2,-32(fp)
    f25c:	10800808 	cmpgei	r2,r2,32
    f260:	1000271e 	bne	r2,zero,f300 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f264:	0005303a 	rdctl	r2,status
    f268:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f26c:	e0fffa17 	ldw	r3,-24(fp)
    f270:	00bfff84 	movi	r2,-2
    f274:	1884703a 	and	r2,r3,r2
    f278:	1001703a 	wrctl	status,r2
  
  return context;
    f27c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    f280:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    f284:	00800074 	movhi	r2,1
    f288:	108e3404 	addi	r2,r2,14544
    f28c:	e0fff817 	ldw	r3,-32(fp)
    f290:	180690fa 	slli	r3,r3,3
    f294:	10c5883a 	add	r2,r2,r3
    f298:	e0fffe17 	ldw	r3,-8(fp)
    f29c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    f2a0:	00800074 	movhi	r2,1
    f2a4:	108e3404 	addi	r2,r2,14544
    f2a8:	e0fff817 	ldw	r3,-32(fp)
    f2ac:	180690fa 	slli	r3,r3,3
    f2b0:	10c5883a 	add	r2,r2,r3
    f2b4:	10800104 	addi	r2,r2,4
    f2b8:	e0ffff17 	ldw	r3,-4(fp)
    f2bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f2c0:	e0bffe17 	ldw	r2,-8(fp)
    f2c4:	10000526 	beq	r2,zero,f2dc <alt_iic_isr_register+0xb4>
    f2c8:	e0bff817 	ldw	r2,-32(fp)
    f2cc:	e13ffc17 	ldw	r4,-16(fp)
    f2d0:	100b883a 	mov	r5,r2
    f2d4:	000f0980 	call	f098 <alt_ic_irq_enable>
    f2d8:	00000406 	br	f2ec <alt_iic_isr_register+0xc4>
    f2dc:	e0bff817 	ldw	r2,-32(fp)
    f2e0:	e13ffc17 	ldw	r4,-16(fp)
    f2e4:	100b883a 	mov	r5,r2
    f2e8:	000f1380 	call	f138 <alt_ic_irq_disable>
    f2ec:	e0bff715 	stw	r2,-36(fp)
    f2f0:	e0bff917 	ldw	r2,-28(fp)
    f2f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2f8:	e0bffb17 	ldw	r2,-20(fp)
    f2fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    f300:	e0bff717 	ldw	r2,-36(fp)
}
    f304:	e037883a 	mov	sp,fp
    f308:	dfc00117 	ldw	ra,4(sp)
    f30c:	df000017 	ldw	fp,0(sp)
    f310:	dec00204 	addi	sp,sp,8
    f314:	f800283a 	ret

0000f318 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f318:	defff904 	addi	sp,sp,-28
    f31c:	dfc00615 	stw	ra,24(sp)
    f320:	df000515 	stw	fp,20(sp)
    f324:	df000504 	addi	fp,sp,20
    f328:	e13ffc15 	stw	r4,-16(fp)
    f32c:	e17ffd15 	stw	r5,-12(fp)
    f330:	e1bffe15 	stw	r6,-8(fp)
    f334:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    f338:	e13ffd17 	ldw	r4,-12(fp)
    f33c:	e17ffe17 	ldw	r5,-8(fp)
    f340:	e1bfff17 	ldw	r6,-4(fp)
    f344:	000f56c0 	call	f56c <open>
    f348:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    f34c:	e0bffb17 	ldw	r2,-20(fp)
    f350:	10001c16 	blt	r2,zero,f3c4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    f354:	00800074 	movhi	r2,1
    f358:	1082da04 	addi	r2,r2,2920
    f35c:	e0fffb17 	ldw	r3,-20(fp)
    f360:	18c00324 	muli	r3,r3,12
    f364:	10c5883a 	add	r2,r2,r3
    f368:	10c00017 	ldw	r3,0(r2)
    f36c:	e0bffc17 	ldw	r2,-16(fp)
    f370:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f374:	00800074 	movhi	r2,1
    f378:	1082da04 	addi	r2,r2,2920
    f37c:	e0fffb17 	ldw	r3,-20(fp)
    f380:	18c00324 	muli	r3,r3,12
    f384:	10c5883a 	add	r2,r2,r3
    f388:	10800104 	addi	r2,r2,4
    f38c:	10c00017 	ldw	r3,0(r2)
    f390:	e0bffc17 	ldw	r2,-16(fp)
    f394:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f398:	00800074 	movhi	r2,1
    f39c:	1082da04 	addi	r2,r2,2920
    f3a0:	e0fffb17 	ldw	r3,-20(fp)
    f3a4:	18c00324 	muli	r3,r3,12
    f3a8:	10c5883a 	add	r2,r2,r3
    f3ac:	10800204 	addi	r2,r2,8
    f3b0:	10c00017 	ldw	r3,0(r2)
    f3b4:	e0bffc17 	ldw	r2,-16(fp)
    f3b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f3bc:	e13ffb17 	ldw	r4,-20(fp)
    f3c0:	000de340 	call	de34 <alt_release_fd>
  }
} 
    f3c4:	e037883a 	mov	sp,fp
    f3c8:	dfc00117 	ldw	ra,4(sp)
    f3cc:	df000017 	ldw	fp,0(sp)
    f3d0:	dec00204 	addi	sp,sp,8
    f3d4:	f800283a 	ret

0000f3d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f3d8:	defffb04 	addi	sp,sp,-20
    f3dc:	dfc00415 	stw	ra,16(sp)
    f3e0:	df000315 	stw	fp,12(sp)
    f3e4:	df000304 	addi	fp,sp,12
    f3e8:	e13ffd15 	stw	r4,-12(fp)
    f3ec:	e17ffe15 	stw	r5,-8(fp)
    f3f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f3f4:	01000074 	movhi	r4,1
    f3f8:	2102dd04 	addi	r4,r4,2932
    f3fc:	e17ffd17 	ldw	r5,-12(fp)
    f400:	01800044 	movi	r6,1
    f404:	01c07fc4 	movi	r7,511
    f408:	000f3180 	call	f318 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f40c:	01000074 	movhi	r4,1
    f410:	2102da04 	addi	r4,r4,2920
    f414:	e17ffe17 	ldw	r5,-8(fp)
    f418:	000d883a 	mov	r6,zero
    f41c:	01c07fc4 	movi	r7,511
    f420:	000f3180 	call	f318 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f424:	01000074 	movhi	r4,1
    f428:	2102e004 	addi	r4,r4,2944
    f42c:	e17fff17 	ldw	r5,-4(fp)
    f430:	01800044 	movi	r6,1
    f434:	01c07fc4 	movi	r7,511
    f438:	000f3180 	call	f318 <alt_open_fd>
}  
    f43c:	e037883a 	mov	sp,fp
    f440:	dfc00117 	ldw	ra,4(sp)
    f444:	df000017 	ldw	fp,0(sp)
    f448:	dec00204 	addi	sp,sp,8
    f44c:	f800283a 	ret

0000f450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f450:	defffe04 	addi	sp,sp,-8
    f454:	dfc00115 	stw	ra,4(sp)
    f458:	df000015 	stw	fp,0(sp)
    f45c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f460:	00800074 	movhi	r2,1
    f464:	10875d04 	addi	r2,r2,7540
    f468:	10800017 	ldw	r2,0(r2)
    f46c:	10000526 	beq	r2,zero,f484 <alt_get_errno+0x34>
    f470:	00800074 	movhi	r2,1
    f474:	10875d04 	addi	r2,r2,7540
    f478:	10800017 	ldw	r2,0(r2)
    f47c:	103ee83a 	callr	r2
    f480:	00000206 	br	f48c <alt_get_errno+0x3c>
    f484:	00800074 	movhi	r2,1
    f488:	108e2004 	addi	r2,r2,14464
}
    f48c:	e037883a 	mov	sp,fp
    f490:	dfc00117 	ldw	ra,4(sp)
    f494:	df000017 	ldw	fp,0(sp)
    f498:	dec00204 	addi	sp,sp,8
    f49c:	f800283a 	ret

0000f4a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f4a0:	defffd04 	addi	sp,sp,-12
    f4a4:	df000215 	stw	fp,8(sp)
    f4a8:	df000204 	addi	fp,sp,8
    f4ac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f4b0:	e0bfff17 	ldw	r2,-4(fp)
    f4b4:	10800217 	ldw	r2,8(r2)
    f4b8:	10d00034 	orhi	r3,r2,16384
    f4bc:	e0bfff17 	ldw	r2,-4(fp)
    f4c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f4c4:	e03ffe15 	stw	zero,-8(fp)
    f4c8:	00001d06 	br	f540 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f4cc:	00800074 	movhi	r2,1
    f4d0:	1082da04 	addi	r2,r2,2920
    f4d4:	e0fffe17 	ldw	r3,-8(fp)
    f4d8:	18c00324 	muli	r3,r3,12
    f4dc:	10c5883a 	add	r2,r2,r3
    f4e0:	10c00017 	ldw	r3,0(r2)
    f4e4:	e0bfff17 	ldw	r2,-4(fp)
    f4e8:	10800017 	ldw	r2,0(r2)
    f4ec:	1880111e 	bne	r3,r2,f534 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f4f0:	00800074 	movhi	r2,1
    f4f4:	1082da04 	addi	r2,r2,2920
    f4f8:	e0fffe17 	ldw	r3,-8(fp)
    f4fc:	18c00324 	muli	r3,r3,12
    f500:	10c5883a 	add	r2,r2,r3
    f504:	10800204 	addi	r2,r2,8
    f508:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f50c:	1000090e 	bge	r2,zero,f534 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f510:	e0bffe17 	ldw	r2,-8(fp)
    f514:	10c00324 	muli	r3,r2,12
    f518:	00800074 	movhi	r2,1
    f51c:	1082da04 	addi	r2,r2,2920
    f520:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f524:	e0bfff17 	ldw	r2,-4(fp)
    f528:	18800226 	beq	r3,r2,f534 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f52c:	00bffcc4 	movi	r2,-13
    f530:	00000a06 	br	f55c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f534:	e0bffe17 	ldw	r2,-8(fp)
    f538:	10800044 	addi	r2,r2,1
    f53c:	e0bffe15 	stw	r2,-8(fp)
    f540:	00800074 	movhi	r2,1
    f544:	10875c04 	addi	r2,r2,7536
    f548:	10800017 	ldw	r2,0(r2)
    f54c:	1007883a 	mov	r3,r2
    f550:	e0bffe17 	ldw	r2,-8(fp)
    f554:	18bfdd2e 	bgeu	r3,r2,f4cc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f558:	0005883a 	mov	r2,zero
}
    f55c:	e037883a 	mov	sp,fp
    f560:	df000017 	ldw	fp,0(sp)
    f564:	dec00104 	addi	sp,sp,4
    f568:	f800283a 	ret

0000f56c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f56c:	defff604 	addi	sp,sp,-40
    f570:	dfc00915 	stw	ra,36(sp)
    f574:	df000815 	stw	fp,32(sp)
    f578:	df000804 	addi	fp,sp,32
    f57c:	e13ffd15 	stw	r4,-12(fp)
    f580:	e17ffe15 	stw	r5,-8(fp)
    f584:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f588:	00bfffc4 	movi	r2,-1
    f58c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f590:	00bffb44 	movi	r2,-19
    f594:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f598:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f59c:	e13ffd17 	ldw	r4,-12(fp)
    f5a0:	01400074 	movhi	r5,1
    f5a4:	29475a04 	addi	r5,r5,7528
    f5a8:	000f8800 	call	f880 <alt_find_dev>
    f5ac:	e0bff815 	stw	r2,-32(fp)
    f5b0:	e0bff817 	ldw	r2,-32(fp)
    f5b4:	1000051e 	bne	r2,zero,f5cc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f5b8:	e13ffd17 	ldw	r4,-12(fp)
    f5bc:	000f9100 	call	f910 <alt_find_file>
    f5c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f5c4:	00800044 	movi	r2,1
    f5c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f5cc:	e0bff817 	ldw	r2,-32(fp)
    f5d0:	10002926 	beq	r2,zero,f678 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f5d4:	e13ff817 	ldw	r4,-32(fp)
    f5d8:	000fa240 	call	fa24 <alt_get_fd>
    f5dc:	e0bff915 	stw	r2,-28(fp)
    f5e0:	e0bff917 	ldw	r2,-28(fp)
    f5e4:	1000030e 	bge	r2,zero,f5f4 <open+0x88>
    {
      status = index;
    f5e8:	e0bff917 	ldw	r2,-28(fp)
    f5ec:	e0bffa15 	stw	r2,-24(fp)
    f5f0:	00002306 	br	f680 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    f5f4:	e0bff917 	ldw	r2,-28(fp)
    f5f8:	10c00324 	muli	r3,r2,12
    f5fc:	00800074 	movhi	r2,1
    f600:	1082da04 	addi	r2,r2,2920
    f604:	1885883a 	add	r2,r3,r2
    f608:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f60c:	e0fffe17 	ldw	r3,-8(fp)
    f610:	00900034 	movhi	r2,16384
    f614:	10bfffc4 	addi	r2,r2,-1
    f618:	1886703a 	and	r3,r3,r2
    f61c:	e0bffc17 	ldw	r2,-16(fp)
    f620:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f624:	e0bffb17 	ldw	r2,-20(fp)
    f628:	1000051e 	bne	r2,zero,f640 <open+0xd4>
    f62c:	e13ffc17 	ldw	r4,-16(fp)
    f630:	000f4a00 	call	f4a0 <alt_file_locked>
    f634:	e0bffa15 	stw	r2,-24(fp)
    f638:	e0bffa17 	ldw	r2,-24(fp)
    f63c:	10001016 	blt	r2,zero,f680 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f640:	e0bff817 	ldw	r2,-32(fp)
    f644:	10800317 	ldw	r2,12(r2)
    f648:	10000826 	beq	r2,zero,f66c <open+0x100>
    f64c:	e0bff817 	ldw	r2,-32(fp)
    f650:	10800317 	ldw	r2,12(r2)
    f654:	e13ffc17 	ldw	r4,-16(fp)
    f658:	e17ffd17 	ldw	r5,-12(fp)
    f65c:	e1bffe17 	ldw	r6,-8(fp)
    f660:	e1ffff17 	ldw	r7,-4(fp)
    f664:	103ee83a 	callr	r2
    f668:	00000106 	br	f670 <open+0x104>
    f66c:	0005883a 	mov	r2,zero
    f670:	e0bffa15 	stw	r2,-24(fp)
    f674:	00000206 	br	f680 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f678:	00bffb44 	movi	r2,-19
    f67c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f680:	e0bffa17 	ldw	r2,-24(fp)
    f684:	1000090e 	bge	r2,zero,f6ac <open+0x140>
  {
    alt_release_fd (index);  
    f688:	e13ff917 	ldw	r4,-28(fp)
    f68c:	000de340 	call	de34 <alt_release_fd>
    ALT_ERRNO = -status;
    f690:	000f4500 	call	f450 <alt_get_errno>
    f694:	1007883a 	mov	r3,r2
    f698:	e0bffa17 	ldw	r2,-24(fp)
    f69c:	0085c83a 	sub	r2,zero,r2
    f6a0:	18800015 	stw	r2,0(r3)
    return -1;
    f6a4:	00bfffc4 	movi	r2,-1
    f6a8:	00000106 	br	f6b0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    f6ac:	e0bff917 	ldw	r2,-28(fp)
}
    f6b0:	e037883a 	mov	sp,fp
    f6b4:	dfc00117 	ldw	ra,4(sp)
    f6b8:	df000017 	ldw	fp,0(sp)
    f6bc:	dec00204 	addi	sp,sp,8
    f6c0:	f800283a 	ret

0000f6c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f6c4:	defffa04 	addi	sp,sp,-24
    f6c8:	df000515 	stw	fp,20(sp)
    f6cc:	df000504 	addi	fp,sp,20
    f6d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6d4:	0005303a 	rdctl	r2,status
    f6d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6dc:	e0fffc17 	ldw	r3,-16(fp)
    f6e0:	00bfff84 	movi	r2,-2
    f6e4:	1884703a 	and	r2,r3,r2
    f6e8:	1001703a 	wrctl	status,r2
  
  return context;
    f6ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f6f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f6f4:	e0bfff17 	ldw	r2,-4(fp)
    f6f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f6fc:	e0bffd17 	ldw	r2,-12(fp)
    f700:	10800017 	ldw	r2,0(r2)
    f704:	e0fffd17 	ldw	r3,-12(fp)
    f708:	18c00117 	ldw	r3,4(r3)
    f70c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f710:	e0bffd17 	ldw	r2,-12(fp)
    f714:	10800117 	ldw	r2,4(r2)
    f718:	e0fffd17 	ldw	r3,-12(fp)
    f71c:	18c00017 	ldw	r3,0(r3)
    f720:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f724:	e0bffd17 	ldw	r2,-12(fp)
    f728:	e0fffd17 	ldw	r3,-12(fp)
    f72c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f730:	e0bffd17 	ldw	r2,-12(fp)
    f734:	e0fffd17 	ldw	r3,-12(fp)
    f738:	10c00015 	stw	r3,0(r2)
    f73c:	e0bffb17 	ldw	r2,-20(fp)
    f740:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f744:	e0bffe17 	ldw	r2,-8(fp)
    f748:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f74c:	e037883a 	mov	sp,fp
    f750:	df000017 	ldw	fp,0(sp)
    f754:	dec00104 	addi	sp,sp,4
    f758:	f800283a 	ret

0000f75c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f75c:	defffb04 	addi	sp,sp,-20
    f760:	dfc00415 	stw	ra,16(sp)
    f764:	df000315 	stw	fp,12(sp)
    f768:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f76c:	d0a00e17 	ldw	r2,-32712(gp)
    f770:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f774:	d0a6d717 	ldw	r2,-25764(gp)
    f778:	10800044 	addi	r2,r2,1
    f77c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f780:	00002e06 	br	f83c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f784:	e0bffd17 	ldw	r2,-12(fp)
    f788:	10800017 	ldw	r2,0(r2)
    f78c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f790:	e0bffd17 	ldw	r2,-12(fp)
    f794:	10800403 	ldbu	r2,16(r2)
    f798:	10803fcc 	andi	r2,r2,255
    f79c:	10000426 	beq	r2,zero,f7b0 <alt_tick+0x54>
    f7a0:	d0a6d717 	ldw	r2,-25764(gp)
    f7a4:	1000021e 	bne	r2,zero,f7b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f7a8:	e0bffd17 	ldw	r2,-12(fp)
    f7ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f7b0:	e0bffd17 	ldw	r2,-12(fp)
    f7b4:	10800217 	ldw	r2,8(r2)
    f7b8:	d0e6d717 	ldw	r3,-25764(gp)
    f7bc:	18801d36 	bltu	r3,r2,f834 <alt_tick+0xd8>
    f7c0:	e0bffd17 	ldw	r2,-12(fp)
    f7c4:	10800403 	ldbu	r2,16(r2)
    f7c8:	10803fcc 	andi	r2,r2,255
    f7cc:	1000191e 	bne	r2,zero,f834 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f7d0:	e0bffd17 	ldw	r2,-12(fp)
    f7d4:	10800317 	ldw	r2,12(r2)
    f7d8:	e0fffd17 	ldw	r3,-12(fp)
    f7dc:	18c00517 	ldw	r3,20(r3)
    f7e0:	1809883a 	mov	r4,r3
    f7e4:	103ee83a 	callr	r2
    f7e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f7ec:	e0bfff17 	ldw	r2,-4(fp)
    f7f0:	1000031e 	bne	r2,zero,f800 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f7f4:	e13ffd17 	ldw	r4,-12(fp)
    f7f8:	000f6c40 	call	f6c4 <alt_alarm_stop>
    f7fc:	00000d06 	br	f834 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f800:	e0bffd17 	ldw	r2,-12(fp)
    f804:	10c00217 	ldw	r3,8(r2)
    f808:	e0bfff17 	ldw	r2,-4(fp)
    f80c:	1887883a 	add	r3,r3,r2
    f810:	e0bffd17 	ldw	r2,-12(fp)
    f814:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f818:	e0bffd17 	ldw	r2,-12(fp)
    f81c:	10c00217 	ldw	r3,8(r2)
    f820:	d0a6d717 	ldw	r2,-25764(gp)
    f824:	1880032e 	bgeu	r3,r2,f834 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f828:	e0bffd17 	ldw	r2,-12(fp)
    f82c:	00c00044 	movi	r3,1
    f830:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f834:	e0bffe17 	ldw	r2,-8(fp)
    f838:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f83c:	e0fffd17 	ldw	r3,-12(fp)
    f840:	d0a00e04 	addi	r2,gp,-32712
    f844:	18bfcf1e 	bne	r3,r2,f784 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f848:	0001883a 	nop
}
    f84c:	e037883a 	mov	sp,fp
    f850:	dfc00117 	ldw	ra,4(sp)
    f854:	df000017 	ldw	fp,0(sp)
    f858:	dec00204 	addi	sp,sp,8
    f85c:	f800283a 	ret

0000f860 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    f860:	deffff04 	addi	sp,sp,-4
    f864:	df000015 	stw	fp,0(sp)
    f868:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f86c:	000170fa 	wrctl	ienable,zero
}
    f870:	e037883a 	mov	sp,fp
    f874:	df000017 	ldw	fp,0(sp)
    f878:	dec00104 	addi	sp,sp,4
    f87c:	f800283a 	ret

0000f880 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f880:	defffa04 	addi	sp,sp,-24
    f884:	dfc00515 	stw	ra,20(sp)
    f888:	df000415 	stw	fp,16(sp)
    f88c:	df000404 	addi	fp,sp,16
    f890:	e13ffe15 	stw	r4,-8(fp)
    f894:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f898:	e0bfff17 	ldw	r2,-4(fp)
    f89c:	10800017 	ldw	r2,0(r2)
    f8a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f8a4:	e13ffe17 	ldw	r4,-8(fp)
    f8a8:	00023840 	call	2384 <strlen>
    f8ac:	10800044 	addi	r2,r2,1
    f8b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f8b4:	00000d06 	br	f8ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f8b8:	e0bffc17 	ldw	r2,-16(fp)
    f8bc:	10c00217 	ldw	r3,8(r2)
    f8c0:	e0bffd17 	ldw	r2,-12(fp)
    f8c4:	1809883a 	mov	r4,r3
    f8c8:	e17ffe17 	ldw	r5,-8(fp)
    f8cc:	100d883a 	mov	r6,r2
    f8d0:	000fbb00 	call	fbb0 <memcmp>
    f8d4:	1000021e 	bne	r2,zero,f8e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f8d8:	e0bffc17 	ldw	r2,-16(fp)
    f8dc:	00000706 	br	f8fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f8e0:	e0bffc17 	ldw	r2,-16(fp)
    f8e4:	10800017 	ldw	r2,0(r2)
    f8e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f8ec:	e0fffc17 	ldw	r3,-16(fp)
    f8f0:	e0bfff17 	ldw	r2,-4(fp)
    f8f4:	18bff01e 	bne	r3,r2,f8b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f8f8:	0005883a 	mov	r2,zero
}
    f8fc:	e037883a 	mov	sp,fp
    f900:	dfc00117 	ldw	ra,4(sp)
    f904:	df000017 	ldw	fp,0(sp)
    f908:	dec00204 	addi	sp,sp,8
    f90c:	f800283a 	ret

0000f910 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f910:	defffb04 	addi	sp,sp,-20
    f914:	dfc00415 	stw	ra,16(sp)
    f918:	df000315 	stw	fp,12(sp)
    f91c:	df000304 	addi	fp,sp,12
    f920:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f924:	00800074 	movhi	r2,1
    f928:	10875804 	addi	r2,r2,7520
    f92c:	10800017 	ldw	r2,0(r2)
    f930:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f934:	00003106 	br	f9fc <alt_find_file+0xec>
  {
    len = strlen(next->name);
    f938:	e0bffd17 	ldw	r2,-12(fp)
    f93c:	10800217 	ldw	r2,8(r2)
    f940:	1009883a 	mov	r4,r2
    f944:	00023840 	call	2384 <strlen>
    f948:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f94c:	e0bffd17 	ldw	r2,-12(fp)
    f950:	10c00217 	ldw	r3,8(r2)
    f954:	e0bffe17 	ldw	r2,-8(fp)
    f958:	10bfffc4 	addi	r2,r2,-1
    f95c:	1885883a 	add	r2,r3,r2
    f960:	10800003 	ldbu	r2,0(r2)
    f964:	10803fcc 	andi	r2,r2,255
    f968:	1080201c 	xori	r2,r2,128
    f96c:	10bfe004 	addi	r2,r2,-128
    f970:	10800bd8 	cmpnei	r2,r2,47
    f974:	1000031e 	bne	r2,zero,f984 <alt_find_file+0x74>
    {
      len -= 1;
    f978:	e0bffe17 	ldw	r2,-8(fp)
    f97c:	10bfffc4 	addi	r2,r2,-1
    f980:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f984:	e0bffe17 	ldw	r2,-8(fp)
    f988:	e0ffff17 	ldw	r3,-4(fp)
    f98c:	1885883a 	add	r2,r3,r2
    f990:	10800003 	ldbu	r2,0(r2)
    f994:	10803fcc 	andi	r2,r2,255
    f998:	1080201c 	xori	r2,r2,128
    f99c:	10bfe004 	addi	r2,r2,-128
    f9a0:	10800be0 	cmpeqi	r2,r2,47
    f9a4:	1000081e 	bne	r2,zero,f9c8 <alt_find_file+0xb8>
    f9a8:	e0bffe17 	ldw	r2,-8(fp)
    f9ac:	e0ffff17 	ldw	r3,-4(fp)
    f9b0:	1885883a 	add	r2,r3,r2
    f9b4:	10800003 	ldbu	r2,0(r2)
    f9b8:	10803fcc 	andi	r2,r2,255
    f9bc:	1080201c 	xori	r2,r2,128
    f9c0:	10bfe004 	addi	r2,r2,-128
    f9c4:	10000a1e 	bne	r2,zero,f9f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    f9c8:	e0bffd17 	ldw	r2,-12(fp)
    f9cc:	10c00217 	ldw	r3,8(r2)
    f9d0:	e0bffe17 	ldw	r2,-8(fp)
    f9d4:	1809883a 	mov	r4,r3
    f9d8:	e17fff17 	ldw	r5,-4(fp)
    f9dc:	100d883a 	mov	r6,r2
    f9e0:	000fbb00 	call	fbb0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f9e4:	1000021e 	bne	r2,zero,f9f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f9e8:	e0bffd17 	ldw	r2,-12(fp)
    f9ec:	00000806 	br	fa10 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    f9f0:	e0bffd17 	ldw	r2,-12(fp)
    f9f4:	10800017 	ldw	r2,0(r2)
    f9f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f9fc:	e0fffd17 	ldw	r3,-12(fp)
    fa00:	00800074 	movhi	r2,1
    fa04:	10875804 	addi	r2,r2,7520
    fa08:	18bfcb1e 	bne	r3,r2,f938 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fa0c:	0005883a 	mov	r2,zero
}
    fa10:	e037883a 	mov	sp,fp
    fa14:	dfc00117 	ldw	ra,4(sp)
    fa18:	df000017 	ldw	fp,0(sp)
    fa1c:	dec00204 	addi	sp,sp,8
    fa20:	f800283a 	ret

0000fa24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fa24:	defffc04 	addi	sp,sp,-16
    fa28:	df000315 	stw	fp,12(sp)
    fa2c:	df000304 	addi	fp,sp,12
    fa30:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    fa34:	00bffa04 	movi	r2,-24
    fa38:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fa3c:	e03ffd15 	stw	zero,-12(fp)
    fa40:	00001d06 	br	fab8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    fa44:	00800074 	movhi	r2,1
    fa48:	1082da04 	addi	r2,r2,2920
    fa4c:	e0fffd17 	ldw	r3,-12(fp)
    fa50:	18c00324 	muli	r3,r3,12
    fa54:	10c5883a 	add	r2,r2,r3
    fa58:	10800017 	ldw	r2,0(r2)
    fa5c:	1000131e 	bne	r2,zero,faac <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    fa60:	00800074 	movhi	r2,1
    fa64:	1082da04 	addi	r2,r2,2920
    fa68:	e0fffd17 	ldw	r3,-12(fp)
    fa6c:	18c00324 	muli	r3,r3,12
    fa70:	10c5883a 	add	r2,r2,r3
    fa74:	e0ffff17 	ldw	r3,-4(fp)
    fa78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    fa7c:	00800074 	movhi	r2,1
    fa80:	10875c04 	addi	r2,r2,7536
    fa84:	10c00017 	ldw	r3,0(r2)
    fa88:	e0bffd17 	ldw	r2,-12(fp)
    fa8c:	1880040e 	bge	r3,r2,faa0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    fa90:	00800074 	movhi	r2,1
    fa94:	10875c04 	addi	r2,r2,7536
    fa98:	e0fffd17 	ldw	r3,-12(fp)
    fa9c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    faa0:	e0bffd17 	ldw	r2,-12(fp)
    faa4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    faa8:	00000606 	br	fac4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    faac:	e0bffd17 	ldw	r2,-12(fp)
    fab0:	10800044 	addi	r2,r2,1
    fab4:	e0bffd15 	stw	r2,-12(fp)
    fab8:	e0bffd17 	ldw	r2,-12(fp)
    fabc:	10800810 	cmplti	r2,r2,32
    fac0:	103fe01e 	bne	r2,zero,fa44 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    fac4:	e0bffe17 	ldw	r2,-8(fp)
}
    fac8:	e037883a 	mov	sp,fp
    facc:	df000017 	ldw	fp,0(sp)
    fad0:	dec00104 	addi	sp,sp,4
    fad4:	f800283a 	ret

0000fad8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    fad8:	defffb04 	addi	sp,sp,-20
    fadc:	df000415 	stw	fp,16(sp)
    fae0:	df000404 	addi	fp,sp,16
    fae4:	e13ffe15 	stw	r4,-8(fp)
    fae8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    faec:	e0bfff17 	ldw	r2,-4(fp)
    faf0:	10840070 	cmpltui	r2,r2,4097
    faf4:	1000021e 	bne	r2,zero,fb00 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    faf8:	00840004 	movi	r2,4096
    fafc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    fb00:	e0fffe17 	ldw	r3,-8(fp)
    fb04:	e0bfff17 	ldw	r2,-4(fp)
    fb08:	1885883a 	add	r2,r3,r2
    fb0c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fb10:	e0bffe17 	ldw	r2,-8(fp)
    fb14:	e0bffc15 	stw	r2,-16(fp)
    fb18:	00000506 	br	fb30 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fb1c:	e0bffc17 	ldw	r2,-16(fp)
    fb20:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fb24:	e0bffc17 	ldw	r2,-16(fp)
    fb28:	10800804 	addi	r2,r2,32
    fb2c:	e0bffc15 	stw	r2,-16(fp)
    fb30:	e0fffc17 	ldw	r3,-16(fp)
    fb34:	e0bffd17 	ldw	r2,-12(fp)
    fb38:	18bff836 	bltu	r3,r2,fb1c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fb3c:	e0bffe17 	ldw	r2,-8(fp)
    fb40:	108007cc 	andi	r2,r2,31
    fb44:	10000226 	beq	r2,zero,fb50 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fb48:	e0bffc17 	ldw	r2,-16(fp)
    fb4c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fb50:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    fb54:	e037883a 	mov	sp,fp
    fb58:	df000017 	ldw	fp,0(sp)
    fb5c:	dec00104 	addi	sp,sp,4
    fb60:	f800283a 	ret

0000fb64 <atexit>:
    fb64:	200b883a 	mov	r5,r4
    fb68:	000d883a 	mov	r6,zero
    fb6c:	0009883a 	mov	r4,zero
    fb70:	000f883a 	mov	r7,zero
    fb74:	000fc2c1 	jmpi	fc2c <__register_exitproc>

0000fb78 <exit>:
    fb78:	defffe04 	addi	sp,sp,-8
    fb7c:	000b883a 	mov	r5,zero
    fb80:	dc000015 	stw	r16,0(sp)
    fb84:	dfc00115 	stw	ra,4(sp)
    fb88:	2021883a 	mov	r16,r4
    fb8c:	000fd400 	call	fd40 <__call_exitprocs>
    fb90:	00800074 	movhi	r2,1
    fb94:	10875204 	addi	r2,r2,7496
    fb98:	11000017 	ldw	r4,0(r2)
    fb9c:	20800f17 	ldw	r2,60(r4)
    fba0:	10000126 	beq	r2,zero,fba8 <exit+0x30>
    fba4:	103ee83a 	callr	r2
    fba8:	8009883a 	mov	r4,r16
    fbac:	000fed40 	call	fed4 <_exit>

0000fbb0 <memcmp>:
    fbb0:	01c000c4 	movi	r7,3
    fbb4:	3980192e 	bgeu	r7,r6,fc1c <memcmp+0x6c>
    fbb8:	2144b03a 	or	r2,r4,r5
    fbbc:	11c4703a 	and	r2,r2,r7
    fbc0:	10000f26 	beq	r2,zero,fc00 <memcmp+0x50>
    fbc4:	20800003 	ldbu	r2,0(r4)
    fbc8:	28c00003 	ldbu	r3,0(r5)
    fbcc:	10c0151e 	bne	r2,r3,fc24 <memcmp+0x74>
    fbd0:	31bfff84 	addi	r6,r6,-2
    fbd4:	01ffffc4 	movi	r7,-1
    fbd8:	00000406 	br	fbec <memcmp+0x3c>
    fbdc:	20800003 	ldbu	r2,0(r4)
    fbe0:	28c00003 	ldbu	r3,0(r5)
    fbe4:	31bfffc4 	addi	r6,r6,-1
    fbe8:	10c00e1e 	bne	r2,r3,fc24 <memcmp+0x74>
    fbec:	21000044 	addi	r4,r4,1
    fbf0:	29400044 	addi	r5,r5,1
    fbf4:	31fff91e 	bne	r6,r7,fbdc <memcmp+0x2c>
    fbf8:	0005883a 	mov	r2,zero
    fbfc:	f800283a 	ret
    fc00:	20c00017 	ldw	r3,0(r4)
    fc04:	28800017 	ldw	r2,0(r5)
    fc08:	1880041e 	bne	r3,r2,fc1c <memcmp+0x6c>
    fc0c:	31bfff04 	addi	r6,r6,-4
    fc10:	21000104 	addi	r4,r4,4
    fc14:	29400104 	addi	r5,r5,4
    fc18:	39bff936 	bltu	r7,r6,fc00 <memcmp+0x50>
    fc1c:	303fe91e 	bne	r6,zero,fbc4 <memcmp+0x14>
    fc20:	003ff506 	br	fbf8 <memcmp+0x48>
    fc24:	10c5c83a 	sub	r2,r2,r3
    fc28:	f800283a 	ret

0000fc2c <__register_exitproc>:
    fc2c:	00800074 	movhi	r2,1
    fc30:	defffa04 	addi	sp,sp,-24
    fc34:	10875204 	addi	r2,r2,7496
    fc38:	dc000315 	stw	r16,12(sp)
    fc3c:	14000017 	ldw	r16,0(r2)
    fc40:	dc400415 	stw	r17,16(sp)
    fc44:	dfc00515 	stw	ra,20(sp)
    fc48:	80805217 	ldw	r2,328(r16)
    fc4c:	2023883a 	mov	r17,r4
    fc50:	10003626 	beq	r2,zero,fd2c <__register_exitproc+0x100>
    fc54:	10c00117 	ldw	r3,4(r2)
    fc58:	010007c4 	movi	r4,31
    fc5c:	20c00e16 	blt	r4,r3,fc98 <__register_exitproc+0x6c>
    fc60:	1a400044 	addi	r9,r3,1
    fc64:	8800211e 	bne	r17,zero,fcec <__register_exitproc+0xc0>
    fc68:	18c00084 	addi	r3,r3,2
    fc6c:	18c7883a 	add	r3,r3,r3
    fc70:	18c7883a 	add	r3,r3,r3
    fc74:	12400115 	stw	r9,4(r2)
    fc78:	10c7883a 	add	r3,r2,r3
    fc7c:	19400015 	stw	r5,0(r3)
    fc80:	0005883a 	mov	r2,zero
    fc84:	dfc00517 	ldw	ra,20(sp)
    fc88:	dc400417 	ldw	r17,16(sp)
    fc8c:	dc000317 	ldw	r16,12(sp)
    fc90:	dec00604 	addi	sp,sp,24
    fc94:	f800283a 	ret
    fc98:	00800034 	movhi	r2,0
    fc9c:	1084c204 	addi	r2,r2,4872
    fca0:	10002526 	beq	r2,zero,fd38 <__register_exitproc+0x10c>
    fca4:	01006404 	movi	r4,400
    fca8:	d9400015 	stw	r5,0(sp)
    fcac:	d9800115 	stw	r6,4(sp)
    fcb0:	d9c00215 	stw	r7,8(sp)
    fcb4:	00013080 	call	1308 <malloc>
    fcb8:	d9400017 	ldw	r5,0(sp)
    fcbc:	d9800117 	ldw	r6,4(sp)
    fcc0:	d9c00217 	ldw	r7,8(sp)
    fcc4:	10001c26 	beq	r2,zero,fd38 <__register_exitproc+0x10c>
    fcc8:	80c05217 	ldw	r3,328(r16)
    fccc:	10000115 	stw	zero,4(r2)
    fcd0:	02400044 	movi	r9,1
    fcd4:	10c00015 	stw	r3,0(r2)
    fcd8:	80805215 	stw	r2,328(r16)
    fcdc:	10006215 	stw	zero,392(r2)
    fce0:	10006315 	stw	zero,396(r2)
    fce4:	0007883a 	mov	r3,zero
    fce8:	883fdf26 	beq	r17,zero,fc68 <__register_exitproc+0x3c>
    fcec:	18d1883a 	add	r8,r3,r3
    fcf0:	4211883a 	add	r8,r8,r8
    fcf4:	1211883a 	add	r8,r2,r8
    fcf8:	41802215 	stw	r6,136(r8)
    fcfc:	01000044 	movi	r4,1
    fd00:	11806217 	ldw	r6,392(r2)
    fd04:	20c8983a 	sll	r4,r4,r3
    fd08:	310cb03a 	or	r6,r6,r4
    fd0c:	11806215 	stw	r6,392(r2)
    fd10:	41c04215 	stw	r7,264(r8)
    fd14:	01800084 	movi	r6,2
    fd18:	89bfd31e 	bne	r17,r6,fc68 <__register_exitproc+0x3c>
    fd1c:	11806317 	ldw	r6,396(r2)
    fd20:	3108b03a 	or	r4,r6,r4
    fd24:	11006315 	stw	r4,396(r2)
    fd28:	003fcf06 	br	fc68 <__register_exitproc+0x3c>
    fd2c:	80805304 	addi	r2,r16,332
    fd30:	80805215 	stw	r2,328(r16)
    fd34:	003fc706 	br	fc54 <__register_exitproc+0x28>
    fd38:	00bfffc4 	movi	r2,-1
    fd3c:	003fd106 	br	fc84 <__register_exitproc+0x58>

0000fd40 <__call_exitprocs>:
    fd40:	00800074 	movhi	r2,1
    fd44:	10875204 	addi	r2,r2,7496
    fd48:	10800017 	ldw	r2,0(r2)
    fd4c:	defff404 	addi	sp,sp,-48
    fd50:	dd800815 	stw	r22,32(sp)
    fd54:	d8800015 	stw	r2,0(sp)
    fd58:	10805204 	addi	r2,r2,328
    fd5c:	dd000615 	stw	r20,24(sp)
    fd60:	dc800415 	stw	r18,16(sp)
    fd64:	dfc00b15 	stw	ra,44(sp)
    fd68:	df000a15 	stw	fp,40(sp)
    fd6c:	ddc00915 	stw	r23,36(sp)
    fd70:	dd400715 	stw	r21,28(sp)
    fd74:	dcc00515 	stw	r19,20(sp)
    fd78:	dc400315 	stw	r17,12(sp)
    fd7c:	dc000215 	stw	r16,8(sp)
    fd80:	2025883a 	mov	r18,r4
    fd84:	2829883a 	mov	r20,r5
    fd88:	d8800115 	stw	r2,4(sp)
    fd8c:	05bfffc4 	movi	r22,-1
    fd90:	d8800017 	ldw	r2,0(sp)
    fd94:	14c05217 	ldw	r19,328(r2)
    fd98:	98001d26 	beq	r19,zero,fe10 <__call_exitprocs+0xd0>
    fd9c:	dd400117 	ldw	r21,4(sp)
    fda0:	98800117 	ldw	r2,4(r19)
    fda4:	173fffc4 	addi	fp,r2,-1
    fda8:	e0000d16 	blt	fp,zero,fde0 <__call_exitprocs+0xa0>
    fdac:	14000044 	addi	r16,r2,1
    fdb0:	8421883a 	add	r16,r16,r16
    fdb4:	8421883a 	add	r16,r16,r16
    fdb8:	84402004 	addi	r17,r16,128
    fdbc:	9c63883a 	add	r17,r19,r17
    fdc0:	9c21883a 	add	r16,r19,r16
    fdc4:	a0001e26 	beq	r20,zero,fe40 <__call_exitprocs+0x100>
    fdc8:	80804017 	ldw	r2,256(r16)
    fdcc:	15001c26 	beq	r2,r20,fe40 <__call_exitprocs+0x100>
    fdd0:	e73fffc4 	addi	fp,fp,-1
    fdd4:	843fff04 	addi	r16,r16,-4
    fdd8:	8c7fff04 	addi	r17,r17,-4
    fddc:	e5bff91e 	bne	fp,r22,fdc4 <__call_exitprocs+0x84>
    fde0:	00800034 	movhi	r2,0
    fde4:	1084c704 	addi	r2,r2,4892
    fde8:	10000926 	beq	r2,zero,fe10 <__call_exitprocs+0xd0>
    fdec:	98800117 	ldw	r2,4(r19)
    fdf0:	1000311e 	bne	r2,zero,feb8 <__call_exitprocs+0x178>
    fdf4:	98800017 	ldw	r2,0(r19)
    fdf8:	10003426 	beq	r2,zero,fecc <__call_exitprocs+0x18c>
    fdfc:	9809883a 	mov	r4,r19
    fe00:	a8800015 	stw	r2,0(r21)
    fe04:	000131c0 	call	131c <free>
    fe08:	acc00017 	ldw	r19,0(r21)
    fe0c:	983fe41e 	bne	r19,zero,fda0 <__call_exitprocs+0x60>
    fe10:	dfc00b17 	ldw	ra,44(sp)
    fe14:	df000a17 	ldw	fp,40(sp)
    fe18:	ddc00917 	ldw	r23,36(sp)
    fe1c:	dd800817 	ldw	r22,32(sp)
    fe20:	dd400717 	ldw	r21,28(sp)
    fe24:	dd000617 	ldw	r20,24(sp)
    fe28:	dcc00517 	ldw	r19,20(sp)
    fe2c:	dc800417 	ldw	r18,16(sp)
    fe30:	dc400317 	ldw	r17,12(sp)
    fe34:	dc000217 	ldw	r16,8(sp)
    fe38:	dec00c04 	addi	sp,sp,48
    fe3c:	f800283a 	ret
    fe40:	98800117 	ldw	r2,4(r19)
    fe44:	80c00017 	ldw	r3,0(r16)
    fe48:	10bfffc4 	addi	r2,r2,-1
    fe4c:	17001526 	beq	r2,fp,fea4 <__call_exitprocs+0x164>
    fe50:	80000015 	stw	zero,0(r16)
    fe54:	183fde26 	beq	r3,zero,fdd0 <__call_exitprocs+0x90>
    fe58:	00800044 	movi	r2,1
    fe5c:	1708983a 	sll	r4,r2,fp
    fe60:	98806217 	ldw	r2,392(r19)
    fe64:	9dc00117 	ldw	r23,4(r19)
    fe68:	2084703a 	and	r2,r4,r2
    fe6c:	1000061e 	bne	r2,zero,fe88 <__call_exitprocs+0x148>
    fe70:	183ee83a 	callr	r3
    fe74:	98800117 	ldw	r2,4(r19)
    fe78:	15ffc51e 	bne	r2,r23,fd90 <__call_exitprocs+0x50>
    fe7c:	a8800017 	ldw	r2,0(r21)
    fe80:	14ffd326 	beq	r2,r19,fdd0 <__call_exitprocs+0x90>
    fe84:	003fc206 	br	fd90 <__call_exitprocs+0x50>
    fe88:	98806317 	ldw	r2,396(r19)
    fe8c:	2084703a 	and	r2,r4,r2
    fe90:	1000061e 	bne	r2,zero,feac <__call_exitprocs+0x16c>
    fe94:	89400017 	ldw	r5,0(r17)
    fe98:	9009883a 	mov	r4,r18
    fe9c:	183ee83a 	callr	r3
    fea0:	003ff406 	br	fe74 <__call_exitprocs+0x134>
    fea4:	9f000115 	stw	fp,4(r19)
    fea8:	003fea06 	br	fe54 <__call_exitprocs+0x114>
    feac:	89000017 	ldw	r4,0(r17)
    feb0:	183ee83a 	callr	r3
    feb4:	003fef06 	br	fe74 <__call_exitprocs+0x134>
    feb8:	98800017 	ldw	r2,0(r19)
    febc:	982b883a 	mov	r21,r19
    fec0:	1027883a 	mov	r19,r2
    fec4:	983fb61e 	bne	r19,zero,fda0 <__call_exitprocs+0x60>
    fec8:	003fd106 	br	fe10 <__call_exitprocs+0xd0>
    fecc:	0005883a 	mov	r2,zero
    fed0:	003ffa06 	br	febc <__call_exitprocs+0x17c>

0000fed4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    fed4:	defffd04 	addi	sp,sp,-12
    fed8:	df000215 	stw	fp,8(sp)
    fedc:	df000204 	addi	fp,sp,8
    fee0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fee4:	0001883a 	nop
    fee8:	e0bfff17 	ldw	r2,-4(fp)
    feec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    fef0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fef4:	10000226 	beq	r2,zero,ff00 <_exit+0x2c>
    ALT_SIM_FAIL();
    fef8:	002af070 	cmpltui	zero,zero,43969
    fefc:	00000106 	br	ff04 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    ff00:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ff04:	003fff06 	br	ff04 <_exit+0x30>
