
camera_app.elf:     file format elf32-littlenios2
camera_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001013c memsz 0x0001013c flags r-x
    LOAD off    0x0001115c vaddr 0x0001015c paddr 0x00011c48 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013734 vaddr 0x00013734 paddr 0x00013734 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fbbc  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003e4  0000fd78  0000fd78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0001015c  00011c48  0001115c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00013734  00013734  00013734  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00013890  00013890  00012c48  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012c48  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d48  00000000  00000000  00012c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000253ad  00000000  00000000  000139b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000094eb  00000000  00000000  00038d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b5cd  00000000  00000000  00042250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000236c  00000000  00000000  0004d820  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003296  00000000  00000000  0004fb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016f41  00000000  00000000  00052e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00069d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  00069db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e439  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006e43c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006e441  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006e442  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006e443  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006e44c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006e455  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0006e45e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  0006e464  2**0
                  CONTENTS, READONLY
 26 .jdi          000039ab  00000000  00000000  0006e484  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003de28  00000000  00000000  00071e2f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
0000fd78 l    d  .rodata	00000000 .rodata
0001015c l    d  .rwdata	00000000 .rwdata
00013734 l    d  .bss	00000000 .bss
00013890 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /data/workspace/ES/lab03/software/camera_app_bsp//obj/HAL/src/crt0.o
000001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 i2c.c
0000087c l     F .text	00000030 i2c_usleep
000008ac l     F .text	00000040 i2c_wait_end_of_transfer
000008ec l     F .text	0000006c i2c_set_data_control
00000958 l     F .text	00000064 i2c_get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001074 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
0001015c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000feae l     O .rodata	00000010 zeroes.4181
0000febe l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004194 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005d14 l     F .text	00000008 __fp_lock
00005d1c l     F .text	00000008 __fp_unlock
00005d30 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000109a8 l     O .rwdata	00000020 lc_ctype_charset
00010988 l     O .rwdata	00000020 lc_message_charset
000109c8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0000feec l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008870 l     F .text	000000fc __sprint_r.part.0
00010020 l     O .rodata	00000010 blanks.4125
00010010 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d558 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d678 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d6a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d7a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d898 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d97c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000db58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011c38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000dde4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000df2c l     F .text	00000038 alt_dev_reg
00010ba8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e204 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000e408 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ecdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f188 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f2c0 l     F .text	00000050 alt_get_errno
0000f310 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00007f04 g     F .text	00000074 _mprec_log10
00007ff0 g     F .text	0000008c __any_on
0000a0fc g     F .text	00000054 _isatty_r
0000fef8 g     O .rodata	00000028 __mprec_tinytens
0000daa0 g     F .text	00000078 alt_main
00001d1c g     F .text	000000b8 _puts_r
00013790 g     O .bss	00000100 alt_irq
0000a150 g     F .text	0000005c _lseek_r
0000038c g     F .text	00000140 dump_pcm_data
00011c48 g       *ABS*	00000000 __flash_rwdata_start
0000c0c0 g     F .text	00000084 .hidden __eqdf2
00013890 g       *ABS*	00000000 __alt_heap_start
00001b78 g     F .text	0000003c printf
0000a208 g     F .text	0000009c _wcrtomb_r
00008768 g     F .text	0000005c __sseek
00006064 g     F .text	00000010 __sinit
00003ef4 g     F .text	00000154 __swbuf_r
00006adc g     F .text	0000007c _setlocale_r
00005ed0 g     F .text	00000064 __sfmoreglue
0000db38 g     F .text	00000020 __malloc_unlock
00006f94 g     F .text	0000015c memmove
0000604c g     F .text	00000018 _cleanup
000070f0 g     F .text	000000a8 _Balloc
0000c144 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00000ac4 g     F .text	0000012c i2c_write
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000a0a4 g     F .text	00000058 _fstat_r
00013740 g     O .bss	00000004 errno
000086e4 g     F .text	00000008 __seofread
00013754 g     O .bss	00000004 alt_argv
00019c08 g       *ABS*	00000000 _gp
0000ddb4 g     F .text	00000030 usleep
000002ec g     F .text	00000048 dump_word
00010a28 g     O .rwdata	00000180 alt_fd_list
0000f6f0 g     F .text	00000090 alt_find_dev
00006e5c g     F .text	00000138 memcpy
00005d24 g     F .text	0000000c _cleanup_r
0000d380 g     F .text	000000d0 .hidden __floatsidf
00000d38 g     F .text	00000194 i2c_write_array
0000f248 g     F .text	00000078 alt_io_redirect
0000c224 g     F .text	000000e0 .hidden __ltdf2
0000fd78 g       *ABS*	00000000 __DTOR_END__
00001dd4 g     F .text	00000014 puts
0000861c g     F .text	00000074 __fpclassifyd
00007e60 g     F .text	000000a4 __ratio
00009ce0 g     F .text	00000024 __vfiprintf_internal
0000e604 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00001b4c g     F .text	0000002c _printf_r
00001190 g     F .text	00000008 .hidden __udivsi3
0000d7f4 g     F .text	000000a4 isatty
0000ff48 g     O .rodata	000000c8 __mprec_tens
00000334 g     F .text	00000058 dump_pcm_header
00006b58 g     F .text	0000000c __locale_charset
0000f948 g     F .text	0000008c alt_icache_flush
0001373c g     O .bss	00000004 __malloc_top_pad
00011c18 g     O .rwdata	00000004 __mb_cur_max
00006b88 g     F .text	0000000c _localeconv_r
000074f0 g     F .text	0000003c __i2b
000064c8 g     F .text	000004a4 __sfvwrite_r
00001de8 g     F .text	00000054 _sbrk_r
0000a1ac g     F .text	0000005c _read_r
00011c30 g     O .rwdata	00000004 alt_max_fd
00009db4 g     F .text	00000100 _fclose_r
00005ce4 g     F .text	00000030 fflush
00013738 g     O .bss	00000004 __malloc_max_sbrked_mem
0000af58 g     F .text	0000089c .hidden __adddf3
00007c08 g     F .text	0000011c __b2d
0000a9c8 g     F .text	00000590 .hidden __umoddi3
0000d9cc g     F .text	000000d4 lseek
00011c08 g     O .rwdata	00000004 _global_impure_ptr
0000807c g     F .text	000005a0 _realloc_r
00013890 g       *ABS*	00000000 __bss_end
0000f098 g     F .text	000000f0 alt_iic_isr_register
0000f5cc g     F .text	00000104 alt_tick
0000a408 g     F .text	000005c0 .hidden __udivdi3
00009ec8 g     F .text	00000184 _fputwc_r
0000ff20 g     O .rodata	00000028 __mprec_bigtens
000072d4 g     F .text	00000104 __s2b
0000d450 g     F .text	000000a4 .hidden __floatunsidf
000079b0 g     F .text	00000060 __mcmp
00006084 g     F .text	00000018 __fp_lock_all
0000f04c g     F .text	0000004c alt_ic_irq_enabled
0000f534 g     F .text	00000098 alt_alarm_stop
0001375c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
00010a00 g     O .rwdata	00000028 alt_dev_null
0000ecc0 g     F .text	0000001c alt_dcache_flush_all
000073d8 g     F .text	00000068 __hi0bits
0000d2f8 g     F .text	00000088 .hidden __fixdfsi
000011a0 g     F .text	0000001c calloc
00011c48 g       *ABS*	00000000 __ram_rwdata_end
00011c28 g     O .rwdata	00000008 alt_dev_list
0000de34 g     F .text	000000f8 write
00001bb4 g     F .text	000000a0 _putc_r
0001015c g       *ABS*	00000000 __ram_rodata_end
0000d6f4 g     F .text	000000b0 fstat
00000288 g     F .text	00000064 sleep_ms
000009bc g     F .text	0000002c i2c_inst
0000c224 g     F .text	000000e0 .hidden __ledf2
00007728 g     F .text	00000140 __pow5mult
00008984 g     F .text	0000135c ___vfiprintf_internal_r
0001374c g     O .bss	00000004 __nlocale_changed
00001198 g     F .text	00000008 .hidden __umodsi3
00013890 g       *ABS*	00000000 end
0000e140 g     F .text	000000c4 altera_avalon_jtag_uart_init
0000fd78 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000d4f4 g     F .text	00000064 .hidden __clzsi2
0000e810 g     F .text	00000218 altera_avalon_jtag_uart_write
00006074 g     F .text	00000004 __sfp_lock_acquire
00006d74 g     F .text	000000e8 memchr
00001ed4 g     F .text	00001ffc ___vfprintf_internal_r
000061d8 g     F .text	000002f0 _free_r
00006b64 g     F .text	00000010 __locale_mb_cur_max
0000fbb0 g     F .text	00000194 __call_exitprocs
00013748 g     O .bss	00000004 __mlocale_changed
00011c10 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000003c _start
00013760 g     O .bss	00000004 _alt_tick_rate
00007868 g     F .text	00000148 __lshift
00013764 g     O .bss	00000004 _alt_nticks
0000dba8 g     F .text	000000fc read
0000df98 g     F .text	00000044 alt_sys_init
00000a48 g     F .text	0000007c i2c_configure
0000fa9c g     F .text	00000114 __register_exitproc
0000752c g     F .text	000001fc __multiply
0000e4b0 g     F .text	00000068 altera_avalon_jtag_uart_close
0001015c g       *ABS*	00000000 __ram_rwdata_start
0000fd78 g       *ABS*	00000000 __ram_rodata_start
00013768 g     O .bss	00000028 __malloc_current_mallinfo
00007d24 g     F .text	0000013c __d2b
0000dfdc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f894 g     F .text	000000b4 alt_get_fd
0000eb68 g     F .text	00000158 alt_busy_sleep
00009d60 g     F .text	00000054 _close_r
000001f8 g     F .text	00000058 cam_get_preset
0000fa20 g     F .text	0000007c memcmp
0000e09c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013890 g       *ABS*	00000000 __alt_stack_base
0000e0ec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004064 g     F .text	00000130 __swsetup_r
0000b7f4 g     F .text	000008cc .hidden __divdf3
00005f34 g     F .text	00000118 __sfp
00007f78 g     F .text	00000078 __copybits
00010580 g     O .rwdata	00000408 __malloc_av_
00006080 g     F .text	00000004 __sinit_lock_release
0000c304 g     F .text	00000724 .hidden __muldf3
00008690 g     F .text	00000054 __sread
0000f780 g     F .text	00000114 alt_find_file
0000ed2c g     F .text	000000a4 alt_dev_llist_insert
000004cc g     F .text	00000084 trdb_d5m_write
0000db18 g     F .text	00000020 __malloc_lock
0000dd04 g     F .text	000000b0 sbrk
00005abc g     F .text	00000228 _fflush_r
000011bc g     F .text	000000c4 _calloc_r
00013734 g       *ABS*	00000000 __bss_start
00001a28 g     F .text	00000124 memset
000005ec g     F .text	00000290 main
00013758 g     O .bss	00000004 alt_envp
00013734 g     O .bss	00000004 __malloc_max_total_mem
0000e03c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000bf0 g     F .text	00000148 i2c_read
00004048 g     F .text	0000001c __swbuf
000087c4 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00009eb4 g     F .text	00000014 fclose
00004394 g     F .text	00001728 _dtoa_r
00001280 g     F .text	000007a8 _malloc_r
0000a37c g     F .text	00000030 __ascii_wctomb
00011c34 g     O .rwdata	00000004 alt_errno
0000696c g     F .text	000000b8 _fwalk
00001c54 g     F .text	000000c8 putc
000010e0 g     F .text	00000054 .hidden __divsi3
000060b4 g     F .text	00000124 _malloc_trim_r
0000fd78 g       *ABS*	00000000 __CTOR_END__
000087cc g     F .text	000000a4 strcmp
0000fd78 g       *ABS*	00000000 __flash_rodata_start
0000fd78 g       *ABS*	00000000 __DTOR_LIST__
0000c0c0 g     F .text	00000084 .hidden __nedf2
0000df64 g     F .text	00000034 alt_irq_init
0000dca4 g     F .text	00000060 alt_release_fd
00010030 g     O .rodata	00000100 .hidden __clz_tab
00013744 g     O .bss	00000004 _PathLocale
0000f9d4 g     F .text	00000014 atexit
00009d04 g     F .text	0000005c _write_r
00006b94 g     F .text	0000001c setlocale
00000250 g     F .text	00000038 printPreset
00011c0c g     O .rwdata	00000004 _impure_ptr
00013750 g     O .bss	00000004 alt_argc
0000ee2c g     F .text	0000005c _do_dtors
00006b80 g     F .text	00000008 __locale_cjk_lang
000009e8 g     F .text	00000060 i2c_init
00000020 g       .exceptions	00000000 alt_irq_entry
00007ba8 g     F .text	00000060 __ulp
0000609c g     F .text	00000018 __fp_unlock_all
00011c20 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006bb0 g     F .text	0000000c localeconv
0000fd78 g     O .rodata	0000006c cam_presets
0000eeb8 g     F .text	00000050 alt_ic_isr_register
00011c48 g       *ABS*	00000000 _edata
00013890 g       *ABS*	00000000 _end
000001bc g       *ABS*	00000000 __ram_exceptions_end
0000e518 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00000550 g     F .text	0000009c trdb_d5m_read
0000efa8 g     F .text	000000a4 alt_ic_irq_disable
000086ec g     F .text	0000007c __swrite
00011c14 g     O .rwdata	00000004 __malloc_trim_threshold
0000f6d0 g     F .text	00000020 altera_nios2_qsys_irq_init
00006b74 g     F .text	0000000c __locale_msgcharset
0000f9e8 g     F .text	00000038 exit
00006a24 g     F .text	000000b8 _fwalk_reent
00007a10 g     F .text	00000198 __mdiff
00001134 g     F .text	0000005c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006078 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000fd44 g     F .text	00000034 _exit
0000ea28 g     F .text	00000140 alt_alarm_start
00006bbc g     F .text	000001b8 __smakebuf_r
00000ecc g     F .text	000001a8 i2c_read_array
00001e3c g     F .text	00000098 strlen
0000f3dc g     F .text	00000158 open
0000c144 g     F .text	000000e0 .hidden __gedf2
00011c1c g     O .rwdata	00000004 __wctomb
0000896c g     F .text	00000018 __sprint_r
0000ee88 g     F .text	00000030 alt_icache_flush_all
00011c3c g     O .rwdata	00000004 alt_priority_mask
0000ef08 g     F .text	000000a0 alt_ic_irq_enable
00003ed0 g     F .text	00000024 __vfprintf_internal
0000a3ac g     F .text	0000005c _wctomb_r
0000ca28 g     F .text	000008d0 .hidden __subdf3
00007440 g     F .text	000000b0 __lo0bits
00011c40 g     O .rwdata	00000008 alt_alarm_list
0000edd0 g     F .text	0000005c _do_ctors
0000a2a4 g     F .text	000000d8 wcrtomb
0000d5a8 g     F .text	000000d0 close
0000d8fc g     F .text	00000080 alt_load
0000a04c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
0000607c g     F .text	00000004 __sinit_lock_acquire
000071c0 g     F .text	00000114 __multadd
00007198 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	108de404 	addi	r2,r2,14224
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	108de404 	addi	r2,r2,14224
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d6a70214 	ori	gp,gp,39944
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d0:	108dcd14 	ori	r2,r2,14132

    movhi r3, %hi(__bss_end)
     1d4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d8:	18ce2414 	ori	r3,r3,14480

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1ec:	000d8fc0 	call	d8fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f0:	000daa00 	call	daa0 <alt_main>

000001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f4:	003fff06 	br	1f4 <alt_after_alt_main>

000001f8 <cam_get_preset>:
    { 1920, 1080, 34.1f },   // 1920p
    { 1280, 720, 56.4f }     // 720p
  };

  inline struct CamPreset cam_get_preset(CamPresetID id)
  {
     1f8:	defffd04 	addi	sp,sp,-12
     1fc:	df000215 	stw	fp,8(sp)
     200:	df000204 	addi	fp,sp,8
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)
    return cam_presets[id];
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	00c00074 	movhi	r3,1
     214:	18ff5e04 	addi	r3,r3,-648
     218:	e13fff17 	ldw	r4,-4(fp)
     21c:	21000324 	muli	r4,r4,12
     220:	1907883a 	add	r3,r3,r4
     224:	19000017 	ldw	r4,0(r3)
     228:	11000015 	stw	r4,0(r2)
     22c:	19000117 	ldw	r4,4(r3)
     230:	11000115 	stw	r4,4(r2)
     234:	18c00217 	ldw	r3,8(r3)
     238:	10c00215 	stw	r3,8(r2)
  }
     23c:	e0bffe17 	ldw	r2,-8(fp)
     240:	e037883a 	mov	sp,fp
     244:	df000017 	ldw	fp,0(sp)
     248:	dec00104 	addi	sp,sp,4
     24c:	f800283a 	ret

00000250 <printPreset>:
#include <HAL/inc/sys/alt_cache.h>

#include "i2c/i2c.h"
#include "../../CameraController/CameraController.h"

void printPreset(const char * name, CamPresetID id) {
     250:	defff904 	addi	sp,sp,-28
     254:	dfc00615 	stw	ra,24(sp)
     258:	df000515 	stw	fp,20(sp)
     25c:	df000504 	addi	fp,sp,20
     260:	e13ffe15 	stw	r4,-8(fp)
     264:	e17fff15 	stw	r5,-4(fp)
	struct CamPreset myPreset = cam_get_preset(id);
     268:	e13ffb04 	addi	r4,fp,-20
     26c:	e17fff17 	ldw	r5,-4(fp)
     270:	00001f80 	call	1f8 <cam_get_preset>
	// printf("%s\tW: %d, H: %d, fps: %.2f\n", name, myPreset.width, myPreset.height, myPreset.fps);
}
     274:	e037883a 	mov	sp,fp
     278:	dfc00117 	ldw	ra,4(sp)
     27c:	df000017 	ldw	fp,0(sp)
     280:	dec00204 	addi	sp,sp,8
     284:	f800283a 	ret

00000288 <sleep_ms>:

void sleep_ms(int milisec)
{
     288:	defffc04 	addi	sp,sp,-16
     28c:	df000315 	stw	fp,12(sp)
     290:	df000304 	addi	fp,sp,12
     294:	e13fff15 	stw	r4,-4(fp)
    int i;
    int k;
    for (i = 0; i < milisec; i++) {
     298:	e03ffd15 	stw	zero,-12(fp)
     29c:	00000c06 	br	2d0 <sleep_ms+0x48>
        for (k = 0; k < 125; k++) {
     2a0:	e03ffe15 	stw	zero,-8(fp)
     2a4:	00000406 	br	2b8 <sleep_ms+0x30>
             __asm("nop");
     2a8:	0001883a 	nop
void sleep_ms(int milisec)
{
    int i;
    int k;
    for (i = 0; i < milisec; i++) {
        for (k = 0; k < 125; k++) {
     2ac:	e0bffe17 	ldw	r2,-8(fp)
     2b0:	10800044 	addi	r2,r2,1
     2b4:	e0bffe15 	stw	r2,-8(fp)
     2b8:	e0bffe17 	ldw	r2,-8(fp)
     2bc:	10801f50 	cmplti	r2,r2,125
     2c0:	103ff91e 	bne	r2,zero,2a8 <sleep_ms+0x20>

void sleep_ms(int milisec)
{
    int i;
    int k;
    for (i = 0; i < milisec; i++) {
     2c4:	e0bffd17 	ldw	r2,-12(fp)
     2c8:	10800044 	addi	r2,r2,1
     2cc:	e0bffd15 	stw	r2,-12(fp)
     2d0:	e0fffd17 	ldw	r3,-12(fp)
     2d4:	e0bfff17 	ldw	r2,-4(fp)
     2d8:	18bff116 	blt	r3,r2,2a0 <sleep_ms+0x18>
        for (k = 0; k < 125; k++) {
             __asm("nop");
        }
    }
}
     2dc:	e037883a 	mov	sp,fp
     2e0:	df000017 	ldw	fp,0(sp)
     2e4:	dec00104 	addi	sp,sp,4
     2e8:	f800283a 	ret

000002ec <dump_word>:

void dump_word(const void *addr)
{
     2ec:	defffd04 	addi	sp,sp,-12
     2f0:	dfc00215 	stw	ra,8(sp)
     2f4:	df000115 	stw	fp,4(sp)
     2f8:	df000104 	addi	fp,sp,4
     2fc:	e13fff15 	stw	r4,-4(fp)
	printf("[%08x] %08x\n", (unsigned int)addr, IORD_32DIRECT(0, (unsigned int)addr));
     300:	e0ffff17 	ldw	r3,-4(fp)
     304:	e0bfff17 	ldw	r2,-4(fp)
     308:	10800037 	ldwio	r2,0(r2)
     30c:	01000074 	movhi	r4,1
     310:	213f7904 	addi	r4,r4,-540
     314:	180b883a 	mov	r5,r3
     318:	100d883a 	mov	r6,r2
     31c:	0001b780 	call	1b78 <printf>
}
     320:	e037883a 	mov	sp,fp
     324:	dfc00117 	ldw	ra,4(sp)
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00204 	addi	sp,sp,8
     330:	f800283a 	ret

00000334 <dump_pcm_header>:

void dump_pcm_header(unsigned int width, unsigned int height) {
     334:	defffc04 	addi	sp,sp,-16
     338:	dfc00315 	stw	ra,12(sp)
     33c:	df000215 	stw	fp,8(sp)
     340:	df000204 	addi	fp,sp,8
     344:	e13ffe15 	stw	r4,-8(fp)
     348:	e17fff15 	stw	r5,-4(fp)
	printf("P3\n");
     34c:	01000074 	movhi	r4,1
     350:	213f7d04 	addi	r4,r4,-524
     354:	0001dd40 	call	1dd4 <puts>
	printf("%d %d\n", width, height);
     358:	01000074 	movhi	r4,1
     35c:	213f7e04 	addi	r4,r4,-520
     360:	e17ffe17 	ldw	r5,-8(fp)
     364:	e1bfff17 	ldw	r6,-4(fp)
     368:	0001b780 	call	1b78 <printf>
	printf("255\n");
     36c:	01000074 	movhi	r4,1
     370:	213f8004 	addi	r4,r4,-512
     374:	0001dd40 	call	1dd4 <puts>
}
     378:	e037883a 	mov	sp,fp
     37c:	dfc00117 	ldw	ra,4(sp)
     380:	df000017 	ldw	fp,0(sp)
     384:	dec00204 	addi	sp,sp,8
     388:	f800283a 	ret

0000038c <dump_pcm_data>:

void dump_pcm_data(const void *buffer, unsigned int width, unsigned int height)
{
     38c:	defff604 	addi	sp,sp,-40
     390:	dfc00915 	stw	ra,36(sp)
     394:	df000815 	stw	fp,32(sp)
     398:	dc400715 	stw	r17,28(sp)
     39c:	dc000615 	stw	r16,24(sp)
     3a0:	df000804 	addi	fp,sp,32
     3a4:	e13ffb15 	stw	r4,-20(fp)
     3a8:	e17ffc15 	stw	r5,-16(fp)
     3ac:	e1bffd15 	stw	r6,-12(fp)
	unsigned int i = 0;
     3b0:	e03ff815 	stw	zero,-32(fp)

	for (i = 0 ; i < (width * height) ; i ++) {
     3b4:	e03ff815 	stw	zero,-32(fp)
     3b8:	00003806 	br	49c <dump_pcm_data+0x110>
		unsigned short px = ((unsigned short *)buffer)[i];
     3bc:	e0bff817 	ldw	r2,-32(fp)
     3c0:	1085883a 	add	r2,r2,r2
     3c4:	1007883a 	mov	r3,r2
     3c8:	e0bffb17 	ldw	r2,-20(fp)
     3cc:	10c5883a 	add	r2,r2,r3
     3d0:	1080000b 	ldhu	r2,0(r2)
     3d4:	e0bff90d 	sth	r2,-28(fp)


		unsigned char b = (px & 0x001f);
     3d8:	e0bff90b 	ldhu	r2,-28(fp)
     3dc:	108007cc 	andi	r2,r2,31
     3e0:	e0bff985 	stb	r2,-26(fp)
		unsigned char v = (px & 0x07e0) >> 5;
     3e4:	e0bff90b 	ldhu	r2,-28(fp)
     3e8:	1081f80c 	andi	r2,r2,2016
     3ec:	1005d17a 	srai	r2,r2,5
     3f0:	e0bff9c5 	stb	r2,-25(fp)
		unsigned char r = (px & 0xf800) >> 11; // bit 15 -> bit 8
     3f4:	e0bff90b 	ldhu	r2,-28(fp)
     3f8:	1004d2fa 	srli	r2,r2,11
     3fc:	e0bffa05 	stb	r2,-24(fp)

//		unsigned char b = (px & 0x001f) <<  3;
//		unsigned char v = (px & 0x07e0) >>  4;
//		unsigned char r = (px & 0xf800) >> 11;

		printf("%03d %03d %03d  ", ((int)r * 255) / 0x1f, ((int)v * 255) / 0x3f, ((int)b * 255) / 0x1f);
     400:	e0bffa03 	ldbu	r2,-24(fp)
     404:	10803fe4 	muli	r2,r2,255
     408:	1009883a 	mov	r4,r2
     40c:	014007c4 	movi	r5,31
     410:	00010e00 	call	10e0 <__divsi3>
     414:	1023883a 	mov	r17,r2
     418:	e0bff9c3 	ldbu	r2,-25(fp)
     41c:	10803fe4 	muli	r2,r2,255
     420:	1009883a 	mov	r4,r2
     424:	01400fc4 	movi	r5,63
     428:	00010e00 	call	10e0 <__divsi3>
     42c:	1021883a 	mov	r16,r2
     430:	e0bff983 	ldbu	r2,-26(fp)
     434:	10803fe4 	muli	r2,r2,255
     438:	1009883a 	mov	r4,r2
     43c:	014007c4 	movi	r5,31
     440:	00010e00 	call	10e0 <__divsi3>
     444:	01000074 	movhi	r4,1
     448:	213f8104 	addi	r4,r4,-508
     44c:	880b883a 	mov	r5,r17
     450:	800d883a 	mov	r6,r16
     454:	100f883a 	mov	r7,r2
     458:	0001b780 	call	1b78 <printf>
		// printf("%04x ", px);
		if ((i+1) % width == 0) {
     45c:	e0bff817 	ldw	r2,-32(fp)
     460:	10800044 	addi	r2,r2,1
     464:	1009883a 	mov	r4,r2
     468:	e17ffc17 	ldw	r5,-16(fp)
     46c:	00011980 	call	1198 <__umodsi3>
     470:	1000071e 	bne	r2,zero,490 <dump_pcm_data+0x104>
			putchar('\n');
     474:	00800074 	movhi	r2,1
     478:	10870304 	addi	r2,r2,7180
     47c:	10800017 	ldw	r2,0(r2)
     480:	10800217 	ldw	r2,8(r2)
     484:	01000284 	movi	r4,10
     488:	100b883a 	mov	r5,r2
     48c:	0001c540 	call	1c54 <putc>

void dump_pcm_data(const void *buffer, unsigned int width, unsigned int height)
{
	unsigned int i = 0;

	for (i = 0 ; i < (width * height) ; i ++) {
     490:	e0bff817 	ldw	r2,-32(fp)
     494:	10800044 	addi	r2,r2,1
     498:	e0bff815 	stw	r2,-32(fp)
     49c:	e0fffc17 	ldw	r3,-16(fp)
     4a0:	e0bffd17 	ldw	r2,-12(fp)
     4a4:	1885383a 	mul	r2,r3,r2
     4a8:	e0fff817 	ldw	r3,-32(fp)
     4ac:	18bfc336 	bltu	r3,r2,3bc <dump_pcm_data+0x30>
		if ((i+1) % width == 0) {
			putchar('\n');
		}
	}

}
     4b0:	e6fffe04 	addi	sp,fp,-8
     4b4:	dfc00317 	ldw	ra,12(sp)
     4b8:	df000217 	ldw	fp,8(sp)
     4bc:	dc400117 	ldw	r17,4(sp)
     4c0:	dc000017 	ldw	r16,0(sp)
     4c4:	dec00404 	addi	sp,sp,16
     4c8:	f800283a 	ret

000004cc <trdb_d5m_write>:

#define I2C_FREQ              (50000000) /* 50 MHz -- clock frequency driving the i2c core: 50 MHz */
#define TRDB_D5M_I2C_ADDRESS  (0xba)

bool trdb_d5m_write(i2c_dev *i2c, uint8_t register_offset, uint16_t data) {
     4cc:	defff804 	addi	sp,sp,-32
     4d0:	dfc00715 	stw	ra,28(sp)
     4d4:	df000615 	stw	fp,24(sp)
     4d8:	df000604 	addi	fp,sp,24
     4dc:	e13ffd15 	stw	r4,-12(fp)
     4e0:	2807883a 	mov	r3,r5
     4e4:	3005883a 	mov	r2,r6
     4e8:	e0fffe05 	stb	r3,-8(fp)
     4ec:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
     4f0:	e0bfff0b 	ldhu	r2,-4(fp)
     4f4:	1004d23a 	srli	r2,r2,8
     4f8:	e0bffc05 	stb	r2,-16(fp)
     4fc:	e0bfff0b 	ldhu	r2,-4(fp)
     500:	e0bffc45 	stb	r2,-15(fp)

    int success = i2c_write_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
     504:	e1bffe03 	ldbu	r6,-8(fp)
     508:	e0fffc04 	addi	r3,fp,-16
     50c:	00800084 	movi	r2,2
     510:	d8800015 	stw	r2,0(sp)
     514:	e13ffd17 	ldw	r4,-12(fp)
     518:	01402e84 	movi	r5,186
     51c:	180f883a 	mov	r7,r3
     520:	0000d380 	call	d38 <i2c_write_array>
     524:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
     528:	e0bffb17 	ldw	r2,-20(fp)
     52c:	10000226 	beq	r2,zero,538 <trdb_d5m_write+0x6c>
        return false;
     530:	0005883a 	mov	r2,zero
     534:	00000106 	br	53c <trdb_d5m_write+0x70>
    } else {
        return true;
     538:	00800044 	movi	r2,1
    }
}
     53c:	e037883a 	mov	sp,fp
     540:	dfc00117 	ldw	ra,4(sp)
     544:	df000017 	ldw	fp,0(sp)
     548:	dec00204 	addi	sp,sp,8
     54c:	f800283a 	ret

00000550 <trdb_d5m_read>:

bool trdb_d5m_read(i2c_dev *i2c, uint8_t register_offset, uint16_t *data) {
     550:	defff804 	addi	sp,sp,-32
     554:	dfc00715 	stw	ra,28(sp)
     558:	df000615 	stw	fp,24(sp)
     55c:	df000604 	addi	fp,sp,24
     560:	e13ffd15 	stw	r4,-12(fp)
     564:	2805883a 	mov	r2,r5
     568:	e1bfff15 	stw	r6,-4(fp)
     56c:	e0bffe05 	stb	r2,-8(fp)
    uint8_t byte_data[2] = {0, 0};
     570:	e03ffc05 	stb	zero,-16(fp)
     574:	e03ffc45 	stb	zero,-15(fp)

    int success = i2c_read_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
     578:	e1bffe03 	ldbu	r6,-8(fp)
     57c:	e0fffc04 	addi	r3,fp,-16
     580:	00800084 	movi	r2,2
     584:	d8800015 	stw	r2,0(sp)
     588:	e13ffd17 	ldw	r4,-12(fp)
     58c:	01402e84 	movi	r5,186
     590:	180f883a 	mov	r7,r3
     594:	0000ecc0 	call	ecc <i2c_read_array>
     598:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
     59c:	e0bffb17 	ldw	r2,-20(fp)
     5a0:	10000226 	beq	r2,zero,5ac <trdb_d5m_read+0x5c>
        return false;
     5a4:	0005883a 	mov	r2,zero
     5a8:	00000b06 	br	5d8 <trdb_d5m_read+0x88>
    } else {
        *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
     5ac:	e0bffc03 	ldbu	r2,-16(fp)
     5b0:	10803fcc 	andi	r2,r2,255
     5b4:	1004923a 	slli	r2,r2,8
     5b8:	1007883a 	mov	r3,r2
     5bc:	e0bffc43 	ldbu	r2,-15(fp)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	1885883a 	add	r2,r3,r2
     5c8:	1007883a 	mov	r3,r2
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10c0000d 	sth	r3,0(r2)
        return true;
     5d4:	00800044 	movi	r2,1
    }
}
     5d8:	e037883a 	mov	sp,fp
     5dc:	dfc00117 	ldw	ra,4(sp)
     5e0:	df000017 	ldw	fp,0(sp)
     5e4:	dec00204 	addi	sp,sp,8
     5e8:	f800283a 	ret

000005ec <main>:


int main()
{
     5ec:	defff804 	addi	sp,sp,-32
     5f0:	dfc00715 	stw	ra,28(sp)
     5f4:	df000615 	stw	fp,24(sp)
     5f8:	df000604 	addi	fp,sp,24
    i2c_dev i2c = i2c_inst((void *) I2C_0_BASE);
     5fc:	01008034 	movhi	r4,512
     600:	21001404 	addi	r4,r4,80
     604:	00009bc0 	call	9bc <i2c_inst>
     608:	e0bfff15 	stw	r2,-4(fp)
    i2c_init(&i2c, I2C_FREQ);
     60c:	e0bfff04 	addi	r2,fp,-4
     610:	1009883a 	mov	r4,r2
     614:	0140bef4 	movhi	r5,763
     618:	297c2004 	addi	r5,r5,-3968
     61c:	00009e80 	call	9e8 <i2c_init>

    int width = 640, height = 480; // VGA
     620:	0080a004 	movi	r2,640
     624:	e0bffa15 	stw	r2,-24(fp)
     628:	00807804 	movi	r2,480
     62c:	e0bffb15 	stw	r2,-20(fp)
//    int width = 160, height = 120;

    dump_pcm_header(width, height);
     630:	e0fffa17 	ldw	r3,-24(fp)
     634:	e0bffb17 	ldw	r2,-20(fp)
     638:	1809883a 	mov	r4,r3
     63c:	100b883a 	mov	r5,r2
     640:	00003340 	call	334 <dump_pcm_header>

    // Sample on rising edge
    trdb_d5m_write(&i2c, 0x00a, 0x8000);
     644:	e0bfff04 	addi	r2,fp,-4
     648:	1009883a 	mov	r4,r2
     64c:	01400284 	movi	r5,10
     650:	01a00014 	movui	r6,32768
     654:	00004cc0 	call	4cc <trdb_d5m_write>
    // Test pattern
    trdb_d5m_write(&i2c, 0x0a0, (8 << 3) | (0x0));
     658:	e0bfff04 	addi	r2,fp,-4
     65c:	1009883a 	mov	r4,r2
     660:	01402804 	movi	r5,160
     664:	01801004 	movi	r6,64
     668:	00004cc0 	call	4cc <trdb_d5m_write>
    trdb_d5m_write(&i2c, 0x00c, 8000); // Shutter delay (increases exposure)
     66c:	e0bfff04 	addi	r2,fp,-4
     670:	1009883a 	mov	r4,r2
     674:	01400304 	movi	r5,12
     678:	0187d004 	movi	r6,8000
     67c:	00004cc0 	call	4cc <trdb_d5m_write>

    // USE BINNING:

    // Frame height (8 times height to account for Bayes pattern and row binning)
	trdb_d5m_write(&i2c, 0x003, (height << 2) - 1);
     680:	e0bffb17 	ldw	r2,-20(fp)
     684:	1085883a 	add	r2,r2,r2
     688:	1085883a 	add	r2,r2,r2
     68c:	10bfffc4 	addi	r2,r2,-1
     690:	10bfffcc 	andi	r2,r2,65535
     694:	e0ffff04 	addi	r3,fp,-4
     698:	1809883a 	mov	r4,r3
     69c:	014000c4 	movi	r5,3
     6a0:	100d883a 	mov	r6,r2
     6a4:	00004cc0 	call	4cc <trdb_d5m_write>
	// Frame width
	trdb_d5m_write(&i2c, 0x004, (width << 2) - 1);
     6a8:	e0bffa17 	ldw	r2,-24(fp)
     6ac:	1085883a 	add	r2,r2,r2
     6b0:	1085883a 	add	r2,r2,r2
     6b4:	10bfffc4 	addi	r2,r2,-1
     6b8:	10bfffcc 	andi	r2,r2,65535
     6bc:	e0ffff04 	addi	r3,fp,-4
     6c0:	1809883a 	mov	r4,r3
     6c4:	01400104 	movi	r5,4
     6c8:	100d883a 	mov	r6,r2
     6cc:	00004cc0 	call	4cc <trdb_d5m_write>
	// Row binning x4
	trdb_d5m_write(&i2c, 0x022, 0x0011);
     6d0:	e0bfff04 	addi	r2,fp,-4
     6d4:	1009883a 	mov	r4,r2
     6d8:	01400884 	movi	r5,34
     6dc:	01800444 	movi	r6,17
     6e0:	00004cc0 	call	4cc <trdb_d5m_write>
	// Column binning x4
	trdb_d5m_write(&i2c, 0x023, 0x0011);
     6e4:	e0bfff04 	addi	r2,fp,-4
     6e8:	1009883a 	mov	r4,r2
     6ec:	014008c4 	movi	r5,35
     6f0:	01800444 	movi	r6,17
     6f4:	00004cc0 	call	4cc <trdb_d5m_write>
//	trdb_d5m_write(&i2c, 0x022, 0x0000);
//	// No column binning
//	trdb_d5m_write(&i2c, 0x023, 0x0000);


    void *buffer = calloc(2, width*height);
     6f8:	e0fffa17 	ldw	r3,-24(fp)
     6fc:	e0bffb17 	ldw	r2,-20(fp)
     700:	1885383a 	mul	r2,r3,r2
     704:	01000084 	movi	r4,2
     708:	100b883a 	mov	r5,r2
     70c:	00011a00 	call	11a0 <calloc>
     710:	e0bffc15 	stw	r2,-16(fp)
	if (buffer == NULL) {
     714:	e0bffc17 	ldw	r2,-16(fp)
     718:	1000051e 	bne	r2,zero,730 <main+0x144>
		 printf("# Cannot allocate image buffer\n");
     71c:	01000074 	movhi	r4,1
     720:	213f8604 	addi	r4,r4,-488
     724:	0001dd40 	call	1dd4 <puts>
		return 1;
     728:	00800044 	movi	r2,1
     72c:	00004e06 	br	868 <main+0x27c>
	}

	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x1c, 0); // Stop generation
     730:	0007883a 	mov	r3,zero
     734:	00808034 	movhi	r2,512
     738:	10800704 	addi	r2,r2,28
     73c:	10c00035 	stwio	r3,0(r2)

	// Reset camera
	// IOWR_32DIRECT(CAMERA_CONTROLLER_0_BASE, CAM_CTRL_1, CAM_RESET);

	// Set output buffer address
	IOWR_32DIRECT(CAMERA_CONTROLLER_0_BASE, CAM_BUFFER_START, buffer);
     740:	e0fffc17 	ldw	r3,-16(fp)
     744:	00808034 	movhi	r2,512
     748:	10800804 	addi	r2,r2,32
     74c:	10c00035 	stwio	r3,0(r2)
	// Start capture
	IOWR_32DIRECT(CAMERA_CONTROLLER_0_BASE, CAM_CTRL_1, CAM_START);
     750:	00c00404 	movi	r3,16
     754:	00808034 	movhi	r2,512
     758:	10800b04 	addi	r2,r2,44
     75c:	10c00035 	stwio	r3,0(r2)

	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x00, width << 1); // Width
     760:	e0bffa17 	ldw	r2,-24(fp)
     764:	1085883a 	add	r2,r2,r2
     768:	1007883a 	mov	r3,r2
     76c:	00808034 	movhi	r2,512
     770:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x04, height << 1); // Height
     774:	e0bffb17 	ldw	r2,-20(fp)
     778:	1085883a 	add	r2,r2,r2
     77c:	1007883a 	mov	r3,r2
     780:	00808034 	movhi	r2,512
     784:	10800104 	addi	r2,r2,4
     788:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x08, 1);
     78c:	00c00044 	movi	r3,1
     790:	00808034 	movhi	r2,512
     794:	10800204 	addi	r2,r2,8
     798:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x0c, 0);
     79c:	0007883a 	mov	r3,zero
     7a0:	00808034 	movhi	r2,512
     7a4:	10800304 	addi	r2,r2,12
     7a8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x10, 1);
     7ac:	00c00044 	movi	r3,1
     7b0:	00808034 	movhi	r2,512
     7b4:	10800404 	addi	r2,r2,16
     7b8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x14, 0);
     7bc:	0007883a 	mov	r3,zero
     7c0:	00808034 	movhi	r2,512
     7c4:	10800504 	addi	r2,r2,20
     7c8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x18, 0); // Generate random
     7cc:	0007883a 	mov	r3,zero
     7d0:	00808034 	movhi	r2,512
     7d4:	10800604 	addi	r2,r2,24
     7d8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE, 0x1c, 1); // Start generation
     7dc:	00c00044 	movi	r3,1
     7e0:	00808034 	movhi	r2,512
     7e4:	10800704 	addi	r2,r2,28
     7e8:	10c00035 	stwio	r3,0(r2)
//	  constant LINE_LINE_BLANK_CYCLES   : positive := 1;
//	  constant LINE_FRAME_BLANK_CYCLES  : natural  := 0;

	int ctl;
	do {
		ctl = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0c);
     7ec:	00808034 	movhi	r2,512
     7f0:	10800b04 	addi	r2,r2,44
     7f4:	10800037 	ldwio	r2,0(r2)
     7f8:	e0bffd15 	stw	r2,-12(fp)
		 printf("# CTRL: %08x\n", ctl);
     7fc:	01000074 	movhi	r4,1
     800:	213f8e04 	addi	r4,r4,-456
     804:	e17ffd17 	ldw	r5,-12(fp)
     808:	0001b780 	call	1b78 <printf>

		 int debug_reg = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x14);
     80c:	00808034 	movhi	r2,512
     810:	10800d04 	addi	r2,r2,52
     814:	10800037 	ldwio	r2,0(r2)
     818:	e0bffe15 	stw	r2,-8(fp)
		 printf("# DBG: %08x\n", debug_reg);
     81c:	01000074 	movhi	r4,1
     820:	213f9204 	addi	r4,r4,-440
     824:	e17ffe17 	ldw	r5,-8(fp)
     828:	0001b780 	call	1b78 <printf>

		sleep_ms(10000);
     82c:	0109c404 	movi	r4,10000
     830:	00002880 	call	288 <sleep_ms>
	} while ( !(ctl & 0x80) );
     834:	e0bffd17 	ldw	r2,-12(fp)
     838:	1080200c 	andi	r2,r2,128
     83c:	103feb26 	beq	r2,zero,7ec <main+0x200>

	printf("\n# Finished\n");
     840:	01000074 	movhi	r4,1
     844:	213f9604 	addi	r4,r4,-424
     848:	0001dd40 	call	1dd4 <puts>

	dump_pcm_data(buffer, width, height);
     84c:	e0fffa17 	ldw	r3,-24(fp)
     850:	e0bffb17 	ldw	r2,-20(fp)
     854:	e13ffc17 	ldw	r4,-16(fp)
     858:	180b883a 	mov	r5,r3
     85c:	100d883a 	mov	r6,r2
     860:	000038c0 	call	38c <dump_pcm_data>


    return 0;
     864:	0005883a 	mov	r2,zero
}
     868:	e037883a 	mov	sp,fp
     86c:	dfc00117 	ldw	ra,4(sp)
     870:	df000017 	ldw	fp,0(sp)
     874:	dec00204 	addi	sp,sp,8
     878:	f800283a 	ret

0000087c <i2c_usleep>:
static void i2c_wait_end_of_transfer(i2c_dev *dev);
static void i2c_set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t i2c_get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
     87c:	defffd04 	addi	sp,sp,-12
     880:	dfc00215 	stw	ra,8(sp)
     884:	df000115 	stw	fp,4(sp)
     888:	df000104 	addi	fp,sp,4
     88c:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
     890:	e13fff17 	ldw	r4,-4(fp)
     894:	000ddb40 	call	ddb4 <usleep>
#endif
}
     898:	e037883a 	mov	sp,fp
     89c:	dfc00117 	ldw	ra,4(sp)
     8a0:	df000017 	ldw	fp,0(sp)
     8a4:	dec00204 	addi	sp,sp,8
     8a8:	f800283a 	ret

000008ac <i2c_wait_end_of_transfer>:

/*
 * Waits until the current i2c transfer is finished.
 */
static void i2c_wait_end_of_transfer(i2c_dev *dev) {
     8ac:	defffe04 	addi	sp,sp,-8
     8b0:	df000115 	stw	fp,4(sp)
     8b4:	df000104 	addi	fp,sp,4
     8b8:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
     8bc:	0001883a 	nop
     8c0:	e0bfff17 	ldw	r2,-4(fp)
     8c4:	10800017 	ldw	r2,0(r2)
     8c8:	10800084 	addi	r2,r2,2
     8cc:	10800023 	ldbuio	r2,0(r2)
     8d0:	10803fcc 	andi	r2,r2,255
     8d4:	1080020c 	andi	r2,r2,8
     8d8:	103ff91e 	bne	r2,zero,8c0 <i2c_wait_end_of_transfer+0x14>
}
     8dc:	e037883a 	mov	sp,fp
     8e0:	df000017 	ldw	fp,0(sp)
     8e4:	dec00104 	addi	sp,sp,4
     8e8:	f800283a 	ret

000008ec <i2c_set_data_control>:

/*
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void i2c_set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
     8ec:	defffb04 	addi	sp,sp,-20
     8f0:	dfc00415 	stw	ra,16(sp)
     8f4:	df000315 	stw	fp,12(sp)
     8f8:	df000304 	addi	fp,sp,12
     8fc:	e13ffd15 	stw	r4,-12(fp)
     900:	2807883a 	mov	r3,r5
     904:	3005883a 	mov	r2,r6
     908:	e0fffe05 	stb	r3,-8(fp)
     90c:	e0bfff05 	stb	r2,-4(fp)
    i2c_wait_end_of_transfer(dev);
     910:	e13ffd17 	ldw	r4,-12(fp)
     914:	00008ac0 	call	8ac <i2c_wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
     918:	e0bffd17 	ldw	r2,-12(fp)
     91c:	10800017 	ldw	r2,0(r2)
     920:	e0fffe03 	ldbu	r3,-8(fp)
     924:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
     928:	e0bffd17 	ldw	r2,-12(fp)
     92c:	10800017 	ldw	r2,0(r2)
     930:	10800044 	addi	r2,r2,1
     934:	e0ffff03 	ldbu	r3,-4(fp)
     938:	10c00025 	stbio	r3,0(r2)
    i2c_wait_end_of_transfer(dev);
     93c:	e13ffd17 	ldw	r4,-12(fp)
     940:	00008ac0 	call	8ac <i2c_wait_end_of_transfer>
}
     944:	e037883a 	mov	sp,fp
     948:	dfc00117 	ldw	ra,4(sp)
     94c:	df000017 	ldw	fp,0(sp)
     950:	dec00204 	addi	sp,sp,8
     954:	f800283a 	ret

00000958 <i2c_get_data_set_control>:

/*
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t i2c_get_data_set_control(i2c_dev *dev, uint8_t control) {
     958:	defffc04 	addi	sp,sp,-16
     95c:	dfc00315 	stw	ra,12(sp)
     960:	df000215 	stw	fp,8(sp)
     964:	df000204 	addi	fp,sp,8
     968:	e13ffe15 	stw	r4,-8(fp)
     96c:	2805883a 	mov	r2,r5
     970:	e0bfff05 	stb	r2,-4(fp)
    i2c_wait_end_of_transfer(dev);
     974:	e13ffe17 	ldw	r4,-8(fp)
     978:	00008ac0 	call	8ac <i2c_wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
     97c:	e0bffe17 	ldw	r2,-8(fp)
     980:	10800017 	ldw	r2,0(r2)
     984:	10800044 	addi	r2,r2,1
     988:	e0ffff03 	ldbu	r3,-4(fp)
     98c:	10c00025 	stbio	r3,0(r2)
    i2c_wait_end_of_transfer(dev);
     990:	e13ffe17 	ldw	r4,-8(fp)
     994:	00008ac0 	call	8ac <i2c_wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
     998:	e0bffe17 	ldw	r2,-8(fp)
     99c:	10800017 	ldw	r2,0(r2)
     9a0:	10800023 	ldbuio	r2,0(r2)
     9a4:	10803fcc 	andi	r2,r2,255
}
     9a8:	e037883a 	mov	sp,fp
     9ac:	dfc00117 	ldw	ra,4(sp)
     9b0:	df000017 	ldw	fp,0(sp)
     9b4:	dec00204 	addi	sp,sp,8
     9b8:	f800283a 	ret

000009bc <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
     9bc:	defffd04 	addi	sp,sp,-12
     9c0:	df000215 	stw	fp,8(sp)
     9c4:	df000204 	addi	fp,sp,8
     9c8:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
     9cc:	e0bfff17 	ldw	r2,-4(fp)
     9d0:	e0bffe15 	stw	r2,-8(fp)

    return dev;
     9d4:	e0bffe17 	ldw	r2,-8(fp)
}
     9d8:	e037883a 	mov	sp,fp
     9dc:	df000017 	ldw	fp,0(sp)
     9e0:	dec00104 	addi	sp,sp,4
     9e4:	f800283a 	ret

000009e8 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
     9e8:	defffb04 	addi	sp,sp,-20
     9ec:	dfc00415 	stw	ra,16(sp)
     9f0:	df000315 	stw	fp,12(sp)
     9f4:	dc000215 	stw	r16,8(sp)
     9f8:	df000304 	addi	fp,sp,12
     9fc:	e13ffd15 	stw	r4,-12(fp)
     a00:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
     a04:	e0bffd17 	ldw	r2,-12(fp)
     a08:	10800017 	ldw	r2,0(r2)
     a0c:	140000c4 	addi	r16,r2,3
     a10:	e0bffe17 	ldw	r2,-8(fp)
     a14:	1009883a 	mov	r4,r2
     a18:	014001b4 	movhi	r5,6
     a1c:	2946a004 	addi	r5,r5,6784
     a20:	00011900 	call	1190 <__udivsi3>
     a24:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
     a28:	0104e204 	movi	r4,5000
     a2c:	000087c0 	call	87c <i2c_usleep>
}
     a30:	e6ffff04 	addi	sp,fp,-4
     a34:	dfc00217 	ldw	ra,8(sp)
     a38:	df000117 	ldw	fp,4(sp)
     a3c:	dc000017 	ldw	r16,0(sp)
     a40:	dec00304 	addi	sp,sp,12
     a44:	f800283a 	ret

00000a48 <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
     a48:	defffc04 	addi	sp,sp,-16
     a4c:	df000315 	stw	fp,12(sp)
     a50:	df000304 	addi	fp,sp,12
     a54:	e13ffe15 	stw	r4,-8(fp)
     a58:	2805883a 	mov	r2,r5
     a5c:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
     a60:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
     a64:	e0bfff03 	ldbu	r2,-4(fp)
     a68:	10000426 	beq	r2,zero,a7c <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
     a6c:	e0bffd17 	ldw	r2,-12(fp)
     a70:	10800814 	ori	r2,r2,32
     a74:	e0bffd15 	stw	r2,-12(fp)
     a78:	00000406 	br	a8c <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
     a7c:	e0fffd17 	ldw	r3,-12(fp)
     a80:	00bff7c4 	movi	r2,-33
     a84:	1884703a 	and	r2,r3,r2
     a88:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     a8c:	e0bffe17 	ldw	r2,-8(fp)
     a90:	10800017 	ldw	r2,0(r2)
     a94:	10800044 	addi	r2,r2,1
     a98:	00c00084 	movi	r3,2
     a9c:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
     aa0:	e0bffe17 	ldw	r2,-8(fp)
     aa4:	10800017 	ldw	r2,0(r2)
     aa8:	10800044 	addi	r2,r2,1
     aac:	e0fffd17 	ldw	r3,-12(fp)
     ab0:	10c00025 	stbio	r3,0(r2)
}
     ab4:	e037883a 	mov	sp,fp
     ab8:	df000017 	ldw	fp,0(sp)
     abc:	dec00104 	addi	sp,sp,4
     ac0:	f800283a 	ret

00000ac4 <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
     ac4:	defffa04 	addi	sp,sp,-24
     ac8:	dfc00515 	stw	ra,20(sp)
     acc:	df000415 	stw	fp,16(sp)
     ad0:	df000404 	addi	fp,sp,16
     ad4:	e13ffc15 	stw	r4,-16(fp)
     ad8:	2809883a 	mov	r4,r5
     adc:	3007883a 	mov	r3,r6
     ae0:	3805883a 	mov	r2,r7
     ae4:	e13ffd05 	stb	r4,-12(fp)
     ae8:	e0fffe05 	stb	r3,-8(fp)
     aec:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     af0:	e0bffd03 	ldbu	r2,-12(fp)
     af4:	10803f8c 	andi	r2,r2,254
     af8:	e13ffc17 	ldw	r4,-16(fp)
     afc:	100b883a 	mov	r5,r2
     b00:	01800504 	movi	r6,20
     b04:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     b08:	e0bffc17 	ldw	r2,-16(fp)
     b0c:	10800017 	ldw	r2,0(r2)
     b10:	10800084 	addi	r2,r2,2
     b14:	10800023 	ldbuio	r2,0(r2)
     b18:	10803fcc 	andi	r2,r2,255
     b1c:	1080004c 	andi	r2,r2,1
     b20:	10000726 	beq	r2,zero,b40 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     b24:	e0bffc17 	ldw	r2,-16(fp)
     b28:	10800017 	ldw	r2,0(r2)
     b2c:	10800044 	addi	r2,r2,1
     b30:	00c00084 	movi	r3,2
     b34:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     b38:	00800044 	movi	r2,1
     b3c:	00002706 	br	bdc <i2c_write+0x118>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
     b40:	e0bffe03 	ldbu	r2,-8(fp)
     b44:	e13ffc17 	ldw	r4,-16(fp)
     b48:	100b883a 	mov	r5,r2
     b4c:	01800404 	movi	r6,16
     b50:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     b54:	e0bffc17 	ldw	r2,-16(fp)
     b58:	10800017 	ldw	r2,0(r2)
     b5c:	10800084 	addi	r2,r2,2
     b60:	10800023 	ldbuio	r2,0(r2)
     b64:	10803fcc 	andi	r2,r2,255
     b68:	1080004c 	andi	r2,r2,1
     b6c:	10000726 	beq	r2,zero,b8c <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     b70:	e0bffc17 	ldw	r2,-16(fp)
     b74:	10800017 	ldw	r2,0(r2)
     b78:	10800044 	addi	r2,r2,1
     b7c:	00c00084 	movi	r3,2
     b80:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     b84:	00800084 	movi	r2,2
     b88:	00001406 	br	bdc <i2c_write+0x118>
    }

    /* write register data to device */
    i2c_set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     b8c:	e0bfff03 	ldbu	r2,-4(fp)
     b90:	e13ffc17 	ldw	r4,-16(fp)
     b94:	100b883a 	mov	r5,r2
     b98:	01800484 	movi	r6,18
     b9c:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     ba0:	e0bffc17 	ldw	r2,-16(fp)
     ba4:	10800017 	ldw	r2,0(r2)
     ba8:	10800084 	addi	r2,r2,2
     bac:	10800023 	ldbuio	r2,0(r2)
     bb0:	10803fcc 	andi	r2,r2,255
     bb4:	1080004c 	andi	r2,r2,1
     bb8:	10000726 	beq	r2,zero,bd8 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     bbc:	e0bffc17 	ldw	r2,-16(fp)
     bc0:	10800017 	ldw	r2,0(r2)
     bc4:	10800044 	addi	r2,r2,1
     bc8:	00c00084 	movi	r3,2
     bcc:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     bd0:	00800084 	movi	r2,2
     bd4:	00000106 	br	bdc <i2c_write+0x118>
    }

    return I2C_SUCCESS;
     bd8:	0005883a 	mov	r2,zero
}
     bdc:	e037883a 	mov	sp,fp
     be0:	dfc00117 	ldw	ra,4(sp)
     be4:	df000017 	ldw	fp,0(sp)
     be8:	dec00204 	addi	sp,sp,8
     bec:	f800283a 	ret

00000bf0 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
     bf0:	defffa04 	addi	sp,sp,-24
     bf4:	dfc00515 	stw	ra,20(sp)
     bf8:	df000415 	stw	fp,16(sp)
     bfc:	df000404 	addi	fp,sp,16
     c00:	e13ffc15 	stw	r4,-16(fp)
     c04:	2807883a 	mov	r3,r5
     c08:	3005883a 	mov	r2,r6
     c0c:	e1ffff15 	stw	r7,-4(fp)
     c10:	e0fffd05 	stb	r3,-12(fp)
     c14:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     c18:	e0bffd03 	ldbu	r2,-12(fp)
     c1c:	10803f8c 	andi	r2,r2,254
     c20:	e13ffc17 	ldw	r4,-16(fp)
     c24:	100b883a 	mov	r5,r2
     c28:	01800504 	movi	r6,20
     c2c:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     c30:	e0bffc17 	ldw	r2,-16(fp)
     c34:	10800017 	ldw	r2,0(r2)
     c38:	10800084 	addi	r2,r2,2
     c3c:	10800023 	ldbuio	r2,0(r2)
     c40:	10803fcc 	andi	r2,r2,255
     c44:	1080004c 	andi	r2,r2,1
     c48:	10000726 	beq	r2,zero,c68 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     c4c:	e0bffc17 	ldw	r2,-16(fp)
     c50:	10800017 	ldw	r2,0(r2)
     c54:	10800044 	addi	r2,r2,1
     c58:	00c00084 	movi	r3,2
     c5c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     c60:	00800044 	movi	r2,1
     c64:	00002f06 	br	d24 <i2c_read+0x134>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
     c68:	e0bffe03 	ldbu	r2,-8(fp)
     c6c:	e13ffc17 	ldw	r4,-16(fp)
     c70:	100b883a 	mov	r5,r2
     c74:	01800404 	movi	r6,16
     c78:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     c7c:	e0bffc17 	ldw	r2,-16(fp)
     c80:	10800017 	ldw	r2,0(r2)
     c84:	10800084 	addi	r2,r2,2
     c88:	10800023 	ldbuio	r2,0(r2)
     c8c:	10803fcc 	andi	r2,r2,255
     c90:	1080004c 	andi	r2,r2,1
     c94:	10000726 	beq	r2,zero,cb4 <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     c98:	e0bffc17 	ldw	r2,-16(fp)
     c9c:	10800017 	ldw	r2,0(r2)
     ca0:	10800044 	addi	r2,r2,1
     ca4:	00c00084 	movi	r3,2
     ca8:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     cac:	00800084 	movi	r2,2
     cb0:	00001c06 	br	d24 <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    i2c_set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     cb4:	e0bffd03 	ldbu	r2,-12(fp)
     cb8:	10800054 	ori	r2,r2,1
     cbc:	10803fcc 	andi	r2,r2,255
     cc0:	e13ffc17 	ldw	r4,-16(fp)
     cc4:	100b883a 	mov	r5,r2
     cc8:	01800504 	movi	r6,20
     ccc:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     cd0:	e0bffc17 	ldw	r2,-16(fp)
     cd4:	10800017 	ldw	r2,0(r2)
     cd8:	10800084 	addi	r2,r2,2
     cdc:	10800023 	ldbuio	r2,0(r2)
     ce0:	10803fcc 	andi	r2,r2,255
     ce4:	1080004c 	andi	r2,r2,1
     ce8:	10000726 	beq	r2,zero,d08 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     cec:	e0bffc17 	ldw	r2,-16(fp)
     cf0:	10800017 	ldw	r2,0(r2)
     cf4:	10800044 	addi	r2,r2,1
     cf8:	00c00084 	movi	r3,2
     cfc:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     d00:	00800044 	movi	r2,1
     d04:	00000706 	br	d24 <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
     d08:	e13ffc17 	ldw	r4,-16(fp)
     d0c:	014002c4 	movi	r5,11
     d10:	00009580 	call	958 <i2c_get_data_set_control>
     d14:	1007883a 	mov	r3,r2
     d18:	e0bfff17 	ldw	r2,-4(fp)
     d1c:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
     d20:	0005883a 	mov	r2,zero
}
     d24:	e037883a 	mov	sp,fp
     d28:	dfc00117 	ldw	ra,4(sp)
     d2c:	df000017 	ldw	fp,0(sp)
     d30:	dec00204 	addi	sp,sp,8
     d34:	f800283a 	ret

00000d38 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
     d38:	defff904 	addi	sp,sp,-28
     d3c:	dfc00615 	stw	ra,24(sp)
     d40:	df000515 	stw	fp,20(sp)
     d44:	df000504 	addi	fp,sp,20
     d48:	e13ffc15 	stw	r4,-16(fp)
     d4c:	2807883a 	mov	r3,r5
     d50:	3005883a 	mov	r2,r6
     d54:	e1ffff15 	stw	r7,-4(fp)
     d58:	e0fffd05 	stb	r3,-12(fp)
     d5c:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     d60:	e0bffd03 	ldbu	r2,-12(fp)
     d64:	10803f8c 	andi	r2,r2,254
     d68:	e13ffc17 	ldw	r4,-16(fp)
     d6c:	100b883a 	mov	r5,r2
     d70:	01800504 	movi	r6,20
     d74:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     d78:	e0bffc17 	ldw	r2,-16(fp)
     d7c:	10800017 	ldw	r2,0(r2)
     d80:	10800084 	addi	r2,r2,2
     d84:	10800023 	ldbuio	r2,0(r2)
     d88:	10803fcc 	andi	r2,r2,255
     d8c:	1080004c 	andi	r2,r2,1
     d90:	10000726 	beq	r2,zero,db0 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     d94:	e0bffc17 	ldw	r2,-16(fp)
     d98:	10800017 	ldw	r2,0(r2)
     d9c:	10800044 	addi	r2,r2,1
     da0:	00c00084 	movi	r3,2
     da4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     da8:	00800044 	movi	r2,1
     dac:	00004206 	br	eb8 <i2c_write_array+0x180>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
     db0:	e0bffe03 	ldbu	r2,-8(fp)
     db4:	e13ffc17 	ldw	r4,-16(fp)
     db8:	100b883a 	mov	r5,r2
     dbc:	01800404 	movi	r6,16
     dc0:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     dc4:	e0bffc17 	ldw	r2,-16(fp)
     dc8:	10800017 	ldw	r2,0(r2)
     dcc:	10800084 	addi	r2,r2,2
     dd0:	10800023 	ldbuio	r2,0(r2)
     dd4:	10803fcc 	andi	r2,r2,255
     dd8:	1080004c 	andi	r2,r2,1
     ddc:	10000726 	beq	r2,zero,dfc <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     de0:	e0bffc17 	ldw	r2,-16(fp)
     de4:	10800017 	ldw	r2,0(r2)
     de8:	10800044 	addi	r2,r2,1
     dec:	00c00084 	movi	r3,2
     df0:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     df4:	00800084 	movi	r2,2
     df8:	00002f06 	br	eb8 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
     dfc:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
     e00:	e03ffb15 	stw	zero,-20(fp)
     e04:	00002806 	br	ea8 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
     e08:	e0800217 	ldw	r2,8(fp)
     e0c:	10bfffc4 	addi	r2,r2,-1
     e10:	e0fffb17 	ldw	r3,-20(fp)
     e14:	18800a2e 	bgeu	r3,r2,e40 <i2c_write_array+0x108>
            i2c_set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
     e18:	e0ffff17 	ldw	r3,-4(fp)
     e1c:	e0bffb17 	ldw	r2,-20(fp)
     e20:	1885883a 	add	r2,r3,r2
     e24:	10800003 	ldbu	r2,0(r2)
     e28:	10803fcc 	andi	r2,r2,255
     e2c:	e13ffc17 	ldw	r4,-16(fp)
     e30:	100b883a 	mov	r5,r2
     e34:	01800404 	movi	r6,16
     e38:	00008ec0 	call	8ec <i2c_set_data_control>
     e3c:	00000906 	br	e64 <i2c_write_array+0x12c>
        } else {
            i2c_set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     e40:	e0ffff17 	ldw	r3,-4(fp)
     e44:	e0bffb17 	ldw	r2,-20(fp)
     e48:	1885883a 	add	r2,r3,r2
     e4c:	10800003 	ldbu	r2,0(r2)
     e50:	10803fcc 	andi	r2,r2,255
     e54:	e13ffc17 	ldw	r4,-16(fp)
     e58:	100b883a 	mov	r5,r2
     e5c:	01800484 	movi	r6,18
     e60:	00008ec0 	call	8ec <i2c_set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     e64:	e0bffc17 	ldw	r2,-16(fp)
     e68:	10800017 	ldw	r2,0(r2)
     e6c:	10800084 	addi	r2,r2,2
     e70:	10800023 	ldbuio	r2,0(r2)
     e74:	10803fcc 	andi	r2,r2,255
     e78:	1080004c 	andi	r2,r2,1
     e7c:	10000726 	beq	r2,zero,e9c <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     e80:	e0bffc17 	ldw	r2,-16(fp)
     e84:	10800017 	ldw	r2,0(r2)
     e88:	10800044 	addi	r2,r2,1
     e8c:	00c00084 	movi	r3,2
     e90:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
     e94:	00800084 	movi	r2,2
     e98:	00000706 	br	eb8 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
     e9c:	e0bffb17 	ldw	r2,-20(fp)
     ea0:	10800044 	addi	r2,r2,1
     ea4:	e0bffb15 	stw	r2,-20(fp)
     ea8:	e0fffb17 	ldw	r3,-20(fp)
     eac:	e0800217 	ldw	r2,8(fp)
     eb0:	18bfd536 	bltu	r3,r2,e08 <i2c_write_array+0xd0>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
     eb4:	0005883a 	mov	r2,zero
}
     eb8:	e037883a 	mov	sp,fp
     ebc:	dfc00117 	ldw	ra,4(sp)
     ec0:	df000017 	ldw	fp,0(sp)
     ec4:	dec00204 	addi	sp,sp,8
     ec8:	f800283a 	ret

00000ecc <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
     ecc:	defff804 	addi	sp,sp,-32
     ed0:	dfc00715 	stw	ra,28(sp)
     ed4:	df000615 	stw	fp,24(sp)
     ed8:	dc000515 	stw	r16,20(sp)
     edc:	df000604 	addi	fp,sp,24
     ee0:	e13ffb15 	stw	r4,-20(fp)
     ee4:	2807883a 	mov	r3,r5
     ee8:	3005883a 	mov	r2,r6
     eec:	e1fffe15 	stw	r7,-8(fp)
     ef0:	e0fffc05 	stb	r3,-16(fp)
     ef4:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     ef8:	e0bffc03 	ldbu	r2,-16(fp)
     efc:	10803f8c 	andi	r2,r2,254
     f00:	e13ffb17 	ldw	r4,-20(fp)
     f04:	100b883a 	mov	r5,r2
     f08:	01800504 	movi	r6,20
     f0c:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     f10:	e0bffb17 	ldw	r2,-20(fp)
     f14:	10800017 	ldw	r2,0(r2)
     f18:	10800084 	addi	r2,r2,2
     f1c:	10800023 	ldbuio	r2,0(r2)
     f20:	10803fcc 	andi	r2,r2,255
     f24:	1080004c 	andi	r2,r2,1
     f28:	10000726 	beq	r2,zero,f48 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     f2c:	e0bffb17 	ldw	r2,-20(fp)
     f30:	10800017 	ldw	r2,0(r2)
     f34:	10800044 	addi	r2,r2,1
     f38:	00c00084 	movi	r3,2
     f3c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     f40:	00800044 	movi	r2,1
     f44:	00004506 	br	105c <i2c_read_array+0x190>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
     f48:	e0bffd03 	ldbu	r2,-12(fp)
     f4c:	e13ffb17 	ldw	r4,-20(fp)
     f50:	100b883a 	mov	r5,r2
     f54:	01800404 	movi	r6,16
     f58:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     f5c:	e0bffb17 	ldw	r2,-20(fp)
     f60:	10800017 	ldw	r2,0(r2)
     f64:	10800084 	addi	r2,r2,2
     f68:	10800023 	ldbuio	r2,0(r2)
     f6c:	10803fcc 	andi	r2,r2,255
     f70:	1080004c 	andi	r2,r2,1
     f74:	10000726 	beq	r2,zero,f94 <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     f78:	e0bffb17 	ldw	r2,-20(fp)
     f7c:	10800017 	ldw	r2,0(r2)
     f80:	10800044 	addi	r2,r2,1
     f84:	00c00084 	movi	r3,2
     f88:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
     f8c:	00800084 	movi	r2,2
     f90:	00003206 	br	105c <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    i2c_set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
     f94:	e0bffc03 	ldbu	r2,-16(fp)
     f98:	10800054 	ori	r2,r2,1
     f9c:	10803fcc 	andi	r2,r2,255
     fa0:	e13ffb17 	ldw	r4,-20(fp)
     fa4:	100b883a 	mov	r5,r2
     fa8:	01800504 	movi	r6,20
     fac:	00008ec0 	call	8ec <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
     fb0:	e0bffb17 	ldw	r2,-20(fp)
     fb4:	10800017 	ldw	r2,0(r2)
     fb8:	10800084 	addi	r2,r2,2
     fbc:	10800023 	ldbuio	r2,0(r2)
     fc0:	10803fcc 	andi	r2,r2,255
     fc4:	1080004c 	andi	r2,r2,1
     fc8:	10000726 	beq	r2,zero,fe8 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
     fcc:	e0bffb17 	ldw	r2,-20(fp)
     fd0:	10800017 	ldw	r2,0(r2)
     fd4:	10800044 	addi	r2,r2,1
     fd8:	00c00084 	movi	r3,2
     fdc:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
     fe0:	00800044 	movi	r2,1
     fe4:	00001d06 	br	105c <i2c_read_array+0x190>
    }

    unsigned int i = 0;
     fe8:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
     fec:	e03ffa15 	stw	zero,-24(fp)
     ff0:	00001606 	br	104c <i2c_read_array+0x180>
        if (i < size - 1) {
     ff4:	e0800217 	ldw	r2,8(fp)
     ff8:	10bfffc4 	addi	r2,r2,-1
     ffc:	e0fffa17 	ldw	r3,-24(fp)
    1000:	1880082e 	bgeu	r3,r2,1024 <i2c_read_array+0x158>
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
    1004:	e0fffe17 	ldw	r3,-8(fp)
    1008:	e0bffa17 	ldw	r2,-24(fp)
    100c:	18a1883a 	add	r16,r3,r2
    1010:	e13ffb17 	ldw	r4,-20(fp)
    1014:	01400204 	movi	r5,8
    1018:	00009580 	call	958 <i2c_get_data_set_control>
    101c:	80800005 	stb	r2,0(r16)
    1020:	00000706 	br	1040 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
    1024:	e0fffe17 	ldw	r3,-8(fp)
    1028:	e0bffa17 	ldw	r2,-24(fp)
    102c:	18a1883a 	add	r16,r3,r2
    1030:	e13ffb17 	ldw	r4,-20(fp)
    1034:	014002c4 	movi	r5,11
    1038:	00009580 	call	958 <i2c_get_data_set_control>
    103c:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
    1040:	e0bffa17 	ldw	r2,-24(fp)
    1044:	10800044 	addi	r2,r2,1
    1048:	e0bffa15 	stw	r2,-24(fp)
    104c:	e0fffa17 	ldw	r3,-24(fp)
    1050:	e0800217 	ldw	r2,8(fp)
    1054:	18bfe736 	bltu	r3,r2,ff4 <i2c_read_array+0x128>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
    1058:	0005883a 	mov	r2,zero
}
    105c:	e6ffff04 	addi	sp,fp,-4
    1060:	dfc00217 	ldw	ra,8(sp)
    1064:	df000117 	ldw	fp,4(sp)
    1068:	dc000017 	ldw	r16,0(sp)
    106c:	dec00304 	addi	sp,sp,12
    1070:	f800283a 	ret

00001074 <udivmodsi4>:
    1074:	2900182e 	bgeu	r5,r4,10d8 <udivmodsi4+0x64>
    1078:	28001716 	blt	r5,zero,10d8 <udivmodsi4+0x64>
    107c:	00800804 	movi	r2,32
    1080:	00c00044 	movi	r3,1
    1084:	00000206 	br	1090 <udivmodsi4+0x1c>
    1088:	10001126 	beq	r2,zero,10d0 <udivmodsi4+0x5c>
    108c:	28000516 	blt	r5,zero,10a4 <udivmodsi4+0x30>
    1090:	294b883a 	add	r5,r5,r5
    1094:	10bfffc4 	addi	r2,r2,-1
    1098:	18c7883a 	add	r3,r3,r3
    109c:	293ffa36 	bltu	r5,r4,1088 <udivmodsi4+0x14>
    10a0:	18000b26 	beq	r3,zero,10d0 <udivmodsi4+0x5c>
    10a4:	0005883a 	mov	r2,zero
    10a8:	21400236 	bltu	r4,r5,10b4 <udivmodsi4+0x40>
    10ac:	2149c83a 	sub	r4,r4,r5
    10b0:	10c4b03a 	or	r2,r2,r3
    10b4:	1806d07a 	srli	r3,r3,1
    10b8:	280ad07a 	srli	r5,r5,1
    10bc:	183ffa1e 	bne	r3,zero,10a8 <udivmodsi4+0x34>
    10c0:	3000011e 	bne	r6,zero,10c8 <udivmodsi4+0x54>
    10c4:	f800283a 	ret
    10c8:	2005883a 	mov	r2,r4
    10cc:	f800283a 	ret
    10d0:	0005883a 	mov	r2,zero
    10d4:	003ffa06 	br	10c0 <udivmodsi4+0x4c>
    10d8:	00c00044 	movi	r3,1
    10dc:	003ff106 	br	10a4 <udivmodsi4+0x30>

000010e0 <__divsi3>:
    10e0:	defffe04 	addi	sp,sp,-8
    10e4:	dfc00115 	stw	ra,4(sp)
    10e8:	dc000015 	stw	r16,0(sp)
    10ec:	20000b16 	blt	r4,zero,111c <__divsi3+0x3c>
    10f0:	0021883a 	mov	r16,zero
    10f4:	28000c16 	blt	r5,zero,1128 <__divsi3+0x48>
    10f8:	000d883a 	mov	r6,zero
    10fc:	00010740 	call	1074 <udivmodsi4>
    1100:	0407c83a 	sub	r3,zero,r16
    1104:	1884f03a 	xor	r2,r3,r2
    1108:	1405883a 	add	r2,r2,r16
    110c:	dfc00117 	ldw	ra,4(sp)
    1110:	dc000017 	ldw	r16,0(sp)
    1114:	dec00204 	addi	sp,sp,8
    1118:	f800283a 	ret
    111c:	0109c83a 	sub	r4,zero,r4
    1120:	04000044 	movi	r16,1
    1124:	283ff40e 	bge	r5,zero,10f8 <__divsi3+0x18>
    1128:	014bc83a 	sub	r5,zero,r5
    112c:	8400005c 	xori	r16,r16,1
    1130:	003ff106 	br	10f8 <__divsi3+0x18>

00001134 <__modsi3>:
    1134:	defffd04 	addi	sp,sp,-12
    1138:	dfc00215 	stw	ra,8(sp)
    113c:	dc400115 	stw	r17,4(sp)
    1140:	dc000015 	stw	r16,0(sp)
    1144:	20000c16 	blt	r4,zero,1178 <__modsi3+0x44>
    1148:	0023883a 	mov	r17,zero
    114c:	0021883a 	mov	r16,zero
    1150:	28000d16 	blt	r5,zero,1188 <__modsi3+0x54>
    1154:	01800044 	movi	r6,1
    1158:	00010740 	call	1074 <udivmodsi4>
    115c:	1404f03a 	xor	r2,r2,r16
    1160:	8885883a 	add	r2,r17,r2
    1164:	dfc00217 	ldw	ra,8(sp)
    1168:	dc400117 	ldw	r17,4(sp)
    116c:	dc000017 	ldw	r16,0(sp)
    1170:	dec00304 	addi	sp,sp,12
    1174:	f800283a 	ret
    1178:	0109c83a 	sub	r4,zero,r4
    117c:	04400044 	movi	r17,1
    1180:	043fffc4 	movi	r16,-1
    1184:	283ff30e 	bge	r5,zero,1154 <__modsi3+0x20>
    1188:	014bc83a 	sub	r5,zero,r5
    118c:	003ff106 	br	1154 <__modsi3+0x20>

00001190 <__udivsi3>:
    1190:	000d883a 	mov	r6,zero
    1194:	00010741 	jmpi	1074 <udivmodsi4>

00001198 <__umodsi3>:
    1198:	01800044 	movi	r6,1
    119c:	00010741 	jmpi	1074 <udivmodsi4>

000011a0 <calloc>:
    11a0:	00c00074 	movhi	r3,1
    11a4:	18c70304 	addi	r3,r3,7180
    11a8:	2005883a 	mov	r2,r4
    11ac:	19000017 	ldw	r4,0(r3)
    11b0:	280d883a 	mov	r6,r5
    11b4:	100b883a 	mov	r5,r2
    11b8:	00011bc1 	jmpi	11bc <_calloc_r>

000011bc <_calloc_r>:
    11bc:	298b383a 	mul	r5,r5,r6
    11c0:	defffe04 	addi	sp,sp,-8
    11c4:	dc000015 	stw	r16,0(sp)
    11c8:	dfc00115 	stw	ra,4(sp)
    11cc:	00012800 	call	1280 <_malloc_r>
    11d0:	1021883a 	mov	r16,r2
    11d4:	10002826 	beq	r2,zero,1278 <_calloc_r+0xbc>
    11d8:	11bfff17 	ldw	r6,-4(r2)
    11dc:	00bfff04 	movi	r2,-4
    11e0:	00c00904 	movi	r3,36
    11e4:	308c703a 	and	r6,r6,r2
    11e8:	308d883a 	add	r6,r6,r2
    11ec:	19801436 	bltu	r3,r6,1240 <_calloc_r+0x84>
    11f0:	008004c4 	movi	r2,19
    11f4:	11800936 	bltu	r2,r6,121c <_calloc_r+0x60>
    11f8:	8005883a 	mov	r2,r16
    11fc:	10000015 	stw	zero,0(r2)
    1200:	10000115 	stw	zero,4(r2)
    1204:	10000215 	stw	zero,8(r2)
    1208:	8005883a 	mov	r2,r16
    120c:	dfc00117 	ldw	ra,4(sp)
    1210:	dc000017 	ldw	r16,0(sp)
    1214:	dec00204 	addi	sp,sp,8
    1218:	f800283a 	ret
    121c:	80000015 	stw	zero,0(r16)
    1220:	80000115 	stw	zero,4(r16)
    1224:	008006c4 	movi	r2,27
    1228:	11800d2e 	bgeu	r2,r6,1260 <_calloc_r+0xa4>
    122c:	80000215 	stw	zero,8(r16)
    1230:	80000315 	stw	zero,12(r16)
    1234:	30c00c26 	beq	r6,r3,1268 <_calloc_r+0xac>
    1238:	80800404 	addi	r2,r16,16
    123c:	003fef06 	br	11fc <_calloc_r+0x40>
    1240:	8009883a 	mov	r4,r16
    1244:	000b883a 	mov	r5,zero
    1248:	0001a280 	call	1a28 <memset>
    124c:	8005883a 	mov	r2,r16
    1250:	dfc00117 	ldw	ra,4(sp)
    1254:	dc000017 	ldw	r16,0(sp)
    1258:	dec00204 	addi	sp,sp,8
    125c:	f800283a 	ret
    1260:	80800204 	addi	r2,r16,8
    1264:	003fe506 	br	11fc <_calloc_r+0x40>
    1268:	80000415 	stw	zero,16(r16)
    126c:	80800604 	addi	r2,r16,24
    1270:	80000515 	stw	zero,20(r16)
    1274:	003fe106 	br	11fc <_calloc_r+0x40>
    1278:	0005883a 	mov	r2,zero
    127c:	003fe306 	br	120c <_calloc_r+0x50>

00001280 <_malloc_r>:
    1280:	defff504 	addi	sp,sp,-44
    1284:	dc800315 	stw	r18,12(sp)
    1288:	dfc00a15 	stw	ra,40(sp)
    128c:	df000915 	stw	fp,36(sp)
    1290:	ddc00815 	stw	r23,32(sp)
    1294:	dd800715 	stw	r22,28(sp)
    1298:	dd400615 	stw	r21,24(sp)
    129c:	dd000515 	stw	r20,20(sp)
    12a0:	dcc00415 	stw	r19,16(sp)
    12a4:	dc400215 	stw	r17,8(sp)
    12a8:	dc000115 	stw	r16,4(sp)
    12ac:	288002c4 	addi	r2,r5,11
    12b0:	00c00584 	movi	r3,22
    12b4:	2025883a 	mov	r18,r4
    12b8:	18802a2e 	bgeu	r3,r2,1364 <_malloc_r+0xe4>
    12bc:	047ffe04 	movi	r17,-8
    12c0:	1462703a 	and	r17,r2,r17
    12c4:	88009e16 	blt	r17,zero,1540 <_malloc_r+0x2c0>
    12c8:	89409d36 	bltu	r17,r5,1540 <_malloc_r+0x2c0>
    12cc:	000db180 	call	db18 <__malloc_lock>
    12d0:	00807dc4 	movi	r2,503
    12d4:	14402736 	bltu	r2,r17,1374 <_malloc_r+0xf4>
    12d8:	8806d0fa 	srli	r3,r17,3
    12dc:	04c00074 	movhi	r19,1
    12e0:	9cc16004 	addi	r19,r19,1408
    12e4:	18c5883a 	add	r2,r3,r3
    12e8:	1085883a 	add	r2,r2,r2
    12ec:	1085883a 	add	r2,r2,r2
    12f0:	9885883a 	add	r2,r19,r2
    12f4:	14000317 	ldw	r16,12(r2)
    12f8:	80814a26 	beq	r16,r2,1824 <_malloc_r+0x5a4>
    12fc:	80c00117 	ldw	r3,4(r16)
    1300:	81000317 	ldw	r4,12(r16)
    1304:	00bfff04 	movi	r2,-4
    1308:	1884703a 	and	r2,r3,r2
    130c:	81400217 	ldw	r5,8(r16)
    1310:	8085883a 	add	r2,r16,r2
    1314:	10c00117 	ldw	r3,4(r2)
    1318:	29000315 	stw	r4,12(r5)
    131c:	21400215 	stw	r5,8(r4)
    1320:	18c00054 	ori	r3,r3,1
    1324:	10c00115 	stw	r3,4(r2)
    1328:	9009883a 	mov	r4,r18
    132c:	000db380 	call	db38 <__malloc_unlock>
    1330:	80800204 	addi	r2,r16,8
    1334:	dfc00a17 	ldw	ra,40(sp)
    1338:	df000917 	ldw	fp,36(sp)
    133c:	ddc00817 	ldw	r23,32(sp)
    1340:	dd800717 	ldw	r22,28(sp)
    1344:	dd400617 	ldw	r21,24(sp)
    1348:	dd000517 	ldw	r20,20(sp)
    134c:	dcc00417 	ldw	r19,16(sp)
    1350:	dc800317 	ldw	r18,12(sp)
    1354:	dc400217 	ldw	r17,8(sp)
    1358:	dc000117 	ldw	r16,4(sp)
    135c:	dec00b04 	addi	sp,sp,44
    1360:	f800283a 	ret
    1364:	04400404 	movi	r17,16
    1368:	89407536 	bltu	r17,r5,1540 <_malloc_r+0x2c0>
    136c:	000db180 	call	db18 <__malloc_lock>
    1370:	003fd906 	br	12d8 <_malloc_r+0x58>
    1374:	8806d27a 	srli	r3,r17,9
    1378:	18007526 	beq	r3,zero,1550 <_malloc_r+0x2d0>
    137c:	00800104 	movi	r2,4
    1380:	10c0ef36 	bltu	r2,r3,1740 <_malloc_r+0x4c0>
    1384:	8806d1ba 	srli	r3,r17,6
    1388:	19c00e04 	addi	r7,r3,56
    138c:	39cb883a 	add	r5,r7,r7
    1390:	04c00074 	movhi	r19,1
    1394:	294b883a 	add	r5,r5,r5
    1398:	9cc16004 	addi	r19,r19,1408
    139c:	294b883a 	add	r5,r5,r5
    13a0:	994b883a 	add	r5,r19,r5
    13a4:	2c000317 	ldw	r16,12(r5)
    13a8:	2c000e26 	beq	r5,r16,13e4 <_malloc_r+0x164>
    13ac:	80800117 	ldw	r2,4(r16)
    13b0:	01bfff04 	movi	r6,-4
    13b4:	010003c4 	movi	r4,15
    13b8:	1184703a 	and	r2,r2,r6
    13bc:	1447c83a 	sub	r3,r2,r17
    13c0:	20c00716 	blt	r4,r3,13e0 <_malloc_r+0x160>
    13c4:	1800650e 	bge	r3,zero,155c <_malloc_r+0x2dc>
    13c8:	84000317 	ldw	r16,12(r16)
    13cc:	2c000526 	beq	r5,r16,13e4 <_malloc_r+0x164>
    13d0:	80800117 	ldw	r2,4(r16)
    13d4:	1184703a 	and	r2,r2,r6
    13d8:	1447c83a 	sub	r3,r2,r17
    13dc:	20fff90e 	bge	r4,r3,13c4 <_malloc_r+0x144>
    13e0:	39ffffc4 	addi	r7,r7,-1
    13e4:	38c00044 	addi	r3,r7,1
    13e8:	01800074 	movhi	r6,1
    13ec:	9c000417 	ldw	r16,16(r19)
    13f0:	31816004 	addi	r6,r6,1408
    13f4:	32400204 	addi	r9,r6,8
    13f8:	82410326 	beq	r16,r9,1808 <_malloc_r+0x588>
    13fc:	81000117 	ldw	r4,4(r16)
    1400:	00bfff04 	movi	r2,-4
    1404:	208e703a 	and	r7,r4,r2
    1408:	3c45c83a 	sub	r2,r7,r17
    140c:	010003c4 	movi	r4,15
    1410:	2080ee16 	blt	r4,r2,17cc <_malloc_r+0x54c>
    1414:	32400515 	stw	r9,20(r6)
    1418:	32400415 	stw	r9,16(r6)
    141c:	1000510e 	bge	r2,zero,1564 <_malloc_r+0x2e4>
    1420:	00807fc4 	movi	r2,511
    1424:	11c0ce36 	bltu	r2,r7,1760 <_malloc_r+0x4e0>
    1428:	3808d0fa 	srli	r4,r7,3
    142c:	01c00044 	movi	r7,1
    1430:	30800117 	ldw	r2,4(r6)
    1434:	210b883a 	add	r5,r4,r4
    1438:	294b883a 	add	r5,r5,r5
    143c:	2009d0ba 	srai	r4,r4,2
    1440:	294b883a 	add	r5,r5,r5
    1444:	298b883a 	add	r5,r5,r6
    1448:	2a000217 	ldw	r8,8(r5)
    144c:	3908983a 	sll	r4,r7,r4
    1450:	81400315 	stw	r5,12(r16)
    1454:	82000215 	stw	r8,8(r16)
    1458:	2088b03a 	or	r4,r4,r2
    145c:	2c000215 	stw	r16,8(r5)
    1460:	31000115 	stw	r4,4(r6)
    1464:	44000315 	stw	r16,12(r8)
    1468:	1805d0ba 	srai	r2,r3,2
    146c:	01400044 	movi	r5,1
    1470:	288a983a 	sll	r5,r5,r2
    1474:	21404336 	bltu	r4,r5,1584 <_malloc_r+0x304>
    1478:	2144703a 	and	r2,r4,r5
    147c:	10000a1e 	bne	r2,zero,14a8 <_malloc_r+0x228>
    1480:	00bfff04 	movi	r2,-4
    1484:	294b883a 	add	r5,r5,r5
    1488:	1886703a 	and	r3,r3,r2
    148c:	2144703a 	and	r2,r4,r5
    1490:	18c00104 	addi	r3,r3,4
    1494:	1000041e 	bne	r2,zero,14a8 <_malloc_r+0x228>
    1498:	294b883a 	add	r5,r5,r5
    149c:	2144703a 	and	r2,r4,r5
    14a0:	18c00104 	addi	r3,r3,4
    14a4:	103ffc26 	beq	r2,zero,1498 <_malloc_r+0x218>
    14a8:	023fff04 	movi	r8,-4
    14ac:	01c003c4 	movi	r7,15
    14b0:	18c5883a 	add	r2,r3,r3
    14b4:	1085883a 	add	r2,r2,r2
    14b8:	1085883a 	add	r2,r2,r2
    14bc:	9895883a 	add	r10,r19,r2
    14c0:	52c00304 	addi	r11,r10,12
    14c4:	1819883a 	mov	r12,r3
    14c8:	5c000017 	ldw	r16,0(r11)
    14cc:	59bffd04 	addi	r6,r11,-12
    14d0:	8180041e 	bne	r16,r6,14e4 <_malloc_r+0x264>
    14d4:	0000ce06 	br	1810 <_malloc_r+0x590>
    14d8:	2000d70e 	bge	r4,zero,1838 <_malloc_r+0x5b8>
    14dc:	84000317 	ldw	r16,12(r16)
    14e0:	8180cb26 	beq	r16,r6,1810 <_malloc_r+0x590>
    14e4:	80800117 	ldw	r2,4(r16)
    14e8:	1204703a 	and	r2,r2,r8
    14ec:	1449c83a 	sub	r4,r2,r17
    14f0:	393ff90e 	bge	r7,r4,14d8 <_malloc_r+0x258>
    14f4:	80800317 	ldw	r2,12(r16)
    14f8:	80c00217 	ldw	r3,8(r16)
    14fc:	89400054 	ori	r5,r17,1
    1500:	81400115 	stw	r5,4(r16)
    1504:	18800315 	stw	r2,12(r3)
    1508:	10c00215 	stw	r3,8(r2)
    150c:	8463883a 	add	r17,r16,r17
    1510:	9c400515 	stw	r17,20(r19)
    1514:	9c400415 	stw	r17,16(r19)
    1518:	20800054 	ori	r2,r4,1
    151c:	88800115 	stw	r2,4(r17)
    1520:	8a400315 	stw	r9,12(r17)
    1524:	8a400215 	stw	r9,8(r17)
    1528:	8923883a 	add	r17,r17,r4
    152c:	89000015 	stw	r4,0(r17)
    1530:	9009883a 	mov	r4,r18
    1534:	000db380 	call	db38 <__malloc_unlock>
    1538:	80800204 	addi	r2,r16,8
    153c:	003f7d06 	br	1334 <_malloc_r+0xb4>
    1540:	00800304 	movi	r2,12
    1544:	90800015 	stw	r2,0(r18)
    1548:	0005883a 	mov	r2,zero
    154c:	003f7906 	br	1334 <_malloc_r+0xb4>
    1550:	01401f84 	movi	r5,126
    1554:	01c00fc4 	movi	r7,63
    1558:	003f8d06 	br	1390 <_malloc_r+0x110>
    155c:	81000317 	ldw	r4,12(r16)
    1560:	003f6a06 	br	130c <_malloc_r+0x8c>
    1564:	81c5883a 	add	r2,r16,r7
    1568:	10c00117 	ldw	r3,4(r2)
    156c:	9009883a 	mov	r4,r18
    1570:	18c00054 	ori	r3,r3,1
    1574:	10c00115 	stw	r3,4(r2)
    1578:	000db380 	call	db38 <__malloc_unlock>
    157c:	80800204 	addi	r2,r16,8
    1580:	003f6c06 	br	1334 <_malloc_r+0xb4>
    1584:	9c000217 	ldw	r16,8(r19)
    1588:	00bfff04 	movi	r2,-4
    158c:	85800117 	ldw	r22,4(r16)
    1590:	b0ac703a 	and	r22,r22,r2
    1594:	b4400336 	bltu	r22,r17,15a4 <_malloc_r+0x324>
    1598:	b445c83a 	sub	r2,r22,r17
    159c:	00c003c4 	movi	r3,15
    15a0:	18805d16 	blt	r3,r2,1718 <_malloc_r+0x498>
    15a4:	05c00074 	movhi	r23,1
    15a8:	00800074 	movhi	r2,1
    15ac:	bdc70404 	addi	r23,r23,7184
    15b0:	108dcf04 	addi	r2,r2,14140
    15b4:	15400017 	ldw	r21,0(r2)
    15b8:	b9000017 	ldw	r4,0(r23)
    15bc:	00ffffc4 	movi	r3,-1
    15c0:	858d883a 	add	r6,r16,r22
    15c4:	8d6b883a 	add	r21,r17,r21
    15c8:	20c0e426 	beq	r4,r3,195c <_malloc_r+0x6dc>
    15cc:	ad4403c4 	addi	r21,r21,4111
    15d0:	00fc0004 	movi	r3,-4096
    15d4:	a8ea703a 	and	r21,r21,r3
    15d8:	9009883a 	mov	r4,r18
    15dc:	a80b883a 	mov	r5,r21
    15e0:	d9800015 	stw	r6,0(sp)
    15e4:	0001de80 	call	1de8 <_sbrk_r>
    15e8:	00ffffc4 	movi	r3,-1
    15ec:	1029883a 	mov	r20,r2
    15f0:	d9800017 	ldw	r6,0(sp)
    15f4:	10c0a426 	beq	r2,r3,1888 <_malloc_r+0x608>
    15f8:	1180a236 	bltu	r2,r6,1884 <_malloc_r+0x604>
    15fc:	07000074 	movhi	fp,1
    1600:	e70dda04 	addi	fp,fp,14184
    1604:	e0c00017 	ldw	r3,0(fp)
    1608:	a8c7883a 	add	r3,r21,r3
    160c:	e0c00015 	stw	r3,0(fp)
    1610:	3500da26 	beq	r6,r20,197c <_malloc_r+0x6fc>
    1614:	b9000017 	ldw	r4,0(r23)
    1618:	00bfffc4 	movi	r2,-1
    161c:	2080e426 	beq	r4,r2,19b0 <_malloc_r+0x730>
    1620:	a185c83a 	sub	r2,r20,r6
    1624:	1885883a 	add	r2,r3,r2
    1628:	e0800015 	stw	r2,0(fp)
    162c:	a0c001cc 	andi	r3,r20,7
    1630:	1800b526 	beq	r3,zero,1908 <_malloc_r+0x688>
    1634:	a0e9c83a 	sub	r20,r20,r3
    1638:	00840204 	movi	r2,4104
    163c:	a5000204 	addi	r20,r20,8
    1640:	10c7c83a 	sub	r3,r2,r3
    1644:	a545883a 	add	r2,r20,r21
    1648:	1083ffcc 	andi	r2,r2,4095
    164c:	18abc83a 	sub	r21,r3,r2
    1650:	9009883a 	mov	r4,r18
    1654:	a80b883a 	mov	r5,r21
    1658:	0001de80 	call	1de8 <_sbrk_r>
    165c:	00ffffc4 	movi	r3,-1
    1660:	10c0d026 	beq	r2,r3,19a4 <_malloc_r+0x724>
    1664:	1507c83a 	sub	r3,r2,r20
    1668:	a8c7883a 	add	r3,r21,r3
    166c:	18c00054 	ori	r3,r3,1
    1670:	e0800017 	ldw	r2,0(fp)
    1674:	9d000215 	stw	r20,8(r19)
    1678:	a0c00115 	stw	r3,4(r20)
    167c:	a887883a 	add	r3,r21,r2
    1680:	e0c00015 	stw	r3,0(fp)
    1684:	84c00e26 	beq	r16,r19,16c0 <_malloc_r+0x440>
    1688:	018003c4 	movi	r6,15
    168c:	3580a02e 	bgeu	r6,r22,1910 <_malloc_r+0x690>
    1690:	81400117 	ldw	r5,4(r16)
    1694:	013ffe04 	movi	r4,-8
    1698:	b0bffd04 	addi	r2,r22,-12
    169c:	1104703a 	and	r2,r2,r4
    16a0:	2900004c 	andi	r4,r5,1
    16a4:	1108b03a 	or	r4,r2,r4
    16a8:	81000115 	stw	r4,4(r16)
    16ac:	01400144 	movi	r5,5
    16b0:	8089883a 	add	r4,r16,r2
    16b4:	21400115 	stw	r5,4(r4)
    16b8:	21400215 	stw	r5,8(r4)
    16bc:	3080c036 	bltu	r6,r2,19c0 <_malloc_r+0x740>
    16c0:	00800074 	movhi	r2,1
    16c4:	108dce04 	addi	r2,r2,14136
    16c8:	11000017 	ldw	r4,0(r2)
    16cc:	20c0012e 	bgeu	r4,r3,16d4 <_malloc_r+0x454>
    16d0:	10c00015 	stw	r3,0(r2)
    16d4:	00800074 	movhi	r2,1
    16d8:	108dcd04 	addi	r2,r2,14132
    16dc:	11000017 	ldw	r4,0(r2)
    16e0:	9c000217 	ldw	r16,8(r19)
    16e4:	20c0012e 	bgeu	r4,r3,16ec <_malloc_r+0x46c>
    16e8:	10c00015 	stw	r3,0(r2)
    16ec:	80c00117 	ldw	r3,4(r16)
    16f0:	00bfff04 	movi	r2,-4
    16f4:	1886703a 	and	r3,r3,r2
    16f8:	1c45c83a 	sub	r2,r3,r17
    16fc:	1c400236 	bltu	r3,r17,1708 <_malloc_r+0x488>
    1700:	00c003c4 	movi	r3,15
    1704:	18800416 	blt	r3,r2,1718 <_malloc_r+0x498>
    1708:	9009883a 	mov	r4,r18
    170c:	000db380 	call	db38 <__malloc_unlock>
    1710:	0005883a 	mov	r2,zero
    1714:	003f0706 	br	1334 <_malloc_r+0xb4>
    1718:	88c00054 	ori	r3,r17,1
    171c:	80c00115 	stw	r3,4(r16)
    1720:	8463883a 	add	r17,r16,r17
    1724:	10800054 	ori	r2,r2,1
    1728:	9c400215 	stw	r17,8(r19)
    172c:	88800115 	stw	r2,4(r17)
    1730:	9009883a 	mov	r4,r18
    1734:	000db380 	call	db38 <__malloc_unlock>
    1738:	80800204 	addi	r2,r16,8
    173c:	003efd06 	br	1334 <_malloc_r+0xb4>
    1740:	00800504 	movi	r2,20
    1744:	10c0482e 	bgeu	r2,r3,1868 <_malloc_r+0x5e8>
    1748:	00801504 	movi	r2,84
    174c:	10c06836 	bltu	r2,r3,18f0 <_malloc_r+0x670>
    1750:	8806d33a 	srli	r3,r17,12
    1754:	19c01b84 	addi	r7,r3,110
    1758:	39cb883a 	add	r5,r7,r7
    175c:	003f0c06 	br	1390 <_malloc_r+0x110>
    1760:	3804d27a 	srli	r2,r7,9
    1764:	01000104 	movi	r4,4
    1768:	2080422e 	bgeu	r4,r2,1874 <_malloc_r+0x5f4>
    176c:	01000504 	movi	r4,20
    1770:	20807c36 	bltu	r4,r2,1964 <_malloc_r+0x6e4>
    1774:	110016c4 	addi	r4,r2,91
    1778:	210b883a 	add	r5,r4,r4
    177c:	294b883a 	add	r5,r5,r5
    1780:	294b883a 	add	r5,r5,r5
    1784:	994b883a 	add	r5,r19,r5
    1788:	28800217 	ldw	r2,8(r5)
    178c:	02000074 	movhi	r8,1
    1790:	42016004 	addi	r8,r8,1408
    1794:	11406326 	beq	r2,r5,1924 <_malloc_r+0x6a4>
    1798:	01bfff04 	movi	r6,-4
    179c:	11000117 	ldw	r4,4(r2)
    17a0:	2188703a 	and	r4,r4,r6
    17a4:	3900022e 	bgeu	r7,r4,17b0 <_malloc_r+0x530>
    17a8:	10800217 	ldw	r2,8(r2)
    17ac:	28bffb1e 	bne	r5,r2,179c <_malloc_r+0x51c>
    17b0:	11800317 	ldw	r6,12(r2)
    17b4:	99000117 	ldw	r4,4(r19)
    17b8:	81800315 	stw	r6,12(r16)
    17bc:	80800215 	stw	r2,8(r16)
    17c0:	34000215 	stw	r16,8(r6)
    17c4:	14000315 	stw	r16,12(r2)
    17c8:	003f2706 	br	1468 <_malloc_r+0x1e8>
    17cc:	88c00054 	ori	r3,r17,1
    17d0:	80c00115 	stw	r3,4(r16)
    17d4:	8463883a 	add	r17,r16,r17
    17d8:	34400515 	stw	r17,20(r6)
    17dc:	34400415 	stw	r17,16(r6)
    17e0:	10c00054 	ori	r3,r2,1
    17e4:	8a400315 	stw	r9,12(r17)
    17e8:	8a400215 	stw	r9,8(r17)
    17ec:	88c00115 	stw	r3,4(r17)
    17f0:	88a3883a 	add	r17,r17,r2
    17f4:	88800015 	stw	r2,0(r17)
    17f8:	9009883a 	mov	r4,r18
    17fc:	000db380 	call	db38 <__malloc_unlock>
    1800:	80800204 	addi	r2,r16,8
    1804:	003ecb06 	br	1334 <_malloc_r+0xb4>
    1808:	31000117 	ldw	r4,4(r6)
    180c:	003f1606 	br	1468 <_malloc_r+0x1e8>
    1810:	63000044 	addi	r12,r12,1
    1814:	608000cc 	andi	r2,r12,3
    1818:	5ac00204 	addi	r11,r11,8
    181c:	103f2a1e 	bne	r2,zero,14c8 <_malloc_r+0x248>
    1820:	00002106 	br	18a8 <_malloc_r+0x628>
    1824:	80800204 	addi	r2,r16,8
    1828:	84000517 	ldw	r16,20(r16)
    182c:	143eb31e 	bne	r2,r16,12fc <_malloc_r+0x7c>
    1830:	18c00084 	addi	r3,r3,2
    1834:	003eec06 	br	13e8 <_malloc_r+0x168>
    1838:	8085883a 	add	r2,r16,r2
    183c:	10c00117 	ldw	r3,4(r2)
    1840:	81000317 	ldw	r4,12(r16)
    1844:	81400217 	ldw	r5,8(r16)
    1848:	18c00054 	ori	r3,r3,1
    184c:	10c00115 	stw	r3,4(r2)
    1850:	29000315 	stw	r4,12(r5)
    1854:	21400215 	stw	r5,8(r4)
    1858:	9009883a 	mov	r4,r18
    185c:	000db380 	call	db38 <__malloc_unlock>
    1860:	80800204 	addi	r2,r16,8
    1864:	003eb306 	br	1334 <_malloc_r+0xb4>
    1868:	19c016c4 	addi	r7,r3,91
    186c:	39cb883a 	add	r5,r7,r7
    1870:	003ec706 	br	1390 <_malloc_r+0x110>
    1874:	3804d1ba 	srli	r2,r7,6
    1878:	11000e04 	addi	r4,r2,56
    187c:	210b883a 	add	r5,r4,r4
    1880:	003fbe06 	br	177c <_malloc_r+0x4fc>
    1884:	84ff5d26 	beq	r16,r19,15fc <_malloc_r+0x37c>
    1888:	9c000217 	ldw	r16,8(r19)
    188c:	00bfff04 	movi	r2,-4
    1890:	80c00117 	ldw	r3,4(r16)
    1894:	1886703a 	and	r3,r3,r2
    1898:	003f9706 	br	16f8 <_malloc_r+0x478>
    189c:	52800017 	ldw	r10,0(r10)
    18a0:	18ffffc4 	addi	r3,r3,-1
    18a4:	50805c1e 	bne	r10,r2,1a18 <_malloc_r+0x798>
    18a8:	190000cc 	andi	r4,r3,3
    18ac:	50bffe04 	addi	r2,r10,-8
    18b0:	203ffa1e 	bne	r4,zero,189c <_malloc_r+0x61c>
    18b4:	98800117 	ldw	r2,4(r19)
    18b8:	0146303a 	nor	r3,zero,r5
    18bc:	1884703a 	and	r2,r3,r2
    18c0:	98800115 	stw	r2,4(r19)
    18c4:	294b883a 	add	r5,r5,r5
    18c8:	117f2e36 	bltu	r2,r5,1584 <_malloc_r+0x304>
    18cc:	283f2d26 	beq	r5,zero,1584 <_malloc_r+0x304>
    18d0:	1146703a 	and	r3,r2,r5
    18d4:	1800521e 	bne	r3,zero,1a20 <_malloc_r+0x7a0>
    18d8:	6007883a 	mov	r3,r12
    18dc:	294b883a 	add	r5,r5,r5
    18e0:	1148703a 	and	r4,r2,r5
    18e4:	18c00104 	addi	r3,r3,4
    18e8:	203ffc26 	beq	r4,zero,18dc <_malloc_r+0x65c>
    18ec:	003ef006 	br	14b0 <_malloc_r+0x230>
    18f0:	00805504 	movi	r2,340
    18f4:	10c01336 	bltu	r2,r3,1944 <_malloc_r+0x6c4>
    18f8:	8806d3fa 	srli	r3,r17,15
    18fc:	19c01dc4 	addi	r7,r3,119
    1900:	39cb883a 	add	r5,r7,r7
    1904:	003ea206 	br	1390 <_malloc_r+0x110>
    1908:	00c40004 	movi	r3,4096
    190c:	003f4d06 	br	1644 <_malloc_r+0x3c4>
    1910:	00800044 	movi	r2,1
    1914:	a0800115 	stw	r2,4(r20)
    1918:	a021883a 	mov	r16,r20
    191c:	0007883a 	mov	r3,zero
    1920:	003f7506 	br	16f8 <_malloc_r+0x478>
    1924:	200bd0ba 	srai	r5,r4,2
    1928:	01800044 	movi	r6,1
    192c:	41000117 	ldw	r4,4(r8)
    1930:	314a983a 	sll	r5,r6,r5
    1934:	100d883a 	mov	r6,r2
    1938:	2908b03a 	or	r4,r5,r4
    193c:	41000115 	stw	r4,4(r8)
    1940:	003f9d06 	br	17b8 <_malloc_r+0x538>
    1944:	00815504 	movi	r2,1364
    1948:	10c01336 	bltu	r2,r3,1998 <_malloc_r+0x718>
    194c:	8806d4ba 	srli	r3,r17,18
    1950:	19c01f04 	addi	r7,r3,124
    1954:	39cb883a 	add	r5,r7,r7
    1958:	003e8d06 	br	1390 <_malloc_r+0x110>
    195c:	ad400404 	addi	r21,r21,16
    1960:	003f1d06 	br	15d8 <_malloc_r+0x358>
    1964:	01001504 	movi	r4,84
    1968:	20801c36 	bltu	r4,r2,19dc <_malloc_r+0x75c>
    196c:	3804d33a 	srli	r2,r7,12
    1970:	11001b84 	addi	r4,r2,110
    1974:	210b883a 	add	r5,r4,r4
    1978:	003f8006 	br	177c <_malloc_r+0x4fc>
    197c:	3083ffcc 	andi	r2,r6,4095
    1980:	103f241e 	bne	r2,zero,1614 <_malloc_r+0x394>
    1984:	99000217 	ldw	r4,8(r19)
    1988:	ad85883a 	add	r2,r21,r22
    198c:	10800054 	ori	r2,r2,1
    1990:	20800115 	stw	r2,4(r4)
    1994:	003f4a06 	br	16c0 <_malloc_r+0x440>
    1998:	01403f04 	movi	r5,252
    199c:	01c01f84 	movi	r7,126
    19a0:	003e7b06 	br	1390 <_malloc_r+0x110>
    19a4:	00c00044 	movi	r3,1
    19a8:	002b883a 	mov	r21,zero
    19ac:	003f3006 	br	1670 <_malloc_r+0x3f0>
    19b0:	00800074 	movhi	r2,1
    19b4:	10870404 	addi	r2,r2,7184
    19b8:	15000015 	stw	r20,0(r2)
    19bc:	003f1b06 	br	162c <_malloc_r+0x3ac>
    19c0:	9009883a 	mov	r4,r18
    19c4:	81400204 	addi	r5,r16,8
    19c8:	00061d80 	call	61d8 <_free_r>
    19cc:	00800074 	movhi	r2,1
    19d0:	108dda04 	addi	r2,r2,14184
    19d4:	10c00017 	ldw	r3,0(r2)
    19d8:	003f3906 	br	16c0 <_malloc_r+0x440>
    19dc:	01005504 	movi	r4,340
    19e0:	20800436 	bltu	r4,r2,19f4 <_malloc_r+0x774>
    19e4:	3804d3fa 	srli	r2,r7,15
    19e8:	11001dc4 	addi	r4,r2,119
    19ec:	210b883a 	add	r5,r4,r4
    19f0:	003f6206 	br	177c <_malloc_r+0x4fc>
    19f4:	01015504 	movi	r4,1364
    19f8:	20800436 	bltu	r4,r2,1a0c <_malloc_r+0x78c>
    19fc:	3804d4ba 	srli	r2,r7,18
    1a00:	11001f04 	addi	r4,r2,124
    1a04:	210b883a 	add	r5,r4,r4
    1a08:	003f5c06 	br	177c <_malloc_r+0x4fc>
    1a0c:	01403f04 	movi	r5,252
    1a10:	01001f84 	movi	r4,126
    1a14:	003f5906 	br	177c <_malloc_r+0x4fc>
    1a18:	98800117 	ldw	r2,4(r19)
    1a1c:	003fa906 	br	18c4 <_malloc_r+0x644>
    1a20:	6007883a 	mov	r3,r12
    1a24:	003ea206 	br	14b0 <_malloc_r+0x230>

00001a28 <memset>:
    1a28:	20c000cc 	andi	r3,r4,3
    1a2c:	2005883a 	mov	r2,r4
    1a30:	18004326 	beq	r3,zero,1b40 <memset+0x118>
    1a34:	31ffffc4 	addi	r7,r6,-1
    1a38:	30004026 	beq	r6,zero,1b3c <memset+0x114>
    1a3c:	2813883a 	mov	r9,r5
    1a40:	200d883a 	mov	r6,r4
    1a44:	2007883a 	mov	r3,r4
    1a48:	00000406 	br	1a5c <memset+0x34>
    1a4c:	3a3fffc4 	addi	r8,r7,-1
    1a50:	31800044 	addi	r6,r6,1
    1a54:	38003926 	beq	r7,zero,1b3c <memset+0x114>
    1a58:	400f883a 	mov	r7,r8
    1a5c:	18c00044 	addi	r3,r3,1
    1a60:	32400005 	stb	r9,0(r6)
    1a64:	1a0000cc 	andi	r8,r3,3
    1a68:	403ff81e 	bne	r8,zero,1a4c <memset+0x24>
    1a6c:	010000c4 	movi	r4,3
    1a70:	21c02d2e 	bgeu	r4,r7,1b28 <memset+0x100>
    1a74:	29803fcc 	andi	r6,r5,255
    1a78:	3008923a 	slli	r4,r6,8
    1a7c:	218cb03a 	or	r6,r4,r6
    1a80:	3008943a 	slli	r4,r6,16
    1a84:	218cb03a 	or	r6,r4,r6
    1a88:	010003c4 	movi	r4,15
    1a8c:	21c0182e 	bgeu	r4,r7,1af0 <memset+0xc8>
    1a90:	3b3ffc04 	addi	r12,r7,-16
    1a94:	6018d13a 	srli	r12,r12,4
    1a98:	1a000104 	addi	r8,r3,4
    1a9c:	1ac00204 	addi	r11,r3,8
    1aa0:	6008913a 	slli	r4,r12,4
    1aa4:	1a800304 	addi	r10,r3,12
    1aa8:	1813883a 	mov	r9,r3
    1aac:	21000504 	addi	r4,r4,20
    1ab0:	1909883a 	add	r4,r3,r4
    1ab4:	49800015 	stw	r6,0(r9)
    1ab8:	41800015 	stw	r6,0(r8)
    1abc:	59800015 	stw	r6,0(r11)
    1ac0:	51800015 	stw	r6,0(r10)
    1ac4:	42000404 	addi	r8,r8,16
    1ac8:	4a400404 	addi	r9,r9,16
    1acc:	5ac00404 	addi	r11,r11,16
    1ad0:	52800404 	addi	r10,r10,16
    1ad4:	413ff71e 	bne	r8,r4,1ab4 <memset+0x8c>
    1ad8:	63000044 	addi	r12,r12,1
    1adc:	6018913a 	slli	r12,r12,4
    1ae0:	39c003cc 	andi	r7,r7,15
    1ae4:	010000c4 	movi	r4,3
    1ae8:	1b07883a 	add	r3,r3,r12
    1aec:	21c00e2e 	bgeu	r4,r7,1b28 <memset+0x100>
    1af0:	1813883a 	mov	r9,r3
    1af4:	3811883a 	mov	r8,r7
    1af8:	010000c4 	movi	r4,3
    1afc:	49800015 	stw	r6,0(r9)
    1b00:	423fff04 	addi	r8,r8,-4
    1b04:	4a400104 	addi	r9,r9,4
    1b08:	223ffc36 	bltu	r4,r8,1afc <memset+0xd4>
    1b0c:	393fff04 	addi	r4,r7,-4
    1b10:	2008d0ba 	srli	r4,r4,2
    1b14:	39c000cc 	andi	r7,r7,3
    1b18:	21000044 	addi	r4,r4,1
    1b1c:	2109883a 	add	r4,r4,r4
    1b20:	2109883a 	add	r4,r4,r4
    1b24:	1907883a 	add	r3,r3,r4
    1b28:	38000426 	beq	r7,zero,1b3c <memset+0x114>
    1b2c:	19cf883a 	add	r7,r3,r7
    1b30:	19400005 	stb	r5,0(r3)
    1b34:	18c00044 	addi	r3,r3,1
    1b38:	19fffd1e 	bne	r3,r7,1b30 <memset+0x108>
    1b3c:	f800283a 	ret
    1b40:	2007883a 	mov	r3,r4
    1b44:	300f883a 	mov	r7,r6
    1b48:	003fc806 	br	1a6c <memset+0x44>

00001b4c <_printf_r>:
    1b4c:	defffd04 	addi	sp,sp,-12
    1b50:	dfc00015 	stw	ra,0(sp)
    1b54:	d9800115 	stw	r6,4(sp)
    1b58:	d9c00215 	stw	r7,8(sp)
    1b5c:	280d883a 	mov	r6,r5
    1b60:	21400217 	ldw	r5,8(r4)
    1b64:	d9c00104 	addi	r7,sp,4
    1b68:	0001ed40 	call	1ed4 <___vfprintf_internal_r>
    1b6c:	dfc00017 	ldw	ra,0(sp)
    1b70:	dec00304 	addi	sp,sp,12
    1b74:	f800283a 	ret

00001b78 <printf>:
    1b78:	defffc04 	addi	sp,sp,-16
    1b7c:	dfc00015 	stw	ra,0(sp)
    1b80:	d9400115 	stw	r5,4(sp)
    1b84:	d9800215 	stw	r6,8(sp)
    1b88:	d9c00315 	stw	r7,12(sp)
    1b8c:	00800074 	movhi	r2,1
    1b90:	10870304 	addi	r2,r2,7180
    1b94:	10800017 	ldw	r2,0(r2)
    1b98:	200b883a 	mov	r5,r4
    1b9c:	d9800104 	addi	r6,sp,4
    1ba0:	11000217 	ldw	r4,8(r2)
    1ba4:	0003ed00 	call	3ed0 <__vfprintf_internal>
    1ba8:	dfc00017 	ldw	ra,0(sp)
    1bac:	dec00404 	addi	sp,sp,16
    1bb0:	f800283a 	ret

00001bb4 <_putc_r>:
    1bb4:	defffc04 	addi	sp,sp,-16
    1bb8:	dc000215 	stw	r16,8(sp)
    1bbc:	dfc00315 	stw	ra,12(sp)
    1bc0:	2021883a 	mov	r16,r4
    1bc4:	20000226 	beq	r4,zero,1bd0 <_putc_r+0x1c>
    1bc8:	20800e17 	ldw	r2,56(r4)
    1bcc:	10001b26 	beq	r2,zero,1c3c <_putc_r+0x88>
    1bd0:	30800217 	ldw	r2,8(r6)
    1bd4:	10bfffc4 	addi	r2,r2,-1
    1bd8:	30800215 	stw	r2,8(r6)
    1bdc:	10000a16 	blt	r2,zero,1c08 <_putc_r+0x54>
    1be0:	30800017 	ldw	r2,0(r6)
    1be4:	11400005 	stb	r5,0(r2)
    1be8:	30800017 	ldw	r2,0(r6)
    1bec:	10c00044 	addi	r3,r2,1
    1bf0:	30c00015 	stw	r3,0(r6)
    1bf4:	10800003 	ldbu	r2,0(r2)
    1bf8:	dfc00317 	ldw	ra,12(sp)
    1bfc:	dc000217 	ldw	r16,8(sp)
    1c00:	dec00404 	addi	sp,sp,16
    1c04:	f800283a 	ret
    1c08:	30c00617 	ldw	r3,24(r6)
    1c0c:	10c00616 	blt	r2,r3,1c28 <_putc_r+0x74>
    1c10:	30800017 	ldw	r2,0(r6)
    1c14:	00c00284 	movi	r3,10
    1c18:	11400005 	stb	r5,0(r2)
    1c1c:	30800017 	ldw	r2,0(r6)
    1c20:	11400003 	ldbu	r5,0(r2)
    1c24:	28fff11e 	bne	r5,r3,1bec <_putc_r+0x38>
    1c28:	8009883a 	mov	r4,r16
    1c2c:	dfc00317 	ldw	ra,12(sp)
    1c30:	dc000217 	ldw	r16,8(sp)
    1c34:	dec00404 	addi	sp,sp,16
    1c38:	0003ef41 	jmpi	3ef4 <__swbuf_r>
    1c3c:	d9400015 	stw	r5,0(sp)
    1c40:	d9800115 	stw	r6,4(sp)
    1c44:	00060640 	call	6064 <__sinit>
    1c48:	d9800117 	ldw	r6,4(sp)
    1c4c:	d9400017 	ldw	r5,0(sp)
    1c50:	003fdf06 	br	1bd0 <_putc_r+0x1c>

00001c54 <putc>:
    1c54:	defffc04 	addi	sp,sp,-16
    1c58:	dc400115 	stw	r17,4(sp)
    1c5c:	04400074 	movhi	r17,1
    1c60:	8c470304 	addi	r17,r17,7180
    1c64:	dc800215 	stw	r18,8(sp)
    1c68:	2025883a 	mov	r18,r4
    1c6c:	89000017 	ldw	r4,0(r17)
    1c70:	dc000015 	stw	r16,0(sp)
    1c74:	dfc00315 	stw	ra,12(sp)
    1c78:	2821883a 	mov	r16,r5
    1c7c:	20000226 	beq	r4,zero,1c88 <putc+0x34>
    1c80:	20c00e17 	ldw	r3,56(r4)
    1c84:	18001a26 	beq	r3,zero,1cf0 <putc+0x9c>
    1c88:	80800217 	ldw	r2,8(r16)
    1c8c:	10bfffc4 	addi	r2,r2,-1
    1c90:	80800215 	stw	r2,8(r16)
    1c94:	10000c16 	blt	r2,zero,1cc8 <putc+0x74>
    1c98:	80800017 	ldw	r2,0(r16)
    1c9c:	14800005 	stb	r18,0(r2)
    1ca0:	80800017 	ldw	r2,0(r16)
    1ca4:	10c00044 	addi	r3,r2,1
    1ca8:	80c00015 	stw	r3,0(r16)
    1cac:	10800003 	ldbu	r2,0(r2)
    1cb0:	dfc00317 	ldw	ra,12(sp)
    1cb4:	dc800217 	ldw	r18,8(sp)
    1cb8:	dc400117 	ldw	r17,4(sp)
    1cbc:	dc000017 	ldw	r16,0(sp)
    1cc0:	dec00404 	addi	sp,sp,16
    1cc4:	f800283a 	ret
    1cc8:	80c00617 	ldw	r3,24(r16)
    1ccc:	10c00a16 	blt	r2,r3,1cf8 <putc+0xa4>
    1cd0:	80800017 	ldw	r2,0(r16)
    1cd4:	00c00284 	movi	r3,10
    1cd8:	14800005 	stb	r18,0(r2)
    1cdc:	80800017 	ldw	r2,0(r16)
    1ce0:	11400003 	ldbu	r5,0(r2)
    1ce4:	28ffef1e 	bne	r5,r3,1ca4 <putc+0x50>
    1ce8:	89000017 	ldw	r4,0(r17)
    1cec:	00000406 	br	1d00 <putc+0xac>
    1cf0:	00060640 	call	6064 <__sinit>
    1cf4:	003fe406 	br	1c88 <putc+0x34>
    1cf8:	89000017 	ldw	r4,0(r17)
    1cfc:	900b883a 	mov	r5,r18
    1d00:	800d883a 	mov	r6,r16
    1d04:	dfc00317 	ldw	ra,12(sp)
    1d08:	dc800217 	ldw	r18,8(sp)
    1d0c:	dc400117 	ldw	r17,4(sp)
    1d10:	dc000017 	ldw	r16,0(sp)
    1d14:	dec00404 	addi	sp,sp,16
    1d18:	0003ef41 	jmpi	3ef4 <__swbuf_r>

00001d1c <_puts_r>:
    1d1c:	defff604 	addi	sp,sp,-40
    1d20:	dc000715 	stw	r16,28(sp)
    1d24:	2021883a 	mov	r16,r4
    1d28:	2809883a 	mov	r4,r5
    1d2c:	dc400815 	stw	r17,32(sp)
    1d30:	dfc00915 	stw	ra,36(sp)
    1d34:	2823883a 	mov	r17,r5
    1d38:	0001e3c0 	call	1e3c <strlen>
    1d3c:	00c00074 	movhi	r3,1
    1d40:	18c70304 	addi	r3,r3,7180
    1d44:	18c00017 	ldw	r3,0(r3)
    1d48:	11000044 	addi	r4,r2,1
    1d4c:	d8800115 	stw	r2,4(sp)
    1d50:	18c00217 	ldw	r3,8(r3)
    1d54:	01400074 	movhi	r5,1
    1d58:	297f9a04 	addi	r5,r5,-408
    1d5c:	1880030b 	ldhu	r2,12(r3)
    1d60:	d9400215 	stw	r5,8(sp)
    1d64:	d9000615 	stw	r4,24(sp)
    1d68:	01400044 	movi	r5,1
    1d6c:	01000084 	movi	r4,2
    1d70:	d9000515 	stw	r4,20(sp)
    1d74:	dc400015 	stw	r17,0(sp)
    1d78:	d9400315 	stw	r5,12(sp)
    1d7c:	dec00415 	stw	sp,16(sp)
    1d80:	1108000c 	andi	r4,r2,8192
    1d84:	2000061e 	bne	r4,zero,1da0 <_puts_r+0x84>
    1d88:	19401917 	ldw	r5,100(r3)
    1d8c:	0137ffc4 	movi	r4,-8193
    1d90:	10880014 	ori	r2,r2,8192
    1d94:	2908703a 	and	r4,r5,r4
    1d98:	1880030d 	sth	r2,12(r3)
    1d9c:	19001915 	stw	r4,100(r3)
    1da0:	81400217 	ldw	r5,8(r16)
    1da4:	8009883a 	mov	r4,r16
    1da8:	d9800404 	addi	r6,sp,16
    1dac:	00064c80 	call	64c8 <__sfvwrite_r>
    1db0:	1000061e 	bne	r2,zero,1dcc <_puts_r+0xb0>
    1db4:	00800284 	movi	r2,10
    1db8:	dfc00917 	ldw	ra,36(sp)
    1dbc:	dc400817 	ldw	r17,32(sp)
    1dc0:	dc000717 	ldw	r16,28(sp)
    1dc4:	dec00a04 	addi	sp,sp,40
    1dc8:	f800283a 	ret
    1dcc:	00bfffc4 	movi	r2,-1
    1dd0:	003ff906 	br	1db8 <_puts_r+0x9c>

00001dd4 <puts>:
    1dd4:	00800074 	movhi	r2,1
    1dd8:	10870304 	addi	r2,r2,7180
    1ddc:	200b883a 	mov	r5,r4
    1de0:	11000017 	ldw	r4,0(r2)
    1de4:	0001d1c1 	jmpi	1d1c <_puts_r>

00001de8 <_sbrk_r>:
    1de8:	defffd04 	addi	sp,sp,-12
    1dec:	dc000015 	stw	r16,0(sp)
    1df0:	04000074 	movhi	r16,1
    1df4:	dc400115 	stw	r17,4(sp)
    1df8:	840dd004 	addi	r16,r16,14144
    1dfc:	2023883a 	mov	r17,r4
    1e00:	2809883a 	mov	r4,r5
    1e04:	dfc00215 	stw	ra,8(sp)
    1e08:	80000015 	stw	zero,0(r16)
    1e0c:	000dd040 	call	dd04 <sbrk>
    1e10:	00ffffc4 	movi	r3,-1
    1e14:	10c00526 	beq	r2,r3,1e2c <_sbrk_r+0x44>
    1e18:	dfc00217 	ldw	ra,8(sp)
    1e1c:	dc400117 	ldw	r17,4(sp)
    1e20:	dc000017 	ldw	r16,0(sp)
    1e24:	dec00304 	addi	sp,sp,12
    1e28:	f800283a 	ret
    1e2c:	80c00017 	ldw	r3,0(r16)
    1e30:	183ff926 	beq	r3,zero,1e18 <_sbrk_r+0x30>
    1e34:	88c00015 	stw	r3,0(r17)
    1e38:	003ff706 	br	1e18 <_sbrk_r+0x30>

00001e3c <strlen>:
    1e3c:	208000cc 	andi	r2,r4,3
    1e40:	10002026 	beq	r2,zero,1ec4 <strlen+0x88>
    1e44:	20800007 	ldb	r2,0(r4)
    1e48:	10002026 	beq	r2,zero,1ecc <strlen+0x90>
    1e4c:	2005883a 	mov	r2,r4
    1e50:	00000206 	br	1e5c <strlen+0x20>
    1e54:	10c00007 	ldb	r3,0(r2)
    1e58:	18001826 	beq	r3,zero,1ebc <strlen+0x80>
    1e5c:	10800044 	addi	r2,r2,1
    1e60:	10c000cc 	andi	r3,r2,3
    1e64:	183ffb1e 	bne	r3,zero,1e54 <strlen+0x18>
    1e68:	10c00017 	ldw	r3,0(r2)
    1e6c:	01ffbff4 	movhi	r7,65279
    1e70:	39ffbfc4 	addi	r7,r7,-257
    1e74:	00ca303a 	nor	r5,zero,r3
    1e78:	01a02074 	movhi	r6,32897
    1e7c:	19c7883a 	add	r3,r3,r7
    1e80:	31a02004 	addi	r6,r6,-32640
    1e84:	1946703a 	and	r3,r3,r5
    1e88:	1986703a 	and	r3,r3,r6
    1e8c:	1800091e 	bne	r3,zero,1eb4 <strlen+0x78>
    1e90:	10800104 	addi	r2,r2,4
    1e94:	10c00017 	ldw	r3,0(r2)
    1e98:	19cb883a 	add	r5,r3,r7
    1e9c:	00c6303a 	nor	r3,zero,r3
    1ea0:	28c6703a 	and	r3,r5,r3
    1ea4:	1986703a 	and	r3,r3,r6
    1ea8:	183ff926 	beq	r3,zero,1e90 <strlen+0x54>
    1eac:	00000106 	br	1eb4 <strlen+0x78>
    1eb0:	10800044 	addi	r2,r2,1
    1eb4:	10c00007 	ldb	r3,0(r2)
    1eb8:	183ffd1e 	bne	r3,zero,1eb0 <strlen+0x74>
    1ebc:	1105c83a 	sub	r2,r2,r4
    1ec0:	f800283a 	ret
    1ec4:	2005883a 	mov	r2,r4
    1ec8:	003fe706 	br	1e68 <strlen+0x2c>
    1ecc:	0005883a 	mov	r2,zero
    1ed0:	f800283a 	ret

00001ed4 <___vfprintf_internal_r>:
    1ed4:	defeb604 	addi	sp,sp,-1320
    1ed8:	dfc14915 	stw	ra,1316(sp)
    1edc:	ddc14715 	stw	r23,1308(sp)
    1ee0:	dd814615 	stw	r22,1304(sp)
    1ee4:	282f883a 	mov	r23,r5
    1ee8:	202d883a 	mov	r22,r4
    1eec:	d9812a15 	stw	r6,1192(sp)
    1ef0:	d9c12d15 	stw	r7,1204(sp)
    1ef4:	df014815 	stw	fp,1312(sp)
    1ef8:	dd414515 	stw	r21,1300(sp)
    1efc:	dd014415 	stw	r20,1296(sp)
    1f00:	dcc14315 	stw	r19,1292(sp)
    1f04:	dc814215 	stw	r18,1288(sp)
    1f08:	dc414115 	stw	r17,1284(sp)
    1f0c:	dc014015 	stw	r16,1280(sp)
    1f10:	0006b880 	call	6b88 <_localeconv_r>
    1f14:	10800017 	ldw	r2,0(r2)
    1f18:	1009883a 	mov	r4,r2
    1f1c:	d8813515 	stw	r2,1236(sp)
    1f20:	0001e3c0 	call	1e3c <strlen>
    1f24:	d8813815 	stw	r2,1248(sp)
    1f28:	b0000226 	beq	r22,zero,1f34 <___vfprintf_internal_r+0x60>
    1f2c:	b0800e17 	ldw	r2,56(r22)
    1f30:	10010426 	beq	r2,zero,2344 <___vfprintf_internal_r+0x470>
    1f34:	b8c0030b 	ldhu	r3,12(r23)
    1f38:	1908000c 	andi	r4,r3,8192
    1f3c:	1805883a 	mov	r2,r3
    1f40:	2000071e 	bne	r4,zero,1f60 <___vfprintf_internal_r+0x8c>
    1f44:	b9001917 	ldw	r4,100(r23)
    1f48:	18880014 	ori	r2,r3,8192
    1f4c:	00f7ffc4 	movi	r3,-8193
    1f50:	20c8703a 	and	r4,r4,r3
    1f54:	b880030d 	sth	r2,12(r23)
    1f58:	1007883a 	mov	r3,r2
    1f5c:	b9001915 	stw	r4,100(r23)
    1f60:	1100020c 	andi	r4,r2,8
    1f64:	2000a726 	beq	r4,zero,2204 <___vfprintf_internal_r+0x330>
    1f68:	b9000417 	ldw	r4,16(r23)
    1f6c:	2000a526 	beq	r4,zero,2204 <___vfprintf_internal_r+0x330>
    1f70:	1080068c 	andi	r2,r2,26
    1f74:	01000284 	movi	r4,10
    1f78:	1100ab26 	beq	r2,r4,2228 <___vfprintf_internal_r+0x354>
    1f7c:	dac10e04 	addi	r11,sp,1080
    1f80:	db010dc4 	addi	r12,sp,1079
    1f84:	d8800404 	addi	r2,sp,16
    1f88:	05000074 	movhi	r20,1
    1f8c:	dac12815 	stw	r11,1184(sp)
    1f90:	5b17c83a 	sub	r11,r11,r12
    1f94:	a53fab84 	addi	r20,r20,-338
    1f98:	db012915 	stw	r12,1188(sp)
    1f9c:	d8811e15 	stw	r2,1144(sp)
    1fa0:	d8012015 	stw	zero,1152(sp)
    1fa4:	d8011f15 	stw	zero,1148(sp)
    1fa8:	d8013315 	stw	zero,1228(sp)
    1fac:	d8013715 	stw	zero,1244(sp)
    1fb0:	d8013915 	stw	zero,1252(sp)
    1fb4:	d8013b15 	stw	zero,1260(sp)
    1fb8:	d8013a15 	stw	zero,1256(sp)
    1fbc:	d8012f15 	stw	zero,1212(sp)
    1fc0:	1011883a 	mov	r8,r2
    1fc4:	dac13c15 	stw	r11,1264(sp)
    1fc8:	db012a17 	ldw	r12,1192(sp)
    1fcc:	60800007 	ldb	r2,0(r12)
    1fd0:	1000df26 	beq	r2,zero,2350 <___vfprintf_internal_r+0x47c>
    1fd4:	00c00944 	movi	r3,37
    1fd8:	10c0dd26 	beq	r2,r3,2350 <___vfprintf_internal_r+0x47c>
    1fdc:	6021883a 	mov	r16,r12
    1fe0:	00000106 	br	1fe8 <___vfprintf_internal_r+0x114>
    1fe4:	10c08426 	beq	r2,r3,21f8 <___vfprintf_internal_r+0x324>
    1fe8:	84000044 	addi	r16,r16,1
    1fec:	80800007 	ldb	r2,0(r16)
    1ff0:	103ffc1e 	bne	r2,zero,1fe4 <___vfprintf_internal_r+0x110>
    1ff4:	dac12a17 	ldw	r11,1192(sp)
    1ff8:	82e3c83a 	sub	r17,r16,r11
    1ffc:	88000f26 	beq	r17,zero,203c <___vfprintf_internal_r+0x168>
    2000:	d8c12017 	ldw	r3,1152(sp)
    2004:	d8811f17 	ldw	r2,1148(sp)
    2008:	dac12a17 	ldw	r11,1192(sp)
    200c:	1c47883a 	add	r3,r3,r17
    2010:	10800044 	addi	r2,r2,1
    2014:	d8c12015 	stw	r3,1152(sp)
    2018:	42c00015 	stw	r11,0(r8)
    201c:	44400115 	stw	r17,4(r8)
    2020:	d8811f15 	stw	r2,1148(sp)
    2024:	00c001c4 	movi	r3,7
    2028:	1880b416 	blt	r3,r2,22fc <___vfprintf_internal_r+0x428>
    202c:	42000204 	addi	r8,r8,8
    2030:	db012f17 	ldw	r12,1212(sp)
    2034:	6459883a 	add	r12,r12,r17
    2038:	db012f15 	stw	r12,1212(sp)
    203c:	80800007 	ldb	r2,0(r16)
    2040:	1000b526 	beq	r2,zero,2318 <___vfprintf_internal_r+0x444>
    2044:	80800044 	addi	r2,r16,1
    2048:	84000047 	ldb	r16,1(r16)
    204c:	d8012785 	stb	zero,1182(sp)
    2050:	000d883a 	mov	r6,zero
    2054:	027fffc4 	movi	r9,-1
    2058:	d8012e15 	stw	zero,1208(sp)
    205c:	0023883a 	mov	r17,zero
    2060:	01001604 	movi	r4,88
    2064:	01400244 	movi	r5,9
    2068:	02800a84 	movi	r10,42
    206c:	01c01b04 	movi	r7,108
    2070:	10c00044 	addi	r3,r2,1
    2074:	80bff804 	addi	r2,r16,-32
    2078:	2082f236 	bltu	r4,r2,2c44 <___vfprintf_internal_r+0xd70>
    207c:	100490ba 	slli	r2,r2,2
    2080:	02c00034 	movhi	r11,0
    2084:	5ac82504 	addi	r11,r11,8340
    2088:	12c5883a 	add	r2,r2,r11
    208c:	10800017 	ldw	r2,0(r2)
    2090:	1000683a 	jmp	r2
    2094:	00002a8c 	andi	zero,zero,170
    2098:	00002c44 	movi	zero,177
    209c:	00002c44 	movi	zero,177
    20a0:	00002aac 	andhi	zero,zero,170
    20a4:	00002c44 	movi	zero,177
    20a8:	00002c44 	movi	zero,177
    20ac:	00002c44 	movi	zero,177
    20b0:	00002c44 	movi	zero,177
    20b4:	00002c44 	movi	zero,177
    20b8:	00002c44 	movi	zero,177
    20bc:	00002c08 	cmpgei	zero,zero,176
    20c0:	00002c34 	movhi	zero,176
    20c4:	00002c44 	movi	zero,177
    20c8:	00002358 	cmpnei	zero,zero,141
    20cc:	00002368 	cmpgeui	zero,zero,141
    20d0:	00002c44 	movi	zero,177
    20d4:	000023a8 	cmpgeui	zero,zero,142
    20d8:	0000289c 	xori	zero,zero,162
    20dc:	0000289c 	xori	zero,zero,162
    20e0:	0000289c 	xori	zero,zero,162
    20e4:	0000289c 	xori	zero,zero,162
    20e8:	0000289c 	xori	zero,zero,162
    20ec:	0000289c 	xori	zero,zero,162
    20f0:	0000289c 	xori	zero,zero,162
    20f4:	0000289c 	xori	zero,zero,162
    20f8:	0000289c 	xori	zero,zero,162
    20fc:	00002c44 	movi	zero,177
    2100:	00002c44 	movi	zero,177
    2104:	00002c44 	movi	zero,177
    2108:	00002c44 	movi	zero,177
    210c:	00002c44 	movi	zero,177
    2110:	00002c44 	movi	zero,177
    2114:	00002c44 	movi	zero,177
    2118:	00002c44 	movi	zero,177
    211c:	00002c44 	movi	zero,177
    2120:	00002c44 	movi	zero,177
    2124:	000028d0 	cmplti	zero,zero,163
    2128:	000023b8 	rdprs	zero,zero,142
    212c:	00002c44 	movi	zero,177
    2130:	000023b8 	rdprs	zero,zero,142
    2134:	00002c44 	movi	zero,177
    2138:	00002c44 	movi	zero,177
    213c:	00002c44 	movi	zero,177
    2140:	00002c44 	movi	zero,177
    2144:	0000245c 	xori	zero,zero,145
    2148:	00002c44 	movi	zero,177
    214c:	00002c44 	movi	zero,177
    2150:	0000246c 	andhi	zero,zero,145
    2154:	00002c44 	movi	zero,177
    2158:	00002c44 	movi	zero,177
    215c:	00002c44 	movi	zero,177
    2160:	00002c44 	movi	zero,177
    2164:	00002c44 	movi	zero,177
    2168:	00002868 	cmpgeui	zero,zero,161
    216c:	00002c44 	movi	zero,177
    2170:	00002c44 	movi	zero,177
    2174:	00002918 	cmpnei	zero,zero,164
    2178:	00002c44 	movi	zero,177
    217c:	00002c44 	movi	zero,177
    2180:	00002c44 	movi	zero,177
    2184:	00002c44 	movi	zero,177
    2188:	00002c44 	movi	zero,177
    218c:	00002c44 	movi	zero,177
    2190:	00002c44 	movi	zero,177
    2194:	00002c44 	movi	zero,177
    2198:	00002c44 	movi	zero,177
    219c:	00002c44 	movi	zero,177
    21a0:	00002b0c 	andi	zero,zero,172
    21a4:	00002abc 	xorhi	zero,zero,170
    21a8:	000023b8 	rdprs	zero,zero,142
    21ac:	000023b8 	rdprs	zero,zero,142
    21b0:	000023b8 	rdprs	zero,zero,142
    21b4:	00002afc 	xorhi	zero,zero,171
    21b8:	00002abc 	xorhi	zero,zero,170
    21bc:	00002c44 	movi	zero,177
    21c0:	00002c44 	movi	zero,177
    21c4:	00002a04 	movi	zero,168
    21c8:	00002c44 	movi	zero,177
    21cc:	00002a18 	cmpnei	zero,zero,168
    21d0:	00002a4c 	andi	zero,zero,169
    21d4:	00002b4c 	andi	zero,zero,173
    21d8:	00002974 	movhi	zero,165
    21dc:	00002c44 	movi	zero,177
    21e0:	00002b94 	movui	zero,174
    21e4:	00002c44 	movi	zero,177
    21e8:	00002984 	movi	zero,166
    21ec:	00002c44 	movi	zero,177
    21f0:	00002c44 	movi	zero,177
    21f4:	000029c4 	movi	zero,167
    21f8:	db012a17 	ldw	r12,1192(sp)
    21fc:	8323c83a 	sub	r17,r16,r12
    2200:	003f7e06 	br	1ffc <___vfprintf_internal_r+0x128>
    2204:	b009883a 	mov	r4,r22
    2208:	b80b883a 	mov	r5,r23
    220c:	00040640 	call	4064 <__swsetup_r>
    2210:	10002d1e 	bne	r2,zero,22c8 <___vfprintf_internal_r+0x3f4>
    2214:	b8c0030b 	ldhu	r3,12(r23)
    2218:	01000284 	movi	r4,10
    221c:	1805883a 	mov	r2,r3
    2220:	1080068c 	andi	r2,r2,26
    2224:	113f551e 	bne	r2,r4,1f7c <___vfprintf_internal_r+0xa8>
    2228:	b880038b 	ldhu	r2,14(r23)
    222c:	113fffcc 	andi	r4,r2,65535
    2230:	2120001c 	xori	r4,r4,32768
    2234:	21200004 	addi	r4,r4,-32768
    2238:	203f5016 	blt	r4,zero,1f7c <___vfprintf_internal_r+0xa8>
    223c:	bac01917 	ldw	r11,100(r23)
    2240:	ba800717 	ldw	r10,28(r23)
    2244:	ba400917 	ldw	r9,36(r23)
    2248:	d9812a17 	ldw	r6,1192(sp)
    224c:	d9c12d17 	ldw	r7,1204(sp)
    2250:	02010004 	movi	r8,1024
    2254:	18ffff4c 	andi	r3,r3,65533
    2258:	d881078d 	sth	r2,1054(sp)
    225c:	b009883a 	mov	r4,r22
    2260:	d8800404 	addi	r2,sp,16
    2264:	d9410404 	addi	r5,sp,1040
    2268:	d8c1070d 	sth	r3,1052(sp)
    226c:	dac11d15 	stw	r11,1140(sp)
    2270:	da810b15 	stw	r10,1068(sp)
    2274:	da410d15 	stw	r9,1076(sp)
    2278:	d8810415 	stw	r2,1040(sp)
    227c:	d8810815 	stw	r2,1056(sp)
    2280:	da010615 	stw	r8,1048(sp)
    2284:	da010915 	stw	r8,1060(sp)
    2288:	d8010a15 	stw	zero,1064(sp)
    228c:	0001ed40 	call	1ed4 <___vfprintf_internal_r>
    2290:	1021883a 	mov	r16,r2
    2294:	10000416 	blt	r2,zero,22a8 <___vfprintf_internal_r+0x3d4>
    2298:	b009883a 	mov	r4,r22
    229c:	d9410404 	addi	r5,sp,1040
    22a0:	0005abc0 	call	5abc <_fflush_r>
    22a4:	1006ee1e 	bne	r2,zero,3e60 <___vfprintf_internal_r+0x1f8c>
    22a8:	d881070b 	ldhu	r2,1052(sp)
    22ac:	1080100c 	andi	r2,r2,64
    22b0:	10000326 	beq	r2,zero,22c0 <___vfprintf_internal_r+0x3ec>
    22b4:	b880030b 	ldhu	r2,12(r23)
    22b8:	10801014 	ori	r2,r2,64
    22bc:	b880030d 	sth	r2,12(r23)
    22c0:	8005883a 	mov	r2,r16
    22c4:	00000106 	br	22cc <___vfprintf_internal_r+0x3f8>
    22c8:	00bfffc4 	movi	r2,-1
    22cc:	dfc14917 	ldw	ra,1316(sp)
    22d0:	df014817 	ldw	fp,1312(sp)
    22d4:	ddc14717 	ldw	r23,1308(sp)
    22d8:	dd814617 	ldw	r22,1304(sp)
    22dc:	dd414517 	ldw	r21,1300(sp)
    22e0:	dd014417 	ldw	r20,1296(sp)
    22e4:	dcc14317 	ldw	r19,1292(sp)
    22e8:	dc814217 	ldw	r18,1288(sp)
    22ec:	dc414117 	ldw	r17,1284(sp)
    22f0:	dc014017 	ldw	r16,1280(sp)
    22f4:	dec14a04 	addi	sp,sp,1320
    22f8:	f800283a 	ret
    22fc:	b009883a 	mov	r4,r22
    2300:	b80b883a 	mov	r5,r23
    2304:	d9811e04 	addi	r6,sp,1144
    2308:	000896c0 	call	896c <__sprint_r>
    230c:	1000081e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    2310:	da000404 	addi	r8,sp,16
    2314:	003f4606 	br	2030 <___vfprintf_internal_r+0x15c>
    2318:	d8812017 	ldw	r2,1152(sp)
    231c:	10000426 	beq	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    2320:	b009883a 	mov	r4,r22
    2324:	b80b883a 	mov	r5,r23
    2328:	d9811e04 	addi	r6,sp,1144
    232c:	000896c0 	call	896c <__sprint_r>
    2330:	b880030b 	ldhu	r2,12(r23)
    2334:	1080100c 	andi	r2,r2,64
    2338:	103fe31e 	bne	r2,zero,22c8 <___vfprintf_internal_r+0x3f4>
    233c:	d8812f17 	ldw	r2,1212(sp)
    2340:	003fe206 	br	22cc <___vfprintf_internal_r+0x3f8>
    2344:	b009883a 	mov	r4,r22
    2348:	00060640 	call	6064 <__sinit>
    234c:	003ef906 	br	1f34 <___vfprintf_internal_r+0x60>
    2350:	dc012a17 	ldw	r16,1192(sp)
    2354:	003f3906 	br	203c <___vfprintf_internal_r+0x168>
    2358:	1805883a 	mov	r2,r3
    235c:	8c400114 	ori	r17,r17,4
    2360:	1c000007 	ldb	r16,0(r3)
    2364:	003f4206 	br	2070 <___vfprintf_internal_r+0x19c>
    2368:	1c000007 	ldb	r16,0(r3)
    236c:	18800044 	addi	r2,r3,1
    2370:	8286b326 	beq	r16,r10,3e40 <___vfprintf_internal_r+0x1f6c>
    2374:	82fff404 	addi	r11,r16,-48
    2378:	1007883a 	mov	r3,r2
    237c:	0013883a 	mov	r9,zero
    2380:	2aff3c36 	bltu	r5,r11,2074 <___vfprintf_internal_r+0x1a0>
    2384:	1c000007 	ldb	r16,0(r3)
    2388:	4a4002a4 	muli	r9,r9,10
    238c:	18c00044 	addi	r3,r3,1
    2390:	5a53883a 	add	r9,r11,r9
    2394:	82fff404 	addi	r11,r16,-48
    2398:	2afffa2e 	bgeu	r5,r11,2384 <___vfprintf_internal_r+0x4b0>
    239c:	483f350e 	bge	r9,zero,2074 <___vfprintf_internal_r+0x1a0>
    23a0:	027fffc4 	movi	r9,-1
    23a4:	003f3306 	br	2074 <___vfprintf_internal_r+0x1a0>
    23a8:	8c402014 	ori	r17,r17,128
    23ac:	1805883a 	mov	r2,r3
    23b0:	1c000007 	ldb	r16,0(r3)
    23b4:	003f2e06 	br	2070 <___vfprintf_internal_r+0x19c>
    23b8:	db012d17 	ldw	r12,1204(sp)
    23bc:	dac12d17 	ldw	r11,1204(sp)
    23c0:	d8c12a15 	stw	r3,1192(sp)
    23c4:	63000017 	ldw	r12,0(r12)
    23c8:	5ac00117 	ldw	r11,4(r11)
    23cc:	d9812785 	stb	r6,1182(sp)
    23d0:	6009883a 	mov	r4,r12
    23d4:	580b883a 	mov	r5,r11
    23d8:	db013715 	stw	r12,1244(sp)
    23dc:	da013f15 	stw	r8,1276(sp)
    23e0:	da413e15 	stw	r9,1272(sp)
    23e4:	dac13915 	stw	r11,1252(sp)
    23e8:	000861c0 	call	861c <__fpclassifyd>
    23ec:	db012d17 	ldw	r12,1204(sp)
    23f0:	04800044 	movi	r18,1
    23f4:	da013f17 	ldw	r8,1276(sp)
    23f8:	64c00204 	addi	r19,r12,8
    23fc:	da413e17 	ldw	r9,1272(sp)
    2400:	d9013717 	ldw	r4,1244(sp)
    2404:	d9413917 	ldw	r5,1252(sp)
    2408:	1484581e 	bne	r2,r18,356c <___vfprintf_internal_r+0x1698>
    240c:	000d883a 	mov	r6,zero
    2410:	000f883a 	mov	r7,zero
    2414:	000c2240 	call	c224 <__ledf2>
    2418:	da013f17 	ldw	r8,1276(sp)
    241c:	1005ef16 	blt	r2,zero,3bdc <___vfprintf_internal_r+0x1d08>
    2420:	dd412783 	ldbu	r21,1182(sp)
    2424:	008011c4 	movi	r2,71
    2428:	14053b0e 	bge	r2,r16,3918 <___vfprintf_internal_r+0x1a44>
    242c:	00c00074 	movhi	r3,1
    2430:	18ff9c04 	addi	r3,r3,-400
    2434:	d8c13115 	stw	r3,1220(sp)
    2438:	02c000c4 	movi	r11,3
    243c:	00bfdfc4 	movi	r2,-129
    2440:	dac12b15 	stw	r11,1196(sp)
    2444:	88a2703a 	and	r17,r17,r2
    2448:	dcc12d15 	stw	r19,1204(sp)
    244c:	5825883a 	mov	r18,r11
    2450:	d8013215 	stw	zero,1224(sp)
    2454:	d8013415 	stw	zero,1232(sp)
    2458:	00003206 	br	2524 <___vfprintf_internal_r+0x650>
    245c:	8c400214 	ori	r17,r17,8
    2460:	1805883a 	mov	r2,r3
    2464:	1c000007 	ldb	r16,0(r3)
    2468:	003f0106 	br	2070 <___vfprintf_internal_r+0x19c>
    246c:	8c400414 	ori	r17,r17,16
    2470:	d8c12a15 	stw	r3,1192(sp)
    2474:	88c0080c 	andi	r3,r17,32
    2478:	d8812d17 	ldw	r2,1204(sp)
    247c:	18017726 	beq	r3,zero,2a5c <___vfprintf_internal_r+0xb88>
    2480:	db012d17 	ldw	r12,1204(sp)
    2484:	14c00017 	ldw	r19,0(r2)
    2488:	17000117 	ldw	fp,4(r2)
    248c:	63000204 	addi	r12,r12,8
    2490:	db012d15 	stw	r12,1204(sp)
    2494:	0005883a 	mov	r2,zero
    2498:	9f06b03a 	or	r3,r19,fp
    249c:	d8012785 	stb	zero,1182(sp)
    24a0:	da413215 	stw	r9,1224(sp)
    24a4:	002b883a 	mov	r21,zero
    24a8:	48000216 	blt	r9,zero,24b4 <___vfprintf_internal_r+0x5e0>
    24ac:	013fdfc4 	movi	r4,-129
    24b0:	8922703a 	and	r17,r17,r4
    24b4:	1801ed1e 	bne	r3,zero,2c6c <___vfprintf_internal_r+0xd98>
    24b8:	4802e026 	beq	r9,zero,303c <___vfprintf_internal_r+0x1168>
    24bc:	10803fcc 	andi	r2,r2,255
    24c0:	00c00044 	movi	r3,1
    24c4:	10c20f26 	beq	r2,r3,2d04 <___vfprintf_internal_r+0xe30>
    24c8:	00c00084 	movi	r3,2
    24cc:	10c2fd26 	beq	r2,r3,30c4 <___vfprintf_internal_r+0x11f0>
    24d0:	d8c10e04 	addi	r3,sp,1080
    24d4:	9808d0fa 	srli	r4,r19,3
    24d8:	e00a977a 	slli	r5,fp,29
    24dc:	e038d0fa 	srli	fp,fp,3
    24e0:	9cc001cc 	andi	r19,r19,7
    24e4:	98800c04 	addi	r2,r19,48
    24e8:	18ffffc4 	addi	r3,r3,-1
    24ec:	2926b03a 	or	r19,r5,r4
    24f0:	18800005 	stb	r2,0(r3)
    24f4:	9f08b03a 	or	r4,r19,fp
    24f8:	203ff61e 	bne	r4,zero,24d4 <___vfprintf_internal_r+0x600>
    24fc:	8900004c 	andi	r4,r17,1
    2500:	d8c13115 	stw	r3,1220(sp)
    2504:	2003791e 	bne	r4,zero,32ec <___vfprintf_internal_r+0x1418>
    2508:	dac12817 	ldw	r11,1184(sp)
    250c:	58e5c83a 	sub	r18,r11,r3
    2510:	9005883a 	mov	r2,r18
    2514:	9240010e 	bge	r18,r9,251c <___vfprintf_internal_r+0x648>
    2518:	4805883a 	mov	r2,r9
    251c:	d8812b15 	stw	r2,1196(sp)
    2520:	d8013415 	stw	zero,1232(sp)
    2524:	a8803fcc 	andi	r2,r21,255
    2528:	1080201c 	xori	r2,r2,128
    252c:	10bfe004 	addi	r2,r2,-128
    2530:	10000326 	beq	r2,zero,2540 <___vfprintf_internal_r+0x66c>
    2534:	db012b17 	ldw	r12,1196(sp)
    2538:	63000044 	addi	r12,r12,1
    253c:	db012b15 	stw	r12,1196(sp)
    2540:	88c0008c 	andi	r3,r17,2
    2544:	d8c12c15 	stw	r3,1200(sp)
    2548:	18000326 	beq	r3,zero,2558 <___vfprintf_internal_r+0x684>
    254c:	dac12b17 	ldw	r11,1196(sp)
    2550:	5ac00084 	addi	r11,r11,2
    2554:	dac12b15 	stw	r11,1196(sp)
    2558:	8b00210c 	andi	r12,r17,132
    255c:	db013015 	stw	r12,1216(sp)
    2560:	6001c01e 	bne	r12,zero,2c64 <___vfprintf_internal_r+0xd90>
    2564:	dac12e17 	ldw	r11,1208(sp)
    2568:	db012b17 	ldw	r12,1196(sp)
    256c:	5b39c83a 	sub	fp,r11,r12
    2570:	0701bc0e 	bge	zero,fp,2c64 <___vfprintf_internal_r+0xd90>
    2574:	02400404 	movi	r9,16
    2578:	d8c12017 	ldw	r3,1152(sp)
    257c:	d8811f17 	ldw	r2,1148(sp)
    2580:	4f05220e 	bge	r9,fp,3a0c <___vfprintf_internal_r+0x1b38>
    2584:	01400074 	movhi	r5,1
    2588:	297faf84 	addi	r5,r5,-322
    258c:	d9413615 	stw	r5,1240(sp)
    2590:	482b883a 	mov	r21,r9
    2594:	04c001c4 	movi	r19,7
    2598:	00000306 	br	25a8 <___vfprintf_internal_r+0x6d4>
    259c:	e73ffc04 	addi	fp,fp,-16
    25a0:	42000204 	addi	r8,r8,8
    25a4:	af00130e 	bge	r21,fp,25f4 <___vfprintf_internal_r+0x720>
    25a8:	02c00074 	movhi	r11,1
    25ac:	18c00404 	addi	r3,r3,16
    25b0:	10800044 	addi	r2,r2,1
    25b4:	5affaf84 	addi	r11,r11,-322
    25b8:	42c00015 	stw	r11,0(r8)
    25bc:	45400115 	stw	r21,4(r8)
    25c0:	d8c12015 	stw	r3,1152(sp)
    25c4:	d8811f15 	stw	r2,1148(sp)
    25c8:	98bff40e 	bge	r19,r2,259c <___vfprintf_internal_r+0x6c8>
    25cc:	b009883a 	mov	r4,r22
    25d0:	b80b883a 	mov	r5,r23
    25d4:	d9811e04 	addi	r6,sp,1144
    25d8:	000896c0 	call	896c <__sprint_r>
    25dc:	103f541e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    25e0:	e73ffc04 	addi	fp,fp,-16
    25e4:	d8c12017 	ldw	r3,1152(sp)
    25e8:	d8811f17 	ldw	r2,1148(sp)
    25ec:	da000404 	addi	r8,sp,16
    25f0:	af3fed16 	blt	r21,fp,25a8 <___vfprintf_internal_r+0x6d4>
    25f4:	db013617 	ldw	r12,1240(sp)
    25f8:	e0c7883a 	add	r3,fp,r3
    25fc:	10800044 	addi	r2,r2,1
    2600:	43000015 	stw	r12,0(r8)
    2604:	47000115 	stw	fp,4(r8)
    2608:	d8c12015 	stw	r3,1152(sp)
    260c:	d8811f15 	stw	r2,1148(sp)
    2610:	010001c4 	movi	r4,7
    2614:	2082f416 	blt	r4,r2,31e8 <___vfprintf_internal_r+0x1314>
    2618:	d8812787 	ldb	r2,1182(sp)
    261c:	42000204 	addi	r8,r8,8
    2620:	10000c26 	beq	r2,zero,2654 <___vfprintf_internal_r+0x780>
    2624:	d8811f17 	ldw	r2,1148(sp)
    2628:	d9012784 	addi	r4,sp,1182
    262c:	18c00044 	addi	r3,r3,1
    2630:	10800044 	addi	r2,r2,1
    2634:	41000015 	stw	r4,0(r8)
    2638:	01000044 	movi	r4,1
    263c:	41000115 	stw	r4,4(r8)
    2640:	d8c12015 	stw	r3,1152(sp)
    2644:	d8811f15 	stw	r2,1148(sp)
    2648:	010001c4 	movi	r4,7
    264c:	20828d16 	blt	r4,r2,3084 <___vfprintf_internal_r+0x11b0>
    2650:	42000204 	addi	r8,r8,8
    2654:	dac12c17 	ldw	r11,1200(sp)
    2658:	58000c26 	beq	r11,zero,268c <___vfprintf_internal_r+0x7b8>
    265c:	d8811f17 	ldw	r2,1148(sp)
    2660:	d9012704 	addi	r4,sp,1180
    2664:	18c00084 	addi	r3,r3,2
    2668:	10800044 	addi	r2,r2,1
    266c:	41000015 	stw	r4,0(r8)
    2670:	01000084 	movi	r4,2
    2674:	41000115 	stw	r4,4(r8)
    2678:	d8c12015 	stw	r3,1152(sp)
    267c:	d8811f15 	stw	r2,1148(sp)
    2680:	010001c4 	movi	r4,7
    2684:	20828716 	blt	r4,r2,30a4 <___vfprintf_internal_r+0x11d0>
    2688:	42000204 	addi	r8,r8,8
    268c:	db013017 	ldw	r12,1216(sp)
    2690:	00802004 	movi	r2,128
    2694:	6081e926 	beq	r12,r2,2e3c <___vfprintf_internal_r+0xf68>
    2698:	db013217 	ldw	r12,1224(sp)
    269c:	64abc83a 	sub	r21,r12,r18
    26a0:	0540260e 	bge	zero,r21,273c <___vfprintf_internal_r+0x868>
    26a4:	07000404 	movi	fp,16
    26a8:	d8811f17 	ldw	r2,1148(sp)
    26ac:	e5443d0e 	bge	fp,r21,37a4 <___vfprintf_internal_r+0x18d0>
    26b0:	01400074 	movhi	r5,1
    26b4:	297fab84 	addi	r5,r5,-338
    26b8:	d9412c15 	stw	r5,1200(sp)
    26bc:	04c001c4 	movi	r19,7
    26c0:	00000306 	br	26d0 <___vfprintf_internal_r+0x7fc>
    26c4:	ad7ffc04 	addi	r21,r21,-16
    26c8:	42000204 	addi	r8,r8,8
    26cc:	e540110e 	bge	fp,r21,2714 <___vfprintf_internal_r+0x840>
    26d0:	18c00404 	addi	r3,r3,16
    26d4:	10800044 	addi	r2,r2,1
    26d8:	45000015 	stw	r20,0(r8)
    26dc:	47000115 	stw	fp,4(r8)
    26e0:	d8c12015 	stw	r3,1152(sp)
    26e4:	d8811f15 	stw	r2,1148(sp)
    26e8:	98bff60e 	bge	r19,r2,26c4 <___vfprintf_internal_r+0x7f0>
    26ec:	b009883a 	mov	r4,r22
    26f0:	b80b883a 	mov	r5,r23
    26f4:	d9811e04 	addi	r6,sp,1144
    26f8:	000896c0 	call	896c <__sprint_r>
    26fc:	103f0c1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    2700:	ad7ffc04 	addi	r21,r21,-16
    2704:	d8c12017 	ldw	r3,1152(sp)
    2708:	d8811f17 	ldw	r2,1148(sp)
    270c:	da000404 	addi	r8,sp,16
    2710:	e57fef16 	blt	fp,r21,26d0 <___vfprintf_internal_r+0x7fc>
    2714:	dac12c17 	ldw	r11,1200(sp)
    2718:	1d47883a 	add	r3,r3,r21
    271c:	10800044 	addi	r2,r2,1
    2720:	42c00015 	stw	r11,0(r8)
    2724:	45400115 	stw	r21,4(r8)
    2728:	d8c12015 	stw	r3,1152(sp)
    272c:	d8811f15 	stw	r2,1148(sp)
    2730:	010001c4 	movi	r4,7
    2734:	20824b16 	blt	r4,r2,3064 <___vfprintf_internal_r+0x1190>
    2738:	42000204 	addi	r8,r8,8
    273c:	8880400c 	andi	r2,r17,256
    2740:	1001761e 	bne	r2,zero,2d1c <___vfprintf_internal_r+0xe48>
    2744:	d8811f17 	ldw	r2,1148(sp)
    2748:	db013117 	ldw	r12,1220(sp)
    274c:	1c87883a 	add	r3,r3,r18
    2750:	10800044 	addi	r2,r2,1
    2754:	43000015 	stw	r12,0(r8)
    2758:	44800115 	stw	r18,4(r8)
    275c:	d8c12015 	stw	r3,1152(sp)
    2760:	d8811f15 	stw	r2,1148(sp)
    2764:	010001c4 	movi	r4,7
    2768:	20822616 	blt	r4,r2,3004 <___vfprintf_internal_r+0x1130>
    276c:	42000204 	addi	r8,r8,8
    2770:	8c40010c 	andi	r17,r17,4
    2774:	88003126 	beq	r17,zero,283c <___vfprintf_internal_r+0x968>
    2778:	db012e17 	ldw	r12,1208(sp)
    277c:	dac12b17 	ldw	r11,1196(sp)
    2780:	62e1c83a 	sub	r16,r12,r11
    2784:	04002d0e 	bge	zero,r16,283c <___vfprintf_internal_r+0x968>
    2788:	04400404 	movi	r17,16
    278c:	d8811f17 	ldw	r2,1148(sp)
    2790:	8c04df0e 	bge	r17,r16,3b10 <___vfprintf_internal_r+0x1c3c>
    2794:	01000074 	movhi	r4,1
    2798:	213faf84 	addi	r4,r4,-322
    279c:	d9013615 	stw	r4,1240(sp)
    27a0:	048001c4 	movi	r18,7
    27a4:	00000306 	br	27b4 <___vfprintf_internal_r+0x8e0>
    27a8:	843ffc04 	addi	r16,r16,-16
    27ac:	42000204 	addi	r8,r8,8
    27b0:	8c00130e 	bge	r17,r16,2800 <___vfprintf_internal_r+0x92c>
    27b4:	01400074 	movhi	r5,1
    27b8:	18c00404 	addi	r3,r3,16
    27bc:	10800044 	addi	r2,r2,1
    27c0:	297faf84 	addi	r5,r5,-322
    27c4:	41400015 	stw	r5,0(r8)
    27c8:	44400115 	stw	r17,4(r8)
    27cc:	d8c12015 	stw	r3,1152(sp)
    27d0:	d8811f15 	stw	r2,1148(sp)
    27d4:	90bff40e 	bge	r18,r2,27a8 <___vfprintf_internal_r+0x8d4>
    27d8:	b009883a 	mov	r4,r22
    27dc:	b80b883a 	mov	r5,r23
    27e0:	d9811e04 	addi	r6,sp,1144
    27e4:	000896c0 	call	896c <__sprint_r>
    27e8:	103ed11e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    27ec:	843ffc04 	addi	r16,r16,-16
    27f0:	d8c12017 	ldw	r3,1152(sp)
    27f4:	d8811f17 	ldw	r2,1148(sp)
    27f8:	da000404 	addi	r8,sp,16
    27fc:	8c3fed16 	blt	r17,r16,27b4 <___vfprintf_internal_r+0x8e0>
    2800:	dac13617 	ldw	r11,1240(sp)
    2804:	1c07883a 	add	r3,r3,r16
    2808:	10800044 	addi	r2,r2,1
    280c:	42c00015 	stw	r11,0(r8)
    2810:	44000115 	stw	r16,4(r8)
    2814:	d8c12015 	stw	r3,1152(sp)
    2818:	d8811f15 	stw	r2,1148(sp)
    281c:	010001c4 	movi	r4,7
    2820:	2080060e 	bge	r4,r2,283c <___vfprintf_internal_r+0x968>
    2824:	b009883a 	mov	r4,r22
    2828:	b80b883a 	mov	r5,r23
    282c:	d9811e04 	addi	r6,sp,1144
    2830:	000896c0 	call	896c <__sprint_r>
    2834:	103ebe1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    2838:	d8c12017 	ldw	r3,1152(sp)
    283c:	d8812b17 	ldw	r2,1196(sp)
    2840:	db012e17 	ldw	r12,1208(sp)
    2844:	1300010e 	bge	r2,r12,284c <___vfprintf_internal_r+0x978>
    2848:	6005883a 	mov	r2,r12
    284c:	dac12f17 	ldw	r11,1212(sp)
    2850:	5897883a 	add	r11,r11,r2
    2854:	dac12f15 	stw	r11,1212(sp)
    2858:	1801f21e 	bne	r3,zero,3024 <___vfprintf_internal_r+0x1150>
    285c:	d8011f15 	stw	zero,1148(sp)
    2860:	da000404 	addi	r8,sp,16
    2864:	003dd806 	br	1fc8 <___vfprintf_internal_r+0xf4>
    2868:	8c400414 	ori	r17,r17,16
    286c:	d8c12a15 	stw	r3,1192(sp)
    2870:	88c0080c 	andi	r3,r17,32
    2874:	d8812d17 	ldw	r2,1204(sp)
    2878:	18004626 	beq	r3,zero,2994 <___vfprintf_internal_r+0xac0>
    287c:	dac12d17 	ldw	r11,1204(sp)
    2880:	14c00017 	ldw	r19,0(r2)
    2884:	17000117 	ldw	fp,4(r2)
    2888:	5ac00204 	addi	r11,r11,8
    288c:	dac12d15 	stw	r11,1204(sp)
    2890:	00800044 	movi	r2,1
    2894:	9f06b03a 	or	r3,r19,fp
    2898:	003f0006 	br	249c <___vfprintf_internal_r+0x5c8>
    289c:	1805883a 	mov	r2,r3
    28a0:	d8012e15 	stw	zero,1208(sp)
    28a4:	82fff404 	addi	r11,r16,-48
    28a8:	0019883a 	mov	r12,zero
    28ac:	14000007 	ldb	r16,0(r2)
    28b0:	630002a4 	muli	r12,r12,10
    28b4:	18c00044 	addi	r3,r3,1
    28b8:	1805883a 	mov	r2,r3
    28bc:	62d9883a 	add	r12,r12,r11
    28c0:	82fff404 	addi	r11,r16,-48
    28c4:	2afff92e 	bgeu	r5,r11,28ac <___vfprintf_internal_r+0x9d8>
    28c8:	db012e15 	stw	r12,1208(sp)
    28cc:	003de906 	br	2074 <___vfprintf_internal_r+0x1a0>
    28d0:	8c400414 	ori	r17,r17,16
    28d4:	d8c12a15 	stw	r3,1192(sp)
    28d8:	d9812785 	stb	r6,1182(sp)
    28dc:	8880080c 	andi	r2,r17,32
    28e0:	d8c12d17 	ldw	r3,1204(sp)
    28e4:	10007a26 	beq	r2,zero,2ad0 <___vfprintf_internal_r+0xbfc>
    28e8:	db012d17 	ldw	r12,1204(sp)
    28ec:	18800117 	ldw	r2,4(r3)
    28f0:	1cc00017 	ldw	r19,0(r3)
    28f4:	63000204 	addi	r12,r12,8
    28f8:	db012d15 	stw	r12,1204(sp)
    28fc:	1039883a 	mov	fp,r2
    2900:	10031016 	blt	r2,zero,3544 <___vfprintf_internal_r+0x1670>
    2904:	dd412783 	ldbu	r21,1182(sp)
    2908:	da413215 	stw	r9,1224(sp)
    290c:	00800044 	movi	r2,1
    2910:	9f06b03a 	or	r3,r19,fp
    2914:	003ee406 	br	24a8 <___vfprintf_internal_r+0x5d4>
    2918:	03000074 	movhi	r12,1
    291c:	633f9f04 	addi	r12,r12,-388
    2920:	d8c12a15 	stw	r3,1192(sp)
    2924:	d9812785 	stb	r6,1182(sp)
    2928:	db013b15 	stw	r12,1260(sp)
    292c:	88c0080c 	andi	r3,r17,32
    2930:	d8812d17 	ldw	r2,1204(sp)
    2934:	18002b26 	beq	r3,zero,29e4 <___vfprintf_internal_r+0xb10>
    2938:	dac12d17 	ldw	r11,1204(sp)
    293c:	14c00017 	ldw	r19,0(r2)
    2940:	17000117 	ldw	fp,4(r2)
    2944:	5ac00204 	addi	r11,r11,8
    2948:	dac12d15 	stw	r11,1204(sp)
    294c:	8880004c 	andi	r2,r17,1
    2950:	10025b26 	beq	r2,zero,32c0 <___vfprintf_internal_r+0x13ec>
    2954:	9f06b03a 	or	r3,r19,fp
    2958:	18037026 	beq	r3,zero,371c <___vfprintf_internal_r+0x1848>
    295c:	00800c04 	movi	r2,48
    2960:	d8812705 	stb	r2,1180(sp)
    2964:	dc012745 	stb	r16,1181(sp)
    2968:	8c400094 	ori	r17,r17,2
    296c:	00800084 	movi	r2,2
    2970:	003eca06 	br	249c <___vfprintf_internal_r+0x5c8>
    2974:	8c400814 	ori	r17,r17,32
    2978:	1805883a 	mov	r2,r3
    297c:	1c000007 	ldb	r16,0(r3)
    2980:	003dbb06 	br	2070 <___vfprintf_internal_r+0x19c>
    2984:	d8c12a15 	stw	r3,1192(sp)
    2988:	88c0080c 	andi	r3,r17,32
    298c:	d8812d17 	ldw	r2,1204(sp)
    2990:	183fba1e 	bne	r3,zero,287c <___vfprintf_internal_r+0x9a8>
    2994:	88c0040c 	andi	r3,r17,16
    2998:	18024c1e 	bne	r3,zero,32cc <___vfprintf_internal_r+0x13f8>
    299c:	88c0100c 	andi	r3,r17,64
    29a0:	18024a26 	beq	r3,zero,32cc <___vfprintf_internal_r+0x13f8>
    29a4:	dac12d17 	ldw	r11,1204(sp)
    29a8:	14c0000b 	ldhu	r19,0(r2)
    29ac:	0039883a 	mov	fp,zero
    29b0:	5ac00104 	addi	r11,r11,4
    29b4:	dac12d15 	stw	r11,1204(sp)
    29b8:	00800044 	movi	r2,1
    29bc:	9807883a 	mov	r3,r19
    29c0:	003eb606 	br	249c <___vfprintf_internal_r+0x5c8>
    29c4:	00800074 	movhi	r2,1
    29c8:	10bfa404 	addi	r2,r2,-368
    29cc:	d8c12a15 	stw	r3,1192(sp)
    29d0:	d8813b15 	stw	r2,1260(sp)
    29d4:	d9812785 	stb	r6,1182(sp)
    29d8:	88c0080c 	andi	r3,r17,32
    29dc:	d8812d17 	ldw	r2,1204(sp)
    29e0:	183fd51e 	bne	r3,zero,2938 <___vfprintf_internal_r+0xa64>
    29e4:	88c0040c 	andi	r3,r17,16
    29e8:	18034126 	beq	r3,zero,36f0 <___vfprintf_internal_r+0x181c>
    29ec:	db012d17 	ldw	r12,1204(sp)
    29f0:	14c00017 	ldw	r19,0(r2)
    29f4:	0039883a 	mov	fp,zero
    29f8:	63000104 	addi	r12,r12,4
    29fc:	db012d15 	stw	r12,1204(sp)
    2a00:	003fd206 	br	294c <___vfprintf_internal_r+0xa78>
    2a04:	1c000007 	ldb	r16,0(r3)
    2a08:	81c3d626 	beq	r16,r7,3964 <___vfprintf_internal_r+0x1a90>
    2a0c:	8c400414 	ori	r17,r17,16
    2a10:	1805883a 	mov	r2,r3
    2a14:	003d9606 	br	2070 <___vfprintf_internal_r+0x19c>
    2a18:	d8c12a15 	stw	r3,1192(sp)
    2a1c:	d9812785 	stb	r6,1182(sp)
    2a20:	8880080c 	andi	r2,r17,32
    2a24:	10033f26 	beq	r2,zero,3724 <___vfprintf_internal_r+0x1850>
    2a28:	db012d17 	ldw	r12,1204(sp)
    2a2c:	dac12f17 	ldw	r11,1212(sp)
    2a30:	60800017 	ldw	r2,0(r12)
    2a34:	5807d7fa 	srai	r3,r11,31
    2a38:	63000104 	addi	r12,r12,4
    2a3c:	db012d15 	stw	r12,1204(sp)
    2a40:	12c00015 	stw	r11,0(r2)
    2a44:	10c00115 	stw	r3,4(r2)
    2a48:	003d5f06 	br	1fc8 <___vfprintf_internal_r+0xf4>
    2a4c:	d8c12a15 	stw	r3,1192(sp)
    2a50:	88c0080c 	andi	r3,r17,32
    2a54:	d8812d17 	ldw	r2,1204(sp)
    2a58:	183e891e 	bne	r3,zero,2480 <___vfprintf_internal_r+0x5ac>
    2a5c:	88c0040c 	andi	r3,r17,16
    2a60:	1801ea1e 	bne	r3,zero,320c <___vfprintf_internal_r+0x1338>
    2a64:	88c0100c 	andi	r3,r17,64
    2a68:	1801e826 	beq	r3,zero,320c <___vfprintf_internal_r+0x1338>
    2a6c:	db012d17 	ldw	r12,1204(sp)
    2a70:	14c0000b 	ldhu	r19,0(r2)
    2a74:	0039883a 	mov	fp,zero
    2a78:	63000104 	addi	r12,r12,4
    2a7c:	db012d15 	stw	r12,1204(sp)
    2a80:	0005883a 	mov	r2,zero
    2a84:	9807883a 	mov	r3,r19
    2a88:	003e8406 	br	249c <___vfprintf_internal_r+0x5c8>
    2a8c:	30803fcc 	andi	r2,r6,255
    2a90:	1080201c 	xori	r2,r2,128
    2a94:	10bfe004 	addi	r2,r2,-128
    2a98:	10031d1e 	bne	r2,zero,3710 <___vfprintf_internal_r+0x183c>
    2a9c:	1805883a 	mov	r2,r3
    2aa0:	01800804 	movi	r6,32
    2aa4:	1c000007 	ldb	r16,0(r3)
    2aa8:	003d7106 	br	2070 <___vfprintf_internal_r+0x19c>
    2aac:	8c400054 	ori	r17,r17,1
    2ab0:	1805883a 	mov	r2,r3
    2ab4:	1c000007 	ldb	r16,0(r3)
    2ab8:	003d6d06 	br	2070 <___vfprintf_internal_r+0x19c>
    2abc:	d8c12a15 	stw	r3,1192(sp)
    2ac0:	d9812785 	stb	r6,1182(sp)
    2ac4:	8880080c 	andi	r2,r17,32
    2ac8:	d8c12d17 	ldw	r3,1204(sp)
    2acc:	103f861e 	bne	r2,zero,28e8 <___vfprintf_internal_r+0xa14>
    2ad0:	8880040c 	andi	r2,r17,16
    2ad4:	1001f31e 	bne	r2,zero,32a4 <___vfprintf_internal_r+0x13d0>
    2ad8:	8880100c 	andi	r2,r17,64
    2adc:	1001f126 	beq	r2,zero,32a4 <___vfprintf_internal_r+0x13d0>
    2ae0:	1cc0000f 	ldh	r19,0(r3)
    2ae4:	db012d17 	ldw	r12,1204(sp)
    2ae8:	9839d7fa 	srai	fp,r19,31
    2aec:	63000104 	addi	r12,r12,4
    2af0:	db012d15 	stw	r12,1204(sp)
    2af4:	e005883a 	mov	r2,fp
    2af8:	003f8106 	br	2900 <___vfprintf_internal_r+0xa2c>
    2afc:	8c401014 	ori	r17,r17,64
    2b00:	1805883a 	mov	r2,r3
    2b04:	1c000007 	ldb	r16,0(r3)
    2b08:	003d5906 	br	2070 <___vfprintf_internal_r+0x19c>
    2b0c:	db012d17 	ldw	r12,1204(sp)
    2b10:	d8c12a15 	stw	r3,1192(sp)
    2b14:	00c00044 	movi	r3,1
    2b18:	60800017 	ldw	r2,0(r12)
    2b1c:	63000104 	addi	r12,r12,4
    2b20:	d8c12b15 	stw	r3,1196(sp)
    2b24:	d8012785 	stb	zero,1182(sp)
    2b28:	d8810405 	stb	r2,1040(sp)
    2b2c:	db012d15 	stw	r12,1204(sp)
    2b30:	dac10404 	addi	r11,sp,1040
    2b34:	1825883a 	mov	r18,r3
    2b38:	d8013215 	stw	zero,1224(sp)
    2b3c:	d8013415 	stw	zero,1232(sp)
    2b40:	dac13115 	stw	r11,1220(sp)
    2b44:	0005883a 	mov	r2,zero
    2b48:	003e7d06 	br	2540 <___vfprintf_internal_r+0x66c>
    2b4c:	db012d17 	ldw	r12,1204(sp)
    2b50:	00800c04 	movi	r2,48
    2b54:	d8812705 	stb	r2,1180(sp)
    2b58:	64c00017 	ldw	r19,0(r12)
    2b5c:	00801e04 	movi	r2,120
    2b60:	d8812745 	stb	r2,1181(sp)
    2b64:	00800074 	movhi	r2,1
    2b68:	10bfa404 	addi	r2,r2,-368
    2b6c:	63000104 	addi	r12,r12,4
    2b70:	d8c12a15 	stw	r3,1192(sp)
    2b74:	d8813b15 	stw	r2,1260(sp)
    2b78:	0039883a 	mov	fp,zero
    2b7c:	8c400094 	ori	r17,r17,2
    2b80:	db012d15 	stw	r12,1204(sp)
    2b84:	00800084 	movi	r2,2
    2b88:	04001e04 	movi	r16,120
    2b8c:	9807883a 	mov	r3,r19
    2b90:	003e4206 	br	249c <___vfprintf_internal_r+0x5c8>
    2b94:	dac12d17 	ldw	r11,1204(sp)
    2b98:	db012d17 	ldw	r12,1204(sp)
    2b9c:	d8c12a15 	stw	r3,1192(sp)
    2ba0:	5ac00017 	ldw	r11,0(r11)
    2ba4:	d8012785 	stb	zero,1182(sp)
    2ba8:	64c00104 	addi	r19,r12,4
    2bac:	dac13115 	stw	r11,1220(sp)
    2bb0:	5803e826 	beq	r11,zero,3b54 <___vfprintf_internal_r+0x1c80>
    2bb4:	d9013117 	ldw	r4,1220(sp)
    2bb8:	48037a16 	blt	r9,zero,39a4 <___vfprintf_internal_r+0x1ad0>
    2bbc:	480d883a 	mov	r6,r9
    2bc0:	000b883a 	mov	r5,zero
    2bc4:	da013f15 	stw	r8,1276(sp)
    2bc8:	da413e15 	stw	r9,1272(sp)
    2bcc:	0006d740 	call	6d74 <memchr>
    2bd0:	da013f17 	ldw	r8,1276(sp)
    2bd4:	da413e17 	ldw	r9,1272(sp)
    2bd8:	10044426 	beq	r2,zero,3cec <___vfprintf_internal_r+0x1e18>
    2bdc:	d8c13117 	ldw	r3,1220(sp)
    2be0:	10e5c83a 	sub	r18,r2,r3
    2be4:	4c834416 	blt	r9,r18,38f8 <___vfprintf_internal_r+0x1a24>
    2be8:	9005883a 	mov	r2,r18
    2bec:	90037216 	blt	r18,zero,39b8 <___vfprintf_internal_r+0x1ae4>
    2bf0:	dd412783 	ldbu	r21,1182(sp)
    2bf4:	d8812b15 	stw	r2,1196(sp)
    2bf8:	dcc12d15 	stw	r19,1204(sp)
    2bfc:	d8013215 	stw	zero,1224(sp)
    2c00:	d8013415 	stw	zero,1232(sp)
    2c04:	003e4706 	br	2524 <___vfprintf_internal_r+0x650>
    2c08:	dac12d17 	ldw	r11,1204(sp)
    2c0c:	db012d17 	ldw	r12,1204(sp)
    2c10:	5ac00017 	ldw	r11,0(r11)
    2c14:	dac12e15 	stw	r11,1208(sp)
    2c18:	62c00104 	addi	r11,r12,4
    2c1c:	db012e17 	ldw	r12,1208(sp)
    2c20:	60034a16 	blt	r12,zero,394c <___vfprintf_internal_r+0x1a78>
    2c24:	dac12d15 	stw	r11,1204(sp)
    2c28:	1805883a 	mov	r2,r3
    2c2c:	1c000007 	ldb	r16,0(r3)
    2c30:	003d0f06 	br	2070 <___vfprintf_internal_r+0x19c>
    2c34:	1805883a 	mov	r2,r3
    2c38:	01800ac4 	movi	r6,43
    2c3c:	1c000007 	ldb	r16,0(r3)
    2c40:	003d0b06 	br	2070 <___vfprintf_internal_r+0x19c>
    2c44:	d8c12a15 	stw	r3,1192(sp)
    2c48:	d9812785 	stb	r6,1182(sp)
    2c4c:	803db226 	beq	r16,zero,2318 <___vfprintf_internal_r+0x444>
    2c50:	00c00044 	movi	r3,1
    2c54:	d8c12b15 	stw	r3,1196(sp)
    2c58:	dc010405 	stb	r16,1040(sp)
    2c5c:	d8012785 	stb	zero,1182(sp)
    2c60:	003fb306 	br	2b30 <___vfprintf_internal_r+0xc5c>
    2c64:	d8c12017 	ldw	r3,1152(sp)
    2c68:	003e6d06 	br	2620 <___vfprintf_internal_r+0x74c>
    2c6c:	10803fcc 	andi	r2,r2,255
    2c70:	00c00044 	movi	r3,1
    2c74:	10fe141e 	bne	r2,r3,24c8 <___vfprintf_internal_r+0x5f4>
    2c78:	e000021e 	bne	fp,zero,2c84 <___vfprintf_internal_r+0xdb0>
    2c7c:	00800244 	movi	r2,9
    2c80:	14c0202e 	bgeu	r2,r19,2d04 <___vfprintf_internal_r+0xe30>
    2c84:	dc012b15 	stw	r16,1196(sp)
    2c88:	dc412c15 	stw	r17,1200(sp)
    2c8c:	9821883a 	mov	r16,r19
    2c90:	e023883a 	mov	r17,fp
    2c94:	dc810e04 	addi	r18,sp,1080
    2c98:	4027883a 	mov	r19,r8
    2c9c:	4839883a 	mov	fp,r9
    2ca0:	8009883a 	mov	r4,r16
    2ca4:	880b883a 	mov	r5,r17
    2ca8:	01800284 	movi	r6,10
    2cac:	000f883a 	mov	r7,zero
    2cb0:	000a9c80 	call	a9c8 <__umoddi3>
    2cb4:	10800c04 	addi	r2,r2,48
    2cb8:	94bfffc4 	addi	r18,r18,-1
    2cbc:	8009883a 	mov	r4,r16
    2cc0:	880b883a 	mov	r5,r17
    2cc4:	01800284 	movi	r6,10
    2cc8:	000f883a 	mov	r7,zero
    2ccc:	90800005 	stb	r2,0(r18)
    2cd0:	000a4080 	call	a408 <__udivdi3>
    2cd4:	1021883a 	mov	r16,r2
    2cd8:	10c4b03a 	or	r2,r2,r3
    2cdc:	1823883a 	mov	r17,r3
    2ce0:	103fef1e 	bne	r2,zero,2ca0 <___vfprintf_internal_r+0xdcc>
    2ce4:	dac12817 	ldw	r11,1184(sp)
    2ce8:	dc813115 	stw	r18,1220(sp)
    2cec:	dc012b17 	ldw	r16,1196(sp)
    2cf0:	9811883a 	mov	r8,r19
    2cf4:	dc412c17 	ldw	r17,1200(sp)
    2cf8:	e013883a 	mov	r9,fp
    2cfc:	5ca5c83a 	sub	r18,r11,r18
    2d00:	003e0306 	br	2510 <___vfprintf_internal_r+0x63c>
    2d04:	9cc00c04 	addi	r19,r19,48
    2d08:	d8c10dc4 	addi	r3,sp,1079
    2d0c:	dcc10dc5 	stb	r19,1079(sp)
    2d10:	dc813c17 	ldw	r18,1264(sp)
    2d14:	d8c13115 	stw	r3,1220(sp)
    2d18:	003dfd06 	br	2510 <___vfprintf_internal_r+0x63c>
    2d1c:	00801944 	movi	r2,101
    2d20:	1400710e 	bge	r2,r16,2ee8 <___vfprintf_internal_r+0x1014>
    2d24:	d9013717 	ldw	r4,1244(sp)
    2d28:	d9413917 	ldw	r5,1252(sp)
    2d2c:	000d883a 	mov	r6,zero
    2d30:	000f883a 	mov	r7,zero
    2d34:	d8c13d15 	stw	r3,1268(sp)
    2d38:	da013f15 	stw	r8,1276(sp)
    2d3c:	000c0c00 	call	c0c0 <__eqdf2>
    2d40:	d8c13d17 	ldw	r3,1268(sp)
    2d44:	da013f17 	ldw	r8,1276(sp)
    2d48:	1000ef1e 	bne	r2,zero,3108 <___vfprintf_internal_r+0x1234>
    2d4c:	d8811f17 	ldw	r2,1148(sp)
    2d50:	01000074 	movhi	r4,1
    2d54:	213fab04 	addi	r4,r4,-340
    2d58:	18c00044 	addi	r3,r3,1
    2d5c:	10800044 	addi	r2,r2,1
    2d60:	41000015 	stw	r4,0(r8)
    2d64:	01000044 	movi	r4,1
    2d68:	41000115 	stw	r4,4(r8)
    2d6c:	d8c12015 	stw	r3,1152(sp)
    2d70:	d8811f15 	stw	r2,1148(sp)
    2d74:	010001c4 	movi	r4,7
    2d78:	20828e16 	blt	r4,r2,37b4 <___vfprintf_internal_r+0x18e0>
    2d7c:	42000204 	addi	r8,r8,8
    2d80:	d8812617 	ldw	r2,1176(sp)
    2d84:	dac13317 	ldw	r11,1228(sp)
    2d88:	12c00216 	blt	r2,r11,2d94 <___vfprintf_internal_r+0xec0>
    2d8c:	8880004c 	andi	r2,r17,1
    2d90:	103e7726 	beq	r2,zero,2770 <___vfprintf_internal_r+0x89c>
    2d94:	db013817 	ldw	r12,1248(sp)
    2d98:	d8811f17 	ldw	r2,1148(sp)
    2d9c:	dac13517 	ldw	r11,1236(sp)
    2da0:	1b07883a 	add	r3,r3,r12
    2da4:	10800044 	addi	r2,r2,1
    2da8:	42c00015 	stw	r11,0(r8)
    2dac:	43000115 	stw	r12,4(r8)
    2db0:	d8c12015 	stw	r3,1152(sp)
    2db4:	d8811f15 	stw	r2,1148(sp)
    2db8:	010001c4 	movi	r4,7
    2dbc:	2082ed16 	blt	r4,r2,3974 <___vfprintf_internal_r+0x1aa0>
    2dc0:	42000204 	addi	r8,r8,8
    2dc4:	db013317 	ldw	r12,1228(sp)
    2dc8:	643fffc4 	addi	r16,r12,-1
    2dcc:	043e680e 	bge	zero,r16,2770 <___vfprintf_internal_r+0x89c>
    2dd0:	04800404 	movi	r18,16
    2dd4:	d8811f17 	ldw	r2,1148(sp)
    2dd8:	94007e0e 	bge	r18,r16,2fd4 <___vfprintf_internal_r+0x1100>
    2ddc:	01400074 	movhi	r5,1
    2de0:	297fab84 	addi	r5,r5,-338
    2de4:	d9412c15 	stw	r5,1200(sp)
    2de8:	054001c4 	movi	r21,7
    2dec:	00000306 	br	2dfc <___vfprintf_internal_r+0xf28>
    2df0:	42000204 	addi	r8,r8,8
    2df4:	843ffc04 	addi	r16,r16,-16
    2df8:	9400790e 	bge	r18,r16,2fe0 <___vfprintf_internal_r+0x110c>
    2dfc:	18c00404 	addi	r3,r3,16
    2e00:	10800044 	addi	r2,r2,1
    2e04:	45000015 	stw	r20,0(r8)
    2e08:	44800115 	stw	r18,4(r8)
    2e0c:	d8c12015 	stw	r3,1152(sp)
    2e10:	d8811f15 	stw	r2,1148(sp)
    2e14:	a8bff60e 	bge	r21,r2,2df0 <___vfprintf_internal_r+0xf1c>
    2e18:	b009883a 	mov	r4,r22
    2e1c:	b80b883a 	mov	r5,r23
    2e20:	d9811e04 	addi	r6,sp,1144
    2e24:	000896c0 	call	896c <__sprint_r>
    2e28:	103d411e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    2e2c:	d8c12017 	ldw	r3,1152(sp)
    2e30:	d8811f17 	ldw	r2,1148(sp)
    2e34:	da000404 	addi	r8,sp,16
    2e38:	003fee06 	br	2df4 <___vfprintf_internal_r+0xf20>
    2e3c:	dac12e17 	ldw	r11,1208(sp)
    2e40:	db012b17 	ldw	r12,1196(sp)
    2e44:	5b2bc83a 	sub	r21,r11,r12
    2e48:	057e130e 	bge	zero,r21,2698 <___vfprintf_internal_r+0x7c4>
    2e4c:	07000404 	movi	fp,16
    2e50:	d8811f17 	ldw	r2,1148(sp)
    2e54:	e543640e 	bge	fp,r21,3be8 <___vfprintf_internal_r+0x1d14>
    2e58:	01400074 	movhi	r5,1
    2e5c:	297fab84 	addi	r5,r5,-338
    2e60:	d9412c15 	stw	r5,1200(sp)
    2e64:	04c001c4 	movi	r19,7
    2e68:	00000306 	br	2e78 <___vfprintf_internal_r+0xfa4>
    2e6c:	ad7ffc04 	addi	r21,r21,-16
    2e70:	42000204 	addi	r8,r8,8
    2e74:	e540110e 	bge	fp,r21,2ebc <___vfprintf_internal_r+0xfe8>
    2e78:	18c00404 	addi	r3,r3,16
    2e7c:	10800044 	addi	r2,r2,1
    2e80:	45000015 	stw	r20,0(r8)
    2e84:	47000115 	stw	fp,4(r8)
    2e88:	d8c12015 	stw	r3,1152(sp)
    2e8c:	d8811f15 	stw	r2,1148(sp)
    2e90:	98bff60e 	bge	r19,r2,2e6c <___vfprintf_internal_r+0xf98>
    2e94:	b009883a 	mov	r4,r22
    2e98:	b80b883a 	mov	r5,r23
    2e9c:	d9811e04 	addi	r6,sp,1144
    2ea0:	000896c0 	call	896c <__sprint_r>
    2ea4:	103d221e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    2ea8:	ad7ffc04 	addi	r21,r21,-16
    2eac:	d8c12017 	ldw	r3,1152(sp)
    2eb0:	d8811f17 	ldw	r2,1148(sp)
    2eb4:	da000404 	addi	r8,sp,16
    2eb8:	e57fef16 	blt	fp,r21,2e78 <___vfprintf_internal_r+0xfa4>
    2ebc:	dac12c17 	ldw	r11,1200(sp)
    2ec0:	1d47883a 	add	r3,r3,r21
    2ec4:	10800044 	addi	r2,r2,1
    2ec8:	42c00015 	stw	r11,0(r8)
    2ecc:	45400115 	stw	r21,4(r8)
    2ed0:	d8c12015 	stw	r3,1152(sp)
    2ed4:	d8811f15 	stw	r2,1148(sp)
    2ed8:	010001c4 	movi	r4,7
    2edc:	20819116 	blt	r4,r2,3524 <___vfprintf_internal_r+0x1650>
    2ee0:	42000204 	addi	r8,r8,8
    2ee4:	003dec06 	br	2698 <___vfprintf_internal_r+0x7c4>
    2ee8:	db013317 	ldw	r12,1228(sp)
    2eec:	00800044 	movi	r2,1
    2ef0:	18c00044 	addi	r3,r3,1
    2ef4:	1301530e 	bge	r2,r12,3444 <___vfprintf_internal_r+0x1570>
    2ef8:	dc011f17 	ldw	r16,1148(sp)
    2efc:	dac13117 	ldw	r11,1220(sp)
    2f00:	00800044 	movi	r2,1
    2f04:	84000044 	addi	r16,r16,1
    2f08:	40800115 	stw	r2,4(r8)
    2f0c:	42c00015 	stw	r11,0(r8)
    2f10:	d8c12015 	stw	r3,1152(sp)
    2f14:	dc011f15 	stw	r16,1148(sp)
    2f18:	008001c4 	movi	r2,7
    2f1c:	14016b16 	blt	r2,r16,34cc <___vfprintf_internal_r+0x15f8>
    2f20:	42000204 	addi	r8,r8,8
    2f24:	db013817 	ldw	r12,1248(sp)
    2f28:	dac13517 	ldw	r11,1236(sp)
    2f2c:	84000044 	addi	r16,r16,1
    2f30:	1b07883a 	add	r3,r3,r12
    2f34:	42c00015 	stw	r11,0(r8)
    2f38:	43000115 	stw	r12,4(r8)
    2f3c:	d8c12015 	stw	r3,1152(sp)
    2f40:	dc011f15 	stw	r16,1148(sp)
    2f44:	008001c4 	movi	r2,7
    2f48:	14016916 	blt	r2,r16,34f0 <___vfprintf_internal_r+0x161c>
    2f4c:	44800204 	addi	r18,r8,8
    2f50:	d9013717 	ldw	r4,1244(sp)
    2f54:	d9413917 	ldw	r5,1252(sp)
    2f58:	000d883a 	mov	r6,zero
    2f5c:	000f883a 	mov	r7,zero
    2f60:	d8c13d15 	stw	r3,1268(sp)
    2f64:	000c0c00 	call	c0c0 <__eqdf2>
    2f68:	d8c13d17 	ldw	r3,1268(sp)
    2f6c:	db013317 	ldw	r12,1228(sp)
    2f70:	1000ae26 	beq	r2,zero,322c <___vfprintf_internal_r+0x1358>
    2f74:	dac13117 	ldw	r11,1220(sp)
    2f78:	60bfffc4 	addi	r2,r12,-1
    2f7c:	1887883a 	add	r3,r3,r2
    2f80:	59000044 	addi	r4,r11,1
    2f84:	84000044 	addi	r16,r16,1
    2f88:	90800115 	stw	r2,4(r18)
    2f8c:	91000015 	stw	r4,0(r18)
    2f90:	d8c12015 	stw	r3,1152(sp)
    2f94:	dc011f15 	stw	r16,1148(sp)
    2f98:	008001c4 	movi	r2,7
    2f9c:	14014216 	blt	r2,r16,34a8 <___vfprintf_internal_r+0x15d4>
    2fa0:	94800204 	addi	r18,r18,8
    2fa4:	dac13a17 	ldw	r11,1256(sp)
    2fa8:	dd4122c4 	addi	r21,sp,1163
    2fac:	84000044 	addi	r16,r16,1
    2fb0:	58c7883a 	add	r3,r11,r3
    2fb4:	95400015 	stw	r21,0(r18)
    2fb8:	92c00115 	stw	r11,4(r18)
    2fbc:	d8c12015 	stw	r3,1152(sp)
    2fc0:	dc011f15 	stw	r16,1148(sp)
    2fc4:	008001c4 	movi	r2,7
    2fc8:	14000e16 	blt	r2,r16,3004 <___vfprintf_internal_r+0x1130>
    2fcc:	92000204 	addi	r8,r18,8
    2fd0:	003de706 	br	2770 <___vfprintf_internal_r+0x89c>
    2fd4:	01000074 	movhi	r4,1
    2fd8:	213fab84 	addi	r4,r4,-338
    2fdc:	d9012c15 	stw	r4,1200(sp)
    2fe0:	dac12c17 	ldw	r11,1200(sp)
    2fe4:	1c07883a 	add	r3,r3,r16
    2fe8:	44000115 	stw	r16,4(r8)
    2fec:	42c00015 	stw	r11,0(r8)
    2ff0:	10800044 	addi	r2,r2,1
    2ff4:	d8c12015 	stw	r3,1152(sp)
    2ff8:	d8811f15 	stw	r2,1148(sp)
    2ffc:	010001c4 	movi	r4,7
    3000:	20bdda0e 	bge	r4,r2,276c <___vfprintf_internal_r+0x898>
    3004:	b009883a 	mov	r4,r22
    3008:	b80b883a 	mov	r5,r23
    300c:	d9811e04 	addi	r6,sp,1144
    3010:	000896c0 	call	896c <__sprint_r>
    3014:	103cc61e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3018:	d8c12017 	ldw	r3,1152(sp)
    301c:	da000404 	addi	r8,sp,16
    3020:	003dd306 	br	2770 <___vfprintf_internal_r+0x89c>
    3024:	b009883a 	mov	r4,r22
    3028:	b80b883a 	mov	r5,r23
    302c:	d9811e04 	addi	r6,sp,1144
    3030:	000896c0 	call	896c <__sprint_r>
    3034:	103e0926 	beq	r2,zero,285c <___vfprintf_internal_r+0x988>
    3038:	003cbd06 	br	2330 <___vfprintf_internal_r+0x45c>
    303c:	10803fcc 	andi	r2,r2,255
    3040:	1000651e 	bne	r2,zero,31d8 <___vfprintf_internal_r+0x1304>
    3044:	8880004c 	andi	r2,r17,1
    3048:	10013226 	beq	r2,zero,3514 <___vfprintf_internal_r+0x1640>
    304c:	00800c04 	movi	r2,48
    3050:	d8c10dc4 	addi	r3,sp,1079
    3054:	d8810dc5 	stb	r2,1079(sp)
    3058:	dc813c17 	ldw	r18,1264(sp)
    305c:	d8c13115 	stw	r3,1220(sp)
    3060:	003d2b06 	br	2510 <___vfprintf_internal_r+0x63c>
    3064:	b009883a 	mov	r4,r22
    3068:	b80b883a 	mov	r5,r23
    306c:	d9811e04 	addi	r6,sp,1144
    3070:	000896c0 	call	896c <__sprint_r>
    3074:	103cae1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3078:	d8c12017 	ldw	r3,1152(sp)
    307c:	da000404 	addi	r8,sp,16
    3080:	003dae06 	br	273c <___vfprintf_internal_r+0x868>
    3084:	b009883a 	mov	r4,r22
    3088:	b80b883a 	mov	r5,r23
    308c:	d9811e04 	addi	r6,sp,1144
    3090:	000896c0 	call	896c <__sprint_r>
    3094:	103ca61e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3098:	d8c12017 	ldw	r3,1152(sp)
    309c:	da000404 	addi	r8,sp,16
    30a0:	003d6c06 	br	2654 <___vfprintf_internal_r+0x780>
    30a4:	b009883a 	mov	r4,r22
    30a8:	b80b883a 	mov	r5,r23
    30ac:	d9811e04 	addi	r6,sp,1144
    30b0:	000896c0 	call	896c <__sprint_r>
    30b4:	103c9e1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    30b8:	d8c12017 	ldw	r3,1152(sp)
    30bc:	da000404 	addi	r8,sp,16
    30c0:	003d7206 	br	268c <___vfprintf_internal_r+0x7b8>
    30c4:	d9413b17 	ldw	r5,1260(sp)
    30c8:	d8c10e04 	addi	r3,sp,1080
    30cc:	988003cc 	andi	r2,r19,15
    30d0:	e008973a 	slli	r4,fp,28
    30d4:	2885883a 	add	r2,r5,r2
    30d8:	9826d13a 	srli	r19,r19,4
    30dc:	10800003 	ldbu	r2,0(r2)
    30e0:	e038d13a 	srli	fp,fp,4
    30e4:	18ffffc4 	addi	r3,r3,-1
    30e8:	24e6b03a 	or	r19,r4,r19
    30ec:	18800005 	stb	r2,0(r3)
    30f0:	9f04b03a 	or	r2,r19,fp
    30f4:	103ff51e 	bne	r2,zero,30cc <___vfprintf_internal_r+0x11f8>
    30f8:	db012817 	ldw	r12,1184(sp)
    30fc:	d8c13115 	stw	r3,1220(sp)
    3100:	60e5c83a 	sub	r18,r12,r3
    3104:	003d0206 	br	2510 <___vfprintf_internal_r+0x63c>
    3108:	dc012617 	ldw	r16,1176(sp)
    310c:	0401b10e 	bge	zero,r16,37d4 <___vfprintf_internal_r+0x1900>
    3110:	db013117 	ldw	r12,1220(sp)
    3114:	dac13317 	ldw	r11,1228(sp)
    3118:	62e1883a 	add	r16,r12,r11
    311c:	db013417 	ldw	r12,1232(sp)
    3120:	5825883a 	mov	r18,r11
    3124:	62c0010e 	bge	r12,r11,312c <___vfprintf_internal_r+0x1258>
    3128:	6025883a 	mov	r18,r12
    312c:	04800b0e 	bge	zero,r18,315c <___vfprintf_internal_r+0x1288>
    3130:	d8811f17 	ldw	r2,1148(sp)
    3134:	dac13117 	ldw	r11,1220(sp)
    3138:	1c87883a 	add	r3,r3,r18
    313c:	10800044 	addi	r2,r2,1
    3140:	42c00015 	stw	r11,0(r8)
    3144:	44800115 	stw	r18,4(r8)
    3148:	d8c12015 	stw	r3,1152(sp)
    314c:	d8811f15 	stw	r2,1148(sp)
    3150:	010001c4 	movi	r4,7
    3154:	20824f16 	blt	r4,r2,3a94 <___vfprintf_internal_r+0x1bc0>
    3158:	42000204 	addi	r8,r8,8
    315c:	90024b16 	blt	r18,zero,3a8c <___vfprintf_internal_r+0x1bb8>
    3160:	db013417 	ldw	r12,1232(sp)
    3164:	64a5c83a 	sub	r18,r12,r18
    3168:	0480730e 	bge	zero,r18,3338 <___vfprintf_internal_r+0x1464>
    316c:	05400404 	movi	r21,16
    3170:	d8811f17 	ldw	r2,1148(sp)
    3174:	ac817d0e 	bge	r21,r18,376c <___vfprintf_internal_r+0x1898>
    3178:	01400074 	movhi	r5,1
    317c:	297fab84 	addi	r5,r5,-338
    3180:	d9412c15 	stw	r5,1200(sp)
    3184:	070001c4 	movi	fp,7
    3188:	00000306 	br	3198 <___vfprintf_internal_r+0x12c4>
    318c:	42000204 	addi	r8,r8,8
    3190:	94bffc04 	addi	r18,r18,-16
    3194:	ac81780e 	bge	r21,r18,3778 <___vfprintf_internal_r+0x18a4>
    3198:	18c00404 	addi	r3,r3,16
    319c:	10800044 	addi	r2,r2,1
    31a0:	45000015 	stw	r20,0(r8)
    31a4:	45400115 	stw	r21,4(r8)
    31a8:	d8c12015 	stw	r3,1152(sp)
    31ac:	d8811f15 	stw	r2,1148(sp)
    31b0:	e0bff60e 	bge	fp,r2,318c <___vfprintf_internal_r+0x12b8>
    31b4:	b009883a 	mov	r4,r22
    31b8:	b80b883a 	mov	r5,r23
    31bc:	d9811e04 	addi	r6,sp,1144
    31c0:	000896c0 	call	896c <__sprint_r>
    31c4:	103c5a1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    31c8:	d8c12017 	ldw	r3,1152(sp)
    31cc:	d8811f17 	ldw	r2,1148(sp)
    31d0:	da000404 	addi	r8,sp,16
    31d4:	003fee06 	br	3190 <___vfprintf_internal_r+0x12bc>
    31d8:	dac10e04 	addi	r11,sp,1080
    31dc:	0025883a 	mov	r18,zero
    31e0:	dac13115 	stw	r11,1220(sp)
    31e4:	003cca06 	br	2510 <___vfprintf_internal_r+0x63c>
    31e8:	b009883a 	mov	r4,r22
    31ec:	b80b883a 	mov	r5,r23
    31f0:	d9811e04 	addi	r6,sp,1144
    31f4:	000896c0 	call	896c <__sprint_r>
    31f8:	103c4d1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    31fc:	d8c12017 	ldw	r3,1152(sp)
    3200:	d8812787 	ldb	r2,1182(sp)
    3204:	da000404 	addi	r8,sp,16
    3208:	003d0506 	br	2620 <___vfprintf_internal_r+0x74c>
    320c:	dac12d17 	ldw	r11,1204(sp)
    3210:	14c00017 	ldw	r19,0(r2)
    3214:	0039883a 	mov	fp,zero
    3218:	5ac00104 	addi	r11,r11,4
    321c:	dac12d15 	stw	r11,1204(sp)
    3220:	0005883a 	mov	r2,zero
    3224:	9807883a 	mov	r3,r19
    3228:	003c9c06 	br	249c <___vfprintf_internal_r+0x5c8>
    322c:	657fffc4 	addi	r21,r12,-1
    3230:	057f5c0e 	bge	zero,r21,2fa4 <___vfprintf_internal_r+0x10d0>
    3234:	07000404 	movi	fp,16
    3238:	e5408f0e 	bge	fp,r21,3478 <___vfprintf_internal_r+0x15a4>
    323c:	01000074 	movhi	r4,1
    3240:	213fab84 	addi	r4,r4,-338
    3244:	d9012c15 	stw	r4,1200(sp)
    3248:	01c001c4 	movi	r7,7
    324c:	00000306 	br	325c <___vfprintf_internal_r+0x1388>
    3250:	94800204 	addi	r18,r18,8
    3254:	ad7ffc04 	addi	r21,r21,-16
    3258:	e5408a0e 	bge	fp,r21,3484 <___vfprintf_internal_r+0x15b0>
    325c:	18c00404 	addi	r3,r3,16
    3260:	84000044 	addi	r16,r16,1
    3264:	95000015 	stw	r20,0(r18)
    3268:	97000115 	stw	fp,4(r18)
    326c:	d8c12015 	stw	r3,1152(sp)
    3270:	dc011f15 	stw	r16,1148(sp)
    3274:	3c3ff60e 	bge	r7,r16,3250 <___vfprintf_internal_r+0x137c>
    3278:	b009883a 	mov	r4,r22
    327c:	b80b883a 	mov	r5,r23
    3280:	d9811e04 	addi	r6,sp,1144
    3284:	d9c13d15 	stw	r7,1268(sp)
    3288:	000896c0 	call	896c <__sprint_r>
    328c:	d9c13d17 	ldw	r7,1268(sp)
    3290:	103c271e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3294:	d8c12017 	ldw	r3,1152(sp)
    3298:	dc011f17 	ldw	r16,1148(sp)
    329c:	dc800404 	addi	r18,sp,16
    32a0:	003fec06 	br	3254 <___vfprintf_internal_r+0x1380>
    32a4:	1cc00017 	ldw	r19,0(r3)
    32a8:	dac12d17 	ldw	r11,1204(sp)
    32ac:	9839d7fa 	srai	fp,r19,31
    32b0:	5ac00104 	addi	r11,r11,4
    32b4:	dac12d15 	stw	r11,1204(sp)
    32b8:	e005883a 	mov	r2,fp
    32bc:	003d9006 	br	2900 <___vfprintf_internal_r+0xa2c>
    32c0:	00800084 	movi	r2,2
    32c4:	9f06b03a 	or	r3,r19,fp
    32c8:	003c7406 	br	249c <___vfprintf_internal_r+0x5c8>
    32cc:	db012d17 	ldw	r12,1204(sp)
    32d0:	14c00017 	ldw	r19,0(r2)
    32d4:	0039883a 	mov	fp,zero
    32d8:	63000104 	addi	r12,r12,4
    32dc:	db012d15 	stw	r12,1204(sp)
    32e0:	00800044 	movi	r2,1
    32e4:	9807883a 	mov	r3,r19
    32e8:	003c6c06 	br	249c <___vfprintf_internal_r+0x5c8>
    32ec:	10803fcc 	andi	r2,r2,255
    32f0:	1080201c 	xori	r2,r2,128
    32f4:	10bfe004 	addi	r2,r2,-128
    32f8:	01000c04 	movi	r4,48
    32fc:	1101a526 	beq	r2,r4,3994 <___vfprintf_internal_r+0x1ac0>
    3300:	dac13117 	ldw	r11,1220(sp)
    3304:	db012817 	ldw	r12,1184(sp)
    3308:	193fffc5 	stb	r4,-1(r3)
    330c:	5affffc4 	addi	r11,r11,-1
    3310:	dac13115 	stw	r11,1220(sp)
    3314:	62e5c83a 	sub	r18,r12,r11
    3318:	003c7d06 	br	2510 <___vfprintf_internal_r+0x63c>
    331c:	b009883a 	mov	r4,r22
    3320:	b80b883a 	mov	r5,r23
    3324:	d9811e04 	addi	r6,sp,1144
    3328:	000896c0 	call	896c <__sprint_r>
    332c:	103c001e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3330:	d8c12017 	ldw	r3,1152(sp)
    3334:	da000404 	addi	r8,sp,16
    3338:	db013117 	ldw	r12,1220(sp)
    333c:	dac13417 	ldw	r11,1232(sp)
    3340:	d8812617 	ldw	r2,1176(sp)
    3344:	62e5883a 	add	r18,r12,r11
    3348:	db013317 	ldw	r12,1228(sp)
    334c:	13000216 	blt	r2,r12,3358 <___vfprintf_internal_r+0x1484>
    3350:	8900004c 	andi	r4,r17,1
    3354:	20000c26 	beq	r4,zero,3388 <___vfprintf_internal_r+0x14b4>
    3358:	dac13817 	ldw	r11,1248(sp)
    335c:	d9011f17 	ldw	r4,1148(sp)
    3360:	db013517 	ldw	r12,1236(sp)
    3364:	1ac7883a 	add	r3,r3,r11
    3368:	21000044 	addi	r4,r4,1
    336c:	43000015 	stw	r12,0(r8)
    3370:	42c00115 	stw	r11,4(r8)
    3374:	d8c12015 	stw	r3,1152(sp)
    3378:	d9011f15 	stw	r4,1148(sp)
    337c:	014001c4 	movi	r5,7
    3380:	2901cc16 	blt	r5,r4,3ab4 <___vfprintf_internal_r+0x1be0>
    3384:	42000204 	addi	r8,r8,8
    3388:	dac13317 	ldw	r11,1228(sp)
    338c:	8489c83a 	sub	r4,r16,r18
    3390:	5885c83a 	sub	r2,r11,r2
    3394:	1021883a 	mov	r16,r2
    3398:	2080010e 	bge	r4,r2,33a0 <___vfprintf_internal_r+0x14cc>
    339c:	2021883a 	mov	r16,r4
    33a0:	04000a0e 	bge	zero,r16,33cc <___vfprintf_internal_r+0x14f8>
    33a4:	d9011f17 	ldw	r4,1148(sp)
    33a8:	1c07883a 	add	r3,r3,r16
    33ac:	44800015 	stw	r18,0(r8)
    33b0:	21000044 	addi	r4,r4,1
    33b4:	44000115 	stw	r16,4(r8)
    33b8:	d8c12015 	stw	r3,1152(sp)
    33bc:	d9011f15 	stw	r4,1148(sp)
    33c0:	014001c4 	movi	r5,7
    33c4:	2901d616 	blt	r5,r4,3b20 <___vfprintf_internal_r+0x1c4c>
    33c8:	42000204 	addi	r8,r8,8
    33cc:	8001df16 	blt	r16,zero,3b4c <___vfprintf_internal_r+0x1c78>
    33d0:	1421c83a 	sub	r16,r2,r16
    33d4:	043ce60e 	bge	zero,r16,2770 <___vfprintf_internal_r+0x89c>
    33d8:	04800404 	movi	r18,16
    33dc:	d8811f17 	ldw	r2,1148(sp)
    33e0:	943efc0e 	bge	r18,r16,2fd4 <___vfprintf_internal_r+0x1100>
    33e4:	01400074 	movhi	r5,1
    33e8:	297fab84 	addi	r5,r5,-338
    33ec:	d9412c15 	stw	r5,1200(sp)
    33f0:	054001c4 	movi	r21,7
    33f4:	00000306 	br	3404 <___vfprintf_internal_r+0x1530>
    33f8:	42000204 	addi	r8,r8,8
    33fc:	843ffc04 	addi	r16,r16,-16
    3400:	943ef70e 	bge	r18,r16,2fe0 <___vfprintf_internal_r+0x110c>
    3404:	18c00404 	addi	r3,r3,16
    3408:	10800044 	addi	r2,r2,1
    340c:	45000015 	stw	r20,0(r8)
    3410:	44800115 	stw	r18,4(r8)
    3414:	d8c12015 	stw	r3,1152(sp)
    3418:	d8811f15 	stw	r2,1148(sp)
    341c:	a8bff60e 	bge	r21,r2,33f8 <___vfprintf_internal_r+0x1524>
    3420:	b009883a 	mov	r4,r22
    3424:	b80b883a 	mov	r5,r23
    3428:	d9811e04 	addi	r6,sp,1144
    342c:	000896c0 	call	896c <__sprint_r>
    3430:	103bbf1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3434:	d8c12017 	ldw	r3,1152(sp)
    3438:	d8811f17 	ldw	r2,1148(sp)
    343c:	da000404 	addi	r8,sp,16
    3440:	003fee06 	br	33fc <___vfprintf_internal_r+0x1528>
    3444:	8888703a 	and	r4,r17,r2
    3448:	203eab1e 	bne	r4,zero,2ef8 <___vfprintf_internal_r+0x1024>
    344c:	dc011f17 	ldw	r16,1148(sp)
    3450:	db013117 	ldw	r12,1220(sp)
    3454:	40800115 	stw	r2,4(r8)
    3458:	84000044 	addi	r16,r16,1
    345c:	43000015 	stw	r12,0(r8)
    3460:	d8c12015 	stw	r3,1152(sp)
    3464:	dc011f15 	stw	r16,1148(sp)
    3468:	008001c4 	movi	r2,7
    346c:	14000e16 	blt	r2,r16,34a8 <___vfprintf_internal_r+0x15d4>
    3470:	44800204 	addi	r18,r8,8
    3474:	003ecb06 	br	2fa4 <___vfprintf_internal_r+0x10d0>
    3478:	00800074 	movhi	r2,1
    347c:	10bfab84 	addi	r2,r2,-338
    3480:	d8812c15 	stw	r2,1200(sp)
    3484:	dac12c17 	ldw	r11,1200(sp)
    3488:	1d47883a 	add	r3,r3,r21
    348c:	84000044 	addi	r16,r16,1
    3490:	92c00015 	stw	r11,0(r18)
    3494:	95400115 	stw	r21,4(r18)
    3498:	d8c12015 	stw	r3,1152(sp)
    349c:	dc011f15 	stw	r16,1148(sp)
    34a0:	008001c4 	movi	r2,7
    34a4:	143ebe0e 	bge	r2,r16,2fa0 <___vfprintf_internal_r+0x10cc>
    34a8:	b009883a 	mov	r4,r22
    34ac:	b80b883a 	mov	r5,r23
    34b0:	d9811e04 	addi	r6,sp,1144
    34b4:	000896c0 	call	896c <__sprint_r>
    34b8:	103b9d1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    34bc:	d8c12017 	ldw	r3,1152(sp)
    34c0:	dc011f17 	ldw	r16,1148(sp)
    34c4:	dc800404 	addi	r18,sp,16
    34c8:	003eb606 	br	2fa4 <___vfprintf_internal_r+0x10d0>
    34cc:	b009883a 	mov	r4,r22
    34d0:	b80b883a 	mov	r5,r23
    34d4:	d9811e04 	addi	r6,sp,1144
    34d8:	000896c0 	call	896c <__sprint_r>
    34dc:	103b941e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    34e0:	d8c12017 	ldw	r3,1152(sp)
    34e4:	dc011f17 	ldw	r16,1148(sp)
    34e8:	da000404 	addi	r8,sp,16
    34ec:	003e8d06 	br	2f24 <___vfprintf_internal_r+0x1050>
    34f0:	b009883a 	mov	r4,r22
    34f4:	b80b883a 	mov	r5,r23
    34f8:	d9811e04 	addi	r6,sp,1144
    34fc:	000896c0 	call	896c <__sprint_r>
    3500:	103b8b1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3504:	d8c12017 	ldw	r3,1152(sp)
    3508:	dc011f17 	ldw	r16,1148(sp)
    350c:	dc800404 	addi	r18,sp,16
    3510:	003e8f06 	br	2f50 <___vfprintf_internal_r+0x107c>
    3514:	db010e04 	addi	r12,sp,1080
    3518:	0025883a 	mov	r18,zero
    351c:	db013115 	stw	r12,1220(sp)
    3520:	003bfb06 	br	2510 <___vfprintf_internal_r+0x63c>
    3524:	b009883a 	mov	r4,r22
    3528:	b80b883a 	mov	r5,r23
    352c:	d9811e04 	addi	r6,sp,1144
    3530:	000896c0 	call	896c <__sprint_r>
    3534:	103b7e1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3538:	d8c12017 	ldw	r3,1152(sp)
    353c:	da000404 	addi	r8,sp,16
    3540:	003c5506 	br	2698 <___vfprintf_internal_r+0x7c4>
    3544:	04e7c83a 	sub	r19,zero,r19
    3548:	9804c03a 	cmpne	r2,r19,zero
    354c:	0739c83a 	sub	fp,zero,fp
    3550:	e0b9c83a 	sub	fp,fp,r2
    3554:	05400b44 	movi	r21,45
    3558:	dd412785 	stb	r21,1182(sp)
    355c:	da413215 	stw	r9,1224(sp)
    3560:	00800044 	movi	r2,1
    3564:	9f06b03a 	or	r3,r19,fp
    3568:	003bcf06 	br	24a8 <___vfprintf_internal_r+0x5d4>
    356c:	da013f15 	stw	r8,1276(sp)
    3570:	da413e15 	stw	r9,1272(sp)
    3574:	000861c0 	call	861c <__fpclassifyd>
    3578:	da013f17 	ldw	r8,1276(sp)
    357c:	da413e17 	ldw	r9,1272(sp)
    3580:	1000ce26 	beq	r2,zero,38bc <___vfprintf_internal_r+0x19e8>
    3584:	057ff7c4 	movi	r21,-33
    3588:	00bfffc4 	movi	r2,-1
    358c:	856a703a 	and	r21,r16,r21
    3590:	4881f026 	beq	r9,r2,3d54 <___vfprintf_internal_r+0x1e80>
    3594:	008011c4 	movi	r2,71
    3598:	a881e526 	beq	r21,r2,3d30 <___vfprintf_internal_r+0x1e5c>
    359c:	db013917 	ldw	r12,1252(sp)
    35a0:	8ac04014 	ori	r11,r17,256
    35a4:	dac12d15 	stw	r11,1204(sp)
    35a8:	6001e416 	blt	r12,zero,3d3c <___vfprintf_internal_r+0x1e68>
    35ac:	dc813917 	ldw	r18,1252(sp)
    35b0:	d8012b05 	stb	zero,1196(sp)
    35b4:	00801984 	movi	r2,102
    35b8:	80811826 	beq	r16,r2,3a1c <___vfprintf_internal_r+0x1b48>
    35bc:	00801184 	movi	r2,70
    35c0:	80811626 	beq	r16,r2,3a1c <___vfprintf_internal_r+0x1b48>
    35c4:	00801144 	movi	r2,69
    35c8:	a881e026 	beq	r21,r2,3d4c <___vfprintf_internal_r+0x1e78>
    35cc:	4839883a 	mov	fp,r9
    35d0:	d8812604 	addi	r2,sp,1176
    35d4:	d8800115 	stw	r2,4(sp)
    35d8:	d9413717 	ldw	r5,1244(sp)
    35dc:	d8812504 	addi	r2,sp,1172
    35e0:	d8800215 	stw	r2,8(sp)
    35e4:	d8812104 	addi	r2,sp,1156
    35e8:	df000015 	stw	fp,0(sp)
    35ec:	d8800315 	stw	r2,12(sp)
    35f0:	b009883a 	mov	r4,r22
    35f4:	900d883a 	mov	r6,r18
    35f8:	01c00084 	movi	r7,2
    35fc:	da013f15 	stw	r8,1276(sp)
    3600:	da413e15 	stw	r9,1272(sp)
    3604:	00043940 	call	4394 <_dtoa_r>
    3608:	d8813115 	stw	r2,1220(sp)
    360c:	008019c4 	movi	r2,103
    3610:	da013f17 	ldw	r8,1276(sp)
    3614:	da413e17 	ldw	r9,1272(sp)
    3618:	80800226 	beq	r16,r2,3624 <___vfprintf_internal_r+0x1750>
    361c:	008011c4 	movi	r2,71
    3620:	8081101e 	bne	r16,r2,3a64 <___vfprintf_internal_r+0x1b90>
    3624:	8880004c 	andi	r2,r17,1
    3628:	1001df26 	beq	r2,zero,3da8 <___vfprintf_internal_r+0x1ed4>
    362c:	db013117 	ldw	r12,1220(sp)
    3630:	6715883a 	add	r10,r12,fp
    3634:	d9013717 	ldw	r4,1244(sp)
    3638:	900b883a 	mov	r5,r18
    363c:	000d883a 	mov	r6,zero
    3640:	000f883a 	mov	r7,zero
    3644:	da013f15 	stw	r8,1276(sp)
    3648:	da413e15 	stw	r9,1272(sp)
    364c:	da813d15 	stw	r10,1268(sp)
    3650:	000c0c00 	call	c0c0 <__eqdf2>
    3654:	da013f17 	ldw	r8,1276(sp)
    3658:	da413e17 	ldw	r9,1272(sp)
    365c:	da813d17 	ldw	r10,1268(sp)
    3660:	10016526 	beq	r2,zero,3bf8 <___vfprintf_internal_r+0x1d24>
    3664:	d8812117 	ldw	r2,1156(sp)
    3668:	1280062e 	bgeu	r2,r10,3684 <___vfprintf_internal_r+0x17b0>
    366c:	01000c04 	movi	r4,48
    3670:	10c00044 	addi	r3,r2,1
    3674:	d8c12115 	stw	r3,1156(sp)
    3678:	11000005 	stb	r4,0(r2)
    367c:	d8812117 	ldw	r2,1156(sp)
    3680:	12bffb36 	bltu	r2,r10,3670 <___vfprintf_internal_r+0x179c>
    3684:	db013117 	ldw	r12,1220(sp)
    3688:	1305c83a 	sub	r2,r2,r12
    368c:	d8813315 	stw	r2,1228(sp)
    3690:	008011c4 	movi	r2,71
    3694:	a8814a26 	beq	r21,r2,3bc0 <___vfprintf_internal_r+0x1cec>
    3698:	00801944 	movi	r2,101
    369c:	14020a0e 	bge	r2,r16,3ec8 <___vfprintf_internal_r+0x1ff4>
    36a0:	00801984 	movi	r2,102
    36a4:	8081b626 	beq	r16,r2,3d80 <___vfprintf_internal_r+0x1eac>
    36a8:	db012617 	ldw	r12,1176(sp)
    36ac:	db013415 	stw	r12,1232(sp)
    36b0:	db013417 	ldw	r12,1232(sp)
    36b4:	dac13317 	ldw	r11,1228(sp)
    36b8:	62c1a816 	blt	r12,r11,3d5c <___vfprintf_internal_r+0x1e88>
    36bc:	8c40004c 	andi	r17,r17,1
    36c0:	8801ca1e 	bne	r17,zero,3dec <___vfprintf_internal_r+0x1f18>
    36c4:	6005883a 	mov	r2,r12
    36c8:	6001b516 	blt	r12,zero,3da0 <___vfprintf_internal_r+0x1ecc>
    36cc:	dc813417 	ldw	r18,1232(sp)
    36d0:	df012b07 	ldb	fp,1196(sp)
    36d4:	e001321e 	bne	fp,zero,3ba0 <___vfprintf_internal_r+0x1ccc>
    36d8:	dc412d17 	ldw	r17,1204(sp)
    36dc:	dd412783 	ldbu	r21,1182(sp)
    36e0:	d8812b15 	stw	r2,1196(sp)
    36e4:	dcc12d15 	stw	r19,1204(sp)
    36e8:	d8013215 	stw	zero,1224(sp)
    36ec:	003b8d06 	br	2524 <___vfprintf_internal_r+0x650>
    36f0:	88c0100c 	andi	r3,r17,64
    36f4:	18008226 	beq	r3,zero,3900 <___vfprintf_internal_r+0x1a2c>
    36f8:	dac12d17 	ldw	r11,1204(sp)
    36fc:	14c0000b 	ldhu	r19,0(r2)
    3700:	0039883a 	mov	fp,zero
    3704:	5ac00104 	addi	r11,r11,4
    3708:	dac12d15 	stw	r11,1204(sp)
    370c:	003c8f06 	br	294c <___vfprintf_internal_r+0xa78>
    3710:	1c000007 	ldb	r16,0(r3)
    3714:	1805883a 	mov	r2,r3
    3718:	003a5506 	br	2070 <___vfprintf_internal_r+0x19c>
    371c:	00800084 	movi	r2,2
    3720:	003b5e06 	br	249c <___vfprintf_internal_r+0x5c8>
    3724:	8880040c 	andi	r2,r17,16
    3728:	1000091e 	bne	r2,zero,3750 <___vfprintf_internal_r+0x187c>
    372c:	8c40100c 	andi	r17,r17,64
    3730:	88000726 	beq	r17,zero,3750 <___vfprintf_internal_r+0x187c>
    3734:	db012d17 	ldw	r12,1204(sp)
    3738:	dac12f17 	ldw	r11,1212(sp)
    373c:	60800017 	ldw	r2,0(r12)
    3740:	63000104 	addi	r12,r12,4
    3744:	db012d15 	stw	r12,1204(sp)
    3748:	12c0000d 	sth	r11,0(r2)
    374c:	003a1e06 	br	1fc8 <___vfprintf_internal_r+0xf4>
    3750:	db012d17 	ldw	r12,1204(sp)
    3754:	dac12f17 	ldw	r11,1212(sp)
    3758:	60800017 	ldw	r2,0(r12)
    375c:	63000104 	addi	r12,r12,4
    3760:	db012d15 	stw	r12,1204(sp)
    3764:	12c00015 	stw	r11,0(r2)
    3768:	003a1706 	br	1fc8 <___vfprintf_internal_r+0xf4>
    376c:	01000074 	movhi	r4,1
    3770:	213fab84 	addi	r4,r4,-338
    3774:	d9012c15 	stw	r4,1200(sp)
    3778:	dac12c17 	ldw	r11,1200(sp)
    377c:	1c87883a 	add	r3,r3,r18
    3780:	10800044 	addi	r2,r2,1
    3784:	42c00015 	stw	r11,0(r8)
    3788:	44800115 	stw	r18,4(r8)
    378c:	d8c12015 	stw	r3,1152(sp)
    3790:	d8811f15 	stw	r2,1148(sp)
    3794:	010001c4 	movi	r4,7
    3798:	20bee016 	blt	r4,r2,331c <___vfprintf_internal_r+0x1448>
    379c:	42000204 	addi	r8,r8,8
    37a0:	003ee506 	br	3338 <___vfprintf_internal_r+0x1464>
    37a4:	01000074 	movhi	r4,1
    37a8:	213fab84 	addi	r4,r4,-338
    37ac:	d9012c15 	stw	r4,1200(sp)
    37b0:	003bd806 	br	2714 <___vfprintf_internal_r+0x840>
    37b4:	b009883a 	mov	r4,r22
    37b8:	b80b883a 	mov	r5,r23
    37bc:	d9811e04 	addi	r6,sp,1144
    37c0:	000896c0 	call	896c <__sprint_r>
    37c4:	103ada1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    37c8:	d8c12017 	ldw	r3,1152(sp)
    37cc:	da000404 	addi	r8,sp,16
    37d0:	003d6b06 	br	2d80 <___vfprintf_internal_r+0xeac>
    37d4:	d8811f17 	ldw	r2,1148(sp)
    37d8:	03000074 	movhi	r12,1
    37dc:	01000044 	movi	r4,1
    37e0:	18c00044 	addi	r3,r3,1
    37e4:	10800044 	addi	r2,r2,1
    37e8:	633fab04 	addi	r12,r12,-340
    37ec:	41000115 	stw	r4,4(r8)
    37f0:	43000015 	stw	r12,0(r8)
    37f4:	d8c12015 	stw	r3,1152(sp)
    37f8:	d8811f15 	stw	r2,1148(sp)
    37fc:	010001c4 	movi	r4,7
    3800:	20804916 	blt	r4,r2,3928 <___vfprintf_internal_r+0x1a54>
    3804:	42000204 	addi	r8,r8,8
    3808:	8000041e 	bne	r16,zero,381c <___vfprintf_internal_r+0x1948>
    380c:	dac13317 	ldw	r11,1228(sp)
    3810:	5800021e 	bne	r11,zero,381c <___vfprintf_internal_r+0x1948>
    3814:	8880004c 	andi	r2,r17,1
    3818:	103bd526 	beq	r2,zero,2770 <___vfprintf_internal_r+0x89c>
    381c:	db013817 	ldw	r12,1248(sp)
    3820:	d8811f17 	ldw	r2,1148(sp)
    3824:	dac13517 	ldw	r11,1236(sp)
    3828:	1b07883a 	add	r3,r3,r12
    382c:	10800044 	addi	r2,r2,1
    3830:	42c00015 	stw	r11,0(r8)
    3834:	43000115 	stw	r12,4(r8)
    3838:	d8c12015 	stw	r3,1152(sp)
    383c:	d8811f15 	stw	r2,1148(sp)
    3840:	010001c4 	movi	r4,7
    3844:	20813016 	blt	r4,r2,3d08 <___vfprintf_internal_r+0x1e34>
    3848:	42000204 	addi	r8,r8,8
    384c:	0421c83a 	sub	r16,zero,r16
    3850:	0400630e 	bge	zero,r16,39e0 <___vfprintf_internal_r+0x1b0c>
    3854:	04800404 	movi	r18,16
    3858:	94009f0e 	bge	r18,r16,3ad8 <___vfprintf_internal_r+0x1c04>
    385c:	01000074 	movhi	r4,1
    3860:	213fab84 	addi	r4,r4,-338
    3864:	d9012c15 	stw	r4,1200(sp)
    3868:	054001c4 	movi	r21,7
    386c:	00000306 	br	387c <___vfprintf_internal_r+0x19a8>
    3870:	42000204 	addi	r8,r8,8
    3874:	843ffc04 	addi	r16,r16,-16
    3878:	94009a0e 	bge	r18,r16,3ae4 <___vfprintf_internal_r+0x1c10>
    387c:	18c00404 	addi	r3,r3,16
    3880:	10800044 	addi	r2,r2,1
    3884:	45000015 	stw	r20,0(r8)
    3888:	44800115 	stw	r18,4(r8)
    388c:	d8c12015 	stw	r3,1152(sp)
    3890:	d8811f15 	stw	r2,1148(sp)
    3894:	a8bff60e 	bge	r21,r2,3870 <___vfprintf_internal_r+0x199c>
    3898:	b009883a 	mov	r4,r22
    389c:	b80b883a 	mov	r5,r23
    38a0:	d9811e04 	addi	r6,sp,1144
    38a4:	000896c0 	call	896c <__sprint_r>
    38a8:	103aa11e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    38ac:	d8c12017 	ldw	r3,1152(sp)
    38b0:	d8811f17 	ldw	r2,1148(sp)
    38b4:	da000404 	addi	r8,sp,16
    38b8:	003fee06 	br	3874 <___vfprintf_internal_r+0x19a0>
    38bc:	008011c4 	movi	r2,71
    38c0:	1400b316 	blt	r2,r16,3b90 <___vfprintf_internal_r+0x1cbc>
    38c4:	03000074 	movhi	r12,1
    38c8:	633f9d04 	addi	r12,r12,-396
    38cc:	db013115 	stw	r12,1220(sp)
    38d0:	00c000c4 	movi	r3,3
    38d4:	00bfdfc4 	movi	r2,-129
    38d8:	d8c12b15 	stw	r3,1196(sp)
    38dc:	88a2703a 	and	r17,r17,r2
    38e0:	dd412783 	ldbu	r21,1182(sp)
    38e4:	dcc12d15 	stw	r19,1204(sp)
    38e8:	1825883a 	mov	r18,r3
    38ec:	d8013215 	stw	zero,1224(sp)
    38f0:	d8013415 	stw	zero,1232(sp)
    38f4:	003b0b06 	br	2524 <___vfprintf_internal_r+0x650>
    38f8:	4825883a 	mov	r18,r9
    38fc:	003cba06 	br	2be8 <___vfprintf_internal_r+0xd14>
    3900:	db012d17 	ldw	r12,1204(sp)
    3904:	14c00017 	ldw	r19,0(r2)
    3908:	0039883a 	mov	fp,zero
    390c:	63000104 	addi	r12,r12,4
    3910:	db012d15 	stw	r12,1204(sp)
    3914:	003c0d06 	br	294c <___vfprintf_internal_r+0xa78>
    3918:	00800074 	movhi	r2,1
    391c:	10bf9b04 	addi	r2,r2,-404
    3920:	d8813115 	stw	r2,1220(sp)
    3924:	003ac406 	br	2438 <___vfprintf_internal_r+0x564>
    3928:	b009883a 	mov	r4,r22
    392c:	b80b883a 	mov	r5,r23
    3930:	d9811e04 	addi	r6,sp,1144
    3934:	000896c0 	call	896c <__sprint_r>
    3938:	103a7d1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    393c:	dc012617 	ldw	r16,1176(sp)
    3940:	d8c12017 	ldw	r3,1152(sp)
    3944:	da000404 	addi	r8,sp,16
    3948:	003faf06 	br	3808 <___vfprintf_internal_r+0x1934>
    394c:	db012e17 	ldw	r12,1208(sp)
    3950:	1805883a 	mov	r2,r3
    3954:	dac12d15 	stw	r11,1204(sp)
    3958:	0319c83a 	sub	r12,zero,r12
    395c:	db012e15 	stw	r12,1208(sp)
    3960:	003a7e06 	br	235c <___vfprintf_internal_r+0x488>
    3964:	18800044 	addi	r2,r3,1
    3968:	8c400814 	ori	r17,r17,32
    396c:	1c000047 	ldb	r16,1(r3)
    3970:	0039bf06 	br	2070 <___vfprintf_internal_r+0x19c>
    3974:	b009883a 	mov	r4,r22
    3978:	b80b883a 	mov	r5,r23
    397c:	d9811e04 	addi	r6,sp,1144
    3980:	000896c0 	call	896c <__sprint_r>
    3984:	103a6a1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3988:	d8c12017 	ldw	r3,1152(sp)
    398c:	da000404 	addi	r8,sp,16
    3990:	003d0c06 	br	2dc4 <___vfprintf_internal_r+0xef0>
    3994:	db012817 	ldw	r12,1184(sp)
    3998:	d8c13117 	ldw	r3,1220(sp)
    399c:	60e5c83a 	sub	r18,r12,r3
    39a0:	003adb06 	br	2510 <___vfprintf_internal_r+0x63c>
    39a4:	da013f15 	stw	r8,1276(sp)
    39a8:	0001e3c0 	call	1e3c <strlen>
    39ac:	1025883a 	mov	r18,r2
    39b0:	da013f17 	ldw	r8,1276(sp)
    39b4:	903c8e0e 	bge	r18,zero,2bf0 <___vfprintf_internal_r+0xd1c>
    39b8:	0005883a 	mov	r2,zero
    39bc:	003c8c06 	br	2bf0 <___vfprintf_internal_r+0xd1c>
    39c0:	b009883a 	mov	r4,r22
    39c4:	b80b883a 	mov	r5,r23
    39c8:	d9811e04 	addi	r6,sp,1144
    39cc:	000896c0 	call	896c <__sprint_r>
    39d0:	103a571e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    39d4:	d8c12017 	ldw	r3,1152(sp)
    39d8:	d8811f17 	ldw	r2,1148(sp)
    39dc:	da000404 	addi	r8,sp,16
    39e0:	db013317 	ldw	r12,1228(sp)
    39e4:	dac13117 	ldw	r11,1220(sp)
    39e8:	10800044 	addi	r2,r2,1
    39ec:	60c7883a 	add	r3,r12,r3
    39f0:	42c00015 	stw	r11,0(r8)
    39f4:	43000115 	stw	r12,4(r8)
    39f8:	d8c12015 	stw	r3,1152(sp)
    39fc:	d8811f15 	stw	r2,1148(sp)
    3a00:	010001c4 	movi	r4,7
    3a04:	20bb590e 	bge	r4,r2,276c <___vfprintf_internal_r+0x898>
    3a08:	003d7e06 	br	3004 <___vfprintf_internal_r+0x1130>
    3a0c:	01000074 	movhi	r4,1
    3a10:	213faf84 	addi	r4,r4,-322
    3a14:	d9013615 	stw	r4,1240(sp)
    3a18:	003af606 	br	25f4 <___vfprintf_internal_r+0x720>
    3a1c:	d8812604 	addi	r2,sp,1176
    3a20:	d8800115 	stw	r2,4(sp)
    3a24:	d9413717 	ldw	r5,1244(sp)
    3a28:	d8812504 	addi	r2,sp,1172
    3a2c:	d8800215 	stw	r2,8(sp)
    3a30:	d8812104 	addi	r2,sp,1156
    3a34:	da400015 	stw	r9,0(sp)
    3a38:	d8800315 	stw	r2,12(sp)
    3a3c:	b009883a 	mov	r4,r22
    3a40:	900d883a 	mov	r6,r18
    3a44:	01c000c4 	movi	r7,3
    3a48:	da013f15 	stw	r8,1276(sp)
    3a4c:	da413e15 	stw	r9,1272(sp)
    3a50:	00043940 	call	4394 <_dtoa_r>
    3a54:	da413e17 	ldw	r9,1272(sp)
    3a58:	da013f17 	ldw	r8,1276(sp)
    3a5c:	d8813115 	stw	r2,1220(sp)
    3a60:	4839883a 	mov	fp,r9
    3a64:	dac13117 	ldw	r11,1220(sp)
    3a68:	00801184 	movi	r2,70
    3a6c:	5f15883a 	add	r10,r11,fp
    3a70:	a8bef01e 	bne	r21,r2,3634 <___vfprintf_internal_r+0x1760>
    3a74:	59000007 	ldb	r4,0(r11)
    3a78:	00800c04 	movi	r2,48
    3a7c:	2080e026 	beq	r4,r2,3e00 <___vfprintf_internal_r+0x1f2c>
    3a80:	d8c12617 	ldw	r3,1176(sp)
    3a84:	50d5883a 	add	r10,r10,r3
    3a88:	003eea06 	br	3634 <___vfprintf_internal_r+0x1760>
    3a8c:	0025883a 	mov	r18,zero
    3a90:	003db306 	br	3160 <___vfprintf_internal_r+0x128c>
    3a94:	b009883a 	mov	r4,r22
    3a98:	b80b883a 	mov	r5,r23
    3a9c:	d9811e04 	addi	r6,sp,1144
    3aa0:	000896c0 	call	896c <__sprint_r>
    3aa4:	103a221e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3aa8:	d8c12017 	ldw	r3,1152(sp)
    3aac:	da000404 	addi	r8,sp,16
    3ab0:	003daa06 	br	315c <___vfprintf_internal_r+0x1288>
    3ab4:	b009883a 	mov	r4,r22
    3ab8:	b80b883a 	mov	r5,r23
    3abc:	d9811e04 	addi	r6,sp,1144
    3ac0:	000896c0 	call	896c <__sprint_r>
    3ac4:	103a1a1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3ac8:	d8812617 	ldw	r2,1176(sp)
    3acc:	d8c12017 	ldw	r3,1152(sp)
    3ad0:	da000404 	addi	r8,sp,16
    3ad4:	003e2c06 	br	3388 <___vfprintf_internal_r+0x14b4>
    3ad8:	03000074 	movhi	r12,1
    3adc:	633fab84 	addi	r12,r12,-338
    3ae0:	db012c15 	stw	r12,1200(sp)
    3ae4:	dac12c17 	ldw	r11,1200(sp)
    3ae8:	1c07883a 	add	r3,r3,r16
    3aec:	10800044 	addi	r2,r2,1
    3af0:	42c00015 	stw	r11,0(r8)
    3af4:	44000115 	stw	r16,4(r8)
    3af8:	d8c12015 	stw	r3,1152(sp)
    3afc:	d8811f15 	stw	r2,1148(sp)
    3b00:	010001c4 	movi	r4,7
    3b04:	20bfae16 	blt	r4,r2,39c0 <___vfprintf_internal_r+0x1aec>
    3b08:	42000204 	addi	r8,r8,8
    3b0c:	003fb406 	br	39e0 <___vfprintf_internal_r+0x1b0c>
    3b10:	03000074 	movhi	r12,1
    3b14:	633faf84 	addi	r12,r12,-322
    3b18:	db013615 	stw	r12,1240(sp)
    3b1c:	003b3806 	br	2800 <___vfprintf_internal_r+0x92c>
    3b20:	b009883a 	mov	r4,r22
    3b24:	b80b883a 	mov	r5,r23
    3b28:	d9811e04 	addi	r6,sp,1144
    3b2c:	000896c0 	call	896c <__sprint_r>
    3b30:	1039ff1e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3b34:	d8812617 	ldw	r2,1176(sp)
    3b38:	db013317 	ldw	r12,1228(sp)
    3b3c:	d8c12017 	ldw	r3,1152(sp)
    3b40:	da000404 	addi	r8,sp,16
    3b44:	6085c83a 	sub	r2,r12,r2
    3b48:	003e2006 	br	33cc <___vfprintf_internal_r+0x14f8>
    3b4c:	0021883a 	mov	r16,zero
    3b50:	003e1f06 	br	33d0 <___vfprintf_internal_r+0x14fc>
    3b54:	00800184 	movi	r2,6
    3b58:	1240012e 	bgeu	r2,r9,3b60 <___vfprintf_internal_r+0x1c8c>
    3b5c:	1013883a 	mov	r9,r2
    3b60:	4825883a 	mov	r18,r9
    3b64:	4805883a 	mov	r2,r9
    3b68:	48009e16 	blt	r9,zero,3de4 <___vfprintf_internal_r+0x1f10>
    3b6c:	d8812b15 	stw	r2,1196(sp)
    3b70:	00800074 	movhi	r2,1
    3b74:	10bfa904 	addi	r2,r2,-348
    3b78:	d8813115 	stw	r2,1220(sp)
    3b7c:	dcc12d15 	stw	r19,1204(sp)
    3b80:	d8013215 	stw	zero,1224(sp)
    3b84:	d8013415 	stw	zero,1232(sp)
    3b88:	0005883a 	mov	r2,zero
    3b8c:	003a6c06 	br	2540 <___vfprintf_internal_r+0x66c>
    3b90:	00800074 	movhi	r2,1
    3b94:	10bf9e04 	addi	r2,r2,-392
    3b98:	d8813115 	stw	r2,1220(sp)
    3b9c:	003f4c06 	br	38d0 <___vfprintf_internal_r+0x19fc>
    3ba0:	00c00b44 	movi	r3,45
    3ba4:	d8812b15 	stw	r2,1196(sp)
    3ba8:	dc412d17 	ldw	r17,1204(sp)
    3bac:	d8c12785 	stb	r3,1182(sp)
    3bb0:	dcc12d15 	stw	r19,1204(sp)
    3bb4:	d8013215 	stw	zero,1224(sp)
    3bb8:	00800b44 	movi	r2,45
    3bbc:	003a5d06 	br	2534 <___vfprintf_internal_r+0x660>
    3bc0:	d8c12617 	ldw	r3,1176(sp)
    3bc4:	00bfff44 	movi	r2,-3
    3bc8:	18800d16 	blt	r3,r2,3c00 <___vfprintf_internal_r+0x1d2c>
    3bcc:	48c00c16 	blt	r9,r3,3c00 <___vfprintf_internal_r+0x1d2c>
    3bd0:	d8c13415 	stw	r3,1232(sp)
    3bd4:	040019c4 	movi	r16,103
    3bd8:	003eb506 	br	36b0 <___vfprintf_internal_r+0x17dc>
    3bdc:	05400b44 	movi	r21,45
    3be0:	dd412785 	stb	r21,1182(sp)
    3be4:	003a0f06 	br	2424 <___vfprintf_internal_r+0x550>
    3be8:	01000074 	movhi	r4,1
    3bec:	213fab84 	addi	r4,r4,-338
    3bf0:	d9012c15 	stw	r4,1200(sp)
    3bf4:	003cb106 	br	2ebc <___vfprintf_internal_r+0xfe8>
    3bf8:	5005883a 	mov	r2,r10
    3bfc:	003ea106 	br	3684 <___vfprintf_internal_r+0x17b0>
    3c00:	843fff84 	addi	r16,r16,-2
    3c04:	1f3fffc4 	addi	fp,r3,-1
    3c08:	df012615 	stw	fp,1176(sp)
    3c0c:	dc0122c5 	stb	r16,1163(sp)
    3c10:	e0009516 	blt	fp,zero,3e68 <___vfprintf_internal_r+0x1f94>
    3c14:	00800ac4 	movi	r2,43
    3c18:	d8812305 	stb	r2,1164(sp)
    3c1c:	00800244 	movi	r2,9
    3c20:	1700690e 	bge	r2,fp,3dc8 <___vfprintf_internal_r+0x1ef4>
    3c24:	dd4122c4 	addi	r21,sp,1163
    3c28:	dc012c15 	stw	r16,1200(sp)
    3c2c:	8825883a 	mov	r18,r17
    3c30:	a821883a 	mov	r16,r21
    3c34:	4023883a 	mov	r17,r8
    3c38:	e009883a 	mov	r4,fp
    3c3c:	01400284 	movi	r5,10
    3c40:	00011340 	call	1134 <__modsi3>
    3c44:	10800c04 	addi	r2,r2,48
    3c48:	843fffc4 	addi	r16,r16,-1
    3c4c:	e009883a 	mov	r4,fp
    3c50:	01400284 	movi	r5,10
    3c54:	80800005 	stb	r2,0(r16)
    3c58:	00010e00 	call	10e0 <__divsi3>
    3c5c:	1039883a 	mov	fp,r2
    3c60:	00800244 	movi	r2,9
    3c64:	173ff416 	blt	r2,fp,3c38 <___vfprintf_internal_r+0x1d64>
    3c68:	8811883a 	mov	r8,r17
    3c6c:	e0800c04 	addi	r2,fp,48
    3c70:	9023883a 	mov	r17,r18
    3c74:	8025883a 	mov	r18,r16
    3c78:	913fffc4 	addi	r4,r18,-1
    3c7c:	90bfffc5 	stb	r2,-1(r18)
    3c80:	dc012c17 	ldw	r16,1200(sp)
    3c84:	25408e2e 	bgeu	r4,r21,3ec0 <___vfprintf_internal_r+0x1fec>
    3c88:	d9412384 	addi	r5,sp,1166
    3c8c:	2c8bc83a 	sub	r5,r5,r18
    3c90:	d8c12344 	addi	r3,sp,1165
    3c94:	a94b883a 	add	r5,r21,r5
    3c98:	00000106 	br	3ca0 <___vfprintf_internal_r+0x1dcc>
    3c9c:	20800003 	ldbu	r2,0(r4)
    3ca0:	18800005 	stb	r2,0(r3)
    3ca4:	18c00044 	addi	r3,r3,1
    3ca8:	21000044 	addi	r4,r4,1
    3cac:	197ffb1e 	bne	r3,r5,3c9c <___vfprintf_internal_r+0x1dc8>
    3cb0:	d8812304 	addi	r2,sp,1164
    3cb4:	1485c83a 	sub	r2,r2,r18
    3cb8:	d8c12344 	addi	r3,sp,1165
    3cbc:	1885883a 	add	r2,r3,r2
    3cc0:	dac13317 	ldw	r11,1228(sp)
    3cc4:	156bc83a 	sub	r21,r2,r21
    3cc8:	dd413a15 	stw	r21,1256(sp)
    3ccc:	00800044 	movi	r2,1
    3cd0:	5d65883a 	add	r18,r11,r21
    3cd4:	12c0770e 	bge	r2,r11,3eb4 <___vfprintf_internal_r+0x1fe0>
    3cd8:	94800044 	addi	r18,r18,1
    3cdc:	9005883a 	mov	r2,r18
    3ce0:	90007216 	blt	r18,zero,3eac <___vfprintf_internal_r+0x1fd8>
    3ce4:	d8013415 	stw	zero,1232(sp)
    3ce8:	003e7906 	br	36d0 <___vfprintf_internal_r+0x17fc>
    3cec:	da412b15 	stw	r9,1196(sp)
    3cf0:	dd412783 	ldbu	r21,1182(sp)
    3cf4:	4825883a 	mov	r18,r9
    3cf8:	dcc12d15 	stw	r19,1204(sp)
    3cfc:	d8013215 	stw	zero,1224(sp)
    3d00:	d8013415 	stw	zero,1232(sp)
    3d04:	003a0706 	br	2524 <___vfprintf_internal_r+0x650>
    3d08:	b009883a 	mov	r4,r22
    3d0c:	b80b883a 	mov	r5,r23
    3d10:	d9811e04 	addi	r6,sp,1144
    3d14:	000896c0 	call	896c <__sprint_r>
    3d18:	1039851e 	bne	r2,zero,2330 <___vfprintf_internal_r+0x45c>
    3d1c:	dc012617 	ldw	r16,1176(sp)
    3d20:	d8c12017 	ldw	r3,1152(sp)
    3d24:	d8811f17 	ldw	r2,1148(sp)
    3d28:	da000404 	addi	r8,sp,16
    3d2c:	003ec706 	br	384c <___vfprintf_internal_r+0x1978>
    3d30:	483e1a1e 	bne	r9,zero,359c <___vfprintf_internal_r+0x16c8>
    3d34:	9013883a 	mov	r9,r18
    3d38:	003e1806 	br	359c <___vfprintf_internal_r+0x16c8>
    3d3c:	00c00b44 	movi	r3,45
    3d40:	64a0003c 	xorhi	r18,r12,32768
    3d44:	d8c12b05 	stb	r3,1196(sp)
    3d48:	003e1a06 	br	35b4 <___vfprintf_internal_r+0x16e0>
    3d4c:	4f000044 	addi	fp,r9,1
    3d50:	003e1f06 	br	35d0 <___vfprintf_internal_r+0x16fc>
    3d54:	02400184 	movi	r9,6
    3d58:	003e1006 	br	359c <___vfprintf_internal_r+0x16c8>
    3d5c:	d8c13417 	ldw	r3,1232(sp)
    3d60:	00c04b0e 	bge	zero,r3,3e90 <___vfprintf_internal_r+0x1fbc>
    3d64:	04800044 	movi	r18,1
    3d68:	dac13317 	ldw	r11,1228(sp)
    3d6c:	92e5883a 	add	r18,r18,r11
    3d70:	9005883a 	mov	r2,r18
    3d74:	903e560e 	bge	r18,zero,36d0 <___vfprintf_internal_r+0x17fc>
    3d78:	0005883a 	mov	r2,zero
    3d7c:	003e5406 	br	36d0 <___vfprintf_internal_r+0x17fc>
    3d80:	d8c12617 	ldw	r3,1176(sp)
    3d84:	d8c13415 	stw	r3,1232(sp)
    3d88:	00c03b0e 	bge	zero,r3,3e78 <___vfprintf_internal_r+0x1fa4>
    3d8c:	4800081e 	bne	r9,zero,3db0 <___vfprintf_internal_r+0x1edc>
    3d90:	8c40004c 	andi	r17,r17,1
    3d94:	8800061e 	bne	r17,zero,3db0 <___vfprintf_internal_r+0x1edc>
    3d98:	1805883a 	mov	r2,r3
    3d9c:	183e4b0e 	bge	r3,zero,36cc <___vfprintf_internal_r+0x17f8>
    3da0:	0005883a 	mov	r2,zero
    3da4:	003e4906 	br	36cc <___vfprintf_internal_r+0x17f8>
    3da8:	d8812117 	ldw	r2,1156(sp)
    3dac:	003e3506 	br	3684 <___vfprintf_internal_r+0x17b0>
    3db0:	dac13417 	ldw	r11,1232(sp)
    3db4:	4a400044 	addi	r9,r9,1
    3db8:	5a65883a 	add	r18,r11,r9
    3dbc:	9005883a 	mov	r2,r18
    3dc0:	903e430e 	bge	r18,zero,36d0 <___vfprintf_internal_r+0x17fc>
    3dc4:	003fec06 	br	3d78 <___vfprintf_internal_r+0x1ea4>
    3dc8:	00800c04 	movi	r2,48
    3dcc:	e0c00c04 	addi	r3,fp,48
    3dd0:	d8812345 	stb	r2,1165(sp)
    3dd4:	d8c12385 	stb	r3,1166(sp)
    3dd8:	d88123c4 	addi	r2,sp,1167
    3ddc:	dd4122c4 	addi	r21,sp,1163
    3de0:	003fb706 	br	3cc0 <___vfprintf_internal_r+0x1dec>
    3de4:	0005883a 	mov	r2,zero
    3de8:	003f6006 	br	3b6c <___vfprintf_internal_r+0x1c98>
    3dec:	db013417 	ldw	r12,1232(sp)
    3df0:	64800044 	addi	r18,r12,1
    3df4:	9005883a 	mov	r2,r18
    3df8:	903e350e 	bge	r18,zero,36d0 <___vfprintf_internal_r+0x17fc>
    3dfc:	003fde06 	br	3d78 <___vfprintf_internal_r+0x1ea4>
    3e00:	d9013717 	ldw	r4,1244(sp)
    3e04:	900b883a 	mov	r5,r18
    3e08:	000d883a 	mov	r6,zero
    3e0c:	000f883a 	mov	r7,zero
    3e10:	da013f15 	stw	r8,1276(sp)
    3e14:	da413e15 	stw	r9,1272(sp)
    3e18:	da813d15 	stw	r10,1268(sp)
    3e1c:	000c0c00 	call	c0c0 <__eqdf2>
    3e20:	da013f17 	ldw	r8,1276(sp)
    3e24:	da413e17 	ldw	r9,1272(sp)
    3e28:	da813d17 	ldw	r10,1268(sp)
    3e2c:	103f1426 	beq	r2,zero,3a80 <___vfprintf_internal_r+0x1bac>
    3e30:	00800044 	movi	r2,1
    3e34:	1707c83a 	sub	r3,r2,fp
    3e38:	d8c12615 	stw	r3,1176(sp)
    3e3c:	003f1106 	br	3a84 <___vfprintf_internal_r+0x1bb0>
    3e40:	dac12d17 	ldw	r11,1204(sp)
    3e44:	5a400017 	ldw	r9,0(r11)
    3e48:	5ac00104 	addi	r11,r11,4
    3e4c:	dac12d15 	stw	r11,1204(sp)
    3e50:	483ec60e 	bge	r9,zero,396c <___vfprintf_internal_r+0x1a98>
    3e54:	027fffc4 	movi	r9,-1
    3e58:	1c000047 	ldb	r16,1(r3)
    3e5c:	00388406 	br	2070 <___vfprintf_internal_r+0x19c>
    3e60:	043fffc4 	movi	r16,-1
    3e64:	00391006 	br	22a8 <___vfprintf_internal_r+0x3d4>
    3e68:	00800b44 	movi	r2,45
    3e6c:	0739c83a 	sub	fp,zero,fp
    3e70:	d8812305 	stb	r2,1164(sp)
    3e74:	003f6906 	br	3c1c <___vfprintf_internal_r+0x1d48>
    3e78:	4800081e 	bne	r9,zero,3e9c <___vfprintf_internal_r+0x1fc8>
    3e7c:	8c40004c 	andi	r17,r17,1
    3e80:	8800061e 	bne	r17,zero,3e9c <___vfprintf_internal_r+0x1fc8>
    3e84:	00800044 	movi	r2,1
    3e88:	1025883a 	mov	r18,r2
    3e8c:	003e1006 	br	36d0 <___vfprintf_internal_r+0x17fc>
    3e90:	04800084 	movi	r18,2
    3e94:	90e5c83a 	sub	r18,r18,r3
    3e98:	003fb306 	br	3d68 <___vfprintf_internal_r+0x1e94>
    3e9c:	4c800084 	addi	r18,r9,2
    3ea0:	9005883a 	mov	r2,r18
    3ea4:	903e0a0e 	bge	r18,zero,36d0 <___vfprintf_internal_r+0x17fc>
    3ea8:	003fb306 	br	3d78 <___vfprintf_internal_r+0x1ea4>
    3eac:	0005883a 	mov	r2,zero
    3eb0:	003f8c06 	br	3ce4 <___vfprintf_internal_r+0x1e10>
    3eb4:	88a2703a 	and	r17,r17,r2
    3eb8:	883f8826 	beq	r17,zero,3cdc <___vfprintf_internal_r+0x1e08>
    3ebc:	003f8606 	br	3cd8 <___vfprintf_internal_r+0x1e04>
    3ec0:	d8812344 	addi	r2,sp,1165
    3ec4:	003f7e06 	br	3cc0 <___vfprintf_internal_r+0x1dec>
    3ec8:	d8c12617 	ldw	r3,1176(sp)
    3ecc:	003f4d06 	br	3c04 <___vfprintf_internal_r+0x1d30>

00003ed0 <__vfprintf_internal>:
    3ed0:	2007883a 	mov	r3,r4
    3ed4:	01000074 	movhi	r4,1
    3ed8:	21070304 	addi	r4,r4,7180
    3edc:	21000017 	ldw	r4,0(r4)
    3ee0:	2805883a 	mov	r2,r5
    3ee4:	300f883a 	mov	r7,r6
    3ee8:	180b883a 	mov	r5,r3
    3eec:	100d883a 	mov	r6,r2
    3ef0:	0001ed41 	jmpi	1ed4 <___vfprintf_internal_r>

00003ef4 <__swbuf_r>:
    3ef4:	defffc04 	addi	sp,sp,-16
    3ef8:	dc800215 	stw	r18,8(sp)
    3efc:	dc400115 	stw	r17,4(sp)
    3f00:	dc000015 	stw	r16,0(sp)
    3f04:	dfc00315 	stw	ra,12(sp)
    3f08:	2025883a 	mov	r18,r4
    3f0c:	2823883a 	mov	r17,r5
    3f10:	3021883a 	mov	r16,r6
    3f14:	20000226 	beq	r4,zero,3f20 <__swbuf_r+0x2c>
    3f18:	20800e17 	ldw	r2,56(r4)
    3f1c:	10004126 	beq	r2,zero,4024 <__swbuf_r+0x130>
    3f20:	80c00617 	ldw	r3,24(r16)
    3f24:	8180030b 	ldhu	r6,12(r16)
    3f28:	80c00215 	stw	r3,8(r16)
    3f2c:	30c0020c 	andi	r3,r6,8
    3f30:	18003526 	beq	r3,zero,4008 <__swbuf_r+0x114>
    3f34:	80c00417 	ldw	r3,16(r16)
    3f38:	18003326 	beq	r3,zero,4008 <__swbuf_r+0x114>
    3f3c:	3088000c 	andi	r2,r6,8192
    3f40:	8c403fcc 	andi	r17,r17,255
    3f44:	10001726 	beq	r2,zero,3fa4 <__swbuf_r+0xb0>
    3f48:	80800017 	ldw	r2,0(r16)
    3f4c:	81000517 	ldw	r4,20(r16)
    3f50:	10c7c83a 	sub	r3,r2,r3
    3f54:	19001d0e 	bge	r3,r4,3fcc <__swbuf_r+0xd8>
    3f58:	18c00044 	addi	r3,r3,1
    3f5c:	81400217 	ldw	r5,8(r16)
    3f60:	11000044 	addi	r4,r2,1
    3f64:	81000015 	stw	r4,0(r16)
    3f68:	297fffc4 	addi	r5,r5,-1
    3f6c:	81400215 	stw	r5,8(r16)
    3f70:	14400005 	stb	r17,0(r2)
    3f74:	80800517 	ldw	r2,20(r16)
    3f78:	10c01d26 	beq	r2,r3,3ff0 <__swbuf_r+0xfc>
    3f7c:	8080030b 	ldhu	r2,12(r16)
    3f80:	1080004c 	andi	r2,r2,1
    3f84:	1000181e 	bne	r2,zero,3fe8 <__swbuf_r+0xf4>
    3f88:	8805883a 	mov	r2,r17
    3f8c:	dfc00317 	ldw	ra,12(sp)
    3f90:	dc800217 	ldw	r18,8(sp)
    3f94:	dc400117 	ldw	r17,4(sp)
    3f98:	dc000017 	ldw	r16,0(sp)
    3f9c:	dec00404 	addi	sp,sp,16
    3fa0:	f800283a 	ret
    3fa4:	81001917 	ldw	r4,100(r16)
    3fa8:	00b7ffc4 	movi	r2,-8193
    3fac:	31880014 	ori	r6,r6,8192
    3fb0:	2084703a 	and	r2,r4,r2
    3fb4:	80801915 	stw	r2,100(r16)
    3fb8:	80800017 	ldw	r2,0(r16)
    3fbc:	81000517 	ldw	r4,20(r16)
    3fc0:	8180030d 	sth	r6,12(r16)
    3fc4:	10c7c83a 	sub	r3,r2,r3
    3fc8:	193fe316 	blt	r3,r4,3f58 <__swbuf_r+0x64>
    3fcc:	9009883a 	mov	r4,r18
    3fd0:	800b883a 	mov	r5,r16
    3fd4:	0005abc0 	call	5abc <_fflush_r>
    3fd8:	1000091e 	bne	r2,zero,4000 <__swbuf_r+0x10c>
    3fdc:	80800017 	ldw	r2,0(r16)
    3fe0:	00c00044 	movi	r3,1
    3fe4:	003fdd06 	br	3f5c <__swbuf_r+0x68>
    3fe8:	00800284 	movi	r2,10
    3fec:	88bfe61e 	bne	r17,r2,3f88 <__swbuf_r+0x94>
    3ff0:	9009883a 	mov	r4,r18
    3ff4:	800b883a 	mov	r5,r16
    3ff8:	0005abc0 	call	5abc <_fflush_r>
    3ffc:	103fe226 	beq	r2,zero,3f88 <__swbuf_r+0x94>
    4000:	00bfffc4 	movi	r2,-1
    4004:	003fe106 	br	3f8c <__swbuf_r+0x98>
    4008:	9009883a 	mov	r4,r18
    400c:	800b883a 	mov	r5,r16
    4010:	00040640 	call	4064 <__swsetup_r>
    4014:	1000051e 	bne	r2,zero,402c <__swbuf_r+0x138>
    4018:	8180030b 	ldhu	r6,12(r16)
    401c:	80c00417 	ldw	r3,16(r16)
    4020:	003fc606 	br	3f3c <__swbuf_r+0x48>
    4024:	00060640 	call	6064 <__sinit>
    4028:	003fbd06 	br	3f20 <__swbuf_r+0x2c>
    402c:	80c0030b 	ldhu	r3,12(r16)
    4030:	00bfffc4 	movi	r2,-1
    4034:	18c01014 	ori	r3,r3,64
    4038:	80c0030d 	sth	r3,12(r16)
    403c:	00c00244 	movi	r3,9
    4040:	90c00015 	stw	r3,0(r18)
    4044:	003fd106 	br	3f8c <__swbuf_r+0x98>

00004048 <__swbuf>:
    4048:	00c00074 	movhi	r3,1
    404c:	18c70304 	addi	r3,r3,7180
    4050:	2005883a 	mov	r2,r4
    4054:	19000017 	ldw	r4,0(r3)
    4058:	280d883a 	mov	r6,r5
    405c:	100b883a 	mov	r5,r2
    4060:	0003ef41 	jmpi	3ef4 <__swbuf_r>

00004064 <__swsetup_r>:
    4064:	00800074 	movhi	r2,1
    4068:	defffd04 	addi	sp,sp,-12
    406c:	10870304 	addi	r2,r2,7180
    4070:	dc400115 	stw	r17,4(sp)
    4074:	2023883a 	mov	r17,r4
    4078:	11000017 	ldw	r4,0(r2)
    407c:	dc000015 	stw	r16,0(sp)
    4080:	dfc00215 	stw	ra,8(sp)
    4084:	2821883a 	mov	r16,r5
    4088:	20000226 	beq	r4,zero,4094 <__swsetup_r+0x30>
    408c:	20c00e17 	ldw	r3,56(r4)
    4090:	18002e26 	beq	r3,zero,414c <__swsetup_r+0xe8>
    4094:	8080030b 	ldhu	r2,12(r16)
    4098:	10c0020c 	andi	r3,r2,8
    409c:	100d883a 	mov	r6,r2
    40a0:	18000f26 	beq	r3,zero,40e0 <__swsetup_r+0x7c>
    40a4:	80c00417 	ldw	r3,16(r16)
    40a8:	18001526 	beq	r3,zero,4100 <__swsetup_r+0x9c>
    40ac:	1100004c 	andi	r4,r2,1
    40b0:	20001c1e 	bne	r4,zero,4124 <__swsetup_r+0xc0>
    40b4:	1080008c 	andi	r2,r2,2
    40b8:	1000261e 	bne	r2,zero,4154 <__swsetup_r+0xf0>
    40bc:	80800517 	ldw	r2,20(r16)
    40c0:	80800215 	stw	r2,8(r16)
    40c4:	18001c26 	beq	r3,zero,4138 <__swsetup_r+0xd4>
    40c8:	0005883a 	mov	r2,zero
    40cc:	dfc00217 	ldw	ra,8(sp)
    40d0:	dc400117 	ldw	r17,4(sp)
    40d4:	dc000017 	ldw	r16,0(sp)
    40d8:	dec00304 	addi	sp,sp,12
    40dc:	f800283a 	ret
    40e0:	3080040c 	andi	r2,r6,16
    40e4:	10001726 	beq	r2,zero,4144 <__swsetup_r+0xe0>
    40e8:	3080010c 	andi	r2,r6,4
    40ec:	10001b1e 	bne	r2,zero,415c <__swsetup_r+0xf8>
    40f0:	80c00417 	ldw	r3,16(r16)
    40f4:	30800214 	ori	r2,r6,8
    40f8:	8080030d 	sth	r2,12(r16)
    40fc:	183feb1e 	bne	r3,zero,40ac <__swsetup_r+0x48>
    4100:	1140a00c 	andi	r5,r2,640
    4104:	01008004 	movi	r4,512
    4108:	293fe826 	beq	r5,r4,40ac <__swsetup_r+0x48>
    410c:	8809883a 	mov	r4,r17
    4110:	800b883a 	mov	r5,r16
    4114:	0006bbc0 	call	6bbc <__smakebuf_r>
    4118:	8080030b 	ldhu	r2,12(r16)
    411c:	80c00417 	ldw	r3,16(r16)
    4120:	003fe206 	br	40ac <__swsetup_r+0x48>
    4124:	80800517 	ldw	r2,20(r16)
    4128:	80000215 	stw	zero,8(r16)
    412c:	0085c83a 	sub	r2,zero,r2
    4130:	80800615 	stw	r2,24(r16)
    4134:	183fe41e 	bne	r3,zero,40c8 <__swsetup_r+0x64>
    4138:	8080030b 	ldhu	r2,12(r16)
    413c:	1080200c 	andi	r2,r2,128
    4140:	103fe226 	beq	r2,zero,40cc <__swsetup_r+0x68>
    4144:	00bfffc4 	movi	r2,-1
    4148:	003fe006 	br	40cc <__swsetup_r+0x68>
    414c:	00060640 	call	6064 <__sinit>
    4150:	003fd006 	br	4094 <__swsetup_r+0x30>
    4154:	0005883a 	mov	r2,zero
    4158:	003fd906 	br	40c0 <__swsetup_r+0x5c>
    415c:	81400c17 	ldw	r5,48(r16)
    4160:	28000626 	beq	r5,zero,417c <__swsetup_r+0x118>
    4164:	80801004 	addi	r2,r16,64
    4168:	28800326 	beq	r5,r2,4178 <__swsetup_r+0x114>
    416c:	8809883a 	mov	r4,r17
    4170:	00061d80 	call	61d8 <_free_r>
    4174:	8180030b 	ldhu	r6,12(r16)
    4178:	80000c15 	stw	zero,48(r16)
    417c:	80c00417 	ldw	r3,16(r16)
    4180:	00bff6c4 	movi	r2,-37
    4184:	118c703a 	and	r6,r2,r6
    4188:	80000115 	stw	zero,4(r16)
    418c:	80c00015 	stw	r3,0(r16)
    4190:	003fd806 	br	40f4 <__swsetup_r+0x90>

00004194 <quorem>:
    4194:	defff704 	addi	sp,sp,-36
    4198:	dc800215 	stw	r18,8(sp)
    419c:	20800417 	ldw	r2,16(r4)
    41a0:	2c800417 	ldw	r18,16(r5)
    41a4:	dfc00815 	stw	ra,32(sp)
    41a8:	ddc00715 	stw	r23,28(sp)
    41ac:	dd800615 	stw	r22,24(sp)
    41b0:	dd400515 	stw	r21,20(sp)
    41b4:	dd000415 	stw	r20,16(sp)
    41b8:	dcc00315 	stw	r19,12(sp)
    41bc:	dc400115 	stw	r17,4(sp)
    41c0:	dc000015 	stw	r16,0(sp)
    41c4:	14807116 	blt	r2,r18,438c <quorem+0x1f8>
    41c8:	94bfffc4 	addi	r18,r18,-1
    41cc:	94ad883a 	add	r22,r18,r18
    41d0:	b5ad883a 	add	r22,r22,r22
    41d4:	2c400504 	addi	r17,r5,20
    41d8:	8da9883a 	add	r20,r17,r22
    41dc:	25400504 	addi	r21,r4,20
    41e0:	282f883a 	mov	r23,r5
    41e4:	adad883a 	add	r22,r21,r22
    41e8:	a1400017 	ldw	r5,0(r20)
    41ec:	2021883a 	mov	r16,r4
    41f0:	b1000017 	ldw	r4,0(r22)
    41f4:	29400044 	addi	r5,r5,1
    41f8:	00011900 	call	1190 <__udivsi3>
    41fc:	1027883a 	mov	r19,r2
    4200:	10002c26 	beq	r2,zero,42b4 <quorem+0x120>
    4204:	a813883a 	mov	r9,r21
    4208:	8811883a 	mov	r8,r17
    420c:	0009883a 	mov	r4,zero
    4210:	000d883a 	mov	r6,zero
    4214:	41c00017 	ldw	r7,0(r8)
    4218:	49400017 	ldw	r5,0(r9)
    421c:	42000104 	addi	r8,r8,4
    4220:	38bfffcc 	andi	r2,r7,65535
    4224:	14c5383a 	mul	r2,r2,r19
    4228:	380ed43a 	srli	r7,r7,16
    422c:	28ffffcc 	andi	r3,r5,65535
    4230:	2085883a 	add	r2,r4,r2
    4234:	1008d43a 	srli	r4,r2,16
    4238:	3ccf383a 	mul	r7,r7,r19
    423c:	198d883a 	add	r6,r3,r6
    4240:	10ffffcc 	andi	r3,r2,65535
    4244:	30c7c83a 	sub	r3,r6,r3
    4248:	280ad43a 	srli	r5,r5,16
    424c:	21c9883a 	add	r4,r4,r7
    4250:	180dd43a 	srai	r6,r3,16
    4254:	20bfffcc 	andi	r2,r4,65535
    4258:	288bc83a 	sub	r5,r5,r2
    425c:	298b883a 	add	r5,r5,r6
    4260:	280e943a 	slli	r7,r5,16
    4264:	18ffffcc 	andi	r3,r3,65535
    4268:	2008d43a 	srli	r4,r4,16
    426c:	38ceb03a 	or	r7,r7,r3
    4270:	49c00015 	stw	r7,0(r9)
    4274:	280dd43a 	srai	r6,r5,16
    4278:	4a400104 	addi	r9,r9,4
    427c:	a23fe52e 	bgeu	r20,r8,4214 <quorem+0x80>
    4280:	b0800017 	ldw	r2,0(r22)
    4284:	10000b1e 	bne	r2,zero,42b4 <quorem+0x120>
    4288:	b0bfff04 	addi	r2,r22,-4
    428c:	a880082e 	bgeu	r21,r2,42b0 <quorem+0x11c>
    4290:	b0ffff17 	ldw	r3,-4(r22)
    4294:	18000326 	beq	r3,zero,42a4 <quorem+0x110>
    4298:	00000506 	br	42b0 <quorem+0x11c>
    429c:	10c00017 	ldw	r3,0(r2)
    42a0:	1800031e 	bne	r3,zero,42b0 <quorem+0x11c>
    42a4:	10bfff04 	addi	r2,r2,-4
    42a8:	94bfffc4 	addi	r18,r18,-1
    42ac:	a8bffb36 	bltu	r21,r2,429c <quorem+0x108>
    42b0:	84800415 	stw	r18,16(r16)
    42b4:	8009883a 	mov	r4,r16
    42b8:	b80b883a 	mov	r5,r23
    42bc:	00079b00 	call	79b0 <__mcmp>
    42c0:	10002616 	blt	r2,zero,435c <quorem+0x1c8>
    42c4:	9cc00044 	addi	r19,r19,1
    42c8:	a80d883a 	mov	r6,r21
    42cc:	000b883a 	mov	r5,zero
    42d0:	31000017 	ldw	r4,0(r6)
    42d4:	88800017 	ldw	r2,0(r17)
    42d8:	31800104 	addi	r6,r6,4
    42dc:	20ffffcc 	andi	r3,r4,65535
    42e0:	194b883a 	add	r5,r3,r5
    42e4:	10ffffcc 	andi	r3,r2,65535
    42e8:	28c7c83a 	sub	r3,r5,r3
    42ec:	1004d43a 	srli	r2,r2,16
    42f0:	2008d43a 	srli	r4,r4,16
    42f4:	180bd43a 	srai	r5,r3,16
    42f8:	18ffffcc 	andi	r3,r3,65535
    42fc:	2089c83a 	sub	r4,r4,r2
    4300:	2149883a 	add	r4,r4,r5
    4304:	2004943a 	slli	r2,r4,16
    4308:	8c400104 	addi	r17,r17,4
    430c:	200bd43a 	srai	r5,r4,16
    4310:	10c6b03a 	or	r3,r2,r3
    4314:	30ffff15 	stw	r3,-4(r6)
    4318:	a47fed2e 	bgeu	r20,r17,42d0 <quorem+0x13c>
    431c:	9485883a 	add	r2,r18,r18
    4320:	1085883a 	add	r2,r2,r2
    4324:	a887883a 	add	r3,r21,r2
    4328:	18800017 	ldw	r2,0(r3)
    432c:	10000b1e 	bne	r2,zero,435c <quorem+0x1c8>
    4330:	18bfff04 	addi	r2,r3,-4
    4334:	a880082e 	bgeu	r21,r2,4358 <quorem+0x1c4>
    4338:	18ffff17 	ldw	r3,-4(r3)
    433c:	18000326 	beq	r3,zero,434c <quorem+0x1b8>
    4340:	00000506 	br	4358 <quorem+0x1c4>
    4344:	10c00017 	ldw	r3,0(r2)
    4348:	1800031e 	bne	r3,zero,4358 <quorem+0x1c4>
    434c:	10bfff04 	addi	r2,r2,-4
    4350:	94bfffc4 	addi	r18,r18,-1
    4354:	a8bffb36 	bltu	r21,r2,4344 <quorem+0x1b0>
    4358:	84800415 	stw	r18,16(r16)
    435c:	9805883a 	mov	r2,r19
    4360:	dfc00817 	ldw	ra,32(sp)
    4364:	ddc00717 	ldw	r23,28(sp)
    4368:	dd800617 	ldw	r22,24(sp)
    436c:	dd400517 	ldw	r21,20(sp)
    4370:	dd000417 	ldw	r20,16(sp)
    4374:	dcc00317 	ldw	r19,12(sp)
    4378:	dc800217 	ldw	r18,8(sp)
    437c:	dc400117 	ldw	r17,4(sp)
    4380:	dc000017 	ldw	r16,0(sp)
    4384:	dec00904 	addi	sp,sp,36
    4388:	f800283a 	ret
    438c:	0005883a 	mov	r2,zero
    4390:	003ff306 	br	4360 <quorem+0x1cc>

00004394 <_dtoa_r>:
    4394:	20801017 	ldw	r2,64(r4)
    4398:	deffde04 	addi	sp,sp,-136
    439c:	dd401d15 	stw	r21,116(sp)
    43a0:	dcc01b15 	stw	r19,108(sp)
    43a4:	dc801a15 	stw	r18,104(sp)
    43a8:	dc401915 	stw	r17,100(sp)
    43ac:	dc001815 	stw	r16,96(sp)
    43b0:	dfc02115 	stw	ra,132(sp)
    43b4:	df002015 	stw	fp,128(sp)
    43b8:	ddc01f15 	stw	r23,124(sp)
    43bc:	dd801e15 	stw	r22,120(sp)
    43c0:	dd001c15 	stw	r20,112(sp)
    43c4:	d9c00315 	stw	r7,12(sp)
    43c8:	2021883a 	mov	r16,r4
    43cc:	302b883a 	mov	r21,r6
    43d0:	2825883a 	mov	r18,r5
    43d4:	dc402417 	ldw	r17,144(sp)
    43d8:	3027883a 	mov	r19,r6
    43dc:	10000826 	beq	r2,zero,4400 <_dtoa_r+0x6c>
    43e0:	21801117 	ldw	r6,68(r4)
    43e4:	00c00044 	movi	r3,1
    43e8:	100b883a 	mov	r5,r2
    43ec:	1986983a 	sll	r3,r3,r6
    43f0:	11800115 	stw	r6,4(r2)
    43f4:	10c00215 	stw	r3,8(r2)
    43f8:	00071980 	call	7198 <_Bfree>
    43fc:	80001015 	stw	zero,64(r16)
    4400:	a8002d16 	blt	r21,zero,44b8 <_dtoa_r+0x124>
    4404:	88000015 	stw	zero,0(r17)
    4408:	a8dffc2c 	andhi	r3,r21,32752
    440c:	009ffc34 	movhi	r2,32752
    4410:	18801b26 	beq	r3,r2,4480 <_dtoa_r+0xec>
    4414:	9009883a 	mov	r4,r18
    4418:	980b883a 	mov	r5,r19
    441c:	000d883a 	mov	r6,zero
    4420:	000f883a 	mov	r7,zero
    4424:	000c0c00 	call	c0c0 <__eqdf2>
    4428:	10002a1e 	bne	r2,zero,44d4 <_dtoa_r+0x140>
    442c:	d8c02317 	ldw	r3,140(sp)
    4430:	d9002517 	ldw	r4,148(sp)
    4434:	00800044 	movi	r2,1
    4438:	18800015 	stw	r2,0(r3)
    443c:	2001a226 	beq	r4,zero,4ac8 <_dtoa_r+0x734>
    4440:	00800074 	movhi	r2,1
    4444:	10bfab44 	addi	r2,r2,-339
    4448:	20800015 	stw	r2,0(r4)
    444c:	10bfffc4 	addi	r2,r2,-1
    4450:	dfc02117 	ldw	ra,132(sp)
    4454:	df002017 	ldw	fp,128(sp)
    4458:	ddc01f17 	ldw	r23,124(sp)
    445c:	dd801e17 	ldw	r22,120(sp)
    4460:	dd401d17 	ldw	r21,116(sp)
    4464:	dd001c17 	ldw	r20,112(sp)
    4468:	dcc01b17 	ldw	r19,108(sp)
    446c:	dc801a17 	ldw	r18,104(sp)
    4470:	dc401917 	ldw	r17,100(sp)
    4474:	dc001817 	ldw	r16,96(sp)
    4478:	dec02204 	addi	sp,sp,136
    447c:	f800283a 	ret
    4480:	d8c02317 	ldw	r3,140(sp)
    4484:	0089c3c4 	movi	r2,9999
    4488:	18800015 	stw	r2,0(r3)
    448c:	90017c26 	beq	r18,zero,4a80 <_dtoa_r+0x6ec>
    4490:	00800074 	movhi	r2,1
    4494:	10bfb704 	addi	r2,r2,-292
    4498:	d9002517 	ldw	r4,148(sp)
    449c:	203fec26 	beq	r4,zero,4450 <_dtoa_r+0xbc>
    44a0:	10c000c7 	ldb	r3,3(r2)
    44a4:	18017d1e 	bne	r3,zero,4a9c <_dtoa_r+0x708>
    44a8:	10c000c4 	addi	r3,r2,3
    44ac:	d9802517 	ldw	r6,148(sp)
    44b0:	30c00015 	stw	r3,0(r6)
    44b4:	003fe606 	br	4450 <_dtoa_r+0xbc>
    44b8:	04e00034 	movhi	r19,32768
    44bc:	9cffffc4 	addi	r19,r19,-1
    44c0:	00800044 	movi	r2,1
    44c4:	ace6703a 	and	r19,r21,r19
    44c8:	88800015 	stw	r2,0(r17)
    44cc:	982b883a 	mov	r21,r19
    44d0:	003fcd06 	br	4408 <_dtoa_r+0x74>
    44d4:	d8800204 	addi	r2,sp,8
    44d8:	a822d53a 	srli	r17,r21,20
    44dc:	d8800015 	stw	r2,0(sp)
    44e0:	8009883a 	mov	r4,r16
    44e4:	900b883a 	mov	r5,r18
    44e8:	980d883a 	mov	r6,r19
    44ec:	d9c00104 	addi	r7,sp,4
    44f0:	0007d240 	call	7d24 <__d2b>
    44f4:	1039883a 	mov	fp,r2
    44f8:	88016a1e 	bne	r17,zero,4aa4 <_dtoa_r+0x710>
    44fc:	dd000217 	ldw	r20,8(sp)
    4500:	dc400117 	ldw	r17,4(sp)
    4504:	00befbc4 	movi	r2,-1041
    4508:	a463883a 	add	r17,r20,r17
    450c:	8882ea16 	blt	r17,r2,50b8 <_dtoa_r+0xd24>
    4510:	00bf0384 	movi	r2,-1010
    4514:	1445c83a 	sub	r2,r2,r17
    4518:	89010484 	addi	r4,r17,1042
    451c:	a8aa983a 	sll	r21,r21,r2
    4520:	9108d83a 	srl	r4,r18,r4
    4524:	a908b03a 	or	r4,r21,r4
    4528:	000d4500 	call	d450 <__floatunsidf>
    452c:	017f8434 	movhi	r5,65040
    4530:	01800044 	movi	r6,1
    4534:	1009883a 	mov	r4,r2
    4538:	194b883a 	add	r5,r3,r5
    453c:	8c7fffc4 	addi	r17,r17,-1
    4540:	d9800f15 	stw	r6,60(sp)
    4544:	000d883a 	mov	r6,zero
    4548:	01cffe34 	movhi	r7,16376
    454c:	000ca280 	call	ca28 <__subdf3>
    4550:	0198dbf4 	movhi	r6,25455
    4554:	01cff4f4 	movhi	r7,16339
    4558:	1009883a 	mov	r4,r2
    455c:	180b883a 	mov	r5,r3
    4560:	3190d844 	addi	r6,r6,17249
    4564:	39e1e9c4 	addi	r7,r7,-30809
    4568:	000c3040 	call	c304 <__muldf3>
    456c:	01a2d874 	movhi	r6,35681
    4570:	01cff1f4 	movhi	r7,16327
    4574:	180b883a 	mov	r5,r3
    4578:	31b22cc4 	addi	r6,r6,-14157
    457c:	39e28a04 	addi	r7,r7,-30168
    4580:	1009883a 	mov	r4,r2
    4584:	000af580 	call	af58 <__adddf3>
    4588:	8809883a 	mov	r4,r17
    458c:	102d883a 	mov	r22,r2
    4590:	182b883a 	mov	r21,r3
    4594:	000d3800 	call	d380 <__floatsidf>
    4598:	019427f4 	movhi	r6,20639
    459c:	01cff4f4 	movhi	r7,16339
    45a0:	1009883a 	mov	r4,r2
    45a4:	180b883a 	mov	r5,r3
    45a8:	319e7ec4 	addi	r6,r6,31227
    45ac:	39d104c4 	addi	r7,r7,17427
    45b0:	000c3040 	call	c304 <__muldf3>
    45b4:	b009883a 	mov	r4,r22
    45b8:	a80b883a 	mov	r5,r21
    45bc:	100d883a 	mov	r6,r2
    45c0:	180f883a 	mov	r7,r3
    45c4:	000af580 	call	af58 <__adddf3>
    45c8:	1009883a 	mov	r4,r2
    45cc:	180b883a 	mov	r5,r3
    45d0:	102d883a 	mov	r22,r2
    45d4:	182b883a 	mov	r21,r3
    45d8:	000d2f80 	call	d2f8 <__fixdfsi>
    45dc:	b009883a 	mov	r4,r22
    45e0:	a80b883a 	mov	r5,r21
    45e4:	000d883a 	mov	r6,zero
    45e8:	000f883a 	mov	r7,zero
    45ec:	d8800515 	stw	r2,20(sp)
    45f0:	000c2240 	call	c224 <__ledf2>
    45f4:	10023116 	blt	r2,zero,4ebc <_dtoa_r+0xb28>
    45f8:	d8c00517 	ldw	r3,20(sp)
    45fc:	00800584 	movi	r2,22
    4600:	10c21f36 	bltu	r2,r3,4e80 <_dtoa_r+0xaec>
    4604:	180490fa 	slli	r2,r3,3
    4608:	00c00074 	movhi	r3,1
    460c:	18ffd204 	addi	r3,r3,-184
    4610:	1885883a 	add	r2,r3,r2
    4614:	11000017 	ldw	r4,0(r2)
    4618:	11400117 	ldw	r5,4(r2)
    461c:	900d883a 	mov	r6,r18
    4620:	980f883a 	mov	r7,r19
    4624:	000c1440 	call	c144 <__gedf2>
    4628:	0082a70e 	bge	zero,r2,50c8 <_dtoa_r+0xd34>
    462c:	d9000517 	ldw	r4,20(sp)
    4630:	d8000c15 	stw	zero,48(sp)
    4634:	213fffc4 	addi	r4,r4,-1
    4638:	d9000515 	stw	r4,20(sp)
    463c:	a463c83a 	sub	r17,r20,r17
    4640:	8dbfffc4 	addi	r22,r17,-1
    4644:	b0021916 	blt	r22,zero,4eac <_dtoa_r+0xb18>
    4648:	d8000815 	stw	zero,32(sp)
    464c:	d8800517 	ldw	r2,20(sp)
    4650:	10020e16 	blt	r2,zero,4e8c <_dtoa_r+0xaf8>
    4654:	b0ad883a 	add	r22,r22,r2
    4658:	d8800a15 	stw	r2,40(sp)
    465c:	d8000915 	stw	zero,36(sp)
    4660:	d8c00317 	ldw	r3,12(sp)
    4664:	00800244 	movi	r2,9
    4668:	10c11a36 	bltu	r2,r3,4ad4 <_dtoa_r+0x740>
    466c:	00800144 	movi	r2,5
    4670:	10c4fc0e 	bge	r2,r3,5a64 <_dtoa_r+0x16d0>
    4674:	18ffff04 	addi	r3,r3,-4
    4678:	d8c00315 	stw	r3,12(sp)
    467c:	0029883a 	mov	r20,zero
    4680:	d9800317 	ldw	r6,12(sp)
    4684:	008000c4 	movi	r2,3
    4688:	3083bd26 	beq	r6,r2,5580 <_dtoa_r+0x11ec>
    468c:	1183670e 	bge	r2,r6,542c <_dtoa_r+0x1098>
    4690:	d8c00317 	ldw	r3,12(sp)
    4694:	00800104 	movi	r2,4
    4698:	1882e726 	beq	r3,r2,5238 <_dtoa_r+0xea4>
    469c:	00800144 	movi	r2,5
    46a0:	1884f21e 	bne	r3,r2,5a6c <_dtoa_r+0x16d8>
    46a4:	00800044 	movi	r2,1
    46a8:	d8800b15 	stw	r2,44(sp)
    46ac:	d8c02217 	ldw	r3,136(sp)
    46b0:	d9000517 	ldw	r4,20(sp)
    46b4:	1907883a 	add	r3,r3,r4
    46b8:	19800044 	addi	r6,r3,1
    46bc:	d8c00d15 	stw	r3,52(sp)
    46c0:	d9800615 	stw	r6,24(sp)
    46c4:	0183c30e 	bge	zero,r6,55d4 <_dtoa_r+0x1240>
    46c8:	d9800617 	ldw	r6,24(sp)
    46cc:	3023883a 	mov	r17,r6
    46d0:	80001115 	stw	zero,68(r16)
    46d4:	008005c4 	movi	r2,23
    46d8:	1184f62e 	bgeu	r2,r6,5ab4 <_dtoa_r+0x1720>
    46dc:	00c00044 	movi	r3,1
    46e0:	00800104 	movi	r2,4
    46e4:	1085883a 	add	r2,r2,r2
    46e8:	11000504 	addi	r4,r2,20
    46ec:	180b883a 	mov	r5,r3
    46f0:	18c00044 	addi	r3,r3,1
    46f4:	313ffb2e 	bgeu	r6,r4,46e4 <_dtoa_r+0x350>
    46f8:	81401115 	stw	r5,68(r16)
    46fc:	8009883a 	mov	r4,r16
    4700:	00070f00 	call	70f0 <_Balloc>
    4704:	d8800715 	stw	r2,28(sp)
    4708:	80801015 	stw	r2,64(r16)
    470c:	00800384 	movi	r2,14
    4710:	1440fd36 	bltu	r2,r17,4b08 <_dtoa_r+0x774>
    4714:	a000fc26 	beq	r20,zero,4b08 <_dtoa_r+0x774>
    4718:	d8800517 	ldw	r2,20(sp)
    471c:	0083b90e 	bge	zero,r2,5604 <_dtoa_r+0x1270>
    4720:	d8c00517 	ldw	r3,20(sp)
    4724:	108003cc 	andi	r2,r2,15
    4728:	100490fa 	slli	r2,r2,3
    472c:	182fd13a 	srai	r23,r3,4
    4730:	00c00074 	movhi	r3,1
    4734:	18ffd204 	addi	r3,r3,-184
    4738:	1885883a 	add	r2,r3,r2
    473c:	b8c0040c 	andi	r3,r23,16
    4740:	12c00017 	ldw	r11,0(r2)
    4744:	12800117 	ldw	r10,4(r2)
    4748:	18039726 	beq	r3,zero,55a8 <_dtoa_r+0x1214>
    474c:	00800074 	movhi	r2,1
    4750:	10bfc804 	addi	r2,r2,-224
    4754:	11800817 	ldw	r6,32(r2)
    4758:	11c00917 	ldw	r7,36(r2)
    475c:	9009883a 	mov	r4,r18
    4760:	980b883a 	mov	r5,r19
    4764:	da801615 	stw	r10,88(sp)
    4768:	dac01515 	stw	r11,84(sp)
    476c:	000b7f40 	call	b7f4 <__divdf3>
    4770:	da801617 	ldw	r10,88(sp)
    4774:	dac01517 	ldw	r11,84(sp)
    4778:	bdc003cc 	andi	r23,r23,15
    477c:	044000c4 	movi	r17,3
    4780:	d8800e15 	stw	r2,56(sp)
    4784:	182b883a 	mov	r21,r3
    4788:	b8001126 	beq	r23,zero,47d0 <_dtoa_r+0x43c>
    478c:	05000074 	movhi	r20,1
    4790:	a53fc804 	addi	r20,r20,-224
    4794:	5805883a 	mov	r2,r11
    4798:	5007883a 	mov	r3,r10
    479c:	b980004c 	andi	r6,r23,1
    47a0:	1009883a 	mov	r4,r2
    47a4:	b82fd07a 	srai	r23,r23,1
    47a8:	180b883a 	mov	r5,r3
    47ac:	30000426 	beq	r6,zero,47c0 <_dtoa_r+0x42c>
    47b0:	a1800017 	ldw	r6,0(r20)
    47b4:	a1c00117 	ldw	r7,4(r20)
    47b8:	8c400044 	addi	r17,r17,1
    47bc:	000c3040 	call	c304 <__muldf3>
    47c0:	a5000204 	addi	r20,r20,8
    47c4:	b83ff51e 	bne	r23,zero,479c <_dtoa_r+0x408>
    47c8:	1017883a 	mov	r11,r2
    47cc:	1815883a 	mov	r10,r3
    47d0:	d9000e17 	ldw	r4,56(sp)
    47d4:	a80b883a 	mov	r5,r21
    47d8:	580d883a 	mov	r6,r11
    47dc:	500f883a 	mov	r7,r10
    47e0:	000b7f40 	call	b7f4 <__divdf3>
    47e4:	1029883a 	mov	r20,r2
    47e8:	182b883a 	mov	r21,r3
    47ec:	d9800c17 	ldw	r6,48(sp)
    47f0:	30000626 	beq	r6,zero,480c <_dtoa_r+0x478>
    47f4:	a009883a 	mov	r4,r20
    47f8:	a80b883a 	mov	r5,r21
    47fc:	000d883a 	mov	r6,zero
    4800:	01cffc34 	movhi	r7,16368
    4804:	000c2240 	call	c224 <__ledf2>
    4808:	10043216 	blt	r2,zero,58d4 <_dtoa_r+0x1540>
    480c:	8809883a 	mov	r4,r17
    4810:	000d3800 	call	d380 <__floatsidf>
    4814:	1009883a 	mov	r4,r2
    4818:	180b883a 	mov	r5,r3
    481c:	a00d883a 	mov	r6,r20
    4820:	a80f883a 	mov	r7,r21
    4824:	000c3040 	call	c304 <__muldf3>
    4828:	000d883a 	mov	r6,zero
    482c:	1009883a 	mov	r4,r2
    4830:	180b883a 	mov	r5,r3
    4834:	01d00734 	movhi	r7,16412
    4838:	000af580 	call	af58 <__adddf3>
    483c:	1023883a 	mov	r17,r2
    4840:	d9800617 	ldw	r6,24(sp)
    4844:	00bf3034 	movhi	r2,64704
    4848:	1885883a 	add	r2,r3,r2
    484c:	d8800e15 	stw	r2,56(sp)
    4850:	30032e26 	beq	r6,zero,550c <_dtoa_r+0x1178>
    4854:	d8c00517 	ldw	r3,20(sp)
    4858:	da800617 	ldw	r10,24(sp)
    485c:	d8c01215 	stw	r3,72(sp)
    4860:	d9000b17 	ldw	r4,44(sp)
    4864:	2003b026 	beq	r4,zero,5728 <_dtoa_r+0x1394>
    4868:	50bfffc4 	addi	r2,r10,-1
    486c:	100490fa 	slli	r2,r2,3
    4870:	00c00074 	movhi	r3,1
    4874:	18ffd204 	addi	r3,r3,-184
    4878:	1885883a 	add	r2,r3,r2
    487c:	11800017 	ldw	r6,0(r2)
    4880:	11c00117 	ldw	r7,4(r2)
    4884:	d8800717 	ldw	r2,28(sp)
    4888:	0009883a 	mov	r4,zero
    488c:	014ff834 	movhi	r5,16352
    4890:	da801615 	stw	r10,88(sp)
    4894:	15c00044 	addi	r23,r2,1
    4898:	000b7f40 	call	b7f4 <__divdf3>
    489c:	d9c00e17 	ldw	r7,56(sp)
    48a0:	880d883a 	mov	r6,r17
    48a4:	1009883a 	mov	r4,r2
    48a8:	180b883a 	mov	r5,r3
    48ac:	000ca280 	call	ca28 <__subdf3>
    48b0:	a80b883a 	mov	r5,r21
    48b4:	a009883a 	mov	r4,r20
    48b8:	d8c01015 	stw	r3,64(sp)
    48bc:	d8800e15 	stw	r2,56(sp)
    48c0:	000d2f80 	call	d2f8 <__fixdfsi>
    48c4:	1009883a 	mov	r4,r2
    48c8:	d8801715 	stw	r2,92(sp)
    48cc:	000d3800 	call	d380 <__floatsidf>
    48d0:	a009883a 	mov	r4,r20
    48d4:	a80b883a 	mov	r5,r21
    48d8:	100d883a 	mov	r6,r2
    48dc:	180f883a 	mov	r7,r3
    48e0:	000ca280 	call	ca28 <__subdf3>
    48e4:	da001717 	ldw	r8,92(sp)
    48e8:	1829883a 	mov	r20,r3
    48ec:	d8c00717 	ldw	r3,28(sp)
    48f0:	d9000e17 	ldw	r4,56(sp)
    48f4:	d9401017 	ldw	r5,64(sp)
    48f8:	42000c04 	addi	r8,r8,48
    48fc:	1023883a 	mov	r17,r2
    4900:	1a000005 	stb	r8,0(r3)
    4904:	880d883a 	mov	r6,r17
    4908:	a00f883a 	mov	r7,r20
    490c:	402b883a 	mov	r21,r8
    4910:	000c1440 	call	c144 <__gedf2>
    4914:	00844516 	blt	zero,r2,5a2c <_dtoa_r+0x1698>
    4918:	0009883a 	mov	r4,zero
    491c:	014ffc34 	movhi	r5,16368
    4920:	880d883a 	mov	r6,r17
    4924:	a00f883a 	mov	r7,r20
    4928:	000ca280 	call	ca28 <__subdf3>
    492c:	d9000e17 	ldw	r4,56(sp)
    4930:	d9401017 	ldw	r5,64(sp)
    4934:	100d883a 	mov	r6,r2
    4938:	180f883a 	mov	r7,r3
    493c:	000c1440 	call	c144 <__gedf2>
    4940:	da801617 	ldw	r10,88(sp)
    4944:	00843616 	blt	zero,r2,5a20 <_dtoa_r+0x168c>
    4948:	00800044 	movi	r2,1
    494c:	12806e0e 	bge	r2,r10,4b08 <_dtoa_r+0x774>
    4950:	d9000717 	ldw	r4,28(sp)
    4954:	dd801315 	stw	r22,76(sp)
    4958:	dc001115 	stw	r16,68(sp)
    495c:	2295883a 	add	r10,r4,r10
    4960:	dcc01415 	stw	r19,80(sp)
    4964:	502d883a 	mov	r22,r10
    4968:	dcc01017 	ldw	r19,64(sp)
    496c:	b821883a 	mov	r16,r23
    4970:	dc801015 	stw	r18,64(sp)
    4974:	dc800e17 	ldw	r18,56(sp)
    4978:	00000906 	br	49a0 <_dtoa_r+0x60c>
    497c:	000ca280 	call	ca28 <__subdf3>
    4980:	1009883a 	mov	r4,r2
    4984:	180b883a 	mov	r5,r3
    4988:	900d883a 	mov	r6,r18
    498c:	980f883a 	mov	r7,r19
    4990:	000c2240 	call	c224 <__ledf2>
    4994:	10040e16 	blt	r2,zero,59d0 <_dtoa_r+0x163c>
    4998:	b821883a 	mov	r16,r23
    499c:	bd841026 	beq	r23,r22,59e0 <_dtoa_r+0x164c>
    49a0:	9009883a 	mov	r4,r18
    49a4:	980b883a 	mov	r5,r19
    49a8:	000d883a 	mov	r6,zero
    49ac:	01d00934 	movhi	r7,16420
    49b0:	000c3040 	call	c304 <__muldf3>
    49b4:	000d883a 	mov	r6,zero
    49b8:	01d00934 	movhi	r7,16420
    49bc:	8809883a 	mov	r4,r17
    49c0:	a00b883a 	mov	r5,r20
    49c4:	1025883a 	mov	r18,r2
    49c8:	1827883a 	mov	r19,r3
    49cc:	000c3040 	call	c304 <__muldf3>
    49d0:	180b883a 	mov	r5,r3
    49d4:	1009883a 	mov	r4,r2
    49d8:	1823883a 	mov	r17,r3
    49dc:	1029883a 	mov	r20,r2
    49e0:	000d2f80 	call	d2f8 <__fixdfsi>
    49e4:	1009883a 	mov	r4,r2
    49e8:	102b883a 	mov	r21,r2
    49ec:	000d3800 	call	d380 <__floatsidf>
    49f0:	a009883a 	mov	r4,r20
    49f4:	880b883a 	mov	r5,r17
    49f8:	100d883a 	mov	r6,r2
    49fc:	180f883a 	mov	r7,r3
    4a00:	000ca280 	call	ca28 <__subdf3>
    4a04:	ad400c04 	addi	r21,r21,48
    4a08:	1009883a 	mov	r4,r2
    4a0c:	180b883a 	mov	r5,r3
    4a10:	900d883a 	mov	r6,r18
    4a14:	980f883a 	mov	r7,r19
    4a18:	85400005 	stb	r21,0(r16)
    4a1c:	1023883a 	mov	r17,r2
    4a20:	1829883a 	mov	r20,r3
    4a24:	000c2240 	call	c224 <__ledf2>
    4a28:	bdc00044 	addi	r23,r23,1
    4a2c:	0009883a 	mov	r4,zero
    4a30:	014ffc34 	movhi	r5,16368
    4a34:	880d883a 	mov	r6,r17
    4a38:	a00f883a 	mov	r7,r20
    4a3c:	103fcf0e 	bge	r2,zero,497c <_dtoa_r+0x5e8>
    4a40:	d9801217 	ldw	r6,72(sp)
    4a44:	dc001117 	ldw	r16,68(sp)
    4a48:	d9800515 	stw	r6,20(sp)
    4a4c:	8009883a 	mov	r4,r16
    4a50:	e00b883a 	mov	r5,fp
    4a54:	00071980 	call	7198 <_Bfree>
    4a58:	d8c00517 	ldw	r3,20(sp)
    4a5c:	d9002317 	ldw	r4,140(sp)
    4a60:	d9802517 	ldw	r6,148(sp)
    4a64:	b8000005 	stb	zero,0(r23)
    4a68:	18800044 	addi	r2,r3,1
    4a6c:	20800015 	stw	r2,0(r4)
    4a70:	30027226 	beq	r6,zero,543c <_dtoa_r+0x10a8>
    4a74:	35c00015 	stw	r23,0(r6)
    4a78:	d8800717 	ldw	r2,28(sp)
    4a7c:	003e7406 	br	4450 <_dtoa_r+0xbc>
    4a80:	00800434 	movhi	r2,16
    4a84:	10bfffc4 	addi	r2,r2,-1
    4a88:	a8aa703a 	and	r21,r21,r2
    4a8c:	a83e801e 	bne	r21,zero,4490 <_dtoa_r+0xfc>
    4a90:	00800074 	movhi	r2,1
    4a94:	10bfb404 	addi	r2,r2,-304
    4a98:	003e7f06 	br	4498 <_dtoa_r+0x104>
    4a9c:	10c00204 	addi	r3,r2,8
    4aa0:	003e8206 	br	44ac <_dtoa_r+0x118>
    4aa4:	01400434 	movhi	r5,16
    4aa8:	297fffc4 	addi	r5,r5,-1
    4aac:	994a703a 	and	r5,r19,r5
    4ab0:	9009883a 	mov	r4,r18
    4ab4:	8c7f0044 	addi	r17,r17,-1023
    4ab8:	294ffc34 	orhi	r5,r5,16368
    4abc:	dd000217 	ldw	r20,8(sp)
    4ac0:	d8000f15 	stw	zero,60(sp)
    4ac4:	003e9f06 	br	4544 <_dtoa_r+0x1b0>
    4ac8:	00800074 	movhi	r2,1
    4acc:	10bfab04 	addi	r2,r2,-340
    4ad0:	003e5f06 	br	4450 <_dtoa_r+0xbc>
    4ad4:	80001115 	stw	zero,68(r16)
    4ad8:	8009883a 	mov	r4,r16
    4adc:	000b883a 	mov	r5,zero
    4ae0:	00070f00 	call	70f0 <_Balloc>
    4ae4:	01bfffc4 	movi	r6,-1
    4ae8:	d8800715 	stw	r2,28(sp)
    4aec:	80801015 	stw	r2,64(r16)
    4af0:	00800044 	movi	r2,1
    4af4:	d9800615 	stw	r6,24(sp)
    4af8:	d8800b15 	stw	r2,44(sp)
    4afc:	d8002215 	stw	zero,136(sp)
    4b00:	d9800d15 	stw	r6,52(sp)
    4b04:	d8000315 	stw	zero,12(sp)
    4b08:	d8800117 	ldw	r2,4(sp)
    4b0c:	10008e16 	blt	r2,zero,4d48 <_dtoa_r+0x9b4>
    4b10:	d9000517 	ldw	r4,20(sp)
    4b14:	00c00384 	movi	r3,14
    4b18:	19008b16 	blt	r3,r4,4d48 <_dtoa_r+0x9b4>
    4b1c:	200490fa 	slli	r2,r4,3
    4b20:	00c00074 	movhi	r3,1
    4b24:	d9802217 	ldw	r6,136(sp)
    4b28:	18ffd204 	addi	r3,r3,-184
    4b2c:	1885883a 	add	r2,r3,r2
    4b30:	14400017 	ldw	r17,0(r2)
    4b34:	15000117 	ldw	r20,4(r2)
    4b38:	3001c716 	blt	r6,zero,5258 <_dtoa_r+0xec4>
    4b3c:	880d883a 	mov	r6,r17
    4b40:	a00f883a 	mov	r7,r20
    4b44:	9009883a 	mov	r4,r18
    4b48:	980b883a 	mov	r5,r19
    4b4c:	000b7f40 	call	b7f4 <__divdf3>
    4b50:	180b883a 	mov	r5,r3
    4b54:	1009883a 	mov	r4,r2
    4b58:	000d2f80 	call	d2f8 <__fixdfsi>
    4b5c:	1009883a 	mov	r4,r2
    4b60:	102d883a 	mov	r22,r2
    4b64:	000d3800 	call	d380 <__floatsidf>
    4b68:	1009883a 	mov	r4,r2
    4b6c:	180b883a 	mov	r5,r3
    4b70:	880d883a 	mov	r6,r17
    4b74:	a00f883a 	mov	r7,r20
    4b78:	000c3040 	call	c304 <__muldf3>
    4b7c:	9009883a 	mov	r4,r18
    4b80:	980b883a 	mov	r5,r19
    4b84:	100d883a 	mov	r6,r2
    4b88:	180f883a 	mov	r7,r3
    4b8c:	000ca280 	call	ca28 <__subdf3>
    4b90:	d9000717 	ldw	r4,28(sp)
    4b94:	d9800617 	ldw	r6,24(sp)
    4b98:	180b883a 	mov	r5,r3
    4b9c:	b0c00c04 	addi	r3,r22,48
    4ba0:	20c00005 	stb	r3,0(r4)
    4ba4:	25c00044 	addi	r23,r4,1
    4ba8:	01000044 	movi	r4,1
    4bac:	1011883a 	mov	r8,r2
    4bb0:	2807883a 	mov	r3,r5
    4bb4:	31003d26 	beq	r6,r4,4cac <_dtoa_r+0x918>
    4bb8:	000d883a 	mov	r6,zero
    4bbc:	01d00934 	movhi	r7,16420
    4bc0:	1009883a 	mov	r4,r2
    4bc4:	000c3040 	call	c304 <__muldf3>
    4bc8:	1009883a 	mov	r4,r2
    4bcc:	180b883a 	mov	r5,r3
    4bd0:	000d883a 	mov	r6,zero
    4bd4:	000f883a 	mov	r7,zero
    4bd8:	1027883a 	mov	r19,r2
    4bdc:	182b883a 	mov	r21,r3
    4be0:	000c0c00 	call	c0c0 <__eqdf2>
    4be4:	103f9926 	beq	r2,zero,4a4c <_dtoa_r+0x6b8>
    4be8:	d8c00617 	ldw	r3,24(sp)
    4bec:	d9000717 	ldw	r4,28(sp)
    4bf0:	b825883a 	mov	r18,r23
    4bf4:	18bfffc4 	addi	r2,r3,-1
    4bf8:	20ad883a 	add	r22,r4,r2
    4bfc:	dc000315 	stw	r16,12(sp)
    4c00:	00000a06 	br	4c2c <_dtoa_r+0x898>
    4c04:	000c3040 	call	c304 <__muldf3>
    4c08:	1009883a 	mov	r4,r2
    4c0c:	180b883a 	mov	r5,r3
    4c10:	000d883a 	mov	r6,zero
    4c14:	000f883a 	mov	r7,zero
    4c18:	1027883a 	mov	r19,r2
    4c1c:	182b883a 	mov	r21,r3
    4c20:	b825883a 	mov	r18,r23
    4c24:	000c0c00 	call	c0c0 <__eqdf2>
    4c28:	10022626 	beq	r2,zero,54c4 <_dtoa_r+0x1130>
    4c2c:	880d883a 	mov	r6,r17
    4c30:	a00f883a 	mov	r7,r20
    4c34:	9809883a 	mov	r4,r19
    4c38:	a80b883a 	mov	r5,r21
    4c3c:	000b7f40 	call	b7f4 <__divdf3>
    4c40:	180b883a 	mov	r5,r3
    4c44:	1009883a 	mov	r4,r2
    4c48:	000d2f80 	call	d2f8 <__fixdfsi>
    4c4c:	1009883a 	mov	r4,r2
    4c50:	1021883a 	mov	r16,r2
    4c54:	000d3800 	call	d380 <__floatsidf>
    4c58:	1009883a 	mov	r4,r2
    4c5c:	180b883a 	mov	r5,r3
    4c60:	880d883a 	mov	r6,r17
    4c64:	a00f883a 	mov	r7,r20
    4c68:	000c3040 	call	c304 <__muldf3>
    4c6c:	9809883a 	mov	r4,r19
    4c70:	a80b883a 	mov	r5,r21
    4c74:	100d883a 	mov	r6,r2
    4c78:	180f883a 	mov	r7,r3
    4c7c:	000ca280 	call	ca28 <__subdf3>
    4c80:	82000c04 	addi	r8,r16,48
    4c84:	92000005 	stb	r8,0(r18)
    4c88:	1009883a 	mov	r4,r2
    4c8c:	180b883a 	mov	r5,r3
    4c90:	000d883a 	mov	r6,zero
    4c94:	01d00934 	movhi	r7,16420
    4c98:	1011883a 	mov	r8,r2
    4c9c:	bdc00044 	addi	r23,r23,1
    4ca0:	95bfd81e 	bne	r18,r22,4c04 <_dtoa_r+0x870>
    4ca4:	802d883a 	mov	r22,r16
    4ca8:	dc000317 	ldw	r16,12(sp)
    4cac:	4009883a 	mov	r4,r8
    4cb0:	180b883a 	mov	r5,r3
    4cb4:	400d883a 	mov	r6,r8
    4cb8:	180f883a 	mov	r7,r3
    4cbc:	000af580 	call	af58 <__adddf3>
    4cc0:	8809883a 	mov	r4,r17
    4cc4:	a00b883a 	mov	r5,r20
    4cc8:	100d883a 	mov	r6,r2
    4ccc:	180f883a 	mov	r7,r3
    4cd0:	1027883a 	mov	r19,r2
    4cd4:	1825883a 	mov	r18,r3
    4cd8:	000c2240 	call	c224 <__ledf2>
    4cdc:	10000816 	blt	r2,zero,4d00 <_dtoa_r+0x96c>
    4ce0:	8809883a 	mov	r4,r17
    4ce4:	a00b883a 	mov	r5,r20
    4ce8:	980d883a 	mov	r6,r19
    4cec:	900f883a 	mov	r7,r18
    4cf0:	000c0c00 	call	c0c0 <__eqdf2>
    4cf4:	103f551e 	bne	r2,zero,4a4c <_dtoa_r+0x6b8>
    4cf8:	b580004c 	andi	r22,r22,1
    4cfc:	b03f5326 	beq	r22,zero,4a4c <_dtoa_r+0x6b8>
    4d00:	bd7fffc3 	ldbu	r21,-1(r23)
    4d04:	b8bfffc4 	addi	r2,r23,-1
    4d08:	1007883a 	mov	r3,r2
    4d0c:	01400e44 	movi	r5,57
    4d10:	d9800717 	ldw	r6,28(sp)
    4d14:	00000506 	br	4d2c <_dtoa_r+0x998>
    4d18:	18ffffc4 	addi	r3,r3,-1
    4d1c:	30825e26 	beq	r6,r2,5698 <_dtoa_r+0x1304>
    4d20:	1d400003 	ldbu	r21,0(r3)
    4d24:	102f883a 	mov	r23,r2
    4d28:	10bfffc4 	addi	r2,r2,-1
    4d2c:	a9003fcc 	andi	r4,r21,255
    4d30:	2100201c 	xori	r4,r4,128
    4d34:	213fe004 	addi	r4,r4,-128
    4d38:	217ff726 	beq	r4,r5,4d18 <_dtoa_r+0x984>
    4d3c:	aa000044 	addi	r8,r21,1
    4d40:	12000005 	stb	r8,0(r2)
    4d44:	003f4106 	br	4a4c <_dtoa_r+0x6b8>
    4d48:	d8c00b17 	ldw	r3,44(sp)
    4d4c:	18006726 	beq	r3,zero,4eec <_dtoa_r+0xb58>
    4d50:	d9000317 	ldw	r4,12(sp)
    4d54:	00c00044 	movi	r3,1
    4d58:	19016a0e 	bge	r3,r4,5304 <_dtoa_r+0xf70>
    4d5c:	d8800617 	ldw	r2,24(sp)
    4d60:	d8c00917 	ldw	r3,36(sp)
    4d64:	157fffc4 	addi	r21,r2,-1
    4d68:	1d420716 	blt	r3,r21,5588 <_dtoa_r+0x11f4>
    4d6c:	1d6bc83a 	sub	r21,r3,r21
    4d70:	d8800617 	ldw	r2,24(sp)
    4d74:	1002c716 	blt	r2,zero,5894 <_dtoa_r+0x1500>
    4d78:	dd000817 	ldw	r20,32(sp)
    4d7c:	d8800617 	ldw	r2,24(sp)
    4d80:	d9800817 	ldw	r6,32(sp)
    4d84:	8009883a 	mov	r4,r16
    4d88:	01400044 	movi	r5,1
    4d8c:	308d883a 	add	r6,r6,r2
    4d90:	d9800815 	stw	r6,32(sp)
    4d94:	b0ad883a 	add	r22,r22,r2
    4d98:	00074f00 	call	74f0 <__i2b>
    4d9c:	1023883a 	mov	r17,r2
    4da0:	a0000826 	beq	r20,zero,4dc4 <_dtoa_r+0xa30>
    4da4:	0580070e 	bge	zero,r22,4dc4 <_dtoa_r+0xa30>
    4da8:	b005883a 	mov	r2,r22
    4dac:	a5812016 	blt	r20,r22,5230 <_dtoa_r+0xe9c>
    4db0:	d8c00817 	ldw	r3,32(sp)
    4db4:	a0a9c83a 	sub	r20,r20,r2
    4db8:	b0adc83a 	sub	r22,r22,r2
    4dbc:	1887c83a 	sub	r3,r3,r2
    4dc0:	d8c00815 	stw	r3,32(sp)
    4dc4:	d9000917 	ldw	r4,36(sp)
    4dc8:	0100140e 	bge	zero,r4,4e1c <_dtoa_r+0xa88>
    4dcc:	d9800b17 	ldw	r6,44(sp)
    4dd0:	3001e526 	beq	r6,zero,5568 <_dtoa_r+0x11d4>
    4dd4:	05400e0e 	bge	zero,r21,4e10 <_dtoa_r+0xa7c>
    4dd8:	880b883a 	mov	r5,r17
    4ddc:	8009883a 	mov	r4,r16
    4de0:	a80d883a 	mov	r6,r21
    4de4:	00077280 	call	7728 <__pow5mult>
    4de8:	e00d883a 	mov	r6,fp
    4dec:	8009883a 	mov	r4,r16
    4df0:	100b883a 	mov	r5,r2
    4df4:	1023883a 	mov	r17,r2
    4df8:	000752c0 	call	752c <__multiply>
    4dfc:	102f883a 	mov	r23,r2
    4e00:	e00b883a 	mov	r5,fp
    4e04:	8009883a 	mov	r4,r16
    4e08:	00071980 	call	7198 <_Bfree>
    4e0c:	b839883a 	mov	fp,r23
    4e10:	d8800917 	ldw	r2,36(sp)
    4e14:	154dc83a 	sub	r6,r2,r21
    4e18:	3001281e 	bne	r6,zero,52bc <_dtoa_r+0xf28>
    4e1c:	05c00044 	movi	r23,1
    4e20:	8009883a 	mov	r4,r16
    4e24:	b80b883a 	mov	r5,r23
    4e28:	00074f00 	call	74f0 <__i2b>
    4e2c:	d8c00a17 	ldw	r3,40(sp)
    4e30:	102b883a 	mov	r21,r2
    4e34:	00c0310e 	bge	zero,r3,4efc <_dtoa_r+0xb68>
    4e38:	8009883a 	mov	r4,r16
    4e3c:	100b883a 	mov	r5,r2
    4e40:	180d883a 	mov	r6,r3
    4e44:	00077280 	call	7728 <__pow5mult>
    4e48:	d9000317 	ldw	r4,12(sp)
    4e4c:	102b883a 	mov	r21,r2
    4e50:	b9011f0e 	bge	r23,r4,52d0 <_dtoa_r+0xf3c>
    4e54:	0027883a 	mov	r19,zero
    4e58:	a8800417 	ldw	r2,16(r21)
    4e5c:	10800104 	addi	r2,r2,4
    4e60:	1085883a 	add	r2,r2,r2
    4e64:	1085883a 	add	r2,r2,r2
    4e68:	a885883a 	add	r2,r21,r2
    4e6c:	11000017 	ldw	r4,0(r2)
    4e70:	00073d80 	call	73d8 <__hi0bits>
    4e74:	00c00804 	movi	r3,32
    4e78:	1885c83a 	sub	r2,r3,r2
    4e7c:	00002506 	br	4f14 <_dtoa_r+0xb80>
    4e80:	01800044 	movi	r6,1
    4e84:	d9800c15 	stw	r6,48(sp)
    4e88:	003dec06 	br	463c <_dtoa_r+0x2a8>
    4e8c:	d8c00817 	ldw	r3,32(sp)
    4e90:	d9000517 	ldw	r4,20(sp)
    4e94:	d8000a15 	stw	zero,40(sp)
    4e98:	1907c83a 	sub	r3,r3,r4
    4e9c:	010dc83a 	sub	r6,zero,r4
    4ea0:	d8c00815 	stw	r3,32(sp)
    4ea4:	d9800915 	stw	r6,36(sp)
    4ea8:	003ded06 	br	4660 <_dtoa_r+0x2cc>
    4eac:	05adc83a 	sub	r22,zero,r22
    4eb0:	dd800815 	stw	r22,32(sp)
    4eb4:	002d883a 	mov	r22,zero
    4eb8:	003de406 	br	464c <_dtoa_r+0x2b8>
    4ebc:	d9000517 	ldw	r4,20(sp)
    4ec0:	000d3800 	call	d380 <__floatsidf>
    4ec4:	1009883a 	mov	r4,r2
    4ec8:	180b883a 	mov	r5,r3
    4ecc:	b00d883a 	mov	r6,r22
    4ed0:	a80f883a 	mov	r7,r21
    4ed4:	000c0c00 	call	c0c0 <__eqdf2>
    4ed8:	103dc726 	beq	r2,zero,45f8 <_dtoa_r+0x264>
    4edc:	d8800517 	ldw	r2,20(sp)
    4ee0:	10bfffc4 	addi	r2,r2,-1
    4ee4:	d8800515 	stw	r2,20(sp)
    4ee8:	003dc306 	br	45f8 <_dtoa_r+0x264>
    4eec:	dd400917 	ldw	r21,36(sp)
    4ef0:	dd000817 	ldw	r20,32(sp)
    4ef4:	0023883a 	mov	r17,zero
    4ef8:	003fa906 	br	4da0 <_dtoa_r+0xa0c>
    4efc:	d9800317 	ldw	r6,12(sp)
    4f00:	b981670e 	bge	r23,r6,54a0 <_dtoa_r+0x110c>
    4f04:	0027883a 	mov	r19,zero
    4f08:	d8c00a17 	ldw	r3,40(sp)
    4f0c:	183fd21e 	bne	r3,zero,4e58 <_dtoa_r+0xac4>
    4f10:	00800044 	movi	r2,1
    4f14:	1585883a 	add	r2,r2,r22
    4f18:	108007cc 	andi	r2,r2,31
    4f1c:	10005f26 	beq	r2,zero,509c <_dtoa_r+0xd08>
    4f20:	00c00804 	movi	r3,32
    4f24:	1887c83a 	sub	r3,r3,r2
    4f28:	01000104 	movi	r4,4
    4f2c:	20c2dd0e 	bge	r4,r3,5aa4 <_dtoa_r+0x1710>
    4f30:	d9000817 	ldw	r4,32(sp)
    4f34:	00c00704 	movi	r3,28
    4f38:	1885c83a 	sub	r2,r3,r2
    4f3c:	2089883a 	add	r4,r4,r2
    4f40:	d9000815 	stw	r4,32(sp)
    4f44:	a0a9883a 	add	r20,r20,r2
    4f48:	b0ad883a 	add	r22,r22,r2
    4f4c:	d8800817 	ldw	r2,32(sp)
    4f50:	0080050e 	bge	zero,r2,4f68 <_dtoa_r+0xbd4>
    4f54:	e00b883a 	mov	r5,fp
    4f58:	8009883a 	mov	r4,r16
    4f5c:	100d883a 	mov	r6,r2
    4f60:	00078680 	call	7868 <__lshift>
    4f64:	1039883a 	mov	fp,r2
    4f68:	0580050e 	bge	zero,r22,4f80 <_dtoa_r+0xbec>
    4f6c:	a80b883a 	mov	r5,r21
    4f70:	8009883a 	mov	r4,r16
    4f74:	b00d883a 	mov	r6,r22
    4f78:	00078680 	call	7868 <__lshift>
    4f7c:	102b883a 	mov	r21,r2
    4f80:	d8c00c17 	ldw	r3,48(sp)
    4f84:	1801161e 	bne	r3,zero,53e0 <_dtoa_r+0x104c>
    4f88:	d8c00617 	ldw	r3,24(sp)
    4f8c:	00c12d0e 	bge	zero,r3,5444 <_dtoa_r+0x10b0>
    4f90:	d8c00b17 	ldw	r3,44(sp)
    4f94:	1800571e 	bne	r3,zero,50f4 <_dtoa_r+0xd60>
    4f98:	dc800717 	ldw	r18,28(sp)
    4f9c:	dcc00617 	ldw	r19,24(sp)
    4fa0:	9029883a 	mov	r20,r18
    4fa4:	00000206 	br	4fb0 <_dtoa_r+0xc1c>
    4fa8:	00071c00 	call	71c0 <__multadd>
    4fac:	1039883a 	mov	fp,r2
    4fb0:	e009883a 	mov	r4,fp
    4fb4:	a80b883a 	mov	r5,r21
    4fb8:	00041940 	call	4194 <quorem>
    4fbc:	10800c04 	addi	r2,r2,48
    4fc0:	90800005 	stb	r2,0(r18)
    4fc4:	94800044 	addi	r18,r18,1
    4fc8:	9507c83a 	sub	r3,r18,r20
    4fcc:	8009883a 	mov	r4,r16
    4fd0:	e00b883a 	mov	r5,fp
    4fd4:	01800284 	movi	r6,10
    4fd8:	000f883a 	mov	r7,zero
    4fdc:	1cfff216 	blt	r3,r19,4fa8 <_dtoa_r+0xc14>
    4fe0:	1011883a 	mov	r8,r2
    4fe4:	d8800617 	ldw	r2,24(sp)
    4fe8:	00822e0e 	bge	zero,r2,58a4 <_dtoa_r+0x1510>
    4fec:	d9000717 	ldw	r4,28(sp)
    4ff0:	0025883a 	mov	r18,zero
    4ff4:	20af883a 	add	r23,r4,r2
    4ff8:	e00b883a 	mov	r5,fp
    4ffc:	01800044 	movi	r6,1
    5000:	8009883a 	mov	r4,r16
    5004:	da001715 	stw	r8,92(sp)
    5008:	00078680 	call	7868 <__lshift>
    500c:	1009883a 	mov	r4,r2
    5010:	a80b883a 	mov	r5,r21
    5014:	1039883a 	mov	fp,r2
    5018:	00079b00 	call	79b0 <__mcmp>
    501c:	da001717 	ldw	r8,92(sp)
    5020:	00816e0e 	bge	zero,r2,55dc <_dtoa_r+0x1248>
    5024:	b93fffc3 	ldbu	r4,-1(r23)
    5028:	b8bfffc4 	addi	r2,r23,-1
    502c:	1007883a 	mov	r3,r2
    5030:	01800e44 	movi	r6,57
    5034:	d9c00717 	ldw	r7,28(sp)
    5038:	00000506 	br	5050 <_dtoa_r+0xcbc>
    503c:	18ffffc4 	addi	r3,r3,-1
    5040:	38811926 	beq	r7,r2,54a8 <_dtoa_r+0x1114>
    5044:	19000003 	ldbu	r4,0(r3)
    5048:	102f883a 	mov	r23,r2
    504c:	10bfffc4 	addi	r2,r2,-1
    5050:	21403fcc 	andi	r5,r4,255
    5054:	2940201c 	xori	r5,r5,128
    5058:	297fe004 	addi	r5,r5,-128
    505c:	29bff726 	beq	r5,r6,503c <_dtoa_r+0xca8>
    5060:	21000044 	addi	r4,r4,1
    5064:	11000005 	stb	r4,0(r2)
    5068:	8009883a 	mov	r4,r16
    506c:	a80b883a 	mov	r5,r21
    5070:	00071980 	call	7198 <_Bfree>
    5074:	883e7526 	beq	r17,zero,4a4c <_dtoa_r+0x6b8>
    5078:	90000426 	beq	r18,zero,508c <_dtoa_r+0xcf8>
    507c:	94400326 	beq	r18,r17,508c <_dtoa_r+0xcf8>
    5080:	8009883a 	mov	r4,r16
    5084:	900b883a 	mov	r5,r18
    5088:	00071980 	call	7198 <_Bfree>
    508c:	8009883a 	mov	r4,r16
    5090:	880b883a 	mov	r5,r17
    5094:	00071980 	call	7198 <_Bfree>
    5098:	003e6c06 	br	4a4c <_dtoa_r+0x6b8>
    509c:	00800704 	movi	r2,28
    50a0:	d9800817 	ldw	r6,32(sp)
    50a4:	a0a9883a 	add	r20,r20,r2
    50a8:	b0ad883a 	add	r22,r22,r2
    50ac:	308d883a 	add	r6,r6,r2
    50b0:	d9800815 	stw	r6,32(sp)
    50b4:	003fa506 	br	4f4c <_dtoa_r+0xbb8>
    50b8:	013efb84 	movi	r4,-1042
    50bc:	246bc83a 	sub	r21,r4,r17
    50c0:	9548983a 	sll	r4,r18,r21
    50c4:	003d1806 	br	4528 <_dtoa_r+0x194>
    50c8:	d8000c15 	stw	zero,48(sp)
    50cc:	003d5b06 	br	463c <_dtoa_r+0x2a8>
    50d0:	880b883a 	mov	r5,r17
    50d4:	8009883a 	mov	r4,r16
    50d8:	01800284 	movi	r6,10
    50dc:	000f883a 	mov	r7,zero
    50e0:	00071c00 	call	71c0 <__multadd>
    50e4:	1023883a 	mov	r17,r2
    50e8:	d8800d17 	ldw	r2,52(sp)
    50ec:	0082550e 	bge	zero,r2,5a44 <_dtoa_r+0x16b0>
    50f0:	d8800615 	stw	r2,24(sp)
    50f4:	0500050e 	bge	zero,r20,510c <_dtoa_r+0xd78>
    50f8:	880b883a 	mov	r5,r17
    50fc:	8009883a 	mov	r4,r16
    5100:	a00d883a 	mov	r6,r20
    5104:	00078680 	call	7868 <__lshift>
    5108:	1023883a 	mov	r17,r2
    510c:	98016a1e 	bne	r19,zero,56b8 <_dtoa_r+0x1324>
    5110:	8829883a 	mov	r20,r17
    5114:	d9000617 	ldw	r4,24(sp)
    5118:	dcc00717 	ldw	r19,28(sp)
    511c:	9480004c 	andi	r18,r18,1
    5120:	20bfffc4 	addi	r2,r4,-1
    5124:	9885883a 	add	r2,r19,r2
    5128:	d8800415 	stw	r2,16(sp)
    512c:	dc800615 	stw	r18,24(sp)
    5130:	e009883a 	mov	r4,fp
    5134:	a80b883a 	mov	r5,r21
    5138:	00041940 	call	4194 <quorem>
    513c:	e009883a 	mov	r4,fp
    5140:	880b883a 	mov	r5,r17
    5144:	102f883a 	mov	r23,r2
    5148:	00079b00 	call	79b0 <__mcmp>
    514c:	8009883a 	mov	r4,r16
    5150:	a80b883a 	mov	r5,r21
    5154:	a00d883a 	mov	r6,r20
    5158:	102d883a 	mov	r22,r2
    515c:	0007a100 	call	7a10 <__mdiff>
    5160:	1007883a 	mov	r3,r2
    5164:	10800317 	ldw	r2,12(r2)
    5168:	bc800c04 	addi	r18,r23,48
    516c:	1000971e 	bne	r2,zero,53cc <_dtoa_r+0x1038>
    5170:	180b883a 	mov	r5,r3
    5174:	e009883a 	mov	r4,fp
    5178:	d8c01515 	stw	r3,84(sp)
    517c:	00079b00 	call	79b0 <__mcmp>
    5180:	d8c01517 	ldw	r3,84(sp)
    5184:	8009883a 	mov	r4,r16
    5188:	d8801515 	stw	r2,84(sp)
    518c:	180b883a 	mov	r5,r3
    5190:	00071980 	call	7198 <_Bfree>
    5194:	d8801517 	ldw	r2,84(sp)
    5198:	1000041e 	bne	r2,zero,51ac <_dtoa_r+0xe18>
    519c:	d9800317 	ldw	r6,12(sp)
    51a0:	3000021e 	bne	r6,zero,51ac <_dtoa_r+0xe18>
    51a4:	d8c00617 	ldw	r3,24(sp)
    51a8:	18007626 	beq	r3,zero,5384 <_dtoa_r+0xff0>
    51ac:	b0005b16 	blt	r22,zero,531c <_dtoa_r+0xf88>
    51b0:	b000041e 	bne	r22,zero,51c4 <_dtoa_r+0xe30>
    51b4:	d9000317 	ldw	r4,12(sp)
    51b8:	2000021e 	bne	r4,zero,51c4 <_dtoa_r+0xe30>
    51bc:	d8c00617 	ldw	r3,24(sp)
    51c0:	18005626 	beq	r3,zero,531c <_dtoa_r+0xf88>
    51c4:	00814d16 	blt	zero,r2,56fc <_dtoa_r+0x1368>
    51c8:	d8c00417 	ldw	r3,16(sp)
    51cc:	9d800044 	addi	r22,r19,1
    51d0:	9c800005 	stb	r18,0(r19)
    51d4:	b02f883a 	mov	r23,r22
    51d8:	98c14c26 	beq	r19,r3,570c <_dtoa_r+0x1378>
    51dc:	e00b883a 	mov	r5,fp
    51e0:	8009883a 	mov	r4,r16
    51e4:	01800284 	movi	r6,10
    51e8:	000f883a 	mov	r7,zero
    51ec:	00071c00 	call	71c0 <__multadd>
    51f0:	1039883a 	mov	fp,r2
    51f4:	8d006d26 	beq	r17,r20,53ac <_dtoa_r+0x1018>
    51f8:	880b883a 	mov	r5,r17
    51fc:	01800284 	movi	r6,10
    5200:	000f883a 	mov	r7,zero
    5204:	8009883a 	mov	r4,r16
    5208:	00071c00 	call	71c0 <__multadd>
    520c:	a00b883a 	mov	r5,r20
    5210:	8009883a 	mov	r4,r16
    5214:	01800284 	movi	r6,10
    5218:	000f883a 	mov	r7,zero
    521c:	1023883a 	mov	r17,r2
    5220:	00071c00 	call	71c0 <__multadd>
    5224:	1029883a 	mov	r20,r2
    5228:	b027883a 	mov	r19,r22
    522c:	003fc006 	br	5130 <_dtoa_r+0xd9c>
    5230:	a005883a 	mov	r2,r20
    5234:	003ede06 	br	4db0 <_dtoa_r+0xa1c>
    5238:	01000044 	movi	r4,1
    523c:	d9000b15 	stw	r4,44(sp)
    5240:	d9802217 	ldw	r6,136(sp)
    5244:	0180dc0e 	bge	zero,r6,55b8 <_dtoa_r+0x1224>
    5248:	3023883a 	mov	r17,r6
    524c:	d9800d15 	stw	r6,52(sp)
    5250:	d9800615 	stw	r6,24(sp)
    5254:	003d1e06 	br	46d0 <_dtoa_r+0x33c>
    5258:	d8800617 	ldw	r2,24(sp)
    525c:	00be3716 	blt	zero,r2,4b3c <_dtoa_r+0x7a8>
    5260:	1000be1e 	bne	r2,zero,555c <_dtoa_r+0x11c8>
    5264:	8809883a 	mov	r4,r17
    5268:	a00b883a 	mov	r5,r20
    526c:	000d883a 	mov	r6,zero
    5270:	01d00534 	movhi	r7,16404
    5274:	000c3040 	call	c304 <__muldf3>
    5278:	1009883a 	mov	r4,r2
    527c:	180b883a 	mov	r5,r3
    5280:	900d883a 	mov	r6,r18
    5284:	980f883a 	mov	r7,r19
    5288:	000c1440 	call	c144 <__gedf2>
    528c:	002b883a 	mov	r21,zero
    5290:	0023883a 	mov	r17,zero
    5294:	10007a16 	blt	r2,zero,5480 <_dtoa_r+0x10ec>
    5298:	d9002217 	ldw	r4,136(sp)
    529c:	ddc00717 	ldw	r23,28(sp)
    52a0:	0108303a 	nor	r4,zero,r4
    52a4:	d9000515 	stw	r4,20(sp)
    52a8:	8009883a 	mov	r4,r16
    52ac:	a80b883a 	mov	r5,r21
    52b0:	00071980 	call	7198 <_Bfree>
    52b4:	883f751e 	bne	r17,zero,508c <_dtoa_r+0xcf8>
    52b8:	003de406 	br	4a4c <_dtoa_r+0x6b8>
    52bc:	e00b883a 	mov	r5,fp
    52c0:	8009883a 	mov	r4,r16
    52c4:	00077280 	call	7728 <__pow5mult>
    52c8:	1039883a 	mov	fp,r2
    52cc:	003ed306 	br	4e1c <_dtoa_r+0xa88>
    52d0:	903ee01e 	bne	r18,zero,4e54 <_dtoa_r+0xac0>
    52d4:	00800434 	movhi	r2,16
    52d8:	10bfffc4 	addi	r2,r2,-1
    52dc:	9884703a 	and	r2,r19,r2
    52e0:	103f081e 	bne	r2,zero,4f04 <_dtoa_r+0xb70>
    52e4:	9cdffc2c 	andhi	r19,r19,32752
    52e8:	983f0626 	beq	r19,zero,4f04 <_dtoa_r+0xb70>
    52ec:	d8800817 	ldw	r2,32(sp)
    52f0:	b5800044 	addi	r22,r22,1
    52f4:	04c00044 	movi	r19,1
    52f8:	10800044 	addi	r2,r2,1
    52fc:	d8800815 	stw	r2,32(sp)
    5300:	003f0106 	br	4f08 <_dtoa_r+0xb74>
    5304:	d9800f17 	ldw	r6,60(sp)
    5308:	30016826 	beq	r6,zero,58ac <_dtoa_r+0x1518>
    530c:	10810cc4 	addi	r2,r2,1075
    5310:	dd400917 	ldw	r21,36(sp)
    5314:	dd000817 	ldw	r20,32(sp)
    5318:	003e9906 	br	4d80 <_dtoa_r+0x9ec>
    531c:	9011883a 	mov	r8,r18
    5320:	4007883a 	mov	r3,r8
    5324:	e02d883a 	mov	r22,fp
    5328:	0080100e 	bge	zero,r2,536c <_dtoa_r+0xfd8>
    532c:	01800044 	movi	r6,1
    5330:	8009883a 	mov	r4,r16
    5334:	e00b883a 	mov	r5,fp
    5338:	da001515 	stw	r8,84(sp)
    533c:	da001715 	stw	r8,92(sp)
    5340:	00078680 	call	7868 <__lshift>
    5344:	1009883a 	mov	r4,r2
    5348:	a80b883a 	mov	r5,r21
    534c:	102d883a 	mov	r22,r2
    5350:	00079b00 	call	79b0 <__mcmp>
    5354:	d8c01517 	ldw	r3,84(sp)
    5358:	da001717 	ldw	r8,92(sp)
    535c:	0081a50e 	bge	zero,r2,59f4 <_dtoa_r+0x1660>
    5360:	00800e44 	movi	r2,57
    5364:	40817b26 	beq	r8,r2,5954 <_dtoa_r+0x15c0>
    5368:	40c00044 	addi	r3,r8,1
    536c:	8825883a 	mov	r18,r17
    5370:	9dc00044 	addi	r23,r19,1
    5374:	98c00005 	stb	r3,0(r19)
    5378:	a023883a 	mov	r17,r20
    537c:	b039883a 	mov	fp,r22
    5380:	003f3906 	br	5068 <_dtoa_r+0xcd4>
    5384:	00800e44 	movi	r2,57
    5388:	9011883a 	mov	r8,r18
    538c:	90817226 	beq	r18,r2,5958 <_dtoa_r+0x15c4>
    5390:	0580010e 	bge	zero,r22,5398 <_dtoa_r+0x1004>
    5394:	ba000c44 	addi	r8,r23,49
    5398:	8825883a 	mov	r18,r17
    539c:	9dc00044 	addi	r23,r19,1
    53a0:	9a000005 	stb	r8,0(r19)
    53a4:	a023883a 	mov	r17,r20
    53a8:	003f2f06 	br	5068 <_dtoa_r+0xcd4>
    53ac:	880b883a 	mov	r5,r17
    53b0:	8009883a 	mov	r4,r16
    53b4:	01800284 	movi	r6,10
    53b8:	000f883a 	mov	r7,zero
    53bc:	00071c00 	call	71c0 <__multadd>
    53c0:	1023883a 	mov	r17,r2
    53c4:	1029883a 	mov	r20,r2
    53c8:	003f9706 	br	5228 <_dtoa_r+0xe94>
    53cc:	8009883a 	mov	r4,r16
    53d0:	180b883a 	mov	r5,r3
    53d4:	00071980 	call	7198 <_Bfree>
    53d8:	00800044 	movi	r2,1
    53dc:	003f7306 	br	51ac <_dtoa_r+0xe18>
    53e0:	e009883a 	mov	r4,fp
    53e4:	a80b883a 	mov	r5,r21
    53e8:	00079b00 	call	79b0 <__mcmp>
    53ec:	103ee60e 	bge	r2,zero,4f88 <_dtoa_r+0xbf4>
    53f0:	8009883a 	mov	r4,r16
    53f4:	e00b883a 	mov	r5,fp
    53f8:	01800284 	movi	r6,10
    53fc:	000f883a 	mov	r7,zero
    5400:	00071c00 	call	71c0 <__multadd>
    5404:	d9000517 	ldw	r4,20(sp)
    5408:	d9800b17 	ldw	r6,44(sp)
    540c:	1039883a 	mov	fp,r2
    5410:	213fffc4 	addi	r4,r4,-1
    5414:	d9000515 	stw	r4,20(sp)
    5418:	303f2d1e 	bne	r6,zero,50d0 <_dtoa_r+0xd3c>
    541c:	d9000d17 	ldw	r4,52(sp)
    5420:	0101780e 	bge	zero,r4,5a04 <_dtoa_r+0x1670>
    5424:	d9000615 	stw	r4,24(sp)
    5428:	003edb06 	br	4f98 <_dtoa_r+0xc04>
    542c:	00800084 	movi	r2,2
    5430:	30818e1e 	bne	r6,r2,5a6c <_dtoa_r+0x16d8>
    5434:	d8000b15 	stw	zero,44(sp)
    5438:	003f8106 	br	5240 <_dtoa_r+0xeac>
    543c:	d8800717 	ldw	r2,28(sp)
    5440:	003c0306 	br	4450 <_dtoa_r+0xbc>
    5444:	d9000317 	ldw	r4,12(sp)
    5448:	00800084 	movi	r2,2
    544c:	113ed00e 	bge	r2,r4,4f90 <_dtoa_r+0xbfc>
    5450:	d8c00617 	ldw	r3,24(sp)
    5454:	183f901e 	bne	r3,zero,5298 <_dtoa_r+0xf04>
    5458:	a80b883a 	mov	r5,r21
    545c:	8009883a 	mov	r4,r16
    5460:	01800144 	movi	r6,5
    5464:	000f883a 	mov	r7,zero
    5468:	00071c00 	call	71c0 <__multadd>
    546c:	e009883a 	mov	r4,fp
    5470:	100b883a 	mov	r5,r2
    5474:	102b883a 	mov	r21,r2
    5478:	00079b00 	call	79b0 <__mcmp>
    547c:	00bf860e 	bge	zero,r2,5298 <_dtoa_r+0xf04>
    5480:	d9800717 	ldw	r6,28(sp)
    5484:	00800c44 	movi	r2,49
    5488:	30800005 	stb	r2,0(r6)
    548c:	d8800517 	ldw	r2,20(sp)
    5490:	35c00044 	addi	r23,r6,1
    5494:	10800044 	addi	r2,r2,1
    5498:	d8800515 	stw	r2,20(sp)
    549c:	003f8206 	br	52a8 <_dtoa_r+0xf14>
    54a0:	903e981e 	bne	r18,zero,4f04 <_dtoa_r+0xb70>
    54a4:	003f8b06 	br	52d4 <_dtoa_r+0xf40>
    54a8:	d9800517 	ldw	r6,20(sp)
    54ac:	d8c00717 	ldw	r3,28(sp)
    54b0:	00800c44 	movi	r2,49
    54b4:	31800044 	addi	r6,r6,1
    54b8:	d9800515 	stw	r6,20(sp)
    54bc:	18800005 	stb	r2,0(r3)
    54c0:	003ee906 	br	5068 <_dtoa_r+0xcd4>
    54c4:	dc000317 	ldw	r16,12(sp)
    54c8:	003d6006 	br	4a4c <_dtoa_r+0x6b8>
    54cc:	8809883a 	mov	r4,r17
    54d0:	000d3800 	call	d380 <__floatsidf>
    54d4:	a009883a 	mov	r4,r20
    54d8:	a80b883a 	mov	r5,r21
    54dc:	100d883a 	mov	r6,r2
    54e0:	180f883a 	mov	r7,r3
    54e4:	000c3040 	call	c304 <__muldf3>
    54e8:	1009883a 	mov	r4,r2
    54ec:	180b883a 	mov	r5,r3
    54f0:	000d883a 	mov	r6,zero
    54f4:	01d00734 	movhi	r7,16412
    54f8:	000af580 	call	af58 <__adddf3>
    54fc:	1023883a 	mov	r17,r2
    5500:	00bf3034 	movhi	r2,64704
    5504:	1885883a 	add	r2,r3,r2
    5508:	d8800e15 	stw	r2,56(sp)
    550c:	a009883a 	mov	r4,r20
    5510:	a80b883a 	mov	r5,r21
    5514:	000d883a 	mov	r6,zero
    5518:	01d00534 	movhi	r7,16404
    551c:	000ca280 	call	ca28 <__subdf3>
    5520:	d9c00e17 	ldw	r7,56(sp)
    5524:	1009883a 	mov	r4,r2
    5528:	180b883a 	mov	r5,r3
    552c:	880d883a 	mov	r6,r17
    5530:	102b883a 	mov	r21,r2
    5534:	1829883a 	mov	r20,r3
    5538:	000c1440 	call	c144 <__gedf2>
    553c:	00807716 	blt	zero,r2,571c <_dtoa_r+0x1388>
    5540:	d8800e17 	ldw	r2,56(sp)
    5544:	a809883a 	mov	r4,r21
    5548:	a00b883a 	mov	r5,r20
    554c:	11e0003c 	xorhi	r7,r2,32768
    5550:	880d883a 	mov	r6,r17
    5554:	000c2240 	call	c224 <__ledf2>
    5558:	103d6b0e 	bge	r2,zero,4b08 <_dtoa_r+0x774>
    555c:	002b883a 	mov	r21,zero
    5560:	0023883a 	mov	r17,zero
    5564:	003f4c06 	br	5298 <_dtoa_r+0xf04>
    5568:	d9800917 	ldw	r6,36(sp)
    556c:	e00b883a 	mov	r5,fp
    5570:	8009883a 	mov	r4,r16
    5574:	00077280 	call	7728 <__pow5mult>
    5578:	1039883a 	mov	fp,r2
    557c:	003e2706 	br	4e1c <_dtoa_r+0xa88>
    5580:	d8000b15 	stw	zero,44(sp)
    5584:	003c4906 	br	46ac <_dtoa_r+0x318>
    5588:	d9000917 	ldw	r4,36(sp)
    558c:	d9800a17 	ldw	r6,40(sp)
    5590:	dd400915 	stw	r21,36(sp)
    5594:	a905c83a 	sub	r2,r21,r4
    5598:	308d883a 	add	r6,r6,r2
    559c:	d9800a15 	stw	r6,40(sp)
    55a0:	002b883a 	mov	r21,zero
    55a4:	003df206 	br	4d70 <_dtoa_r+0x9dc>
    55a8:	dc800e15 	stw	r18,56(sp)
    55ac:	982b883a 	mov	r21,r19
    55b0:	04400084 	movi	r17,2
    55b4:	003c7406 	br	4788 <_dtoa_r+0x3f4>
    55b8:	04400044 	movi	r17,1
    55bc:	dc400d15 	stw	r17,52(sp)
    55c0:	dc400615 	stw	r17,24(sp)
    55c4:	dc402215 	stw	r17,136(sp)
    55c8:	80001115 	stw	zero,68(r16)
    55cc:	000b883a 	mov	r5,zero
    55d0:	003c4a06 	br	46fc <_dtoa_r+0x368>
    55d4:	3023883a 	mov	r17,r6
    55d8:	003ffb06 	br	55c8 <_dtoa_r+0x1234>
    55dc:	1000021e 	bne	r2,zero,55e8 <_dtoa_r+0x1254>
    55e0:	4200004c 	andi	r8,r8,1
    55e4:	403e8f1e 	bne	r8,zero,5024 <_dtoa_r+0xc90>
    55e8:	01000c04 	movi	r4,48
    55ec:	00000106 	br	55f4 <_dtoa_r+0x1260>
    55f0:	102f883a 	mov	r23,r2
    55f4:	b8bfffc4 	addi	r2,r23,-1
    55f8:	10c00007 	ldb	r3,0(r2)
    55fc:	193ffc26 	beq	r3,r4,55f0 <_dtoa_r+0x125c>
    5600:	003e9906 	br	5068 <_dtoa_r+0xcd4>
    5604:	d9000517 	ldw	r4,20(sp)
    5608:	012fc83a 	sub	r23,zero,r4
    560c:	b800ad26 	beq	r23,zero,58c4 <_dtoa_r+0x1530>
    5610:	b88003cc 	andi	r2,r23,15
    5614:	100490fa 	slli	r2,r2,3
    5618:	00c00074 	movhi	r3,1
    561c:	18ffd204 	addi	r3,r3,-184
    5620:	1885883a 	add	r2,r3,r2
    5624:	11800017 	ldw	r6,0(r2)
    5628:	11c00117 	ldw	r7,4(r2)
    562c:	b82fd13a 	srai	r23,r23,4
    5630:	9009883a 	mov	r4,r18
    5634:	980b883a 	mov	r5,r19
    5638:	000c3040 	call	c304 <__muldf3>
    563c:	1029883a 	mov	r20,r2
    5640:	182b883a 	mov	r21,r3
    5644:	b800f426 	beq	r23,zero,5a18 <_dtoa_r+0x1684>
    5648:	02000074 	movhi	r8,1
    564c:	423fc804 	addi	r8,r8,-224
    5650:	8029883a 	mov	r20,r16
    5654:	04400084 	movi	r17,2
    5658:	4021883a 	mov	r16,r8
    565c:	b980004c 	andi	r6,r23,1
    5660:	1009883a 	mov	r4,r2
    5664:	b82fd07a 	srai	r23,r23,1
    5668:	180b883a 	mov	r5,r3
    566c:	30000426 	beq	r6,zero,5680 <_dtoa_r+0x12ec>
    5670:	81800017 	ldw	r6,0(r16)
    5674:	81c00117 	ldw	r7,4(r16)
    5678:	8c400044 	addi	r17,r17,1
    567c:	000c3040 	call	c304 <__muldf3>
    5680:	84000204 	addi	r16,r16,8
    5684:	b83ff51e 	bne	r23,zero,565c <_dtoa_r+0x12c8>
    5688:	a021883a 	mov	r16,r20
    568c:	182b883a 	mov	r21,r3
    5690:	1029883a 	mov	r20,r2
    5694:	003c5506 	br	47ec <_dtoa_r+0x458>
    5698:	d9800517 	ldw	r6,20(sp)
    569c:	d9000717 	ldw	r4,28(sp)
    56a0:	00c00c04 	movi	r3,48
    56a4:	31800044 	addi	r6,r6,1
    56a8:	d9800515 	stw	r6,20(sp)
    56ac:	20c00005 	stb	r3,0(r4)
    56b0:	02000c44 	movi	r8,49
    56b4:	003da206 	br	4d40 <_dtoa_r+0x9ac>
    56b8:	89400117 	ldw	r5,4(r17)
    56bc:	8009883a 	mov	r4,r16
    56c0:	00070f00 	call	70f0 <_Balloc>
    56c4:	89800417 	ldw	r6,16(r17)
    56c8:	11000304 	addi	r4,r2,12
    56cc:	89400304 	addi	r5,r17,12
    56d0:	31800084 	addi	r6,r6,2
    56d4:	318d883a 	add	r6,r6,r6
    56d8:	318d883a 	add	r6,r6,r6
    56dc:	1027883a 	mov	r19,r2
    56e0:	0006e5c0 	call	6e5c <memcpy>
    56e4:	8009883a 	mov	r4,r16
    56e8:	980b883a 	mov	r5,r19
    56ec:	01800044 	movi	r6,1
    56f0:	00078680 	call	7868 <__lshift>
    56f4:	1029883a 	mov	r20,r2
    56f8:	003e8606 	br	5114 <_dtoa_r+0xd80>
    56fc:	00800e44 	movi	r2,57
    5700:	90809526 	beq	r18,r2,5958 <_dtoa_r+0x15c4>
    5704:	92000044 	addi	r8,r18,1
    5708:	003f2306 	br	5398 <_dtoa_r+0x1004>
    570c:	9011883a 	mov	r8,r18
    5710:	8825883a 	mov	r18,r17
    5714:	a023883a 	mov	r17,r20
    5718:	003e3706 	br	4ff8 <_dtoa_r+0xc64>
    571c:	002b883a 	mov	r21,zero
    5720:	0023883a 	mov	r17,zero
    5724:	003f5606 	br	5480 <_dtoa_r+0x10ec>
    5728:	51bfffc4 	addi	r6,r10,-1
    572c:	300490fa 	slli	r2,r6,3
    5730:	00c00074 	movhi	r3,1
    5734:	18ffd204 	addi	r3,r3,-184
    5738:	1885883a 	add	r2,r3,r2
    573c:	d9c00e17 	ldw	r7,56(sp)
    5740:	11000017 	ldw	r4,0(r2)
    5744:	11400117 	ldw	r5,4(r2)
    5748:	d8800717 	ldw	r2,28(sp)
    574c:	d9801015 	stw	r6,64(sp)
    5750:	880d883a 	mov	r6,r17
    5754:	da801615 	stw	r10,88(sp)
    5758:	15c00044 	addi	r23,r2,1
    575c:	000c3040 	call	c304 <__muldf3>
    5760:	a80b883a 	mov	r5,r21
    5764:	a009883a 	mov	r4,r20
    5768:	d8c01115 	stw	r3,68(sp)
    576c:	d8800e15 	stw	r2,56(sp)
    5770:	000d2f80 	call	d2f8 <__fixdfsi>
    5774:	1009883a 	mov	r4,r2
    5778:	1023883a 	mov	r17,r2
    577c:	000d3800 	call	d380 <__floatsidf>
    5780:	a009883a 	mov	r4,r20
    5784:	a80b883a 	mov	r5,r21
    5788:	100d883a 	mov	r6,r2
    578c:	180f883a 	mov	r7,r3
    5790:	000ca280 	call	ca28 <__subdf3>
    5794:	1813883a 	mov	r9,r3
    5798:	d8c00717 	ldw	r3,28(sp)
    579c:	8c400c04 	addi	r17,r17,48
    57a0:	1011883a 	mov	r8,r2
    57a4:	1c400005 	stb	r17,0(r3)
    57a8:	da801617 	ldw	r10,88(sp)
    57ac:	00800044 	movi	r2,1
    57b0:	50802326 	beq	r10,r2,5840 <_dtoa_r+0x14ac>
    57b4:	d8800717 	ldw	r2,28(sp)
    57b8:	b82b883a 	mov	r21,r23
    57bc:	dc001315 	stw	r16,76(sp)
    57c0:	12a9883a 	add	r20,r2,r10
    57c4:	4807883a 	mov	r3,r9
    57c8:	4005883a 	mov	r2,r8
    57cc:	dc801415 	stw	r18,80(sp)
    57d0:	000d883a 	mov	r6,zero
    57d4:	01d00934 	movhi	r7,16420
    57d8:	1009883a 	mov	r4,r2
    57dc:	180b883a 	mov	r5,r3
    57e0:	000c3040 	call	c304 <__muldf3>
    57e4:	180b883a 	mov	r5,r3
    57e8:	1009883a 	mov	r4,r2
    57ec:	1821883a 	mov	r16,r3
    57f0:	1025883a 	mov	r18,r2
    57f4:	000d2f80 	call	d2f8 <__fixdfsi>
    57f8:	1009883a 	mov	r4,r2
    57fc:	1023883a 	mov	r17,r2
    5800:	000d3800 	call	d380 <__floatsidf>
    5804:	9009883a 	mov	r4,r18
    5808:	800b883a 	mov	r5,r16
    580c:	100d883a 	mov	r6,r2
    5810:	180f883a 	mov	r7,r3
    5814:	8c400c04 	addi	r17,r17,48
    5818:	000ca280 	call	ca28 <__subdf3>
    581c:	ad400044 	addi	r21,r21,1
    5820:	ac7fffc5 	stb	r17,-1(r21)
    5824:	ad3fea1e 	bne	r21,r20,57d0 <_dtoa_r+0x143c>
    5828:	1813883a 	mov	r9,r3
    582c:	d8c01017 	ldw	r3,64(sp)
    5830:	dc001317 	ldw	r16,76(sp)
    5834:	dc801417 	ldw	r18,80(sp)
    5838:	1011883a 	mov	r8,r2
    583c:	b8ef883a 	add	r23,r23,r3
    5840:	d9000e17 	ldw	r4,56(sp)
    5844:	d9401117 	ldw	r5,68(sp)
    5848:	000d883a 	mov	r6,zero
    584c:	01cff834 	movhi	r7,16352
    5850:	da001715 	stw	r8,92(sp)
    5854:	da401515 	stw	r9,84(sp)
    5858:	000af580 	call	af58 <__adddf3>
    585c:	da001717 	ldw	r8,92(sp)
    5860:	da401517 	ldw	r9,84(sp)
    5864:	1009883a 	mov	r4,r2
    5868:	400d883a 	mov	r6,r8
    586c:	480f883a 	mov	r7,r9
    5870:	180b883a 	mov	r5,r3
    5874:	000c2240 	call	c224 <__ledf2>
    5878:	da001717 	ldw	r8,92(sp)
    587c:	da401517 	ldw	r9,84(sp)
    5880:	10003b0e 	bge	r2,zero,5970 <_dtoa_r+0x15dc>
    5884:	d9001217 	ldw	r4,72(sp)
    5888:	bd7fffc3 	ldbu	r21,-1(r23)
    588c:	d9000515 	stw	r4,20(sp)
    5890:	003d1c06 	br	4d04 <_dtoa_r+0x970>
    5894:	d8c00817 	ldw	r3,32(sp)
    5898:	18a9c83a 	sub	r20,r3,r2
    589c:	0005883a 	mov	r2,zero
    58a0:	003d3706 	br	4d80 <_dtoa_r+0x9ec>
    58a4:	00800044 	movi	r2,1
    58a8:	003dd006 	br	4fec <_dtoa_r+0xc58>
    58ac:	d8c00217 	ldw	r3,8(sp)
    58b0:	00800d84 	movi	r2,54
    58b4:	dd400917 	ldw	r21,36(sp)
    58b8:	10c5c83a 	sub	r2,r2,r3
    58bc:	dd000817 	ldw	r20,32(sp)
    58c0:	003d2f06 	br	4d80 <_dtoa_r+0x9ec>
    58c4:	9029883a 	mov	r20,r18
    58c8:	982b883a 	mov	r21,r19
    58cc:	04400084 	movi	r17,2
    58d0:	003bc606 	br	47ec <_dtoa_r+0x458>
    58d4:	d8800617 	ldw	r2,24(sp)
    58d8:	103efc26 	beq	r2,zero,54cc <_dtoa_r+0x1138>
    58dc:	d8c00d17 	ldw	r3,52(sp)
    58e0:	00fc890e 	bge	zero,r3,4b08 <_dtoa_r+0x774>
    58e4:	a80b883a 	mov	r5,r21
    58e8:	a009883a 	mov	r4,r20
    58ec:	000d883a 	mov	r6,zero
    58f0:	01d00934 	movhi	r7,16420
    58f4:	000c3040 	call	c304 <__muldf3>
    58f8:	89000044 	addi	r4,r17,1
    58fc:	1029883a 	mov	r20,r2
    5900:	182b883a 	mov	r21,r3
    5904:	000d3800 	call	d380 <__floatsidf>
    5908:	a009883a 	mov	r4,r20
    590c:	a80b883a 	mov	r5,r21
    5910:	100d883a 	mov	r6,r2
    5914:	180f883a 	mov	r7,r3
    5918:	000c3040 	call	c304 <__muldf3>
    591c:	1009883a 	mov	r4,r2
    5920:	180b883a 	mov	r5,r3
    5924:	000d883a 	mov	r6,zero
    5928:	01d00734 	movhi	r7,16412
    592c:	000af580 	call	af58 <__adddf3>
    5930:	d9000517 	ldw	r4,20(sp)
    5934:	1023883a 	mov	r17,r2
    5938:	00bf3034 	movhi	r2,64704
    593c:	213fffc4 	addi	r4,r4,-1
    5940:	1885883a 	add	r2,r3,r2
    5944:	d9001215 	stw	r4,72(sp)
    5948:	d8800e15 	stw	r2,56(sp)
    594c:	da800d17 	ldw	r10,52(sp)
    5950:	003bc306 	br	4860 <_dtoa_r+0x4cc>
    5954:	b039883a 	mov	fp,r22
    5958:	01000e44 	movi	r4,57
    595c:	8825883a 	mov	r18,r17
    5960:	9dc00044 	addi	r23,r19,1
    5964:	99000005 	stb	r4,0(r19)
    5968:	a023883a 	mov	r17,r20
    596c:	003dae06 	br	5028 <_dtoa_r+0xc94>
    5970:	d9800e17 	ldw	r6,56(sp)
    5974:	d9c01117 	ldw	r7,68(sp)
    5978:	0009883a 	mov	r4,zero
    597c:	014ff834 	movhi	r5,16352
    5980:	da001715 	stw	r8,92(sp)
    5984:	da401515 	stw	r9,84(sp)
    5988:	000ca280 	call	ca28 <__subdf3>
    598c:	da001717 	ldw	r8,92(sp)
    5990:	da401517 	ldw	r9,84(sp)
    5994:	1009883a 	mov	r4,r2
    5998:	180b883a 	mov	r5,r3
    599c:	400d883a 	mov	r6,r8
    59a0:	480f883a 	mov	r7,r9
    59a4:	000c1440 	call	c144 <__gedf2>
    59a8:	00bc570e 	bge	zero,r2,4b08 <_dtoa_r+0x774>
    59ac:	01000c04 	movi	r4,48
    59b0:	00000106 	br	59b8 <_dtoa_r+0x1624>
    59b4:	102f883a 	mov	r23,r2
    59b8:	b8bfffc4 	addi	r2,r23,-1
    59bc:	10c00007 	ldb	r3,0(r2)
    59c0:	193ffc26 	beq	r3,r4,59b4 <_dtoa_r+0x1620>
    59c4:	d9801217 	ldw	r6,72(sp)
    59c8:	d9800515 	stw	r6,20(sp)
    59cc:	003c1f06 	br	4a4c <_dtoa_r+0x6b8>
    59d0:	d8801217 	ldw	r2,72(sp)
    59d4:	dc001117 	ldw	r16,68(sp)
    59d8:	d8800515 	stw	r2,20(sp)
    59dc:	003cc906 	br	4d04 <_dtoa_r+0x970>
    59e0:	dd801317 	ldw	r22,76(sp)
    59e4:	dc001117 	ldw	r16,68(sp)
    59e8:	dcc01417 	ldw	r19,80(sp)
    59ec:	dc801017 	ldw	r18,64(sp)
    59f0:	003c4506 	br	4b08 <_dtoa_r+0x774>
    59f4:	103e5d1e 	bne	r2,zero,536c <_dtoa_r+0xfd8>
    59f8:	4080004c 	andi	r2,r8,1
    59fc:	103e5b26 	beq	r2,zero,536c <_dtoa_r+0xfd8>
    5a00:	003e5706 	br	5360 <_dtoa_r+0xfcc>
    5a04:	d8c00317 	ldw	r3,12(sp)
    5a08:	00800084 	movi	r2,2
    5a0c:	10c00a16 	blt	r2,r3,5a38 <_dtoa_r+0x16a4>
    5a10:	d9000d17 	ldw	r4,52(sp)
    5a14:	003e8306 	br	5424 <_dtoa_r+0x1090>
    5a18:	04400084 	movi	r17,2
    5a1c:	003b7306 	br	47ec <_dtoa_r+0x458>
    5a20:	d9801217 	ldw	r6,72(sp)
    5a24:	d9800515 	stw	r6,20(sp)
    5a28:	003cb606 	br	4d04 <_dtoa_r+0x970>
    5a2c:	d9001217 	ldw	r4,72(sp)
    5a30:	d9000515 	stw	r4,20(sp)
    5a34:	003c0506 	br	4a4c <_dtoa_r+0x6b8>
    5a38:	d9800d17 	ldw	r6,52(sp)
    5a3c:	d9800615 	stw	r6,24(sp)
    5a40:	003e8306 	br	5450 <_dtoa_r+0x10bc>
    5a44:	d9800317 	ldw	r6,12(sp)
    5a48:	00800084 	movi	r2,2
    5a4c:	11800216 	blt	r2,r6,5a58 <_dtoa_r+0x16c4>
    5a50:	d8800d17 	ldw	r2,52(sp)
    5a54:	003da606 	br	50f0 <_dtoa_r+0xd5c>
    5a58:	d8800d17 	ldw	r2,52(sp)
    5a5c:	d8800615 	stw	r2,24(sp)
    5a60:	003e7b06 	br	5450 <_dtoa_r+0x10bc>
    5a64:	05000044 	movi	r20,1
    5a68:	003b0506 	br	4680 <_dtoa_r+0x2ec>
    5a6c:	8009883a 	mov	r4,r16
    5a70:	80001115 	stw	zero,68(r16)
    5a74:	000b883a 	mov	r5,zero
    5a78:	00070f00 	call	70f0 <_Balloc>
    5a7c:	d8800715 	stw	r2,28(sp)
    5a80:	d8c00717 	ldw	r3,28(sp)
    5a84:	00bfffc4 	movi	r2,-1
    5a88:	01000044 	movi	r4,1
    5a8c:	d8800615 	stw	r2,24(sp)
    5a90:	80c01015 	stw	r3,64(r16)
    5a94:	d9000b15 	stw	r4,44(sp)
    5a98:	d8002215 	stw	zero,136(sp)
    5a9c:	d8800d15 	stw	r2,52(sp)
    5aa0:	003c1906 	br	4b08 <_dtoa_r+0x774>
    5aa4:	193d2926 	beq	r3,r4,4f4c <_dtoa_r+0xbb8>
    5aa8:	00c00f04 	movi	r3,60
    5aac:	1885c83a 	sub	r2,r3,r2
    5ab0:	003d7b06 	br	50a0 <_dtoa_r+0xd0c>
    5ab4:	000b883a 	mov	r5,zero
    5ab8:	003b1006 	br	46fc <_dtoa_r+0x368>

00005abc <_fflush_r>:
    5abc:	defffb04 	addi	sp,sp,-20
    5ac0:	dcc00315 	stw	r19,12(sp)
    5ac4:	dc000015 	stw	r16,0(sp)
    5ac8:	dfc00415 	stw	ra,16(sp)
    5acc:	dc800215 	stw	r18,8(sp)
    5ad0:	dc400115 	stw	r17,4(sp)
    5ad4:	2027883a 	mov	r19,r4
    5ad8:	2821883a 	mov	r16,r5
    5adc:	20000226 	beq	r4,zero,5ae8 <_fflush_r+0x2c>
    5ae0:	20800e17 	ldw	r2,56(r4)
    5ae4:	10005326 	beq	r2,zero,5c34 <_fflush_r+0x178>
    5ae8:	8080030b 	ldhu	r2,12(r16)
    5aec:	10ffffcc 	andi	r3,r2,65535
    5af0:	18e0001c 	xori	r3,r3,32768
    5af4:	18e00004 	addi	r3,r3,-32768
    5af8:	18002c26 	beq	r3,zero,5bac <_fflush_r+0xf0>
    5afc:	10c0020c 	andi	r3,r2,8
    5b00:	1800321e 	bne	r3,zero,5bcc <_fflush_r+0x110>
    5b04:	80c00117 	ldw	r3,4(r16)
    5b08:	10820014 	ori	r2,r2,2048
    5b0c:	8080030d 	sth	r2,12(r16)
    5b10:	00c0570e 	bge	zero,r3,5c70 <_fflush_r+0x1b4>
    5b14:	82000a17 	ldw	r8,40(r16)
    5b18:	40002426 	beq	r8,zero,5bac <_fflush_r+0xf0>
    5b1c:	9c400017 	ldw	r17,0(r19)
    5b20:	10c4000c 	andi	r3,r2,4096
    5b24:	98000015 	stw	zero,0(r19)
    5b28:	18004626 	beq	r3,zero,5c44 <_fflush_r+0x188>
    5b2c:	81801417 	ldw	r6,80(r16)
    5b30:	10c0010c 	andi	r3,r2,4
    5b34:	18000626 	beq	r3,zero,5b50 <_fflush_r+0x94>
    5b38:	80c00117 	ldw	r3,4(r16)
    5b3c:	80800c17 	ldw	r2,48(r16)
    5b40:	30cdc83a 	sub	r6,r6,r3
    5b44:	10000226 	beq	r2,zero,5b50 <_fflush_r+0x94>
    5b48:	80800f17 	ldw	r2,60(r16)
    5b4c:	308dc83a 	sub	r6,r6,r2
    5b50:	81400717 	ldw	r5,28(r16)
    5b54:	9809883a 	mov	r4,r19
    5b58:	000f883a 	mov	r7,zero
    5b5c:	403ee83a 	callr	r8
    5b60:	00ffffc4 	movi	r3,-1
    5b64:	10c04526 	beq	r2,r3,5c7c <_fflush_r+0x1c0>
    5b68:	80c0030b 	ldhu	r3,12(r16)
    5b6c:	81000417 	ldw	r4,16(r16)
    5b70:	80000115 	stw	zero,4(r16)
    5b74:	197dffcc 	andi	r5,r3,63487
    5b78:	8140030d 	sth	r5,12(r16)
    5b7c:	81000015 	stw	r4,0(r16)
    5b80:	18c4000c 	andi	r3,r3,4096
    5b84:	18000126 	beq	r3,zero,5b8c <_fflush_r+0xd0>
    5b88:	80801415 	stw	r2,80(r16)
    5b8c:	81400c17 	ldw	r5,48(r16)
    5b90:	9c400015 	stw	r17,0(r19)
    5b94:	28000526 	beq	r5,zero,5bac <_fflush_r+0xf0>
    5b98:	80801004 	addi	r2,r16,64
    5b9c:	28800226 	beq	r5,r2,5ba8 <_fflush_r+0xec>
    5ba0:	9809883a 	mov	r4,r19
    5ba4:	00061d80 	call	61d8 <_free_r>
    5ba8:	80000c15 	stw	zero,48(r16)
    5bac:	0005883a 	mov	r2,zero
    5bb0:	dfc00417 	ldw	ra,16(sp)
    5bb4:	dcc00317 	ldw	r19,12(sp)
    5bb8:	dc800217 	ldw	r18,8(sp)
    5bbc:	dc400117 	ldw	r17,4(sp)
    5bc0:	dc000017 	ldw	r16,0(sp)
    5bc4:	dec00504 	addi	sp,sp,20
    5bc8:	f800283a 	ret
    5bcc:	84800417 	ldw	r18,16(r16)
    5bd0:	903ff626 	beq	r18,zero,5bac <_fflush_r+0xf0>
    5bd4:	84400017 	ldw	r17,0(r16)
    5bd8:	108000cc 	andi	r2,r2,3
    5bdc:	84800015 	stw	r18,0(r16)
    5be0:	8ca3c83a 	sub	r17,r17,r18
    5be4:	10001526 	beq	r2,zero,5c3c <_fflush_r+0x180>
    5be8:	0005883a 	mov	r2,zero
    5bec:	80800215 	stw	r2,8(r16)
    5bf0:	04400316 	blt	zero,r17,5c00 <_fflush_r+0x144>
    5bf4:	003fed06 	br	5bac <_fflush_r+0xf0>
    5bf8:	90a5883a 	add	r18,r18,r2
    5bfc:	047feb0e 	bge	zero,r17,5bac <_fflush_r+0xf0>
    5c00:	80800917 	ldw	r2,36(r16)
    5c04:	81400717 	ldw	r5,28(r16)
    5c08:	880f883a 	mov	r7,r17
    5c0c:	900d883a 	mov	r6,r18
    5c10:	9809883a 	mov	r4,r19
    5c14:	103ee83a 	callr	r2
    5c18:	88a3c83a 	sub	r17,r17,r2
    5c1c:	00bff616 	blt	zero,r2,5bf8 <_fflush_r+0x13c>
    5c20:	80c0030b 	ldhu	r3,12(r16)
    5c24:	00bfffc4 	movi	r2,-1
    5c28:	18c01014 	ori	r3,r3,64
    5c2c:	80c0030d 	sth	r3,12(r16)
    5c30:	003fdf06 	br	5bb0 <_fflush_r+0xf4>
    5c34:	00060640 	call	6064 <__sinit>
    5c38:	003fab06 	br	5ae8 <_fflush_r+0x2c>
    5c3c:	80800517 	ldw	r2,20(r16)
    5c40:	003fea06 	br	5bec <_fflush_r+0x130>
    5c44:	81400717 	ldw	r5,28(r16)
    5c48:	000d883a 	mov	r6,zero
    5c4c:	9809883a 	mov	r4,r19
    5c50:	01c00044 	movi	r7,1
    5c54:	403ee83a 	callr	r8
    5c58:	100d883a 	mov	r6,r2
    5c5c:	00bfffc4 	movi	r2,-1
    5c60:	30801326 	beq	r6,r2,5cb0 <_fflush_r+0x1f4>
    5c64:	8080030b 	ldhu	r2,12(r16)
    5c68:	82000a17 	ldw	r8,40(r16)
    5c6c:	003fb006 	br	5b30 <_fflush_r+0x74>
    5c70:	80c00f17 	ldw	r3,60(r16)
    5c74:	00ffa716 	blt	zero,r3,5b14 <_fflush_r+0x58>
    5c78:	003fcc06 	br	5bac <_fflush_r+0xf0>
    5c7c:	98c00017 	ldw	r3,0(r19)
    5c80:	183fb926 	beq	r3,zero,5b68 <_fflush_r+0xac>
    5c84:	01000744 	movi	r4,29
    5c88:	19000226 	beq	r3,r4,5c94 <_fflush_r+0x1d8>
    5c8c:	01000584 	movi	r4,22
    5c90:	1900101e 	bne	r3,r4,5cd4 <_fflush_r+0x218>
    5c94:	8080030b 	ldhu	r2,12(r16)
    5c98:	80c00417 	ldw	r3,16(r16)
    5c9c:	80000115 	stw	zero,4(r16)
    5ca0:	10bdffcc 	andi	r2,r2,63487
    5ca4:	8080030d 	sth	r2,12(r16)
    5ca8:	80c00015 	stw	r3,0(r16)
    5cac:	003fb706 	br	5b8c <_fflush_r+0xd0>
    5cb0:	98800017 	ldw	r2,0(r19)
    5cb4:	103feb26 	beq	r2,zero,5c64 <_fflush_r+0x1a8>
    5cb8:	00c00744 	movi	r3,29
    5cbc:	10c00226 	beq	r2,r3,5cc8 <_fflush_r+0x20c>
    5cc0:	00c00584 	movi	r3,22
    5cc4:	10ffd61e 	bne	r2,r3,5c20 <_fflush_r+0x164>
    5cc8:	9c400015 	stw	r17,0(r19)
    5ccc:	0005883a 	mov	r2,zero
    5cd0:	003fb706 	br	5bb0 <_fflush_r+0xf4>
    5cd4:	80c0030b 	ldhu	r3,12(r16)
    5cd8:	18c01014 	ori	r3,r3,64
    5cdc:	80c0030d 	sth	r3,12(r16)
    5ce0:	003fb306 	br	5bb0 <_fflush_r+0xf4>

00005ce4 <fflush>:
    5ce4:	20000526 	beq	r4,zero,5cfc <fflush+0x18>
    5ce8:	00800074 	movhi	r2,1
    5cec:	10870304 	addi	r2,r2,7180
    5cf0:	200b883a 	mov	r5,r4
    5cf4:	11000017 	ldw	r4,0(r2)
    5cf8:	0005abc1 	jmpi	5abc <_fflush_r>
    5cfc:	00800074 	movhi	r2,1
    5d00:	10870204 	addi	r2,r2,7176
    5d04:	11000017 	ldw	r4,0(r2)
    5d08:	01400034 	movhi	r5,0
    5d0c:	2956af04 	addi	r5,r5,23228
    5d10:	0006a241 	jmpi	6a24 <_fwalk_reent>

00005d14 <__fp_lock>:
    5d14:	0005883a 	mov	r2,zero
    5d18:	f800283a 	ret

00005d1c <__fp_unlock>:
    5d1c:	0005883a 	mov	r2,zero
    5d20:	f800283a 	ret

00005d24 <_cleanup_r>:
    5d24:	01400074 	movhi	r5,1
    5d28:	2967ad04 	addi	r5,r5,-24908
    5d2c:	000696c1 	jmpi	696c <_fwalk>

00005d30 <__sinit.part.1>:
    5d30:	defff604 	addi	sp,sp,-40
    5d34:	00c00034 	movhi	r3,0
    5d38:	dfc00915 	stw	ra,36(sp)
    5d3c:	df000815 	stw	fp,32(sp)
    5d40:	ddc00715 	stw	r23,28(sp)
    5d44:	dd800615 	stw	r22,24(sp)
    5d48:	dd400515 	stw	r21,20(sp)
    5d4c:	dd000415 	stw	r20,16(sp)
    5d50:	dcc00315 	stw	r19,12(sp)
    5d54:	dc800215 	stw	r18,8(sp)
    5d58:	dc400115 	stw	r17,4(sp)
    5d5c:	dc000015 	stw	r16,0(sp)
    5d60:	18d74904 	addi	r3,r3,23844
    5d64:	24000117 	ldw	r16,4(r4)
    5d68:	20c00f15 	stw	r3,60(r4)
    5d6c:	07000044 	movi	fp,1
    5d70:	00c000c4 	movi	r3,3
    5d74:	2080bb04 	addi	r2,r4,748
    5d78:	20c0b915 	stw	r3,740(r4)
    5d7c:	27000e15 	stw	fp,56(r4)
    5d80:	2080ba15 	stw	r2,744(r4)
    5d84:	2000b815 	stw	zero,736(r4)
    5d88:	05c00204 	movi	r23,8
    5d8c:	00800104 	movi	r2,4
    5d90:	2025883a 	mov	r18,r4
    5d94:	b80d883a 	mov	r6,r23
    5d98:	81001704 	addi	r4,r16,92
    5d9c:	000b883a 	mov	r5,zero
    5da0:	80000015 	stw	zero,0(r16)
    5da4:	80000115 	stw	zero,4(r16)
    5da8:	80000215 	stw	zero,8(r16)
    5dac:	8080030d 	sth	r2,12(r16)
    5db0:	80001915 	stw	zero,100(r16)
    5db4:	8000038d 	sth	zero,14(r16)
    5db8:	80000415 	stw	zero,16(r16)
    5dbc:	80000515 	stw	zero,20(r16)
    5dc0:	80000615 	stw	zero,24(r16)
    5dc4:	0001a280 	call	1a28 <memset>
    5dc8:	05800074 	movhi	r22,1
    5dcc:	94400217 	ldw	r17,8(r18)
    5dd0:	05400074 	movhi	r21,1
    5dd4:	05000074 	movhi	r20,1
    5dd8:	04c00074 	movhi	r19,1
    5ddc:	b5a1a404 	addi	r22,r22,-31088
    5de0:	ad61bb04 	addi	r21,r21,-30996
    5de4:	a521da04 	addi	r20,r20,-30872
    5de8:	9ce1f104 	addi	r19,r19,-30780
    5dec:	85800815 	stw	r22,32(r16)
    5df0:	85400915 	stw	r21,36(r16)
    5df4:	85000a15 	stw	r20,40(r16)
    5df8:	84c00b15 	stw	r19,44(r16)
    5dfc:	84000715 	stw	r16,28(r16)
    5e00:	00800284 	movi	r2,10
    5e04:	89001704 	addi	r4,r17,92
    5e08:	b80d883a 	mov	r6,r23
    5e0c:	000b883a 	mov	r5,zero
    5e10:	88000015 	stw	zero,0(r17)
    5e14:	88000115 	stw	zero,4(r17)
    5e18:	88000215 	stw	zero,8(r17)
    5e1c:	8880030d 	sth	r2,12(r17)
    5e20:	88001915 	stw	zero,100(r17)
    5e24:	8f00038d 	sth	fp,14(r17)
    5e28:	88000415 	stw	zero,16(r17)
    5e2c:	88000515 	stw	zero,20(r17)
    5e30:	88000615 	stw	zero,24(r17)
    5e34:	0001a280 	call	1a28 <memset>
    5e38:	94000317 	ldw	r16,12(r18)
    5e3c:	00800484 	movi	r2,18
    5e40:	8c400715 	stw	r17,28(r17)
    5e44:	8d800815 	stw	r22,32(r17)
    5e48:	8d400915 	stw	r21,36(r17)
    5e4c:	8d000a15 	stw	r20,40(r17)
    5e50:	8cc00b15 	stw	r19,44(r17)
    5e54:	8080030d 	sth	r2,12(r16)
    5e58:	00800084 	movi	r2,2
    5e5c:	80000015 	stw	zero,0(r16)
    5e60:	80000115 	stw	zero,4(r16)
    5e64:	80000215 	stw	zero,8(r16)
    5e68:	80001915 	stw	zero,100(r16)
    5e6c:	8080038d 	sth	r2,14(r16)
    5e70:	80000415 	stw	zero,16(r16)
    5e74:	80000515 	stw	zero,20(r16)
    5e78:	80000615 	stw	zero,24(r16)
    5e7c:	81001704 	addi	r4,r16,92
    5e80:	000b883a 	mov	r5,zero
    5e84:	b80d883a 	mov	r6,r23
    5e88:	0001a280 	call	1a28 <memset>
    5e8c:	84000715 	stw	r16,28(r16)
    5e90:	85800815 	stw	r22,32(r16)
    5e94:	85400915 	stw	r21,36(r16)
    5e98:	85000a15 	stw	r20,40(r16)
    5e9c:	84c00b15 	stw	r19,44(r16)
    5ea0:	dfc00917 	ldw	ra,36(sp)
    5ea4:	df000817 	ldw	fp,32(sp)
    5ea8:	ddc00717 	ldw	r23,28(sp)
    5eac:	dd800617 	ldw	r22,24(sp)
    5eb0:	dd400517 	ldw	r21,20(sp)
    5eb4:	dd000417 	ldw	r20,16(sp)
    5eb8:	dcc00317 	ldw	r19,12(sp)
    5ebc:	dc800217 	ldw	r18,8(sp)
    5ec0:	dc400117 	ldw	r17,4(sp)
    5ec4:	dc000017 	ldw	r16,0(sp)
    5ec8:	dec00a04 	addi	sp,sp,40
    5ecc:	f800283a 	ret

00005ed0 <__sfmoreglue>:
    5ed0:	defffc04 	addi	sp,sp,-16
    5ed4:	dc400115 	stw	r17,4(sp)
    5ed8:	2c401a24 	muli	r17,r5,104
    5edc:	dc800215 	stw	r18,8(sp)
    5ee0:	2825883a 	mov	r18,r5
    5ee4:	89400304 	addi	r5,r17,12
    5ee8:	dc000015 	stw	r16,0(sp)
    5eec:	dfc00315 	stw	ra,12(sp)
    5ef0:	00012800 	call	1280 <_malloc_r>
    5ef4:	1021883a 	mov	r16,r2
    5ef8:	10000726 	beq	r2,zero,5f18 <__sfmoreglue+0x48>
    5efc:	11000304 	addi	r4,r2,12
    5f00:	10000015 	stw	zero,0(r2)
    5f04:	14800115 	stw	r18,4(r2)
    5f08:	11000215 	stw	r4,8(r2)
    5f0c:	000b883a 	mov	r5,zero
    5f10:	880d883a 	mov	r6,r17
    5f14:	0001a280 	call	1a28 <memset>
    5f18:	8005883a 	mov	r2,r16
    5f1c:	dfc00317 	ldw	ra,12(sp)
    5f20:	dc800217 	ldw	r18,8(sp)
    5f24:	dc400117 	ldw	r17,4(sp)
    5f28:	dc000017 	ldw	r16,0(sp)
    5f2c:	dec00404 	addi	sp,sp,16
    5f30:	f800283a 	ret

00005f34 <__sfp>:
    5f34:	00800074 	movhi	r2,1
    5f38:	defffb04 	addi	sp,sp,-20
    5f3c:	10870204 	addi	r2,r2,7176
    5f40:	dc800215 	stw	r18,8(sp)
    5f44:	14800017 	ldw	r18,0(r2)
    5f48:	dcc00315 	stw	r19,12(sp)
    5f4c:	dfc00415 	stw	ra,16(sp)
    5f50:	90800e17 	ldw	r2,56(r18)
    5f54:	dc400115 	stw	r17,4(sp)
    5f58:	dc000015 	stw	r16,0(sp)
    5f5c:	2027883a 	mov	r19,r4
    5f60:	1000021e 	bne	r2,zero,5f6c <__sfp+0x38>
    5f64:	9009883a 	mov	r4,r18
    5f68:	0005d300 	call	5d30 <__sinit.part.1>
    5f6c:	9480b804 	addi	r18,r18,736
    5f70:	047fffc4 	movi	r17,-1
    5f74:	91400117 	ldw	r5,4(r18)
    5f78:	94000217 	ldw	r16,8(r18)
    5f7c:	297fffc4 	addi	r5,r5,-1
    5f80:	28000a16 	blt	r5,zero,5fac <__sfp+0x78>
    5f84:	8080030f 	ldh	r2,12(r16)
    5f88:	10000c26 	beq	r2,zero,5fbc <__sfp+0x88>
    5f8c:	80c01d04 	addi	r3,r16,116
    5f90:	00000206 	br	5f9c <__sfp+0x68>
    5f94:	18bfe60f 	ldh	r2,-104(r3)
    5f98:	10000826 	beq	r2,zero,5fbc <__sfp+0x88>
    5f9c:	297fffc4 	addi	r5,r5,-1
    5fa0:	1c3ffd04 	addi	r16,r3,-12
    5fa4:	18c01a04 	addi	r3,r3,104
    5fa8:	2c7ffa1e 	bne	r5,r17,5f94 <__sfp+0x60>
    5fac:	90800017 	ldw	r2,0(r18)
    5fb0:	10001d26 	beq	r2,zero,6028 <__sfp+0xf4>
    5fb4:	1025883a 	mov	r18,r2
    5fb8:	003fee06 	br	5f74 <__sfp+0x40>
    5fbc:	00bfffc4 	movi	r2,-1
    5fc0:	8080038d 	sth	r2,14(r16)
    5fc4:	00800044 	movi	r2,1
    5fc8:	8080030d 	sth	r2,12(r16)
    5fcc:	80001915 	stw	zero,100(r16)
    5fd0:	80000015 	stw	zero,0(r16)
    5fd4:	80000215 	stw	zero,8(r16)
    5fd8:	80000115 	stw	zero,4(r16)
    5fdc:	80000415 	stw	zero,16(r16)
    5fe0:	80000515 	stw	zero,20(r16)
    5fe4:	80000615 	stw	zero,24(r16)
    5fe8:	81001704 	addi	r4,r16,92
    5fec:	000b883a 	mov	r5,zero
    5ff0:	01800204 	movi	r6,8
    5ff4:	0001a280 	call	1a28 <memset>
    5ff8:	8005883a 	mov	r2,r16
    5ffc:	80000c15 	stw	zero,48(r16)
    6000:	80000d15 	stw	zero,52(r16)
    6004:	80001115 	stw	zero,68(r16)
    6008:	80001215 	stw	zero,72(r16)
    600c:	dfc00417 	ldw	ra,16(sp)
    6010:	dcc00317 	ldw	r19,12(sp)
    6014:	dc800217 	ldw	r18,8(sp)
    6018:	dc400117 	ldw	r17,4(sp)
    601c:	dc000017 	ldw	r16,0(sp)
    6020:	dec00504 	addi	sp,sp,20
    6024:	f800283a 	ret
    6028:	9809883a 	mov	r4,r19
    602c:	01400104 	movi	r5,4
    6030:	0005ed00 	call	5ed0 <__sfmoreglue>
    6034:	90800015 	stw	r2,0(r18)
    6038:	103fde1e 	bne	r2,zero,5fb4 <__sfp+0x80>
    603c:	00800304 	movi	r2,12
    6040:	98800015 	stw	r2,0(r19)
    6044:	0005883a 	mov	r2,zero
    6048:	003ff006 	br	600c <__sfp+0xd8>

0000604c <_cleanup>:
    604c:	00800074 	movhi	r2,1
    6050:	10870204 	addi	r2,r2,7176
    6054:	11000017 	ldw	r4,0(r2)
    6058:	01400074 	movhi	r5,1
    605c:	2967ad04 	addi	r5,r5,-24908
    6060:	000696c1 	jmpi	696c <_fwalk>

00006064 <__sinit>:
    6064:	20800e17 	ldw	r2,56(r4)
    6068:	10000126 	beq	r2,zero,6070 <__sinit+0xc>
    606c:	f800283a 	ret
    6070:	0005d301 	jmpi	5d30 <__sinit.part.1>

00006074 <__sfp_lock_acquire>:
    6074:	f800283a 	ret

00006078 <__sfp_lock_release>:
    6078:	f800283a 	ret

0000607c <__sinit_lock_acquire>:
    607c:	f800283a 	ret

00006080 <__sinit_lock_release>:
    6080:	f800283a 	ret

00006084 <__fp_lock_all>:
    6084:	00800074 	movhi	r2,1
    6088:	10870304 	addi	r2,r2,7180
    608c:	11000017 	ldw	r4,0(r2)
    6090:	01400034 	movhi	r5,0
    6094:	29574504 	addi	r5,r5,23828
    6098:	000696c1 	jmpi	696c <_fwalk>

0000609c <__fp_unlock_all>:
    609c:	00800074 	movhi	r2,1
    60a0:	10870304 	addi	r2,r2,7180
    60a4:	11000017 	ldw	r4,0(r2)
    60a8:	01400034 	movhi	r5,0
    60ac:	29574704 	addi	r5,r5,23836
    60b0:	000696c1 	jmpi	696c <_fwalk>

000060b4 <_malloc_trim_r>:
    60b4:	defffb04 	addi	sp,sp,-20
    60b8:	dcc00315 	stw	r19,12(sp)
    60bc:	04c00074 	movhi	r19,1
    60c0:	dc800215 	stw	r18,8(sp)
    60c4:	dc400115 	stw	r17,4(sp)
    60c8:	dc000015 	stw	r16,0(sp)
    60cc:	dfc00415 	stw	ra,16(sp)
    60d0:	2821883a 	mov	r16,r5
    60d4:	9cc16004 	addi	r19,r19,1408
    60d8:	2025883a 	mov	r18,r4
    60dc:	000db180 	call	db18 <__malloc_lock>
    60e0:	98800217 	ldw	r2,8(r19)
    60e4:	14400117 	ldw	r17,4(r2)
    60e8:	00bfff04 	movi	r2,-4
    60ec:	88a2703a 	and	r17,r17,r2
    60f0:	8c21c83a 	sub	r16,r17,r16
    60f4:	8403fbc4 	addi	r16,r16,4079
    60f8:	8020d33a 	srli	r16,r16,12
    60fc:	0083ffc4 	movi	r2,4095
    6100:	843fffc4 	addi	r16,r16,-1
    6104:	8020933a 	slli	r16,r16,12
    6108:	1400060e 	bge	r2,r16,6124 <_malloc_trim_r+0x70>
    610c:	9009883a 	mov	r4,r18
    6110:	000b883a 	mov	r5,zero
    6114:	0001de80 	call	1de8 <_sbrk_r>
    6118:	98c00217 	ldw	r3,8(r19)
    611c:	1c47883a 	add	r3,r3,r17
    6120:	10c00a26 	beq	r2,r3,614c <_malloc_trim_r+0x98>
    6124:	9009883a 	mov	r4,r18
    6128:	000db380 	call	db38 <__malloc_unlock>
    612c:	0005883a 	mov	r2,zero
    6130:	dfc00417 	ldw	ra,16(sp)
    6134:	dcc00317 	ldw	r19,12(sp)
    6138:	dc800217 	ldw	r18,8(sp)
    613c:	dc400117 	ldw	r17,4(sp)
    6140:	dc000017 	ldw	r16,0(sp)
    6144:	dec00504 	addi	sp,sp,20
    6148:	f800283a 	ret
    614c:	9009883a 	mov	r4,r18
    6150:	040bc83a 	sub	r5,zero,r16
    6154:	0001de80 	call	1de8 <_sbrk_r>
    6158:	00ffffc4 	movi	r3,-1
    615c:	10c00d26 	beq	r2,r3,6194 <_malloc_trim_r+0xe0>
    6160:	00c00074 	movhi	r3,1
    6164:	18cdda04 	addi	r3,r3,14184
    6168:	18800017 	ldw	r2,0(r3)
    616c:	99000217 	ldw	r4,8(r19)
    6170:	8c23c83a 	sub	r17,r17,r16
    6174:	8c400054 	ori	r17,r17,1
    6178:	1421c83a 	sub	r16,r2,r16
    617c:	24400115 	stw	r17,4(r4)
    6180:	9009883a 	mov	r4,r18
    6184:	1c000015 	stw	r16,0(r3)
    6188:	000db380 	call	db38 <__malloc_unlock>
    618c:	00800044 	movi	r2,1
    6190:	003fe706 	br	6130 <_malloc_trim_r+0x7c>
    6194:	9009883a 	mov	r4,r18
    6198:	000b883a 	mov	r5,zero
    619c:	0001de80 	call	1de8 <_sbrk_r>
    61a0:	99000217 	ldw	r4,8(r19)
    61a4:	014003c4 	movi	r5,15
    61a8:	1107c83a 	sub	r3,r2,r4
    61ac:	28ffdd0e 	bge	r5,r3,6124 <_malloc_trim_r+0x70>
    61b0:	01400074 	movhi	r5,1
    61b4:	29470404 	addi	r5,r5,7184
    61b8:	29400017 	ldw	r5,0(r5)
    61bc:	18c00054 	ori	r3,r3,1
    61c0:	20c00115 	stw	r3,4(r4)
    61c4:	00c00074 	movhi	r3,1
    61c8:	1145c83a 	sub	r2,r2,r5
    61cc:	18cdda04 	addi	r3,r3,14184
    61d0:	18800015 	stw	r2,0(r3)
    61d4:	003fd306 	br	6124 <_malloc_trim_r+0x70>

000061d8 <_free_r>:
    61d8:	28004c26 	beq	r5,zero,630c <_free_r+0x134>
    61dc:	defffd04 	addi	sp,sp,-12
    61e0:	dc400115 	stw	r17,4(sp)
    61e4:	dc000015 	stw	r16,0(sp)
    61e8:	2023883a 	mov	r17,r4
    61ec:	2821883a 	mov	r16,r5
    61f0:	dfc00215 	stw	ra,8(sp)
    61f4:	000db180 	call	db18 <__malloc_lock>
    61f8:	813fff17 	ldw	r4,-4(r16)
    61fc:	00bfff84 	movi	r2,-2
    6200:	02400074 	movhi	r9,1
    6204:	81bffe04 	addi	r6,r16,-8
    6208:	2084703a 	and	r2,r4,r2
    620c:	4a416004 	addi	r9,r9,1408
    6210:	308b883a 	add	r5,r6,r2
    6214:	2a000117 	ldw	r8,4(r5)
    6218:	49c00217 	ldw	r7,8(r9)
    621c:	00ffff04 	movi	r3,-4
    6220:	40c6703a 	and	r3,r8,r3
    6224:	39405326 	beq	r7,r5,6374 <_free_r+0x19c>
    6228:	28c00115 	stw	r3,4(r5)
    622c:	2100004c 	andi	r4,r4,1
    6230:	2000091e 	bne	r4,zero,6258 <_free_r+0x80>
    6234:	81fffe17 	ldw	r7,-8(r16)
    6238:	4a000204 	addi	r8,r9,8
    623c:	31cdc83a 	sub	r6,r6,r7
    6240:	31000217 	ldw	r4,8(r6)
    6244:	11c5883a 	add	r2,r2,r7
    6248:	22006126 	beq	r4,r8,63d0 <_free_r+0x1f8>
    624c:	31c00317 	ldw	r7,12(r6)
    6250:	21c00315 	stw	r7,12(r4)
    6254:	39000215 	stw	r4,8(r7)
    6258:	28c9883a 	add	r4,r5,r3
    625c:	21c00117 	ldw	r7,4(r4)
    6260:	39c0004c 	andi	r7,r7,1
    6264:	38000d1e 	bne	r7,zero,629c <_free_r+0xc4>
    6268:	29000217 	ldw	r4,8(r5)
    626c:	10c5883a 	add	r2,r2,r3
    6270:	00c00074 	movhi	r3,1
    6274:	18c16204 	addi	r3,r3,1416
    6278:	20c07526 	beq	r4,r3,6450 <_free_r+0x278>
    627c:	29c00317 	ldw	r7,12(r5)
    6280:	11400054 	ori	r5,r2,1
    6284:	3087883a 	add	r3,r6,r2
    6288:	21c00315 	stw	r7,12(r4)
    628c:	39000215 	stw	r4,8(r7)
    6290:	31400115 	stw	r5,4(r6)
    6294:	18800015 	stw	r2,0(r3)
    6298:	00000406 	br	62ac <_free_r+0xd4>
    629c:	10c00054 	ori	r3,r2,1
    62a0:	30c00115 	stw	r3,4(r6)
    62a4:	3087883a 	add	r3,r6,r2
    62a8:	18800015 	stw	r2,0(r3)
    62ac:	00c07fc4 	movi	r3,511
    62b0:	18801736 	bltu	r3,r2,6310 <_free_r+0x138>
    62b4:	1004d0fa 	srli	r2,r2,3
    62b8:	01400044 	movi	r5,1
    62bc:	49000117 	ldw	r4,4(r9)
    62c0:	1087883a 	add	r3,r2,r2
    62c4:	18c7883a 	add	r3,r3,r3
    62c8:	1005d0ba 	srai	r2,r2,2
    62cc:	18c7883a 	add	r3,r3,r3
    62d0:	1a47883a 	add	r3,r3,r9
    62d4:	19c00217 	ldw	r7,8(r3)
    62d8:	2884983a 	sll	r2,r5,r2
    62dc:	30c00315 	stw	r3,12(r6)
    62e0:	31c00215 	stw	r7,8(r6)
    62e4:	1104b03a 	or	r2,r2,r4
    62e8:	19800215 	stw	r6,8(r3)
    62ec:	48800115 	stw	r2,4(r9)
    62f0:	39800315 	stw	r6,12(r7)
    62f4:	8809883a 	mov	r4,r17
    62f8:	dfc00217 	ldw	ra,8(sp)
    62fc:	dc400117 	ldw	r17,4(sp)
    6300:	dc000017 	ldw	r16,0(sp)
    6304:	dec00304 	addi	sp,sp,12
    6308:	000db381 	jmpi	db38 <__malloc_unlock>
    630c:	f800283a 	ret
    6310:	1006d27a 	srli	r3,r2,9
    6314:	01000104 	movi	r4,4
    6318:	20c04036 	bltu	r4,r3,641c <_free_r+0x244>
    631c:	1006d1ba 	srli	r3,r2,6
    6320:	19400e04 	addi	r5,r3,56
    6324:	2947883a 	add	r3,r5,r5
    6328:	18c7883a 	add	r3,r3,r3
    632c:	18c7883a 	add	r3,r3,r3
    6330:	1a49883a 	add	r4,r3,r9
    6334:	20c00217 	ldw	r3,8(r4)
    6338:	01c00074 	movhi	r7,1
    633c:	39c16004 	addi	r7,r7,1408
    6340:	19003b26 	beq	r3,r4,6430 <_free_r+0x258>
    6344:	01ffff04 	movi	r7,-4
    6348:	19400117 	ldw	r5,4(r3)
    634c:	29ca703a 	and	r5,r5,r7
    6350:	1140022e 	bgeu	r2,r5,635c <_free_r+0x184>
    6354:	18c00217 	ldw	r3,8(r3)
    6358:	20fffb1e 	bne	r4,r3,6348 <_free_r+0x170>
    635c:	18800317 	ldw	r2,12(r3)
    6360:	30800315 	stw	r2,12(r6)
    6364:	30c00215 	stw	r3,8(r6)
    6368:	11800215 	stw	r6,8(r2)
    636c:	19800315 	stw	r6,12(r3)
    6370:	003fe006 	br	62f4 <_free_r+0x11c>
    6374:	2100004c 	andi	r4,r4,1
    6378:	1885883a 	add	r2,r3,r2
    637c:	2000071e 	bne	r4,zero,639c <_free_r+0x1c4>
    6380:	817ffe17 	ldw	r5,-8(r16)
    6384:	314dc83a 	sub	r6,r6,r5
    6388:	30c00317 	ldw	r3,12(r6)
    638c:	31000217 	ldw	r4,8(r6)
    6390:	1145883a 	add	r2,r2,r5
    6394:	20c00315 	stw	r3,12(r4)
    6398:	19000215 	stw	r4,8(r3)
    639c:	10c00054 	ori	r3,r2,1
    63a0:	30c00115 	stw	r3,4(r6)
    63a4:	00c00074 	movhi	r3,1
    63a8:	18c70504 	addi	r3,r3,7188
    63ac:	18c00017 	ldw	r3,0(r3)
    63b0:	49800215 	stw	r6,8(r9)
    63b4:	10ffcf36 	bltu	r2,r3,62f4 <_free_r+0x11c>
    63b8:	00800074 	movhi	r2,1
    63bc:	108dcf04 	addi	r2,r2,14140
    63c0:	11400017 	ldw	r5,0(r2)
    63c4:	8809883a 	mov	r4,r17
    63c8:	00060b40 	call	60b4 <_malloc_trim_r>
    63cc:	003fc906 	br	62f4 <_free_r+0x11c>
    63d0:	28c9883a 	add	r4,r5,r3
    63d4:	21000117 	ldw	r4,4(r4)
    63d8:	2100004c 	andi	r4,r4,1
    63dc:	20000a1e 	bne	r4,zero,6408 <_free_r+0x230>
    63e0:	29000317 	ldw	r4,12(r5)
    63e4:	29400217 	ldw	r5,8(r5)
    63e8:	10c5883a 	add	r2,r2,r3
    63ec:	10c00054 	ori	r3,r2,1
    63f0:	29000315 	stw	r4,12(r5)
    63f4:	21400215 	stw	r5,8(r4)
    63f8:	30c00115 	stw	r3,4(r6)
    63fc:	308d883a 	add	r6,r6,r2
    6400:	30800015 	stw	r2,0(r6)
    6404:	003fbb06 	br	62f4 <_free_r+0x11c>
    6408:	10c00054 	ori	r3,r2,1
    640c:	30c00115 	stw	r3,4(r6)
    6410:	308d883a 	add	r6,r6,r2
    6414:	30800015 	stw	r2,0(r6)
    6418:	003fb606 	br	62f4 <_free_r+0x11c>
    641c:	01000504 	movi	r4,20
    6420:	20c01436 	bltu	r4,r3,6474 <_free_r+0x29c>
    6424:	194016c4 	addi	r5,r3,91
    6428:	2947883a 	add	r3,r5,r5
    642c:	003fbe06 	br	6328 <_free_r+0x150>
    6430:	280bd0ba 	srai	r5,r5,2
    6434:	00800044 	movi	r2,1
    6438:	39000117 	ldw	r4,4(r7)
    643c:	114a983a 	sll	r5,r2,r5
    6440:	1805883a 	mov	r2,r3
    6444:	2908b03a 	or	r4,r5,r4
    6448:	39000115 	stw	r4,4(r7)
    644c:	003fc406 	br	6360 <_free_r+0x188>
    6450:	49800515 	stw	r6,20(r9)
    6454:	49800415 	stw	r6,16(r9)
    6458:	10c00054 	ori	r3,r2,1
    645c:	31000315 	stw	r4,12(r6)
    6460:	31000215 	stw	r4,8(r6)
    6464:	30c00115 	stw	r3,4(r6)
    6468:	308d883a 	add	r6,r6,r2
    646c:	30800015 	stw	r2,0(r6)
    6470:	003fa006 	br	62f4 <_free_r+0x11c>
    6474:	01001504 	movi	r4,84
    6478:	20c00436 	bltu	r4,r3,648c <_free_r+0x2b4>
    647c:	1006d33a 	srli	r3,r2,12
    6480:	19401b84 	addi	r5,r3,110
    6484:	2947883a 	add	r3,r5,r5
    6488:	003fa706 	br	6328 <_free_r+0x150>
    648c:	01005504 	movi	r4,340
    6490:	20c00436 	bltu	r4,r3,64a4 <_free_r+0x2cc>
    6494:	1006d3fa 	srli	r3,r2,15
    6498:	19401dc4 	addi	r5,r3,119
    649c:	2947883a 	add	r3,r5,r5
    64a0:	003fa106 	br	6328 <_free_r+0x150>
    64a4:	01015504 	movi	r4,1364
    64a8:	20c00436 	bltu	r4,r3,64bc <_free_r+0x2e4>
    64ac:	1006d4ba 	srli	r3,r2,18
    64b0:	19401f04 	addi	r5,r3,124
    64b4:	2947883a 	add	r3,r5,r5
    64b8:	003f9b06 	br	6328 <_free_r+0x150>
    64bc:	00c03f04 	movi	r3,252
    64c0:	01401f84 	movi	r5,126
    64c4:	003f9806 	br	6328 <_free_r+0x150>

000064c8 <__sfvwrite_r>:
    64c8:	30800217 	ldw	r2,8(r6)
    64cc:	10004526 	beq	r2,zero,65e4 <__sfvwrite_r+0x11c>
    64d0:	28c0030b 	ldhu	r3,12(r5)
    64d4:	defff404 	addi	sp,sp,-48
    64d8:	dd400715 	stw	r21,28(sp)
    64dc:	dcc00515 	stw	r19,20(sp)
    64e0:	dc000215 	stw	r16,8(sp)
    64e4:	dfc00b15 	stw	ra,44(sp)
    64e8:	df000a15 	stw	fp,40(sp)
    64ec:	ddc00915 	stw	r23,36(sp)
    64f0:	dd800815 	stw	r22,32(sp)
    64f4:	dd000615 	stw	r20,24(sp)
    64f8:	dc800415 	stw	r18,16(sp)
    64fc:	dc400315 	stw	r17,12(sp)
    6500:	1880020c 	andi	r2,r3,8
    6504:	2821883a 	mov	r16,r5
    6508:	202b883a 	mov	r21,r4
    650c:	3027883a 	mov	r19,r6
    6510:	10002526 	beq	r2,zero,65a8 <__sfvwrite_r+0xe0>
    6514:	28800417 	ldw	r2,16(r5)
    6518:	10002326 	beq	r2,zero,65a8 <__sfvwrite_r+0xe0>
    651c:	1880008c 	andi	r2,r3,2
    6520:	9c400017 	ldw	r17,0(r19)
    6524:	10003126 	beq	r2,zero,65ec <__sfvwrite_r+0x124>
    6528:	0029883a 	mov	r20,zero
    652c:	0025883a 	mov	r18,zero
    6530:	05810004 	movi	r22,1024
    6534:	a00d883a 	mov	r6,r20
    6538:	a809883a 	mov	r4,r21
    653c:	90002526 	beq	r18,zero,65d4 <__sfvwrite_r+0x10c>
    6540:	900f883a 	mov	r7,r18
    6544:	81400717 	ldw	r5,28(r16)
    6548:	b480012e 	bgeu	r22,r18,6550 <__sfvwrite_r+0x88>
    654c:	01c10004 	movi	r7,1024
    6550:	80800917 	ldw	r2,36(r16)
    6554:	103ee83a 	callr	r2
    6558:	0080510e 	bge	zero,r2,66a0 <__sfvwrite_r+0x1d8>
    655c:	98c00217 	ldw	r3,8(r19)
    6560:	a0a9883a 	add	r20,r20,r2
    6564:	90a5c83a 	sub	r18,r18,r2
    6568:	1885c83a 	sub	r2,r3,r2
    656c:	98800215 	stw	r2,8(r19)
    6570:	103ff01e 	bne	r2,zero,6534 <__sfvwrite_r+0x6c>
    6574:	0005883a 	mov	r2,zero
    6578:	dfc00b17 	ldw	ra,44(sp)
    657c:	df000a17 	ldw	fp,40(sp)
    6580:	ddc00917 	ldw	r23,36(sp)
    6584:	dd800817 	ldw	r22,32(sp)
    6588:	dd400717 	ldw	r21,28(sp)
    658c:	dd000617 	ldw	r20,24(sp)
    6590:	dcc00517 	ldw	r19,20(sp)
    6594:	dc800417 	ldw	r18,16(sp)
    6598:	dc400317 	ldw	r17,12(sp)
    659c:	dc000217 	ldw	r16,8(sp)
    65a0:	dec00c04 	addi	sp,sp,48
    65a4:	f800283a 	ret
    65a8:	a809883a 	mov	r4,r21
    65ac:	800b883a 	mov	r5,r16
    65b0:	00040640 	call	4064 <__swsetup_r>
    65b4:	80c0030b 	ldhu	r3,12(r16)
    65b8:	103fd826 	beq	r2,zero,651c <__sfvwrite_r+0x54>
    65bc:	18c01014 	ori	r3,r3,64
    65c0:	80c0030d 	sth	r3,12(r16)
    65c4:	00c00244 	movi	r3,9
    65c8:	00bfffc4 	movi	r2,-1
    65cc:	a8c00015 	stw	r3,0(r21)
    65d0:	003fe906 	br	6578 <__sfvwrite_r+0xb0>
    65d4:	8d000017 	ldw	r20,0(r17)
    65d8:	8c800117 	ldw	r18,4(r17)
    65dc:	8c400204 	addi	r17,r17,8
    65e0:	003fd406 	br	6534 <__sfvwrite_r+0x6c>
    65e4:	0005883a 	mov	r2,zero
    65e8:	f800283a 	ret
    65ec:	1880004c 	andi	r2,r3,1
    65f0:	1000301e 	bne	r2,zero,66b4 <__sfvwrite_r+0x1ec>
    65f4:	002f883a 	mov	r23,zero
    65f8:	0025883a 	mov	r18,zero
    65fc:	90001c26 	beq	r18,zero,6670 <__sfvwrite_r+0x1a8>
    6600:	1880800c 	andi	r2,r3,512
    6604:	85000217 	ldw	r20,8(r16)
    6608:	10006c26 	beq	r2,zero,67bc <__sfvwrite_r+0x2f4>
    660c:	a02d883a 	mov	r22,r20
    6610:	95008536 	bltu	r18,r20,6828 <__sfvwrite_r+0x360>
    6614:	1881200c 	andi	r2,r3,1152
    6618:	10009d1e 	bne	r2,zero,6890 <__sfvwrite_r+0x3c8>
    661c:	81000017 	ldw	r4,0(r16)
    6620:	a039883a 	mov	fp,r20
    6624:	9029883a 	mov	r20,r18
    6628:	b80b883a 	mov	r5,r23
    662c:	b00d883a 	mov	r6,r22
    6630:	0006f940 	call	6f94 <memmove>
    6634:	80c00217 	ldw	r3,8(r16)
    6638:	81000017 	ldw	r4,0(r16)
    663c:	9005883a 	mov	r2,r18
    6640:	1f39c83a 	sub	fp,r3,fp
    6644:	258f883a 	add	r7,r4,r22
    6648:	87000215 	stw	fp,8(r16)
    664c:	81c00015 	stw	r7,0(r16)
    6650:	98c00217 	ldw	r3,8(r19)
    6654:	b8af883a 	add	r23,r23,r2
    6658:	90a5c83a 	sub	r18,r18,r2
    665c:	1d05c83a 	sub	r2,r3,r20
    6660:	98800215 	stw	r2,8(r19)
    6664:	103fc326 	beq	r2,zero,6574 <__sfvwrite_r+0xac>
    6668:	80c0030b 	ldhu	r3,12(r16)
    666c:	903fe41e 	bne	r18,zero,6600 <__sfvwrite_r+0x138>
    6670:	8dc00017 	ldw	r23,0(r17)
    6674:	8c800117 	ldw	r18,4(r17)
    6678:	8c400204 	addi	r17,r17,8
    667c:	003fdf06 	br	65fc <__sfvwrite_r+0x134>
    6680:	000807c0 	call	807c <_realloc_r>
    6684:	102d883a 	mov	r22,r2
    6688:	1000a01e 	bne	r2,zero,690c <__sfvwrite_r+0x444>
    668c:	81400417 	ldw	r5,16(r16)
    6690:	a809883a 	mov	r4,r21
    6694:	00061d80 	call	61d8 <_free_r>
    6698:	00800304 	movi	r2,12
    669c:	a8800015 	stw	r2,0(r21)
    66a0:	80c0030b 	ldhu	r3,12(r16)
    66a4:	00bfffc4 	movi	r2,-1
    66a8:	18c01014 	ori	r3,r3,64
    66ac:	80c0030d 	sth	r3,12(r16)
    66b0:	003fb106 	br	6578 <__sfvwrite_r+0xb0>
    66b4:	0029883a 	mov	r20,zero
    66b8:	0011883a 	mov	r8,zero
    66bc:	0039883a 	mov	fp,zero
    66c0:	0025883a 	mov	r18,zero
    66c4:	90001f26 	beq	r18,zero,6744 <__sfvwrite_r+0x27c>
    66c8:	40006826 	beq	r8,zero,686c <__sfvwrite_r+0x3a4>
    66cc:	a02f883a 	mov	r23,r20
    66d0:	9500012e 	bgeu	r18,r20,66d8 <__sfvwrite_r+0x210>
    66d4:	902f883a 	mov	r23,r18
    66d8:	81000017 	ldw	r4,0(r16)
    66dc:	80800417 	ldw	r2,16(r16)
    66e0:	b82d883a 	mov	r22,r23
    66e4:	81800217 	ldw	r6,8(r16)
    66e8:	81c00517 	ldw	r7,20(r16)
    66ec:	1100022e 	bgeu	r2,r4,66f8 <__sfvwrite_r+0x230>
    66f0:	31c7883a 	add	r3,r6,r7
    66f4:	1dc01816 	blt	r3,r23,6758 <__sfvwrite_r+0x290>
    66f8:	b9c03f16 	blt	r23,r7,67f8 <__sfvwrite_r+0x330>
    66fc:	80800917 	ldw	r2,36(r16)
    6700:	81400717 	ldw	r5,28(r16)
    6704:	a809883a 	mov	r4,r21
    6708:	da000115 	stw	r8,4(sp)
    670c:	e00d883a 	mov	r6,fp
    6710:	103ee83a 	callr	r2
    6714:	102d883a 	mov	r22,r2
    6718:	da000117 	ldw	r8,4(sp)
    671c:	00bfe00e 	bge	zero,r2,66a0 <__sfvwrite_r+0x1d8>
    6720:	a5a9c83a 	sub	r20,r20,r22
    6724:	a0001f26 	beq	r20,zero,67a4 <__sfvwrite_r+0x2dc>
    6728:	98800217 	ldw	r2,8(r19)
    672c:	e5b9883a 	add	fp,fp,r22
    6730:	95a5c83a 	sub	r18,r18,r22
    6734:	15adc83a 	sub	r22,r2,r22
    6738:	9d800215 	stw	r22,8(r19)
    673c:	b03f8d26 	beq	r22,zero,6574 <__sfvwrite_r+0xac>
    6740:	903fe11e 	bne	r18,zero,66c8 <__sfvwrite_r+0x200>
    6744:	8f000017 	ldw	fp,0(r17)
    6748:	8c800117 	ldw	r18,4(r17)
    674c:	0011883a 	mov	r8,zero
    6750:	8c400204 	addi	r17,r17,8
    6754:	003fdb06 	br	66c4 <__sfvwrite_r+0x1fc>
    6758:	180d883a 	mov	r6,r3
    675c:	e00b883a 	mov	r5,fp
    6760:	da000115 	stw	r8,4(sp)
    6764:	d8c00015 	stw	r3,0(sp)
    6768:	0006f940 	call	6f94 <memmove>
    676c:	d8c00017 	ldw	r3,0(sp)
    6770:	80800017 	ldw	r2,0(r16)
    6774:	a809883a 	mov	r4,r21
    6778:	800b883a 	mov	r5,r16
    677c:	10c5883a 	add	r2,r2,r3
    6780:	80800015 	stw	r2,0(r16)
    6784:	d8c00015 	stw	r3,0(sp)
    6788:	0005abc0 	call	5abc <_fflush_r>
    678c:	d8c00017 	ldw	r3,0(sp)
    6790:	da000117 	ldw	r8,4(sp)
    6794:	103fc21e 	bne	r2,zero,66a0 <__sfvwrite_r+0x1d8>
    6798:	182d883a 	mov	r22,r3
    679c:	a5a9c83a 	sub	r20,r20,r22
    67a0:	a03fe11e 	bne	r20,zero,6728 <__sfvwrite_r+0x260>
    67a4:	a809883a 	mov	r4,r21
    67a8:	800b883a 	mov	r5,r16
    67ac:	0005abc0 	call	5abc <_fflush_r>
    67b0:	103fbb1e 	bne	r2,zero,66a0 <__sfvwrite_r+0x1d8>
    67b4:	0011883a 	mov	r8,zero
    67b8:	003fdb06 	br	6728 <__sfvwrite_r+0x260>
    67bc:	81000017 	ldw	r4,0(r16)
    67c0:	80800417 	ldw	r2,16(r16)
    67c4:	1100012e 	bgeu	r2,r4,67cc <__sfvwrite_r+0x304>
    67c8:	a4805a36 	bltu	r20,r18,6934 <__sfvwrite_r+0x46c>
    67cc:	81c00517 	ldw	r7,20(r16)
    67d0:	91c01a36 	bltu	r18,r7,683c <__sfvwrite_r+0x374>
    67d4:	80800917 	ldw	r2,36(r16)
    67d8:	81400717 	ldw	r5,28(r16)
    67dc:	a809883a 	mov	r4,r21
    67e0:	b80d883a 	mov	r6,r23
    67e4:	103ee83a 	callr	r2
    67e8:	1029883a 	mov	r20,r2
    67ec:	00bfac0e 	bge	zero,r2,66a0 <__sfvwrite_r+0x1d8>
    67f0:	a005883a 	mov	r2,r20
    67f4:	003f9606 	br	6650 <__sfvwrite_r+0x188>
    67f8:	b80d883a 	mov	r6,r23
    67fc:	e00b883a 	mov	r5,fp
    6800:	da000115 	stw	r8,4(sp)
    6804:	0006f940 	call	6f94 <memmove>
    6808:	80800217 	ldw	r2,8(r16)
    680c:	80c00017 	ldw	r3,0(r16)
    6810:	da000117 	ldw	r8,4(sp)
    6814:	15c5c83a 	sub	r2,r2,r23
    6818:	1def883a 	add	r23,r3,r23
    681c:	80800215 	stw	r2,8(r16)
    6820:	85c00015 	stw	r23,0(r16)
    6824:	003fbe06 	br	6720 <__sfvwrite_r+0x258>
    6828:	81000017 	ldw	r4,0(r16)
    682c:	9039883a 	mov	fp,r18
    6830:	9029883a 	mov	r20,r18
    6834:	902d883a 	mov	r22,r18
    6838:	003f7b06 	br	6628 <__sfvwrite_r+0x160>
    683c:	b80b883a 	mov	r5,r23
    6840:	900d883a 	mov	r6,r18
    6844:	0006f940 	call	6f94 <memmove>
    6848:	80c00217 	ldw	r3,8(r16)
    684c:	80800017 	ldw	r2,0(r16)
    6850:	9029883a 	mov	r20,r18
    6854:	1c87c83a 	sub	r3,r3,r18
    6858:	1485883a 	add	r2,r2,r18
    685c:	80800015 	stw	r2,0(r16)
    6860:	80c00215 	stw	r3,8(r16)
    6864:	9005883a 	mov	r2,r18
    6868:	003f7906 	br	6650 <__sfvwrite_r+0x188>
    686c:	e009883a 	mov	r4,fp
    6870:	01400284 	movi	r5,10
    6874:	900d883a 	mov	r6,r18
    6878:	0006d740 	call	6d74 <memchr>
    687c:	10003826 	beq	r2,zero,6960 <__sfvwrite_r+0x498>
    6880:	10800044 	addi	r2,r2,1
    6884:	1729c83a 	sub	r20,r2,fp
    6888:	02000044 	movi	r8,1
    688c:	003f8f06 	br	66cc <__sfvwrite_r+0x204>
    6890:	80800517 	ldw	r2,20(r16)
    6894:	81400417 	ldw	r5,16(r16)
    6898:	87000017 	ldw	fp,0(r16)
    689c:	10a9883a 	add	r20,r2,r2
    68a0:	a085883a 	add	r2,r20,r2
    68a4:	1028d7fa 	srli	r20,r2,31
    68a8:	e179c83a 	sub	fp,fp,r5
    68ac:	e1000044 	addi	r4,fp,1
    68b0:	a085883a 	add	r2,r20,r2
    68b4:	1029d07a 	srai	r20,r2,1
    68b8:	2485883a 	add	r2,r4,r18
    68bc:	a00d883a 	mov	r6,r20
    68c0:	a080022e 	bgeu	r20,r2,68cc <__sfvwrite_r+0x404>
    68c4:	1029883a 	mov	r20,r2
    68c8:	100d883a 	mov	r6,r2
    68cc:	18c1000c 	andi	r3,r3,1024
    68d0:	a809883a 	mov	r4,r21
    68d4:	183f6a26 	beq	r3,zero,6680 <__sfvwrite_r+0x1b8>
    68d8:	300b883a 	mov	r5,r6
    68dc:	00012800 	call	1280 <_malloc_r>
    68e0:	102d883a 	mov	r22,r2
    68e4:	103f6c26 	beq	r2,zero,6698 <__sfvwrite_r+0x1d0>
    68e8:	81400417 	ldw	r5,16(r16)
    68ec:	1009883a 	mov	r4,r2
    68f0:	e00d883a 	mov	r6,fp
    68f4:	0006e5c0 	call	6e5c <memcpy>
    68f8:	8080030b 	ldhu	r2,12(r16)
    68fc:	00fedfc4 	movi	r3,-1153
    6900:	10c4703a 	and	r2,r2,r3
    6904:	10802014 	ori	r2,r2,128
    6908:	8080030d 	sth	r2,12(r16)
    690c:	b709883a 	add	r4,r22,fp
    6910:	a707c83a 	sub	r3,r20,fp
    6914:	85800415 	stw	r22,16(r16)
    6918:	85000515 	stw	r20,20(r16)
    691c:	81000015 	stw	r4,0(r16)
    6920:	9039883a 	mov	fp,r18
    6924:	80c00215 	stw	r3,8(r16)
    6928:	9029883a 	mov	r20,r18
    692c:	902d883a 	mov	r22,r18
    6930:	003f3d06 	br	6628 <__sfvwrite_r+0x160>
    6934:	b80b883a 	mov	r5,r23
    6938:	a00d883a 	mov	r6,r20
    693c:	0006f940 	call	6f94 <memmove>
    6940:	80800017 	ldw	r2,0(r16)
    6944:	a809883a 	mov	r4,r21
    6948:	800b883a 	mov	r5,r16
    694c:	1505883a 	add	r2,r2,r20
    6950:	80800015 	stw	r2,0(r16)
    6954:	0005abc0 	call	5abc <_fflush_r>
    6958:	103fa526 	beq	r2,zero,67f0 <__sfvwrite_r+0x328>
    695c:	003f5006 	br	66a0 <__sfvwrite_r+0x1d8>
    6960:	95000044 	addi	r20,r18,1
    6964:	02000044 	movi	r8,1
    6968:	003f5806 	br	66cc <__sfvwrite_r+0x204>

0000696c <_fwalk>:
    696c:	defff804 	addi	sp,sp,-32
    6970:	dd400515 	stw	r21,20(sp)
    6974:	2540b804 	addi	r21,r4,736
    6978:	dd800615 	stw	r22,24(sp)
    697c:	dd000415 	stw	r20,16(sp)
    6980:	dfc00715 	stw	ra,28(sp)
    6984:	dcc00315 	stw	r19,12(sp)
    6988:	dc800215 	stw	r18,8(sp)
    698c:	dc400115 	stw	r17,4(sp)
    6990:	dc000015 	stw	r16,0(sp)
    6994:	2829883a 	mov	r20,r5
    6998:	002d883a 	mov	r22,zero
    699c:	00060740 	call	6074 <__sfp_lock_acquire>
    69a0:	a8001426 	beq	r21,zero,69f4 <_fwalk+0x88>
    69a4:	04ffffc4 	movi	r19,-1
    69a8:	ac400117 	ldw	r17,4(r21)
    69ac:	ac800217 	ldw	r18,8(r21)
    69b0:	8c7fffc4 	addi	r17,r17,-1
    69b4:	88000d16 	blt	r17,zero,69ec <_fwalk+0x80>
    69b8:	94000304 	addi	r16,r18,12
    69bc:	94800384 	addi	r18,r18,14
    69c0:	80c0000f 	ldh	r3,0(r16)
    69c4:	8c7fffc4 	addi	r17,r17,-1
    69c8:	813ffd04 	addi	r4,r16,-12
    69cc:	18000426 	beq	r3,zero,69e0 <_fwalk+0x74>
    69d0:	90c0000f 	ldh	r3,0(r18)
    69d4:	1cc00226 	beq	r3,r19,69e0 <_fwalk+0x74>
    69d8:	a03ee83a 	callr	r20
    69dc:	b0acb03a 	or	r22,r22,r2
    69e0:	84001a04 	addi	r16,r16,104
    69e4:	94801a04 	addi	r18,r18,104
    69e8:	8cfff51e 	bne	r17,r19,69c0 <_fwalk+0x54>
    69ec:	ad400017 	ldw	r21,0(r21)
    69f0:	a83fed1e 	bne	r21,zero,69a8 <_fwalk+0x3c>
    69f4:	00060780 	call	6078 <__sfp_lock_release>
    69f8:	b005883a 	mov	r2,r22
    69fc:	dfc00717 	ldw	ra,28(sp)
    6a00:	dd800617 	ldw	r22,24(sp)
    6a04:	dd400517 	ldw	r21,20(sp)
    6a08:	dd000417 	ldw	r20,16(sp)
    6a0c:	dcc00317 	ldw	r19,12(sp)
    6a10:	dc800217 	ldw	r18,8(sp)
    6a14:	dc400117 	ldw	r17,4(sp)
    6a18:	dc000017 	ldw	r16,0(sp)
    6a1c:	dec00804 	addi	sp,sp,32
    6a20:	f800283a 	ret

00006a24 <_fwalk_reent>:
    6a24:	defff804 	addi	sp,sp,-32
    6a28:	dd400515 	stw	r21,20(sp)
    6a2c:	2540b804 	addi	r21,r4,736
    6a30:	dd800615 	stw	r22,24(sp)
    6a34:	dd000415 	stw	r20,16(sp)
    6a38:	dcc00315 	stw	r19,12(sp)
    6a3c:	dfc00715 	stw	ra,28(sp)
    6a40:	dc800215 	stw	r18,8(sp)
    6a44:	dc400115 	stw	r17,4(sp)
    6a48:	dc000015 	stw	r16,0(sp)
    6a4c:	2027883a 	mov	r19,r4
    6a50:	2829883a 	mov	r20,r5
    6a54:	002d883a 	mov	r22,zero
    6a58:	00060740 	call	6074 <__sfp_lock_acquire>
    6a5c:	a8001326 	beq	r21,zero,6aac <_fwalk_reent+0x88>
    6a60:	04bfffc4 	movi	r18,-1
    6a64:	ac400117 	ldw	r17,4(r21)
    6a68:	ac000217 	ldw	r16,8(r21)
    6a6c:	8c7fffc4 	addi	r17,r17,-1
    6a70:	88000c16 	blt	r17,zero,6aa4 <_fwalk_reent+0x80>
    6a74:	84000304 	addi	r16,r16,12
    6a78:	80c0000f 	ldh	r3,0(r16)
    6a7c:	8c7fffc4 	addi	r17,r17,-1
    6a80:	817ffd04 	addi	r5,r16,-12
    6a84:	18000526 	beq	r3,zero,6a9c <_fwalk_reent+0x78>
    6a88:	80c0008f 	ldh	r3,2(r16)
    6a8c:	9809883a 	mov	r4,r19
    6a90:	1c800226 	beq	r3,r18,6a9c <_fwalk_reent+0x78>
    6a94:	a03ee83a 	callr	r20
    6a98:	b0acb03a 	or	r22,r22,r2
    6a9c:	84001a04 	addi	r16,r16,104
    6aa0:	8cbff51e 	bne	r17,r18,6a78 <_fwalk_reent+0x54>
    6aa4:	ad400017 	ldw	r21,0(r21)
    6aa8:	a83fee1e 	bne	r21,zero,6a64 <_fwalk_reent+0x40>
    6aac:	00060780 	call	6078 <__sfp_lock_release>
    6ab0:	b005883a 	mov	r2,r22
    6ab4:	dfc00717 	ldw	ra,28(sp)
    6ab8:	dd800617 	ldw	r22,24(sp)
    6abc:	dd400517 	ldw	r21,20(sp)
    6ac0:	dd000417 	ldw	r20,16(sp)
    6ac4:	dcc00317 	ldw	r19,12(sp)
    6ac8:	dc800217 	ldw	r18,8(sp)
    6acc:	dc400117 	ldw	r17,4(sp)
    6ad0:	dc000017 	ldw	r16,0(sp)
    6ad4:	dec00804 	addi	sp,sp,32
    6ad8:	f800283a 	ret

00006adc <_setlocale_r>:
    6adc:	30001b26 	beq	r6,zero,6b4c <_setlocale_r+0x70>
    6ae0:	01400074 	movhi	r5,1
    6ae4:	defffe04 	addi	sp,sp,-8
    6ae8:	297fb804 	addi	r5,r5,-288
    6aec:	3009883a 	mov	r4,r6
    6af0:	dc000015 	stw	r16,0(sp)
    6af4:	dfc00115 	stw	ra,4(sp)
    6af8:	3021883a 	mov	r16,r6
    6afc:	00087cc0 	call	87cc <strcmp>
    6b00:	1000061e 	bne	r2,zero,6b1c <_setlocale_r+0x40>
    6b04:	00800074 	movhi	r2,1
    6b08:	10bf9904 	addi	r2,r2,-412
    6b0c:	dfc00117 	ldw	ra,4(sp)
    6b10:	dc000017 	ldw	r16,0(sp)
    6b14:	dec00204 	addi	sp,sp,8
    6b18:	f800283a 	ret
    6b1c:	01400074 	movhi	r5,1
    6b20:	297f9904 	addi	r5,r5,-412
    6b24:	8009883a 	mov	r4,r16
    6b28:	00087cc0 	call	87cc <strcmp>
    6b2c:	103ff526 	beq	r2,zero,6b04 <_setlocale_r+0x28>
    6b30:	01400074 	movhi	r5,1
    6b34:	297fa304 	addi	r5,r5,-372
    6b38:	8009883a 	mov	r4,r16
    6b3c:	00087cc0 	call	87cc <strcmp>
    6b40:	103ff026 	beq	r2,zero,6b04 <_setlocale_r+0x28>
    6b44:	0005883a 	mov	r2,zero
    6b48:	003ff006 	br	6b0c <_setlocale_r+0x30>
    6b4c:	00800074 	movhi	r2,1
    6b50:	10bf9904 	addi	r2,r2,-412
    6b54:	f800283a 	ret

00006b58 <__locale_charset>:
    6b58:	00800074 	movhi	r2,1
    6b5c:	10826a04 	addi	r2,r2,2472
    6b60:	f800283a 	ret

00006b64 <__locale_mb_cur_max>:
    6b64:	00800074 	movhi	r2,1
    6b68:	10870604 	addi	r2,r2,7192
    6b6c:	10800017 	ldw	r2,0(r2)
    6b70:	f800283a 	ret

00006b74 <__locale_msgcharset>:
    6b74:	00800074 	movhi	r2,1
    6b78:	10826204 	addi	r2,r2,2440
    6b7c:	f800283a 	ret

00006b80 <__locale_cjk_lang>:
    6b80:	0005883a 	mov	r2,zero
    6b84:	f800283a 	ret

00006b88 <_localeconv_r>:
    6b88:	00800074 	movhi	r2,1
    6b8c:	10827204 	addi	r2,r2,2504
    6b90:	f800283a 	ret

00006b94 <setlocale>:
    6b94:	00c00074 	movhi	r3,1
    6b98:	18c70304 	addi	r3,r3,7180
    6b9c:	2005883a 	mov	r2,r4
    6ba0:	19000017 	ldw	r4,0(r3)
    6ba4:	280d883a 	mov	r6,r5
    6ba8:	100b883a 	mov	r5,r2
    6bac:	0006adc1 	jmpi	6adc <_setlocale_r>

00006bb0 <localeconv>:
    6bb0:	00800074 	movhi	r2,1
    6bb4:	10827204 	addi	r2,r2,2504
    6bb8:	f800283a 	ret

00006bbc <__smakebuf_r>:
    6bbc:	2880030b 	ldhu	r2,12(r5)
    6bc0:	10c0008c 	andi	r3,r2,2
    6bc4:	1800401e 	bne	r3,zero,6cc8 <__smakebuf_r+0x10c>
    6bc8:	deffec04 	addi	sp,sp,-80
    6bcc:	dc000f15 	stw	r16,60(sp)
    6bd0:	2821883a 	mov	r16,r5
    6bd4:	2940038f 	ldh	r5,14(r5)
    6bd8:	dc401015 	stw	r17,64(sp)
    6bdc:	dfc01315 	stw	ra,76(sp)
    6be0:	dcc01215 	stw	r19,72(sp)
    6be4:	dc801115 	stw	r18,68(sp)
    6be8:	2023883a 	mov	r17,r4
    6bec:	28001b16 	blt	r5,zero,6c5c <__smakebuf_r+0xa0>
    6bf0:	d80d883a 	mov	r6,sp
    6bf4:	000a0a40 	call	a0a4 <_fstat_r>
    6bf8:	10001716 	blt	r2,zero,6c58 <__smakebuf_r+0x9c>
    6bfc:	d8800117 	ldw	r2,4(sp)
    6c00:	00e00014 	movui	r3,32768
    6c04:	10bc000c 	andi	r2,r2,61440
    6c08:	10c03726 	beq	r2,r3,6ce8 <__smakebuf_r+0x12c>
    6c0c:	80c0030b 	ldhu	r3,12(r16)
    6c10:	18c20014 	ori	r3,r3,2048
    6c14:	80c0030d 	sth	r3,12(r16)
    6c18:	00c80004 	movi	r3,8192
    6c1c:	10c03c1e 	bne	r2,r3,6d10 <__smakebuf_r+0x154>
    6c20:	8140038f 	ldh	r5,14(r16)
    6c24:	8809883a 	mov	r4,r17
    6c28:	000a0fc0 	call	a0fc <_isatty_r>
    6c2c:	10004e26 	beq	r2,zero,6d68 <__smakebuf_r+0x1ac>
    6c30:	8080030b 	ldhu	r2,12(r16)
    6c34:	04c00044 	movi	r19,1
    6c38:	80c010c4 	addi	r3,r16,67
    6c3c:	14c4b03a 	or	r2,r2,r19
    6c40:	8080030d 	sth	r2,12(r16)
    6c44:	80c00015 	stw	r3,0(r16)
    6c48:	80c00415 	stw	r3,16(r16)
    6c4c:	84c00515 	stw	r19,20(r16)
    6c50:	04810004 	movi	r18,1024
    6c54:	00000706 	br	6c74 <__smakebuf_r+0xb8>
    6c58:	8080030b 	ldhu	r2,12(r16)
    6c5c:	10c0200c 	andi	r3,r2,128
    6c60:	18001f1e 	bne	r3,zero,6ce0 <__smakebuf_r+0x124>
    6c64:	04810004 	movi	r18,1024
    6c68:	10820014 	ori	r2,r2,2048
    6c6c:	8080030d 	sth	r2,12(r16)
    6c70:	0027883a 	mov	r19,zero
    6c74:	8809883a 	mov	r4,r17
    6c78:	900b883a 	mov	r5,r18
    6c7c:	00012800 	call	1280 <_malloc_r>
    6c80:	10002e26 	beq	r2,zero,6d3c <__smakebuf_r+0x180>
    6c84:	80c0030b 	ldhu	r3,12(r16)
    6c88:	01000034 	movhi	r4,0
    6c8c:	21174904 	addi	r4,r4,23844
    6c90:	89000f15 	stw	r4,60(r17)
    6c94:	18c02014 	ori	r3,r3,128
    6c98:	80c0030d 	sth	r3,12(r16)
    6c9c:	80800015 	stw	r2,0(r16)
    6ca0:	80800415 	stw	r2,16(r16)
    6ca4:	84800515 	stw	r18,20(r16)
    6ca8:	98001c1e 	bne	r19,zero,6d1c <__smakebuf_r+0x160>
    6cac:	dfc01317 	ldw	ra,76(sp)
    6cb0:	dcc01217 	ldw	r19,72(sp)
    6cb4:	dc801117 	ldw	r18,68(sp)
    6cb8:	dc401017 	ldw	r17,64(sp)
    6cbc:	dc000f17 	ldw	r16,60(sp)
    6cc0:	dec01404 	addi	sp,sp,80
    6cc4:	f800283a 	ret
    6cc8:	288010c4 	addi	r2,r5,67
    6ccc:	28800015 	stw	r2,0(r5)
    6cd0:	28800415 	stw	r2,16(r5)
    6cd4:	00800044 	movi	r2,1
    6cd8:	28800515 	stw	r2,20(r5)
    6cdc:	f800283a 	ret
    6ce0:	04801004 	movi	r18,64
    6ce4:	003fe006 	br	6c68 <__smakebuf_r+0xac>
    6ce8:	81000a17 	ldw	r4,40(r16)
    6cec:	00c00074 	movhi	r3,1
    6cf0:	18e1da04 	addi	r3,r3,-30872
    6cf4:	20ffc51e 	bne	r4,r3,6c0c <__smakebuf_r+0x50>
    6cf8:	80c0030b 	ldhu	r3,12(r16)
    6cfc:	01010004 	movi	r4,1024
    6d00:	81001315 	stw	r4,76(r16)
    6d04:	1906b03a 	or	r3,r3,r4
    6d08:	80c0030d 	sth	r3,12(r16)
    6d0c:	003fc206 	br	6c18 <__smakebuf_r+0x5c>
    6d10:	0027883a 	mov	r19,zero
    6d14:	04810004 	movi	r18,1024
    6d18:	003fd606 	br	6c74 <__smakebuf_r+0xb8>
    6d1c:	8140038f 	ldh	r5,14(r16)
    6d20:	8809883a 	mov	r4,r17
    6d24:	000a0fc0 	call	a0fc <_isatty_r>
    6d28:	103fe026 	beq	r2,zero,6cac <__smakebuf_r+0xf0>
    6d2c:	8080030b 	ldhu	r2,12(r16)
    6d30:	10800054 	ori	r2,r2,1
    6d34:	8080030d 	sth	r2,12(r16)
    6d38:	003fdc06 	br	6cac <__smakebuf_r+0xf0>
    6d3c:	8080030b 	ldhu	r2,12(r16)
    6d40:	10c0800c 	andi	r3,r2,512
    6d44:	183fd91e 	bne	r3,zero,6cac <__smakebuf_r+0xf0>
    6d48:	10800094 	ori	r2,r2,2
    6d4c:	80c010c4 	addi	r3,r16,67
    6d50:	8080030d 	sth	r2,12(r16)
    6d54:	00800044 	movi	r2,1
    6d58:	80c00015 	stw	r3,0(r16)
    6d5c:	80c00415 	stw	r3,16(r16)
    6d60:	80800515 	stw	r2,20(r16)
    6d64:	003fd106 	br	6cac <__smakebuf_r+0xf0>
    6d68:	04c00044 	movi	r19,1
    6d6c:	04810004 	movi	r18,1024
    6d70:	003fc006 	br	6c74 <__smakebuf_r+0xb8>

00006d74 <memchr>:
    6d74:	208000cc 	andi	r2,r4,3
    6d78:	280f883a 	mov	r7,r5
    6d7c:	10003526 	beq	r2,zero,6e54 <memchr+0xe0>
    6d80:	30bfffc4 	addi	r2,r6,-1
    6d84:	30001b26 	beq	r6,zero,6df4 <memchr+0x80>
    6d88:	21800003 	ldbu	r6,0(r4)
    6d8c:	28c03fcc 	andi	r3,r5,255
    6d90:	30c01a26 	beq	r6,r3,6dfc <memchr+0x88>
    6d94:	180d883a 	mov	r6,r3
    6d98:	00000406 	br	6dac <memchr+0x38>
    6d9c:	10001526 	beq	r2,zero,6df4 <memchr+0x80>
    6da0:	20c00003 	ldbu	r3,0(r4)
    6da4:	10bfffc4 	addi	r2,r2,-1
    6da8:	19801426 	beq	r3,r6,6dfc <memchr+0x88>
    6dac:	21000044 	addi	r4,r4,1
    6db0:	20c000cc 	andi	r3,r4,3
    6db4:	183ff91e 	bne	r3,zero,6d9c <memchr+0x28>
    6db8:	024000c4 	movi	r9,3
    6dbc:	48801136 	bltu	r9,r2,6e04 <memchr+0x90>
    6dc0:	10000c26 	beq	r2,zero,6df4 <memchr+0x80>
    6dc4:	20c00003 	ldbu	r3,0(r4)
    6dc8:	29403fcc 	andi	r5,r5,255
    6dcc:	19400b26 	beq	r3,r5,6dfc <memchr+0x88>
    6dd0:	20c00044 	addi	r3,r4,1
    6dd4:	2085883a 	add	r2,r4,r2
    6dd8:	39803fcc 	andi	r6,r7,255
    6ddc:	00000306 	br	6dec <memchr+0x78>
    6de0:	18c00044 	addi	r3,r3,1
    6de4:	197fffc3 	ldbu	r5,-1(r3)
    6de8:	29800426 	beq	r5,r6,6dfc <memchr+0x88>
    6dec:	1809883a 	mov	r4,r3
    6df0:	18bffb1e 	bne	r3,r2,6de0 <memchr+0x6c>
    6df4:	0005883a 	mov	r2,zero
    6df8:	f800283a 	ret
    6dfc:	2005883a 	mov	r2,r4
    6e00:	f800283a 	ret
    6e04:	28c03fcc 	andi	r3,r5,255
    6e08:	1810923a 	slli	r8,r3,8
    6e0c:	02ffbff4 	movhi	r11,65279
    6e10:	02a02074 	movhi	r10,32897
    6e14:	40c6b03a 	or	r3,r8,r3
    6e18:	1810943a 	slli	r8,r3,16
    6e1c:	5affbfc4 	addi	r11,r11,-257
    6e20:	52a02004 	addi	r10,r10,-32640
    6e24:	40d0b03a 	or	r8,r8,r3
    6e28:	20c00017 	ldw	r3,0(r4)
    6e2c:	40c6f03a 	xor	r3,r8,r3
    6e30:	1acd883a 	add	r6,r3,r11
    6e34:	00c6303a 	nor	r3,zero,r3
    6e38:	30c6703a 	and	r3,r6,r3
    6e3c:	1a86703a 	and	r3,r3,r10
    6e40:	183fdf1e 	bne	r3,zero,6dc0 <memchr+0x4c>
    6e44:	10bfff04 	addi	r2,r2,-4
    6e48:	21000104 	addi	r4,r4,4
    6e4c:	48bff636 	bltu	r9,r2,6e28 <memchr+0xb4>
    6e50:	003fdb06 	br	6dc0 <memchr+0x4c>
    6e54:	3005883a 	mov	r2,r6
    6e58:	003fd706 	br	6db8 <memchr+0x44>

00006e5c <memcpy>:
    6e5c:	deffff04 	addi	sp,sp,-4
    6e60:	dc000015 	stw	r16,0(sp)
    6e64:	00c003c4 	movi	r3,15
    6e68:	2005883a 	mov	r2,r4
    6e6c:	1980432e 	bgeu	r3,r6,6f7c <memcpy+0x120>
    6e70:	2146b03a 	or	r3,r4,r5
    6e74:	18c000cc 	andi	r3,r3,3
    6e78:	1800421e 	bne	r3,zero,6f84 <memcpy+0x128>
    6e7c:	343ffc04 	addi	r16,r6,-16
    6e80:	8020d13a 	srli	r16,r16,4
    6e84:	28c00104 	addi	r3,r5,4
    6e88:	23400104 	addi	r13,r4,4
    6e8c:	801e913a 	slli	r15,r16,4
    6e90:	2b000204 	addi	r12,r5,8
    6e94:	22c00204 	addi	r11,r4,8
    6e98:	7bc00504 	addi	r15,r15,20
    6e9c:	2a800304 	addi	r10,r5,12
    6ea0:	22400304 	addi	r9,r4,12
    6ea4:	2bdf883a 	add	r15,r5,r15
    6ea8:	2811883a 	mov	r8,r5
    6eac:	200f883a 	mov	r7,r4
    6eb0:	41000017 	ldw	r4,0(r8)
    6eb4:	39c00404 	addi	r7,r7,16
    6eb8:	18c00404 	addi	r3,r3,16
    6ebc:	393ffc15 	stw	r4,-16(r7)
    6ec0:	1bbffc17 	ldw	r14,-16(r3)
    6ec4:	6b400404 	addi	r13,r13,16
    6ec8:	5ac00404 	addi	r11,r11,16
    6ecc:	6bbffc15 	stw	r14,-16(r13)
    6ed0:	63800017 	ldw	r14,0(r12)
    6ed4:	4a400404 	addi	r9,r9,16
    6ed8:	42000404 	addi	r8,r8,16
    6edc:	5bbffc15 	stw	r14,-16(r11)
    6ee0:	53800017 	ldw	r14,0(r10)
    6ee4:	63000404 	addi	r12,r12,16
    6ee8:	52800404 	addi	r10,r10,16
    6eec:	4bbffc15 	stw	r14,-16(r9)
    6ef0:	1bffef1e 	bne	r3,r15,6eb0 <memcpy+0x54>
    6ef4:	81c00044 	addi	r7,r16,1
    6ef8:	380e913a 	slli	r7,r7,4
    6efc:	310003cc 	andi	r4,r6,15
    6f00:	02c000c4 	movi	r11,3
    6f04:	11c7883a 	add	r3,r2,r7
    6f08:	29cb883a 	add	r5,r5,r7
    6f0c:	59001f2e 	bgeu	r11,r4,6f8c <memcpy+0x130>
    6f10:	1813883a 	mov	r9,r3
    6f14:	2811883a 	mov	r8,r5
    6f18:	200f883a 	mov	r7,r4
    6f1c:	42800017 	ldw	r10,0(r8)
    6f20:	4a400104 	addi	r9,r9,4
    6f24:	39ffff04 	addi	r7,r7,-4
    6f28:	4abfff15 	stw	r10,-4(r9)
    6f2c:	42000104 	addi	r8,r8,4
    6f30:	59fffa36 	bltu	r11,r7,6f1c <memcpy+0xc0>
    6f34:	213fff04 	addi	r4,r4,-4
    6f38:	2008d0ba 	srli	r4,r4,2
    6f3c:	318000cc 	andi	r6,r6,3
    6f40:	21000044 	addi	r4,r4,1
    6f44:	2109883a 	add	r4,r4,r4
    6f48:	2109883a 	add	r4,r4,r4
    6f4c:	1907883a 	add	r3,r3,r4
    6f50:	290b883a 	add	r5,r5,r4
    6f54:	30000626 	beq	r6,zero,6f70 <memcpy+0x114>
    6f58:	198d883a 	add	r6,r3,r6
    6f5c:	29c00003 	ldbu	r7,0(r5)
    6f60:	18c00044 	addi	r3,r3,1
    6f64:	29400044 	addi	r5,r5,1
    6f68:	19ffffc5 	stb	r7,-1(r3)
    6f6c:	19bffb1e 	bne	r3,r6,6f5c <memcpy+0x100>
    6f70:	dc000017 	ldw	r16,0(sp)
    6f74:	dec00104 	addi	sp,sp,4
    6f78:	f800283a 	ret
    6f7c:	2007883a 	mov	r3,r4
    6f80:	003ff406 	br	6f54 <memcpy+0xf8>
    6f84:	2007883a 	mov	r3,r4
    6f88:	003ff306 	br	6f58 <memcpy+0xfc>
    6f8c:	200d883a 	mov	r6,r4
    6f90:	003ff006 	br	6f54 <memcpy+0xf8>

00006f94 <memmove>:
    6f94:	2005883a 	mov	r2,r4
    6f98:	29000b2e 	bgeu	r5,r4,6fc8 <memmove+0x34>
    6f9c:	298f883a 	add	r7,r5,r6
    6fa0:	21c0092e 	bgeu	r4,r7,6fc8 <memmove+0x34>
    6fa4:	2187883a 	add	r3,r4,r6
    6fa8:	198bc83a 	sub	r5,r3,r6
    6fac:	30004b26 	beq	r6,zero,70dc <memmove+0x148>
    6fb0:	39ffffc4 	addi	r7,r7,-1
    6fb4:	39000003 	ldbu	r4,0(r7)
    6fb8:	18ffffc4 	addi	r3,r3,-1
    6fbc:	19000005 	stb	r4,0(r3)
    6fc0:	197ffb1e 	bne	r3,r5,6fb0 <memmove+0x1c>
    6fc4:	f800283a 	ret
    6fc8:	00c003c4 	movi	r3,15
    6fcc:	1980412e 	bgeu	r3,r6,70d4 <memmove+0x140>
    6fd0:	1146b03a 	or	r3,r2,r5
    6fd4:	18c000cc 	andi	r3,r3,3
    6fd8:	1800411e 	bne	r3,zero,70e0 <memmove+0x14c>
    6fdc:	33fffc04 	addi	r15,r6,-16
    6fe0:	781ed13a 	srli	r15,r15,4
    6fe4:	28c00104 	addi	r3,r5,4
    6fe8:	13400104 	addi	r13,r2,4
    6fec:	781c913a 	slli	r14,r15,4
    6ff0:	2b000204 	addi	r12,r5,8
    6ff4:	12c00204 	addi	r11,r2,8
    6ff8:	73800504 	addi	r14,r14,20
    6ffc:	2a800304 	addi	r10,r5,12
    7000:	12400304 	addi	r9,r2,12
    7004:	2b9d883a 	add	r14,r5,r14
    7008:	2811883a 	mov	r8,r5
    700c:	100f883a 	mov	r7,r2
    7010:	41000017 	ldw	r4,0(r8)
    7014:	39c00404 	addi	r7,r7,16
    7018:	18c00404 	addi	r3,r3,16
    701c:	393ffc15 	stw	r4,-16(r7)
    7020:	193ffc17 	ldw	r4,-16(r3)
    7024:	6b400404 	addi	r13,r13,16
    7028:	5ac00404 	addi	r11,r11,16
    702c:	693ffc15 	stw	r4,-16(r13)
    7030:	61000017 	ldw	r4,0(r12)
    7034:	4a400404 	addi	r9,r9,16
    7038:	42000404 	addi	r8,r8,16
    703c:	593ffc15 	stw	r4,-16(r11)
    7040:	51000017 	ldw	r4,0(r10)
    7044:	63000404 	addi	r12,r12,16
    7048:	52800404 	addi	r10,r10,16
    704c:	493ffc15 	stw	r4,-16(r9)
    7050:	1bbfef1e 	bne	r3,r14,7010 <memmove+0x7c>
    7054:	79000044 	addi	r4,r15,1
    7058:	2008913a 	slli	r4,r4,4
    705c:	328003cc 	andi	r10,r6,15
    7060:	02c000c4 	movi	r11,3
    7064:	1107883a 	add	r3,r2,r4
    7068:	290b883a 	add	r5,r5,r4
    706c:	5a801e2e 	bgeu	r11,r10,70e8 <memmove+0x154>
    7070:	1813883a 	mov	r9,r3
    7074:	2811883a 	mov	r8,r5
    7078:	500f883a 	mov	r7,r10
    707c:	41000017 	ldw	r4,0(r8)
    7080:	4a400104 	addi	r9,r9,4
    7084:	39ffff04 	addi	r7,r7,-4
    7088:	493fff15 	stw	r4,-4(r9)
    708c:	42000104 	addi	r8,r8,4
    7090:	59fffa36 	bltu	r11,r7,707c <memmove+0xe8>
    7094:	513fff04 	addi	r4,r10,-4
    7098:	2008d0ba 	srli	r4,r4,2
    709c:	318000cc 	andi	r6,r6,3
    70a0:	21000044 	addi	r4,r4,1
    70a4:	2109883a 	add	r4,r4,r4
    70a8:	2109883a 	add	r4,r4,r4
    70ac:	1907883a 	add	r3,r3,r4
    70b0:	290b883a 	add	r5,r5,r4
    70b4:	30000926 	beq	r6,zero,70dc <memmove+0x148>
    70b8:	198d883a 	add	r6,r3,r6
    70bc:	29c00003 	ldbu	r7,0(r5)
    70c0:	18c00044 	addi	r3,r3,1
    70c4:	29400044 	addi	r5,r5,1
    70c8:	19ffffc5 	stb	r7,-1(r3)
    70cc:	19bffb1e 	bne	r3,r6,70bc <memmove+0x128>
    70d0:	f800283a 	ret
    70d4:	1007883a 	mov	r3,r2
    70d8:	003ff606 	br	70b4 <memmove+0x120>
    70dc:	f800283a 	ret
    70e0:	1007883a 	mov	r3,r2
    70e4:	003ff406 	br	70b8 <memmove+0x124>
    70e8:	500d883a 	mov	r6,r10
    70ec:	003ff106 	br	70b4 <memmove+0x120>

000070f0 <_Balloc>:
    70f0:	20801317 	ldw	r2,76(r4)
    70f4:	defffc04 	addi	sp,sp,-16
    70f8:	dc400115 	stw	r17,4(sp)
    70fc:	dc000015 	stw	r16,0(sp)
    7100:	dfc00315 	stw	ra,12(sp)
    7104:	dc800215 	stw	r18,8(sp)
    7108:	2023883a 	mov	r17,r4
    710c:	2821883a 	mov	r16,r5
    7110:	10000f26 	beq	r2,zero,7150 <_Balloc+0x60>
    7114:	8407883a 	add	r3,r16,r16
    7118:	18c7883a 	add	r3,r3,r3
    711c:	10c7883a 	add	r3,r2,r3
    7120:	18800017 	ldw	r2,0(r3)
    7124:	10001126 	beq	r2,zero,716c <_Balloc+0x7c>
    7128:	11000017 	ldw	r4,0(r2)
    712c:	19000015 	stw	r4,0(r3)
    7130:	10000415 	stw	zero,16(r2)
    7134:	10000315 	stw	zero,12(r2)
    7138:	dfc00317 	ldw	ra,12(sp)
    713c:	dc800217 	ldw	r18,8(sp)
    7140:	dc400117 	ldw	r17,4(sp)
    7144:	dc000017 	ldw	r16,0(sp)
    7148:	dec00404 	addi	sp,sp,16
    714c:	f800283a 	ret
    7150:	01400104 	movi	r5,4
    7154:	01800844 	movi	r6,33
    7158:	00011bc0 	call	11bc <_calloc_r>
    715c:	88801315 	stw	r2,76(r17)
    7160:	103fec1e 	bne	r2,zero,7114 <_Balloc+0x24>
    7164:	0005883a 	mov	r2,zero
    7168:	003ff306 	br	7138 <_Balloc+0x48>
    716c:	01400044 	movi	r5,1
    7170:	2c24983a 	sll	r18,r5,r16
    7174:	8809883a 	mov	r4,r17
    7178:	91800144 	addi	r6,r18,5
    717c:	318d883a 	add	r6,r6,r6
    7180:	318d883a 	add	r6,r6,r6
    7184:	00011bc0 	call	11bc <_calloc_r>
    7188:	103ff626 	beq	r2,zero,7164 <_Balloc+0x74>
    718c:	14000115 	stw	r16,4(r2)
    7190:	14800215 	stw	r18,8(r2)
    7194:	003fe606 	br	7130 <_Balloc+0x40>

00007198 <_Bfree>:
    7198:	28000826 	beq	r5,zero,71bc <_Bfree+0x24>
    719c:	28c00117 	ldw	r3,4(r5)
    71a0:	20801317 	ldw	r2,76(r4)
    71a4:	18c7883a 	add	r3,r3,r3
    71a8:	18c7883a 	add	r3,r3,r3
    71ac:	10c5883a 	add	r2,r2,r3
    71b0:	10c00017 	ldw	r3,0(r2)
    71b4:	28c00015 	stw	r3,0(r5)
    71b8:	11400015 	stw	r5,0(r2)
    71bc:	f800283a 	ret

000071c0 <__multadd>:
    71c0:	defffa04 	addi	sp,sp,-24
    71c4:	dc000115 	stw	r16,4(sp)
    71c8:	2c000417 	ldw	r16,16(r5)
    71cc:	dc800315 	stw	r18,12(sp)
    71d0:	dc400215 	stw	r17,8(sp)
    71d4:	dfc00515 	stw	ra,20(sp)
    71d8:	dcc00415 	stw	r19,16(sp)
    71dc:	2823883a 	mov	r17,r5
    71e0:	2025883a 	mov	r18,r4
    71e4:	2a400504 	addi	r9,r5,20
    71e8:	0015883a 	mov	r10,zero
    71ec:	4a000017 	ldw	r8,0(r9)
    71f0:	4a400104 	addi	r9,r9,4
    71f4:	52800044 	addi	r10,r10,1
    71f8:	40ffffcc 	andi	r3,r8,65535
    71fc:	1987383a 	mul	r3,r3,r6
    7200:	4010d43a 	srli	r8,r8,16
    7204:	19cf883a 	add	r7,r3,r7
    7208:	4191383a 	mul	r8,r8,r6
    720c:	3816d43a 	srli	r11,r7,16
    7210:	38ffffcc 	andi	r3,r7,65535
    7214:	5a0f883a 	add	r7,r11,r8
    7218:	3810943a 	slli	r8,r7,16
    721c:	380ed43a 	srli	r7,r7,16
    7220:	40c7883a 	add	r3,r8,r3
    7224:	48ffff15 	stw	r3,-4(r9)
    7228:	543ff016 	blt	r10,r16,71ec <__multadd+0x2c>
    722c:	38000926 	beq	r7,zero,7254 <__multadd+0x94>
    7230:	88800217 	ldw	r2,8(r17)
    7234:	80800f0e 	bge	r16,r2,7274 <__multadd+0xb4>
    7238:	80800144 	addi	r2,r16,5
    723c:	1085883a 	add	r2,r2,r2
    7240:	1085883a 	add	r2,r2,r2
    7244:	8885883a 	add	r2,r17,r2
    7248:	11c00015 	stw	r7,0(r2)
    724c:	84000044 	addi	r16,r16,1
    7250:	8c000415 	stw	r16,16(r17)
    7254:	8805883a 	mov	r2,r17
    7258:	dfc00517 	ldw	ra,20(sp)
    725c:	dcc00417 	ldw	r19,16(sp)
    7260:	dc800317 	ldw	r18,12(sp)
    7264:	dc400217 	ldw	r17,8(sp)
    7268:	dc000117 	ldw	r16,4(sp)
    726c:	dec00604 	addi	sp,sp,24
    7270:	f800283a 	ret
    7274:	89400117 	ldw	r5,4(r17)
    7278:	9009883a 	mov	r4,r18
    727c:	d9c00015 	stw	r7,0(sp)
    7280:	29400044 	addi	r5,r5,1
    7284:	00070f00 	call	70f0 <_Balloc>
    7288:	89800417 	ldw	r6,16(r17)
    728c:	89400304 	addi	r5,r17,12
    7290:	11000304 	addi	r4,r2,12
    7294:	31800084 	addi	r6,r6,2
    7298:	318d883a 	add	r6,r6,r6
    729c:	318d883a 	add	r6,r6,r6
    72a0:	1027883a 	mov	r19,r2
    72a4:	0006e5c0 	call	6e5c <memcpy>
    72a8:	89000117 	ldw	r4,4(r17)
    72ac:	90c01317 	ldw	r3,76(r18)
    72b0:	d9c00017 	ldw	r7,0(sp)
    72b4:	2109883a 	add	r4,r4,r4
    72b8:	2109883a 	add	r4,r4,r4
    72bc:	1907883a 	add	r3,r3,r4
    72c0:	18800017 	ldw	r2,0(r3)
    72c4:	88800015 	stw	r2,0(r17)
    72c8:	1c400015 	stw	r17,0(r3)
    72cc:	9823883a 	mov	r17,r19
    72d0:	003fd906 	br	7238 <__multadd+0x78>

000072d4 <__s2b>:
    72d4:	defff904 	addi	sp,sp,-28
    72d8:	dc400115 	stw	r17,4(sp)
    72dc:	dc000015 	stw	r16,0(sp)
    72e0:	2023883a 	mov	r17,r4
    72e4:	2821883a 	mov	r16,r5
    72e8:	39000204 	addi	r4,r7,8
    72ec:	01400244 	movi	r5,9
    72f0:	dcc00315 	stw	r19,12(sp)
    72f4:	dc800215 	stw	r18,8(sp)
    72f8:	dfc00615 	stw	ra,24(sp)
    72fc:	dd400515 	stw	r21,20(sp)
    7300:	dd000415 	stw	r20,16(sp)
    7304:	3825883a 	mov	r18,r7
    7308:	3027883a 	mov	r19,r6
    730c:	00010e00 	call	10e0 <__divsi3>
    7310:	00c00044 	movi	r3,1
    7314:	000b883a 	mov	r5,zero
    7318:	1880030e 	bge	r3,r2,7328 <__s2b+0x54>
    731c:	18c7883a 	add	r3,r3,r3
    7320:	29400044 	addi	r5,r5,1
    7324:	18bffd16 	blt	r3,r2,731c <__s2b+0x48>
    7328:	8809883a 	mov	r4,r17
    732c:	00070f00 	call	70f0 <_Balloc>
    7330:	d8c00717 	ldw	r3,28(sp)
    7334:	10c00515 	stw	r3,20(r2)
    7338:	00c00044 	movi	r3,1
    733c:	10c00415 	stw	r3,16(r2)
    7340:	00c00244 	movi	r3,9
    7344:	1cc0210e 	bge	r3,r19,73cc <__s2b+0xf8>
    7348:	80eb883a 	add	r21,r16,r3
    734c:	a829883a 	mov	r20,r21
    7350:	84e1883a 	add	r16,r16,r19
    7354:	a1c00007 	ldb	r7,0(r20)
    7358:	8809883a 	mov	r4,r17
    735c:	a5000044 	addi	r20,r20,1
    7360:	100b883a 	mov	r5,r2
    7364:	01800284 	movi	r6,10
    7368:	39fff404 	addi	r7,r7,-48
    736c:	00071c00 	call	71c0 <__multadd>
    7370:	a43ff81e 	bne	r20,r16,7354 <__s2b+0x80>
    7374:	ace1883a 	add	r16,r21,r19
    7378:	843ffe04 	addi	r16,r16,-8
    737c:	9c800a0e 	bge	r19,r18,73a8 <__s2b+0xd4>
    7380:	94e5c83a 	sub	r18,r18,r19
    7384:	84a5883a 	add	r18,r16,r18
    7388:	81c00007 	ldb	r7,0(r16)
    738c:	8809883a 	mov	r4,r17
    7390:	84000044 	addi	r16,r16,1
    7394:	100b883a 	mov	r5,r2
    7398:	01800284 	movi	r6,10
    739c:	39fff404 	addi	r7,r7,-48
    73a0:	00071c00 	call	71c0 <__multadd>
    73a4:	84bff81e 	bne	r16,r18,7388 <__s2b+0xb4>
    73a8:	dfc00617 	ldw	ra,24(sp)
    73ac:	dd400517 	ldw	r21,20(sp)
    73b0:	dd000417 	ldw	r20,16(sp)
    73b4:	dcc00317 	ldw	r19,12(sp)
    73b8:	dc800217 	ldw	r18,8(sp)
    73bc:	dc400117 	ldw	r17,4(sp)
    73c0:	dc000017 	ldw	r16,0(sp)
    73c4:	dec00704 	addi	sp,sp,28
    73c8:	f800283a 	ret
    73cc:	84000284 	addi	r16,r16,10
    73d0:	1827883a 	mov	r19,r3
    73d4:	003fe906 	br	737c <__s2b+0xa8>

000073d8 <__hi0bits>:
    73d8:	20bfffec 	andhi	r2,r4,65535
    73dc:	1000141e 	bne	r2,zero,7430 <__hi0bits+0x58>
    73e0:	2008943a 	slli	r4,r4,16
    73e4:	00800404 	movi	r2,16
    73e8:	20ffc02c 	andhi	r3,r4,65280
    73ec:	1800021e 	bne	r3,zero,73f8 <__hi0bits+0x20>
    73f0:	2008923a 	slli	r4,r4,8
    73f4:	10800204 	addi	r2,r2,8
    73f8:	20fc002c 	andhi	r3,r4,61440
    73fc:	1800021e 	bne	r3,zero,7408 <__hi0bits+0x30>
    7400:	2008913a 	slli	r4,r4,4
    7404:	10800104 	addi	r2,r2,4
    7408:	20f0002c 	andhi	r3,r4,49152
    740c:	1800031e 	bne	r3,zero,741c <__hi0bits+0x44>
    7410:	2109883a 	add	r4,r4,r4
    7414:	10800084 	addi	r2,r2,2
    7418:	2109883a 	add	r4,r4,r4
    741c:	20000316 	blt	r4,zero,742c <__hi0bits+0x54>
    7420:	2110002c 	andhi	r4,r4,16384
    7424:	2000041e 	bne	r4,zero,7438 <__hi0bits+0x60>
    7428:	00800804 	movi	r2,32
    742c:	f800283a 	ret
    7430:	0005883a 	mov	r2,zero
    7434:	003fec06 	br	73e8 <__hi0bits+0x10>
    7438:	10800044 	addi	r2,r2,1
    743c:	f800283a 	ret

00007440 <__lo0bits>:
    7440:	20c00017 	ldw	r3,0(r4)
    7444:	188001cc 	andi	r2,r3,7
    7448:	10000826 	beq	r2,zero,746c <__lo0bits+0x2c>
    744c:	1880004c 	andi	r2,r3,1
    7450:	1000211e 	bne	r2,zero,74d8 <__lo0bits+0x98>
    7454:	1880008c 	andi	r2,r3,2
    7458:	1000211e 	bne	r2,zero,74e0 <__lo0bits+0xa0>
    745c:	1806d0ba 	srli	r3,r3,2
    7460:	00800084 	movi	r2,2
    7464:	20c00015 	stw	r3,0(r4)
    7468:	f800283a 	ret
    746c:	18bfffcc 	andi	r2,r3,65535
    7470:	10001326 	beq	r2,zero,74c0 <__lo0bits+0x80>
    7474:	0005883a 	mov	r2,zero
    7478:	19403fcc 	andi	r5,r3,255
    747c:	2800021e 	bne	r5,zero,7488 <__lo0bits+0x48>
    7480:	1806d23a 	srli	r3,r3,8
    7484:	10800204 	addi	r2,r2,8
    7488:	194003cc 	andi	r5,r3,15
    748c:	2800021e 	bne	r5,zero,7498 <__lo0bits+0x58>
    7490:	1806d13a 	srli	r3,r3,4
    7494:	10800104 	addi	r2,r2,4
    7498:	194000cc 	andi	r5,r3,3
    749c:	2800021e 	bne	r5,zero,74a8 <__lo0bits+0x68>
    74a0:	1806d0ba 	srli	r3,r3,2
    74a4:	10800084 	addi	r2,r2,2
    74a8:	1940004c 	andi	r5,r3,1
    74ac:	2800081e 	bne	r5,zero,74d0 <__lo0bits+0x90>
    74b0:	1806d07a 	srli	r3,r3,1
    74b4:	1800051e 	bne	r3,zero,74cc <__lo0bits+0x8c>
    74b8:	00800804 	movi	r2,32
    74bc:	f800283a 	ret
    74c0:	1806d43a 	srli	r3,r3,16
    74c4:	00800404 	movi	r2,16
    74c8:	003feb06 	br	7478 <__lo0bits+0x38>
    74cc:	10800044 	addi	r2,r2,1
    74d0:	20c00015 	stw	r3,0(r4)
    74d4:	f800283a 	ret
    74d8:	0005883a 	mov	r2,zero
    74dc:	f800283a 	ret
    74e0:	1806d07a 	srli	r3,r3,1
    74e4:	00800044 	movi	r2,1
    74e8:	20c00015 	stw	r3,0(r4)
    74ec:	f800283a 	ret

000074f0 <__i2b>:
    74f0:	defffd04 	addi	sp,sp,-12
    74f4:	dc000015 	stw	r16,0(sp)
    74f8:	04000044 	movi	r16,1
    74fc:	dc400115 	stw	r17,4(sp)
    7500:	2823883a 	mov	r17,r5
    7504:	800b883a 	mov	r5,r16
    7508:	dfc00215 	stw	ra,8(sp)
    750c:	00070f00 	call	70f0 <_Balloc>
    7510:	14400515 	stw	r17,20(r2)
    7514:	14000415 	stw	r16,16(r2)
    7518:	dfc00217 	ldw	ra,8(sp)
    751c:	dc400117 	ldw	r17,4(sp)
    7520:	dc000017 	ldw	r16,0(sp)
    7524:	dec00304 	addi	sp,sp,12
    7528:	f800283a 	ret

0000752c <__multiply>:
    752c:	defffa04 	addi	sp,sp,-24
    7530:	dcc00315 	stw	r19,12(sp)
    7534:	dc800215 	stw	r18,8(sp)
    7538:	2cc00417 	ldw	r19,16(r5)
    753c:	34800417 	ldw	r18,16(r6)
    7540:	dd000415 	stw	r20,16(sp)
    7544:	dc400115 	stw	r17,4(sp)
    7548:	dfc00515 	stw	ra,20(sp)
    754c:	dc000015 	stw	r16,0(sp)
    7550:	2829883a 	mov	r20,r5
    7554:	3023883a 	mov	r17,r6
    7558:	9c807016 	blt	r19,r18,771c <__multiply+0x1f0>
    755c:	9005883a 	mov	r2,r18
    7560:	9825883a 	mov	r18,r19
    7564:	1027883a 	mov	r19,r2
    7568:	a0800217 	ldw	r2,8(r20)
    756c:	94e1883a 	add	r16,r18,r19
    7570:	a1400117 	ldw	r5,4(r20)
    7574:	1400010e 	bge	r2,r16,757c <__multiply+0x50>
    7578:	29400044 	addi	r5,r5,1
    757c:	00070f00 	call	70f0 <_Balloc>
    7580:	8417883a 	add	r11,r16,r16
    7584:	13000504 	addi	r12,r2,20
    7588:	5ad7883a 	add	r11,r11,r11
    758c:	62d7883a 	add	r11,r12,r11
    7590:	6007883a 	mov	r3,r12
    7594:	62c0032e 	bgeu	r12,r11,75a4 <__multiply+0x78>
    7598:	18000015 	stw	zero,0(r3)
    759c:	18c00104 	addi	r3,r3,4
    75a0:	1afffd36 	bltu	r3,r11,7598 <__multiply+0x6c>
    75a4:	9ce7883a 	add	r19,r19,r19
    75a8:	94a5883a 	add	r18,r18,r18
    75ac:	89800504 	addi	r6,r17,20
    75b0:	9ce7883a 	add	r19,r19,r19
    75b4:	a3800504 	addi	r14,r20,20
    75b8:	94a5883a 	add	r18,r18,r18
    75bc:	34db883a 	add	r13,r6,r19
    75c0:	7495883a 	add	r10,r14,r18
    75c4:	3340422e 	bgeu	r6,r13,76d0 <__multiply+0x1a4>
    75c8:	34400017 	ldw	r17,0(r6)
    75cc:	8cbfffcc 	andi	r18,r17,65535
    75d0:	90001b26 	beq	r18,zero,7640 <__multiply+0x114>
    75d4:	6013883a 	mov	r9,r12
    75d8:	7023883a 	mov	r17,r14
    75dc:	0011883a 	mov	r8,zero
    75e0:	88c00017 	ldw	r3,0(r17)
    75e4:	4bc00017 	ldw	r15,0(r9)
    75e8:	8c400104 	addi	r17,r17,4
    75ec:	19ffffcc 	andi	r7,r3,65535
    75f0:	3c8f383a 	mul	r7,r7,r18
    75f4:	1808d43a 	srli	r4,r3,16
    75f8:	797fffcc 	andi	r5,r15,65535
    75fc:	29cb883a 	add	r5,r5,r7
    7600:	2a0b883a 	add	r5,r5,r8
    7604:	2489383a 	mul	r4,r4,r18
    7608:	7806d43a 	srli	r3,r15,16
    760c:	2810d43a 	srli	r8,r5,16
    7610:	297fffcc 	andi	r5,r5,65535
    7614:	1907883a 	add	r3,r3,r4
    7618:	1a07883a 	add	r3,r3,r8
    761c:	1808943a 	slli	r4,r3,16
    7620:	480f883a 	mov	r7,r9
    7624:	1810d43a 	srli	r8,r3,16
    7628:	214ab03a 	or	r5,r4,r5
    762c:	49400015 	stw	r5,0(r9)
    7630:	4a400104 	addi	r9,r9,4
    7634:	8abfea36 	bltu	r17,r10,75e0 <__multiply+0xb4>
    7638:	3a000115 	stw	r8,4(r7)
    763c:	34400017 	ldw	r17,0(r6)
    7640:	8822d43a 	srli	r17,r17,16
    7644:	88001f26 	beq	r17,zero,76c4 <__multiply+0x198>
    7648:	60c00017 	ldw	r3,0(r12)
    764c:	7013883a 	mov	r9,r14
    7650:	601f883a 	mov	r15,r12
    7654:	1811883a 	mov	r8,r3
    7658:	6027883a 	mov	r19,r12
    765c:	000f883a 	mov	r7,zero
    7660:	00000106 	br	7668 <__multiply+0x13c>
    7664:	9027883a 	mov	r19,r18
    7668:	4940000b 	ldhu	r5,0(r9)
    766c:	4010d43a 	srli	r8,r8,16
    7670:	193fffcc 	andi	r4,r3,65535
    7674:	2c4b383a 	mul	r5,r5,r17
    7678:	7bc00104 	addi	r15,r15,4
    767c:	4a400104 	addi	r9,r9,4
    7680:	2a0b883a 	add	r5,r5,r8
    7684:	29cb883a 	add	r5,r5,r7
    7688:	2806943a 	slli	r3,r5,16
    768c:	9c800104 	addi	r18,r19,4
    7690:	280ad43a 	srli	r5,r5,16
    7694:	1908b03a 	or	r4,r3,r4
    7698:	793fff15 	stw	r4,-4(r15)
    769c:	48ffff17 	ldw	r3,-4(r9)
    76a0:	92000017 	ldw	r8,0(r18)
    76a4:	1806d43a 	srli	r3,r3,16
    76a8:	413fffcc 	andi	r4,r8,65535
    76ac:	1c47383a 	mul	r3,r3,r17
    76b0:	1907883a 	add	r3,r3,r4
    76b4:	1947883a 	add	r3,r3,r5
    76b8:	180ed43a 	srli	r7,r3,16
    76bc:	4abfe936 	bltu	r9,r10,7664 <__multiply+0x138>
    76c0:	98c00115 	stw	r3,4(r19)
    76c4:	31800104 	addi	r6,r6,4
    76c8:	63000104 	addi	r12,r12,4
    76cc:	337fbe36 	bltu	r6,r13,75c8 <__multiply+0x9c>
    76d0:	0400090e 	bge	zero,r16,76f8 <__multiply+0x1cc>
    76d4:	58ffff17 	ldw	r3,-4(r11)
    76d8:	5affff04 	addi	r11,r11,-4
    76dc:	18000326 	beq	r3,zero,76ec <__multiply+0x1c0>
    76e0:	00000506 	br	76f8 <__multiply+0x1cc>
    76e4:	58c00017 	ldw	r3,0(r11)
    76e8:	1800031e 	bne	r3,zero,76f8 <__multiply+0x1cc>
    76ec:	843fffc4 	addi	r16,r16,-1
    76f0:	5affff04 	addi	r11,r11,-4
    76f4:	803ffb1e 	bne	r16,zero,76e4 <__multiply+0x1b8>
    76f8:	14000415 	stw	r16,16(r2)
    76fc:	dfc00517 	ldw	ra,20(sp)
    7700:	dd000417 	ldw	r20,16(sp)
    7704:	dcc00317 	ldw	r19,12(sp)
    7708:	dc800217 	ldw	r18,8(sp)
    770c:	dc400117 	ldw	r17,4(sp)
    7710:	dc000017 	ldw	r16,0(sp)
    7714:	dec00604 	addi	sp,sp,24
    7718:	f800283a 	ret
    771c:	3029883a 	mov	r20,r6
    7720:	2823883a 	mov	r17,r5
    7724:	003f9006 	br	7568 <__multiply+0x3c>

00007728 <__pow5mult>:
    7728:	defffa04 	addi	sp,sp,-24
    772c:	dcc00315 	stw	r19,12(sp)
    7730:	dc800215 	stw	r18,8(sp)
    7734:	dc000015 	stw	r16,0(sp)
    7738:	dfc00515 	stw	ra,20(sp)
    773c:	dd000415 	stw	r20,16(sp)
    7740:	dc400115 	stw	r17,4(sp)
    7744:	308000cc 	andi	r2,r6,3
    7748:	3021883a 	mov	r16,r6
    774c:	2027883a 	mov	r19,r4
    7750:	2825883a 	mov	r18,r5
    7754:	10002e1e 	bne	r2,zero,7810 <__pow5mult+0xe8>
    7758:	8021d0ba 	srai	r16,r16,2
    775c:	80001a26 	beq	r16,zero,77c8 <__pow5mult+0xa0>
    7760:	9c401217 	ldw	r17,72(r19)
    7764:	8800061e 	bne	r17,zero,7780 <__pow5mult+0x58>
    7768:	00003406 	br	783c <__pow5mult+0x114>
    776c:	8021d07a 	srai	r16,r16,1
    7770:	80001526 	beq	r16,zero,77c8 <__pow5mult+0xa0>
    7774:	88800017 	ldw	r2,0(r17)
    7778:	10001c26 	beq	r2,zero,77ec <__pow5mult+0xc4>
    777c:	1023883a 	mov	r17,r2
    7780:	80c0004c 	andi	r3,r16,1
    7784:	183ff926 	beq	r3,zero,776c <__pow5mult+0x44>
    7788:	900b883a 	mov	r5,r18
    778c:	880d883a 	mov	r6,r17
    7790:	9809883a 	mov	r4,r19
    7794:	000752c0 	call	752c <__multiply>
    7798:	90001b26 	beq	r18,zero,7808 <__pow5mult+0xe0>
    779c:	91c00117 	ldw	r7,4(r18)
    77a0:	98c01317 	ldw	r3,76(r19)
    77a4:	8021d07a 	srai	r16,r16,1
    77a8:	39cf883a 	add	r7,r7,r7
    77ac:	39cf883a 	add	r7,r7,r7
    77b0:	19c7883a 	add	r3,r3,r7
    77b4:	19000017 	ldw	r4,0(r3)
    77b8:	91000015 	stw	r4,0(r18)
    77bc:	1c800015 	stw	r18,0(r3)
    77c0:	1025883a 	mov	r18,r2
    77c4:	803feb1e 	bne	r16,zero,7774 <__pow5mult+0x4c>
    77c8:	9005883a 	mov	r2,r18
    77cc:	dfc00517 	ldw	ra,20(sp)
    77d0:	dd000417 	ldw	r20,16(sp)
    77d4:	dcc00317 	ldw	r19,12(sp)
    77d8:	dc800217 	ldw	r18,8(sp)
    77dc:	dc400117 	ldw	r17,4(sp)
    77e0:	dc000017 	ldw	r16,0(sp)
    77e4:	dec00604 	addi	sp,sp,24
    77e8:	f800283a 	ret
    77ec:	9809883a 	mov	r4,r19
    77f0:	880b883a 	mov	r5,r17
    77f4:	880d883a 	mov	r6,r17
    77f8:	000752c0 	call	752c <__multiply>
    77fc:	88800015 	stw	r2,0(r17)
    7800:	10000015 	stw	zero,0(r2)
    7804:	003fdd06 	br	777c <__pow5mult+0x54>
    7808:	1025883a 	mov	r18,r2
    780c:	003fd706 	br	776c <__pow5mult+0x44>
    7810:	10bfffc4 	addi	r2,r2,-1
    7814:	1085883a 	add	r2,r2,r2
    7818:	00c00074 	movhi	r3,1
    781c:	18ffbb04 	addi	r3,r3,-276
    7820:	1085883a 	add	r2,r2,r2
    7824:	1885883a 	add	r2,r3,r2
    7828:	11800017 	ldw	r6,0(r2)
    782c:	000f883a 	mov	r7,zero
    7830:	00071c00 	call	71c0 <__multadd>
    7834:	1025883a 	mov	r18,r2
    7838:	003fc706 	br	7758 <__pow5mult+0x30>
    783c:	05000044 	movi	r20,1
    7840:	9809883a 	mov	r4,r19
    7844:	a00b883a 	mov	r5,r20
    7848:	00070f00 	call	70f0 <_Balloc>
    784c:	1023883a 	mov	r17,r2
    7850:	00809c44 	movi	r2,625
    7854:	88800515 	stw	r2,20(r17)
    7858:	8d000415 	stw	r20,16(r17)
    785c:	9c401215 	stw	r17,72(r19)
    7860:	88000015 	stw	zero,0(r17)
    7864:	003fc606 	br	7780 <__pow5mult+0x58>

00007868 <__lshift>:
    7868:	defff904 	addi	sp,sp,-28
    786c:	dd000415 	stw	r20,16(sp)
    7870:	dcc00315 	stw	r19,12(sp)
    7874:	3029d17a 	srai	r20,r6,5
    7878:	2cc00417 	ldw	r19,16(r5)
    787c:	28800217 	ldw	r2,8(r5)
    7880:	dd400515 	stw	r21,20(sp)
    7884:	a4e7883a 	add	r19,r20,r19
    7888:	dc800215 	stw	r18,8(sp)
    788c:	dc400115 	stw	r17,4(sp)
    7890:	dc000015 	stw	r16,0(sp)
    7894:	dfc00615 	stw	ra,24(sp)
    7898:	9c000044 	addi	r16,r19,1
    789c:	2823883a 	mov	r17,r5
    78a0:	302b883a 	mov	r21,r6
    78a4:	2025883a 	mov	r18,r4
    78a8:	29400117 	ldw	r5,4(r5)
    78ac:	1400030e 	bge	r2,r16,78bc <__lshift+0x54>
    78b0:	1085883a 	add	r2,r2,r2
    78b4:	29400044 	addi	r5,r5,1
    78b8:	143ffd16 	blt	r2,r16,78b0 <__lshift+0x48>
    78bc:	9009883a 	mov	r4,r18
    78c0:	00070f00 	call	70f0 <_Balloc>
    78c4:	11c00504 	addi	r7,r2,20
    78c8:	0500090e 	bge	zero,r20,78f0 <__lshift+0x88>
    78cc:	3811883a 	mov	r8,r7
    78d0:	0007883a 	mov	r3,zero
    78d4:	40000015 	stw	zero,0(r8)
    78d8:	18c00044 	addi	r3,r3,1
    78dc:	42000104 	addi	r8,r8,4
    78e0:	1d3ffc1e 	bne	r3,r20,78d4 <__lshift+0x6c>
    78e4:	18c7883a 	add	r3,r3,r3
    78e8:	18c7883a 	add	r3,r3,r3
    78ec:	38cf883a 	add	r7,r7,r3
    78f0:	89000417 	ldw	r4,16(r17)
    78f4:	88c00504 	addi	r3,r17,20
    78f8:	a98007cc 	andi	r6,r21,31
    78fc:	2109883a 	add	r4,r4,r4
    7900:	2109883a 	add	r4,r4,r4
    7904:	1909883a 	add	r4,r3,r4
    7908:	30002326 	beq	r6,zero,7998 <__lshift+0x130>
    790c:	01400804 	movi	r5,32
    7910:	298bc83a 	sub	r5,r5,r6
    7914:	0013883a 	mov	r9,zero
    7918:	1a000017 	ldw	r8,0(r3)
    791c:	3815883a 	mov	r10,r7
    7920:	39c00104 	addi	r7,r7,4
    7924:	4190983a 	sll	r8,r8,r6
    7928:	18c00104 	addi	r3,r3,4
    792c:	4a10b03a 	or	r8,r9,r8
    7930:	3a3fff15 	stw	r8,-4(r7)
    7934:	1a3fff17 	ldw	r8,-4(r3)
    7938:	4152d83a 	srl	r9,r8,r5
    793c:	193ff636 	bltu	r3,r4,7918 <__lshift+0xb0>
    7940:	52400115 	stw	r9,4(r10)
    7944:	48000126 	beq	r9,zero,794c <__lshift+0xe4>
    7948:	9c000084 	addi	r16,r19,2
    794c:	89000117 	ldw	r4,4(r17)
    7950:	90c01317 	ldw	r3,76(r18)
    7954:	843fffc4 	addi	r16,r16,-1
    7958:	2109883a 	add	r4,r4,r4
    795c:	2109883a 	add	r4,r4,r4
    7960:	1907883a 	add	r3,r3,r4
    7964:	19000017 	ldw	r4,0(r3)
    7968:	14000415 	stw	r16,16(r2)
    796c:	89000015 	stw	r4,0(r17)
    7970:	1c400015 	stw	r17,0(r3)
    7974:	dfc00617 	ldw	ra,24(sp)
    7978:	dd400517 	ldw	r21,20(sp)
    797c:	dd000417 	ldw	r20,16(sp)
    7980:	dcc00317 	ldw	r19,12(sp)
    7984:	dc800217 	ldw	r18,8(sp)
    7988:	dc400117 	ldw	r17,4(sp)
    798c:	dc000017 	ldw	r16,0(sp)
    7990:	dec00704 	addi	sp,sp,28
    7994:	f800283a 	ret
    7998:	19400017 	ldw	r5,0(r3)
    799c:	39c00104 	addi	r7,r7,4
    79a0:	18c00104 	addi	r3,r3,4
    79a4:	397fff15 	stw	r5,-4(r7)
    79a8:	193ffb36 	bltu	r3,r4,7998 <__lshift+0x130>
    79ac:	003fe706 	br	794c <__lshift+0xe4>

000079b0 <__mcmp>:
    79b0:	20800417 	ldw	r2,16(r4)
    79b4:	28c00417 	ldw	r3,16(r5)
    79b8:	10c5c83a 	sub	r2,r2,r3
    79bc:	1000111e 	bne	r2,zero,7a04 <__mcmp+0x54>
    79c0:	18c7883a 	add	r3,r3,r3
    79c4:	18c7883a 	add	r3,r3,r3
    79c8:	21000504 	addi	r4,r4,20
    79cc:	29400504 	addi	r5,r5,20
    79d0:	20c5883a 	add	r2,r4,r3
    79d4:	28cb883a 	add	r5,r5,r3
    79d8:	00000106 	br	79e0 <__mcmp+0x30>
    79dc:	20800a2e 	bgeu	r4,r2,7a08 <__mcmp+0x58>
    79e0:	10bfff04 	addi	r2,r2,-4
    79e4:	297fff04 	addi	r5,r5,-4
    79e8:	11800017 	ldw	r6,0(r2)
    79ec:	28c00017 	ldw	r3,0(r5)
    79f0:	30fffa26 	beq	r6,r3,79dc <__mcmp+0x2c>
    79f4:	30c00236 	bltu	r6,r3,7a00 <__mcmp+0x50>
    79f8:	00800044 	movi	r2,1
    79fc:	f800283a 	ret
    7a00:	00bfffc4 	movi	r2,-1
    7a04:	f800283a 	ret
    7a08:	0005883a 	mov	r2,zero
    7a0c:	f800283a 	ret

00007a10 <__mdiff>:
    7a10:	defffb04 	addi	sp,sp,-20
    7a14:	dc000015 	stw	r16,0(sp)
    7a18:	2821883a 	mov	r16,r5
    7a1c:	dcc00315 	stw	r19,12(sp)
    7a20:	300b883a 	mov	r5,r6
    7a24:	2027883a 	mov	r19,r4
    7a28:	8009883a 	mov	r4,r16
    7a2c:	dc800215 	stw	r18,8(sp)
    7a30:	dfc00415 	stw	ra,16(sp)
    7a34:	dc400115 	stw	r17,4(sp)
    7a38:	3025883a 	mov	r18,r6
    7a3c:	00079b00 	call	79b0 <__mcmp>
    7a40:	10005226 	beq	r2,zero,7b8c <__mdiff+0x17c>
    7a44:	10004c16 	blt	r2,zero,7b78 <__mdiff+0x168>
    7a48:	0023883a 	mov	r17,zero
    7a4c:	81400117 	ldw	r5,4(r16)
    7a50:	9809883a 	mov	r4,r19
    7a54:	00070f00 	call	70f0 <_Balloc>
    7a58:	83400417 	ldw	r13,16(r16)
    7a5c:	93800417 	ldw	r14,16(r18)
    7a60:	81000504 	addi	r4,r16,20
    7a64:	6b59883a 	add	r12,r13,r13
    7a68:	739d883a 	add	r14,r14,r14
    7a6c:	6319883a 	add	r12,r12,r12
    7a70:	91800504 	addi	r6,r18,20
    7a74:	739d883a 	add	r14,r14,r14
    7a78:	14400315 	stw	r17,12(r2)
    7a7c:	2319883a 	add	r12,r4,r12
    7a80:	339d883a 	add	r14,r6,r14
    7a84:	12400504 	addi	r9,r2,20
    7a88:	0007883a 	mov	r3,zero
    7a8c:	22000017 	ldw	r8,0(r4)
    7a90:	32800017 	ldw	r10,0(r6)
    7a94:	4ac00104 	addi	r11,r9,4
    7a98:	41ffffcc 	andi	r7,r8,65535
    7a9c:	38c7883a 	add	r3,r7,r3
    7aa0:	51ffffcc 	andi	r7,r10,65535
    7aa4:	19cfc83a 	sub	r7,r3,r7
    7aa8:	4010d43a 	srli	r8,r8,16
    7aac:	5014d43a 	srli	r10,r10,16
    7ab0:	3807d43a 	srai	r3,r7,16
    7ab4:	39ffffcc 	andi	r7,r7,65535
    7ab8:	4291c83a 	sub	r8,r8,r10
    7abc:	40c7883a 	add	r3,r8,r3
    7ac0:	1810943a 	slli	r8,r3,16
    7ac4:	31800104 	addi	r6,r6,4
    7ac8:	21000104 	addi	r4,r4,4
    7acc:	41ceb03a 	or	r7,r8,r7
    7ad0:	49c00015 	stw	r7,0(r9)
    7ad4:	1807d43a 	srai	r3,r3,16
    7ad8:	580b883a 	mov	r5,r11
    7adc:	5813883a 	mov	r9,r11
    7ae0:	33bfea36 	bltu	r6,r14,7a8c <__mdiff+0x7c>
    7ae4:	2011883a 	mov	r8,r4
    7ae8:	2300152e 	bgeu	r4,r12,7b40 <__mdiff+0x130>
    7aec:	21400017 	ldw	r5,0(r4)
    7af0:	4a400104 	addi	r9,r9,4
    7af4:	21000104 	addi	r4,r4,4
    7af8:	29ffffcc 	andi	r7,r5,65535
    7afc:	38c7883a 	add	r3,r7,r3
    7b00:	280ad43a 	srli	r5,r5,16
    7b04:	180dd43a 	srai	r6,r3,16
    7b08:	19ffffcc 	andi	r7,r3,65535
    7b0c:	3147883a 	add	r3,r6,r5
    7b10:	180a943a 	slli	r5,r3,16
    7b14:	1807d43a 	srai	r3,r3,16
    7b18:	29ceb03a 	or	r7,r5,r7
    7b1c:	49ffff15 	stw	r7,-4(r9)
    7b20:	233ff236 	bltu	r4,r12,7aec <__mdiff+0xdc>
    7b24:	0206303a 	nor	r3,zero,r8
    7b28:	1b07883a 	add	r3,r3,r12
    7b2c:	1806d0ba 	srli	r3,r3,2
    7b30:	18c00044 	addi	r3,r3,1
    7b34:	18c7883a 	add	r3,r3,r3
    7b38:	18c7883a 	add	r3,r3,r3
    7b3c:	58cb883a 	add	r5,r11,r3
    7b40:	28ffff04 	addi	r3,r5,-4
    7b44:	3800041e 	bne	r7,zero,7b58 <__mdiff+0x148>
    7b48:	18ffff04 	addi	r3,r3,-4
    7b4c:	19000017 	ldw	r4,0(r3)
    7b50:	6b7fffc4 	addi	r13,r13,-1
    7b54:	203ffc26 	beq	r4,zero,7b48 <__mdiff+0x138>
    7b58:	13400415 	stw	r13,16(r2)
    7b5c:	dfc00417 	ldw	ra,16(sp)
    7b60:	dcc00317 	ldw	r19,12(sp)
    7b64:	dc800217 	ldw	r18,8(sp)
    7b68:	dc400117 	ldw	r17,4(sp)
    7b6c:	dc000017 	ldw	r16,0(sp)
    7b70:	dec00504 	addi	sp,sp,20
    7b74:	f800283a 	ret
    7b78:	8005883a 	mov	r2,r16
    7b7c:	04400044 	movi	r17,1
    7b80:	9021883a 	mov	r16,r18
    7b84:	1025883a 	mov	r18,r2
    7b88:	003fb006 	br	7a4c <__mdiff+0x3c>
    7b8c:	9809883a 	mov	r4,r19
    7b90:	000b883a 	mov	r5,zero
    7b94:	00070f00 	call	70f0 <_Balloc>
    7b98:	00c00044 	movi	r3,1
    7b9c:	10c00415 	stw	r3,16(r2)
    7ba0:	10000515 	stw	zero,20(r2)
    7ba4:	003fed06 	br	7b5c <__mdiff+0x14c>

00007ba8 <__ulp>:
    7ba8:	295ffc2c 	andhi	r5,r5,32752
    7bac:	00bf3034 	movhi	r2,64704
    7bb0:	2887883a 	add	r3,r5,r2
    7bb4:	00c0020e 	bge	zero,r3,7bc0 <__ulp+0x18>
    7bb8:	0005883a 	mov	r2,zero
    7bbc:	f800283a 	ret
    7bc0:	00c7c83a 	sub	r3,zero,r3
    7bc4:	180bd53a 	srai	r5,r3,20
    7bc8:	008004c4 	movi	r2,19
    7bcc:	11400a0e 	bge	r2,r5,7bf8 <__ulp+0x50>
    7bd0:	00800c84 	movi	r2,50
    7bd4:	0007883a 	mov	r3,zero
    7bd8:	11400516 	blt	r2,r5,7bf0 <__ulp+0x48>
    7bdc:	00800cc4 	movi	r2,51
    7be0:	114bc83a 	sub	r5,r2,r5
    7be4:	00800044 	movi	r2,1
    7be8:	1144983a 	sll	r2,r2,r5
    7bec:	f800283a 	ret
    7bf0:	00800044 	movi	r2,1
    7bf4:	f800283a 	ret
    7bf8:	00800234 	movhi	r2,8
    7bfc:	1147d83a 	sra	r3,r2,r5
    7c00:	0005883a 	mov	r2,zero
    7c04:	f800283a 	ret

00007c08 <__b2d>:
    7c08:	defffa04 	addi	sp,sp,-24
    7c0c:	dc000015 	stw	r16,0(sp)
    7c10:	24000417 	ldw	r16,16(r4)
    7c14:	dc400115 	stw	r17,4(sp)
    7c18:	24400504 	addi	r17,r4,20
    7c1c:	8421883a 	add	r16,r16,r16
    7c20:	8421883a 	add	r16,r16,r16
    7c24:	8c21883a 	add	r16,r17,r16
    7c28:	dc800215 	stw	r18,8(sp)
    7c2c:	84bfff17 	ldw	r18,-4(r16)
    7c30:	dd000415 	stw	r20,16(sp)
    7c34:	dcc00315 	stw	r19,12(sp)
    7c38:	9009883a 	mov	r4,r18
    7c3c:	2829883a 	mov	r20,r5
    7c40:	dfc00515 	stw	ra,20(sp)
    7c44:	00073d80 	call	73d8 <__hi0bits>
    7c48:	00c00804 	movi	r3,32
    7c4c:	1887c83a 	sub	r3,r3,r2
    7c50:	a0c00015 	stw	r3,0(r20)
    7c54:	00c00284 	movi	r3,10
    7c58:	84ffff04 	addi	r19,r16,-4
    7c5c:	18801216 	blt	r3,r2,7ca8 <__b2d+0xa0>
    7c60:	014002c4 	movi	r5,11
    7c64:	2889c83a 	sub	r4,r5,r2
    7c68:	9106d83a 	srl	r3,r18,r4
    7c6c:	18cffc34 	orhi	r3,r3,16368
    7c70:	8cc0282e 	bgeu	r17,r19,7d14 <__b2d+0x10c>
    7c74:	817ffe17 	ldw	r5,-8(r16)
    7c78:	290ad83a 	srl	r5,r5,r4
    7c7c:	10800544 	addi	r2,r2,21
    7c80:	9084983a 	sll	r2,r18,r2
    7c84:	2884b03a 	or	r2,r5,r2
    7c88:	dfc00517 	ldw	ra,20(sp)
    7c8c:	dd000417 	ldw	r20,16(sp)
    7c90:	dcc00317 	ldw	r19,12(sp)
    7c94:	dc800217 	ldw	r18,8(sp)
    7c98:	dc400117 	ldw	r17,4(sp)
    7c9c:	dc000017 	ldw	r16,0(sp)
    7ca0:	dec00604 	addi	sp,sp,24
    7ca4:	f800283a 	ret
    7ca8:	113ffd44 	addi	r4,r2,-11
    7cac:	8cc00f2e 	bgeu	r17,r19,7cec <__b2d+0xe4>
    7cb0:	81bffe04 	addi	r6,r16,-8
    7cb4:	817ffe17 	ldw	r5,-8(r16)
    7cb8:	20001326 	beq	r4,zero,7d08 <__b2d+0x100>
    7cbc:	00c00ac4 	movi	r3,43
    7cc0:	1885c83a 	sub	r2,r3,r2
    7cc4:	2886d83a 	srl	r3,r5,r2
    7cc8:	9124983a 	sll	r18,r18,r4
    7ccc:	90e4b03a 	or	r18,r18,r3
    7cd0:	90cffc34 	orhi	r3,r18,16368
    7cd4:	8980112e 	bgeu	r17,r6,7d1c <__b2d+0x114>
    7cd8:	81bffd17 	ldw	r6,-12(r16)
    7cdc:	308cd83a 	srl	r6,r6,r2
    7ce0:	2904983a 	sll	r2,r5,r4
    7ce4:	1184b03a 	or	r2,r2,r6
    7ce8:	003fe706 	br	7c88 <__b2d+0x80>
    7cec:	20000526 	beq	r4,zero,7d04 <__b2d+0xfc>
    7cf0:	9124983a 	sll	r18,r18,r4
    7cf4:	000d883a 	mov	r6,zero
    7cf8:	000b883a 	mov	r5,zero
    7cfc:	90cffc34 	orhi	r3,r18,16368
    7d00:	003ff706 	br	7ce0 <__b2d+0xd8>
    7d04:	000b883a 	mov	r5,zero
    7d08:	90cffc34 	orhi	r3,r18,16368
    7d0c:	2805883a 	mov	r2,r5
    7d10:	003fdd06 	br	7c88 <__b2d+0x80>
    7d14:	000b883a 	mov	r5,zero
    7d18:	003fd806 	br	7c7c <__b2d+0x74>
    7d1c:	000d883a 	mov	r6,zero
    7d20:	003fef06 	br	7ce0 <__b2d+0xd8>

00007d24 <__d2b>:
    7d24:	defff704 	addi	sp,sp,-36
    7d28:	dc000215 	stw	r16,8(sp)
    7d2c:	3021883a 	mov	r16,r6
    7d30:	dc400315 	stw	r17,12(sp)
    7d34:	8022907a 	slli	r17,r16,1
    7d38:	dd400715 	stw	r21,28(sp)
    7d3c:	282b883a 	mov	r21,r5
    7d40:	01400044 	movi	r5,1
    7d44:	dd000615 	stw	r20,24(sp)
    7d48:	dcc00515 	stw	r19,20(sp)
    7d4c:	dc800415 	stw	r18,16(sp)
    7d50:	dfc00815 	stw	ra,32(sp)
    7d54:	3829883a 	mov	r20,r7
    7d58:	dc800917 	ldw	r18,36(sp)
    7d5c:	8822d57a 	srli	r17,r17,21
    7d60:	00070f00 	call	70f0 <_Balloc>
    7d64:	1027883a 	mov	r19,r2
    7d68:	00800434 	movhi	r2,16
    7d6c:	10bfffc4 	addi	r2,r2,-1
    7d70:	808c703a 	and	r6,r16,r2
    7d74:	88000126 	beq	r17,zero,7d7c <__d2b+0x58>
    7d78:	31800434 	orhi	r6,r6,16
    7d7c:	d9800015 	stw	r6,0(sp)
    7d80:	a8001f26 	beq	r21,zero,7e00 <__d2b+0xdc>
    7d84:	d9000104 	addi	r4,sp,4
    7d88:	dd400115 	stw	r21,4(sp)
    7d8c:	00074400 	call	7440 <__lo0bits>
    7d90:	d8c00017 	ldw	r3,0(sp)
    7d94:	1000291e 	bne	r2,zero,7e3c <__d2b+0x118>
    7d98:	d9000117 	ldw	r4,4(sp)
    7d9c:	99000515 	stw	r4,20(r19)
    7da0:	1820c03a 	cmpne	r16,r3,zero
    7da4:	84000044 	addi	r16,r16,1
    7da8:	98c00615 	stw	r3,24(r19)
    7dac:	9c000415 	stw	r16,16(r19)
    7db0:	88001b1e 	bne	r17,zero,7e20 <__d2b+0xfc>
    7db4:	800690ba 	slli	r3,r16,2
    7db8:	10bef384 	addi	r2,r2,-1074
    7dbc:	a0800015 	stw	r2,0(r20)
    7dc0:	98c5883a 	add	r2,r19,r3
    7dc4:	11000417 	ldw	r4,16(r2)
    7dc8:	8020917a 	slli	r16,r16,5
    7dcc:	00073d80 	call	73d8 <__hi0bits>
    7dd0:	8085c83a 	sub	r2,r16,r2
    7dd4:	90800015 	stw	r2,0(r18)
    7dd8:	9805883a 	mov	r2,r19
    7ddc:	dfc00817 	ldw	ra,32(sp)
    7de0:	dd400717 	ldw	r21,28(sp)
    7de4:	dd000617 	ldw	r20,24(sp)
    7de8:	dcc00517 	ldw	r19,20(sp)
    7dec:	dc800417 	ldw	r18,16(sp)
    7df0:	dc400317 	ldw	r17,12(sp)
    7df4:	dc000217 	ldw	r16,8(sp)
    7df8:	dec00904 	addi	sp,sp,36
    7dfc:	f800283a 	ret
    7e00:	d809883a 	mov	r4,sp
    7e04:	00074400 	call	7440 <__lo0bits>
    7e08:	d8c00017 	ldw	r3,0(sp)
    7e0c:	04000044 	movi	r16,1
    7e10:	9c000415 	stw	r16,16(r19)
    7e14:	98c00515 	stw	r3,20(r19)
    7e18:	10800804 	addi	r2,r2,32
    7e1c:	883fe526 	beq	r17,zero,7db4 <__d2b+0x90>
    7e20:	8c7ef344 	addi	r17,r17,-1075
    7e24:	88a3883a 	add	r17,r17,r2
    7e28:	00c00d44 	movi	r3,53
    7e2c:	a4400015 	stw	r17,0(r20)
    7e30:	1885c83a 	sub	r2,r3,r2
    7e34:	90800015 	stw	r2,0(r18)
    7e38:	003fe706 	br	7dd8 <__d2b+0xb4>
    7e3c:	01000804 	movi	r4,32
    7e40:	2089c83a 	sub	r4,r4,r2
    7e44:	1908983a 	sll	r4,r3,r4
    7e48:	d9400117 	ldw	r5,4(sp)
    7e4c:	1886d83a 	srl	r3,r3,r2
    7e50:	2148b03a 	or	r4,r4,r5
    7e54:	99000515 	stw	r4,20(r19)
    7e58:	d8c00015 	stw	r3,0(sp)
    7e5c:	003fd006 	br	7da0 <__d2b+0x7c>

00007e60 <__ratio>:
    7e60:	defff904 	addi	sp,sp,-28
    7e64:	dc400315 	stw	r17,12(sp)
    7e68:	2823883a 	mov	r17,r5
    7e6c:	d9400104 	addi	r5,sp,4
    7e70:	dfc00615 	stw	ra,24(sp)
    7e74:	dcc00515 	stw	r19,20(sp)
    7e78:	dc800415 	stw	r18,16(sp)
    7e7c:	2027883a 	mov	r19,r4
    7e80:	dc000215 	stw	r16,8(sp)
    7e84:	0007c080 	call	7c08 <__b2d>
    7e88:	8809883a 	mov	r4,r17
    7e8c:	d80b883a 	mov	r5,sp
    7e90:	1025883a 	mov	r18,r2
    7e94:	1821883a 	mov	r16,r3
    7e98:	0007c080 	call	7c08 <__b2d>
    7e9c:	8a400417 	ldw	r9,16(r17)
    7ea0:	9a000417 	ldw	r8,16(r19)
    7ea4:	100d883a 	mov	r6,r2
    7ea8:	d8800017 	ldw	r2,0(sp)
    7eac:	4251c83a 	sub	r8,r8,r9
    7eb0:	4012917a 	slli	r9,r8,5
    7eb4:	da000117 	ldw	r8,4(sp)
    7eb8:	4091c83a 	sub	r8,r8,r2
    7ebc:	4251883a 	add	r8,r8,r9
    7ec0:	02000d0e 	bge	zero,r8,7ef8 <__ratio+0x98>
    7ec4:	4010953a 	slli	r8,r8,20
    7ec8:	4421883a 	add	r16,r8,r16
    7ecc:	9009883a 	mov	r4,r18
    7ed0:	800b883a 	mov	r5,r16
    7ed4:	180f883a 	mov	r7,r3
    7ed8:	000b7f40 	call	b7f4 <__divdf3>
    7edc:	dfc00617 	ldw	ra,24(sp)
    7ee0:	dcc00517 	ldw	r19,20(sp)
    7ee4:	dc800417 	ldw	r18,16(sp)
    7ee8:	dc400317 	ldw	r17,12(sp)
    7eec:	dc000217 	ldw	r16,8(sp)
    7ef0:	dec00704 	addi	sp,sp,28
    7ef4:	f800283a 	ret
    7ef8:	4010953a 	slli	r8,r8,20
    7efc:	1a07c83a 	sub	r3,r3,r8
    7f00:	003ff206 	br	7ecc <__ratio+0x6c>

00007f04 <_mprec_log10>:
    7f04:	defffe04 	addi	sp,sp,-8
    7f08:	dc000015 	stw	r16,0(sp)
    7f0c:	dfc00115 	stw	ra,4(sp)
    7f10:	008005c4 	movi	r2,23
    7f14:	2021883a 	mov	r16,r4
    7f18:	11000d0e 	bge	r2,r4,7f50 <_mprec_log10+0x4c>
    7f1c:	0005883a 	mov	r2,zero
    7f20:	00cffc34 	movhi	r3,16368
    7f24:	843fffc4 	addi	r16,r16,-1
    7f28:	1009883a 	mov	r4,r2
    7f2c:	180b883a 	mov	r5,r3
    7f30:	000d883a 	mov	r6,zero
    7f34:	01d00934 	movhi	r7,16420
    7f38:	000c3040 	call	c304 <__muldf3>
    7f3c:	803ff91e 	bne	r16,zero,7f24 <_mprec_log10+0x20>
    7f40:	dfc00117 	ldw	ra,4(sp)
    7f44:	dc000017 	ldw	r16,0(sp)
    7f48:	dec00204 	addi	sp,sp,8
    7f4c:	f800283a 	ret
    7f50:	202090fa 	slli	r16,r4,3
    7f54:	00800074 	movhi	r2,1
    7f58:	10bfd204 	addi	r2,r2,-184
    7f5c:	1421883a 	add	r16,r2,r16
    7f60:	80800017 	ldw	r2,0(r16)
    7f64:	80c00117 	ldw	r3,4(r16)
    7f68:	dfc00117 	ldw	ra,4(sp)
    7f6c:	dc000017 	ldw	r16,0(sp)
    7f70:	dec00204 	addi	sp,sp,8
    7f74:	f800283a 	ret

00007f78 <__copybits>:
    7f78:	297fffc4 	addi	r5,r5,-1
    7f7c:	280fd17a 	srai	r7,r5,5
    7f80:	30c00417 	ldw	r3,16(r6)
    7f84:	30800504 	addi	r2,r6,20
    7f88:	39c00044 	addi	r7,r7,1
    7f8c:	18c7883a 	add	r3,r3,r3
    7f90:	39cf883a 	add	r7,r7,r7
    7f94:	18c7883a 	add	r3,r3,r3
    7f98:	39cf883a 	add	r7,r7,r7
    7f9c:	10c7883a 	add	r3,r2,r3
    7fa0:	21cf883a 	add	r7,r4,r7
    7fa4:	10c00d2e 	bgeu	r2,r3,7fdc <__copybits+0x64>
    7fa8:	200b883a 	mov	r5,r4
    7fac:	12000017 	ldw	r8,0(r2)
    7fb0:	29400104 	addi	r5,r5,4
    7fb4:	10800104 	addi	r2,r2,4
    7fb8:	2a3fff15 	stw	r8,-4(r5)
    7fbc:	10fffb36 	bltu	r2,r3,7fac <__copybits+0x34>
    7fc0:	1985c83a 	sub	r2,r3,r6
    7fc4:	10bffac4 	addi	r2,r2,-21
    7fc8:	1004d0ba 	srli	r2,r2,2
    7fcc:	10800044 	addi	r2,r2,1
    7fd0:	1085883a 	add	r2,r2,r2
    7fd4:	1085883a 	add	r2,r2,r2
    7fd8:	2089883a 	add	r4,r4,r2
    7fdc:	21c0032e 	bgeu	r4,r7,7fec <__copybits+0x74>
    7fe0:	20000015 	stw	zero,0(r4)
    7fe4:	21000104 	addi	r4,r4,4
    7fe8:	21fffd36 	bltu	r4,r7,7fe0 <__copybits+0x68>
    7fec:	f800283a 	ret

00007ff0 <__any_on>:
    7ff0:	20c00417 	ldw	r3,16(r4)
    7ff4:	2805d17a 	srai	r2,r5,5
    7ff8:	21000504 	addi	r4,r4,20
    7ffc:	18800d0e 	bge	r3,r2,8034 <__any_on+0x44>
    8000:	18c7883a 	add	r3,r3,r3
    8004:	18c7883a 	add	r3,r3,r3
    8008:	20c7883a 	add	r3,r4,r3
    800c:	20c0192e 	bgeu	r4,r3,8074 <__any_on+0x84>
    8010:	18bfff17 	ldw	r2,-4(r3)
    8014:	18ffff04 	addi	r3,r3,-4
    8018:	1000041e 	bne	r2,zero,802c <__any_on+0x3c>
    801c:	20c0142e 	bgeu	r4,r3,8070 <__any_on+0x80>
    8020:	18ffff04 	addi	r3,r3,-4
    8024:	19400017 	ldw	r5,0(r3)
    8028:	283ffc26 	beq	r5,zero,801c <__any_on+0x2c>
    802c:	00800044 	movi	r2,1
    8030:	f800283a 	ret
    8034:	10c00a0e 	bge	r2,r3,8060 <__any_on+0x70>
    8038:	1085883a 	add	r2,r2,r2
    803c:	1085883a 	add	r2,r2,r2
    8040:	294007cc 	andi	r5,r5,31
    8044:	2087883a 	add	r3,r4,r2
    8048:	283ff026 	beq	r5,zero,800c <__any_on+0x1c>
    804c:	19800017 	ldw	r6,0(r3)
    8050:	3144d83a 	srl	r2,r6,r5
    8054:	114a983a 	sll	r5,r2,r5
    8058:	29bff41e 	bne	r5,r6,802c <__any_on+0x3c>
    805c:	003feb06 	br	800c <__any_on+0x1c>
    8060:	1085883a 	add	r2,r2,r2
    8064:	1085883a 	add	r2,r2,r2
    8068:	2087883a 	add	r3,r4,r2
    806c:	003fe706 	br	800c <__any_on+0x1c>
    8070:	f800283a 	ret
    8074:	0005883a 	mov	r2,zero
    8078:	f800283a 	ret

0000807c <_realloc_r>:
    807c:	defff604 	addi	sp,sp,-40
    8080:	dcc00315 	stw	r19,12(sp)
    8084:	dc400115 	stw	r17,4(sp)
    8088:	dfc00915 	stw	ra,36(sp)
    808c:	df000815 	stw	fp,32(sp)
    8090:	ddc00715 	stw	r23,28(sp)
    8094:	dd800615 	stw	r22,24(sp)
    8098:	dd400515 	stw	r21,20(sp)
    809c:	dd000415 	stw	r20,16(sp)
    80a0:	dc800215 	stw	r18,8(sp)
    80a4:	dc000015 	stw	r16,0(sp)
    80a8:	2827883a 	mov	r19,r5
    80ac:	3023883a 	mov	r17,r6
    80b0:	2800bf26 	beq	r5,zero,83b0 <_realloc_r+0x334>
    80b4:	2025883a 	mov	r18,r4
    80b8:	000db180 	call	db18 <__malloc_lock>
    80bc:	98ffff17 	ldw	r3,-4(r19)
    80c0:	01bfff04 	movi	r6,-4
    80c4:	890002c4 	addi	r4,r17,11
    80c8:	01c00584 	movi	r7,22
    80cc:	9d7ffe04 	addi	r21,r19,-8
    80d0:	19a0703a 	and	r16,r3,r6
    80d4:	39003f2e 	bgeu	r7,r4,81d4 <_realloc_r+0x158>
    80d8:	053ffe04 	movi	r20,-8
    80dc:	2528703a 	and	r20,r4,r20
    80e0:	a00f883a 	mov	r7,r20
    80e4:	a0008216 	blt	r20,zero,82f0 <_realloc_r+0x274>
    80e8:	a4408136 	bltu	r20,r17,82f0 <_realloc_r+0x274>
    80ec:	81c03c0e 	bge	r16,r7,81e0 <_realloc_r+0x164>
    80f0:	07000074 	movhi	fp,1
    80f4:	e7016004 	addi	fp,fp,1408
    80f8:	e1000217 	ldw	r4,8(fp)
    80fc:	ac05883a 	add	r2,r21,r16
    8100:	2080bf26 	beq	r4,r2,8400 <_realloc_r+0x384>
    8104:	11000117 	ldw	r4,4(r2)
    8108:	023fff84 	movi	r8,-2
    810c:	2210703a 	and	r8,r4,r8
    8110:	1211883a 	add	r8,r2,r8
    8114:	41400117 	ldw	r5,4(r8)
    8118:	2940004c 	andi	r5,r5,1
    811c:	28004a1e 	bne	r5,zero,8248 <_realloc_r+0x1cc>
    8120:	017fff04 	movi	r5,-4
    8124:	2148703a 	and	r4,r4,r5
    8128:	2409883a 	add	r4,r4,r16
    812c:	21c0ad0e 	bge	r4,r7,83e4 <_realloc_r+0x368>
    8130:	18c0004c 	andi	r3,r3,1
    8134:	18007f1e 	bne	r3,zero,8334 <_realloc_r+0x2b8>
    8138:	9dfffe17 	ldw	r23,-8(r19)
    813c:	adefc83a 	sub	r23,r21,r23
    8140:	bd800117 	ldw	r22,4(r23)
    8144:	b14a703a 	and	r5,r22,r5
    8148:	216d883a 	add	r22,r4,r5
    814c:	b1c04516 	blt	r22,r7,8264 <_realloc_r+0x1e8>
    8150:	10c00317 	ldw	r3,12(r2)
    8154:	10800217 	ldw	r2,8(r2)
    8158:	81bfff04 	addi	r6,r16,-4
    815c:	bc400204 	addi	r17,r23,8
    8160:	10c00315 	stw	r3,12(r2)
    8164:	18800215 	stw	r2,8(r3)
    8168:	b9400217 	ldw	r5,8(r23)
    816c:	b8c00317 	ldw	r3,12(r23)
    8170:	00800904 	movi	r2,36
    8174:	28c00315 	stw	r3,12(r5)
    8178:	19400215 	stw	r5,8(r3)
    817c:	1180ef36 	bltu	r2,r6,853c <_realloc_r+0x4c0>
    8180:	008004c4 	movi	r2,19
    8184:	1180da2e 	bgeu	r2,r6,84f0 <_realloc_r+0x474>
    8188:	98800017 	ldw	r2,0(r19)
    818c:	b8800215 	stw	r2,8(r23)
    8190:	98800117 	ldw	r2,4(r19)
    8194:	b8800315 	stw	r2,12(r23)
    8198:	008006c4 	movi	r2,27
    819c:	1180fc2e 	bgeu	r2,r6,8590 <_realloc_r+0x514>
    81a0:	98800217 	ldw	r2,8(r19)
    81a4:	b8800415 	stw	r2,16(r23)
    81a8:	98800317 	ldw	r2,12(r19)
    81ac:	b8800515 	stw	r2,20(r23)
    81b0:	00800904 	movi	r2,36
    81b4:	3080421e 	bne	r6,r2,82c0 <_realloc_r+0x244>
    81b8:	98800417 	ldw	r2,16(r19)
    81bc:	9cc00604 	addi	r19,r19,24
    81c0:	b8c00804 	addi	r3,r23,32
    81c4:	b8800615 	stw	r2,24(r23)
    81c8:	98bfff17 	ldw	r2,-4(r19)
    81cc:	b8800715 	stw	r2,28(r23)
    81d0:	00003d06 	br	82c8 <_realloc_r+0x24c>
    81d4:	01c00404 	movi	r7,16
    81d8:	3829883a 	mov	r20,r7
    81dc:	003fc206 	br	80e8 <_realloc_r+0x6c>
    81e0:	9823883a 	mov	r17,r19
    81e4:	850fc83a 	sub	r7,r16,r20
    81e8:	008003c4 	movi	r2,15
    81ec:	18c0004c 	andi	r3,r3,1
    81f0:	11c04336 	bltu	r2,r7,8300 <_realloc_r+0x284>
    81f4:	1c06b03a 	or	r3,r3,r16
    81f8:	a8c00115 	stw	r3,4(r21)
    81fc:	ac21883a 	add	r16,r21,r16
    8200:	80c00117 	ldw	r3,4(r16)
    8204:	18c00054 	ori	r3,r3,1
    8208:	80c00115 	stw	r3,4(r16)
    820c:	9009883a 	mov	r4,r18
    8210:	000db380 	call	db38 <__malloc_unlock>
    8214:	8805883a 	mov	r2,r17
    8218:	dfc00917 	ldw	ra,36(sp)
    821c:	df000817 	ldw	fp,32(sp)
    8220:	ddc00717 	ldw	r23,28(sp)
    8224:	dd800617 	ldw	r22,24(sp)
    8228:	dd400517 	ldw	r21,20(sp)
    822c:	dd000417 	ldw	r20,16(sp)
    8230:	dcc00317 	ldw	r19,12(sp)
    8234:	dc800217 	ldw	r18,8(sp)
    8238:	dc400117 	ldw	r17,4(sp)
    823c:	dc000017 	ldw	r16,0(sp)
    8240:	dec00a04 	addi	sp,sp,40
    8244:	f800283a 	ret
    8248:	18c0004c 	andi	r3,r3,1
    824c:	1800391e 	bne	r3,zero,8334 <_realloc_r+0x2b8>
    8250:	9dfffe17 	ldw	r23,-8(r19)
    8254:	00bfff04 	movi	r2,-4
    8258:	adefc83a 	sub	r23,r21,r23
    825c:	b9400117 	ldw	r5,4(r23)
    8260:	288a703a 	and	r5,r5,r2
    8264:	2c2d883a 	add	r22,r5,r16
    8268:	b1c03216 	blt	r22,r7,8334 <_realloc_r+0x2b8>
    826c:	b8800317 	ldw	r2,12(r23)
    8270:	b8c00217 	ldw	r3,8(r23)
    8274:	81bfff04 	addi	r6,r16,-4
    8278:	01000904 	movi	r4,36
    827c:	18800315 	stw	r2,12(r3)
    8280:	10c00215 	stw	r3,8(r2)
    8284:	bc400204 	addi	r17,r23,8
    8288:	2180ac36 	bltu	r4,r6,853c <_realloc_r+0x4c0>
    828c:	008004c4 	movi	r2,19
    8290:	1180972e 	bgeu	r2,r6,84f0 <_realloc_r+0x474>
    8294:	98800017 	ldw	r2,0(r19)
    8298:	b8800215 	stw	r2,8(r23)
    829c:	98800117 	ldw	r2,4(r19)
    82a0:	b8800315 	stw	r2,12(r23)
    82a4:	008006c4 	movi	r2,27
    82a8:	1180b92e 	bgeu	r2,r6,8590 <_realloc_r+0x514>
    82ac:	98800217 	ldw	r2,8(r19)
    82b0:	b8800415 	stw	r2,16(r23)
    82b4:	98800317 	ldw	r2,12(r19)
    82b8:	b8800515 	stw	r2,20(r23)
    82bc:	313fbe26 	beq	r6,r4,81b8 <_realloc_r+0x13c>
    82c0:	b8c00604 	addi	r3,r23,24
    82c4:	9cc00404 	addi	r19,r19,16
    82c8:	98800017 	ldw	r2,0(r19)
    82cc:	b021883a 	mov	r16,r22
    82d0:	b82b883a 	mov	r21,r23
    82d4:	18800015 	stw	r2,0(r3)
    82d8:	98800117 	ldw	r2,4(r19)
    82dc:	18800115 	stw	r2,4(r3)
    82e0:	98800217 	ldw	r2,8(r19)
    82e4:	18800215 	stw	r2,8(r3)
    82e8:	b8c00117 	ldw	r3,4(r23)
    82ec:	003fbd06 	br	81e4 <_realloc_r+0x168>
    82f0:	00800304 	movi	r2,12
    82f4:	90800015 	stw	r2,0(r18)
    82f8:	0005883a 	mov	r2,zero
    82fc:	003fc606 	br	8218 <_realloc_r+0x19c>
    8300:	1d06b03a 	or	r3,r3,r20
    8304:	ad0b883a 	add	r5,r21,r20
    8308:	a8c00115 	stw	r3,4(r21)
    830c:	38800054 	ori	r2,r7,1
    8310:	28800115 	stw	r2,4(r5)
    8314:	29cf883a 	add	r7,r5,r7
    8318:	38800117 	ldw	r2,4(r7)
    831c:	9009883a 	mov	r4,r18
    8320:	29400204 	addi	r5,r5,8
    8324:	10800054 	ori	r2,r2,1
    8328:	38800115 	stw	r2,4(r7)
    832c:	00061d80 	call	61d8 <_free_r>
    8330:	003fb606 	br	820c <_realloc_r+0x190>
    8334:	880b883a 	mov	r5,r17
    8338:	9009883a 	mov	r4,r18
    833c:	00012800 	call	1280 <_malloc_r>
    8340:	1023883a 	mov	r17,r2
    8344:	1000aa26 	beq	r2,zero,85f0 <_realloc_r+0x574>
    8348:	98ffff17 	ldw	r3,-4(r19)
    834c:	113ffe04 	addi	r4,r2,-8
    8350:	00bfff84 	movi	r2,-2
    8354:	1884703a 	and	r2,r3,r2
    8358:	a885883a 	add	r2,r21,r2
    835c:	20808626 	beq	r4,r2,8578 <_realloc_r+0x4fc>
    8360:	81bfff04 	addi	r6,r16,-4
    8364:	00800904 	movi	r2,36
    8368:	11807036 	bltu	r2,r6,852c <_realloc_r+0x4b0>
    836c:	00c004c4 	movi	r3,19
    8370:	19805636 	bltu	r3,r6,84cc <_realloc_r+0x450>
    8374:	8805883a 	mov	r2,r17
    8378:	9807883a 	mov	r3,r19
    837c:	19000017 	ldw	r4,0(r3)
    8380:	11000015 	stw	r4,0(r2)
    8384:	19000117 	ldw	r4,4(r3)
    8388:	11000115 	stw	r4,4(r2)
    838c:	18c00217 	ldw	r3,8(r3)
    8390:	10c00215 	stw	r3,8(r2)
    8394:	980b883a 	mov	r5,r19
    8398:	9009883a 	mov	r4,r18
    839c:	00061d80 	call	61d8 <_free_r>
    83a0:	9009883a 	mov	r4,r18
    83a4:	000db380 	call	db38 <__malloc_unlock>
    83a8:	8805883a 	mov	r2,r17
    83ac:	003f9a06 	br	8218 <_realloc_r+0x19c>
    83b0:	300b883a 	mov	r5,r6
    83b4:	dfc00917 	ldw	ra,36(sp)
    83b8:	df000817 	ldw	fp,32(sp)
    83bc:	ddc00717 	ldw	r23,28(sp)
    83c0:	dd800617 	ldw	r22,24(sp)
    83c4:	dd400517 	ldw	r21,20(sp)
    83c8:	dd000417 	ldw	r20,16(sp)
    83cc:	dcc00317 	ldw	r19,12(sp)
    83d0:	dc800217 	ldw	r18,8(sp)
    83d4:	dc400117 	ldw	r17,4(sp)
    83d8:	dc000017 	ldw	r16,0(sp)
    83dc:	dec00a04 	addi	sp,sp,40
    83e0:	00012801 	jmpi	1280 <_malloc_r>
    83e4:	11400317 	ldw	r5,12(r2)
    83e8:	10800217 	ldw	r2,8(r2)
    83ec:	9823883a 	mov	r17,r19
    83f0:	2021883a 	mov	r16,r4
    83f4:	11400315 	stw	r5,12(r2)
    83f8:	28800215 	stw	r2,8(r5)
    83fc:	003f7906 	br	81e4 <_realloc_r+0x168>
    8400:	21000117 	ldw	r4,4(r4)
    8404:	00bfff04 	movi	r2,-4
    8408:	a1800404 	addi	r6,r20,16
    840c:	2088703a 	and	r4,r4,r2
    8410:	2409883a 	add	r4,r4,r16
    8414:	2180380e 	bge	r4,r6,84f8 <_realloc_r+0x47c>
    8418:	18c0004c 	andi	r3,r3,1
    841c:	183fc51e 	bne	r3,zero,8334 <_realloc_r+0x2b8>
    8420:	9dfffe17 	ldw	r23,-8(r19)
    8424:	adefc83a 	sub	r23,r21,r23
    8428:	b9400117 	ldw	r5,4(r23)
    842c:	288a703a 	and	r5,r5,r2
    8430:	216d883a 	add	r22,r4,r5
    8434:	b1bf8b16 	blt	r22,r6,8264 <_realloc_r+0x1e8>
    8438:	b8800317 	ldw	r2,12(r23)
    843c:	b8c00217 	ldw	r3,8(r23)
    8440:	81bfff04 	addi	r6,r16,-4
    8444:	01000904 	movi	r4,36
    8448:	18800315 	stw	r2,12(r3)
    844c:	10c00215 	stw	r3,8(r2)
    8450:	bc400204 	addi	r17,r23,8
    8454:	21805a36 	bltu	r4,r6,85c0 <_realloc_r+0x544>
    8458:	008004c4 	movi	r2,19
    845c:	1180562e 	bgeu	r2,r6,85b8 <_realloc_r+0x53c>
    8460:	98800017 	ldw	r2,0(r19)
    8464:	b8800215 	stw	r2,8(r23)
    8468:	98800117 	ldw	r2,4(r19)
    846c:	b8800315 	stw	r2,12(r23)
    8470:	008006c4 	movi	r2,27
    8474:	11805636 	bltu	r2,r6,85d0 <_realloc_r+0x554>
    8478:	b8800404 	addi	r2,r23,16
    847c:	9cc00204 	addi	r19,r19,8
    8480:	98c00017 	ldw	r3,0(r19)
    8484:	10c00015 	stw	r3,0(r2)
    8488:	98c00117 	ldw	r3,4(r19)
    848c:	10c00115 	stw	r3,4(r2)
    8490:	98c00217 	ldw	r3,8(r19)
    8494:	10c00215 	stw	r3,8(r2)
    8498:	bd07883a 	add	r3,r23,r20
    849c:	b505c83a 	sub	r2,r22,r20
    84a0:	e0c00215 	stw	r3,8(fp)
    84a4:	10800054 	ori	r2,r2,1
    84a8:	18800115 	stw	r2,4(r3)
    84ac:	b8800117 	ldw	r2,4(r23)
    84b0:	9009883a 	mov	r4,r18
    84b4:	1080004c 	andi	r2,r2,1
    84b8:	a0a8b03a 	or	r20,r20,r2
    84bc:	bd000115 	stw	r20,4(r23)
    84c0:	000db380 	call	db38 <__malloc_unlock>
    84c4:	8805883a 	mov	r2,r17
    84c8:	003f5306 	br	8218 <_realloc_r+0x19c>
    84cc:	98c00017 	ldw	r3,0(r19)
    84d0:	88c00015 	stw	r3,0(r17)
    84d4:	98c00117 	ldw	r3,4(r19)
    84d8:	88c00115 	stw	r3,4(r17)
    84dc:	00c006c4 	movi	r3,27
    84e0:	19801d36 	bltu	r3,r6,8558 <_realloc_r+0x4dc>
    84e4:	88800204 	addi	r2,r17,8
    84e8:	98c00204 	addi	r3,r19,8
    84ec:	003fa306 	br	837c <_realloc_r+0x300>
    84f0:	8807883a 	mov	r3,r17
    84f4:	003f7406 	br	82c8 <_realloc_r+0x24c>
    84f8:	ad2b883a 	add	r21,r21,r20
    84fc:	2505c83a 	sub	r2,r4,r20
    8500:	e5400215 	stw	r21,8(fp)
    8504:	10800054 	ori	r2,r2,1
    8508:	a8800115 	stw	r2,4(r21)
    850c:	98bfff17 	ldw	r2,-4(r19)
    8510:	9009883a 	mov	r4,r18
    8514:	1080004c 	andi	r2,r2,1
    8518:	a0a8b03a 	or	r20,r20,r2
    851c:	9d3fff15 	stw	r20,-4(r19)
    8520:	000db380 	call	db38 <__malloc_unlock>
    8524:	9805883a 	mov	r2,r19
    8528:	003f3b06 	br	8218 <_realloc_r+0x19c>
    852c:	8809883a 	mov	r4,r17
    8530:	980b883a 	mov	r5,r19
    8534:	0006f940 	call	6f94 <memmove>
    8538:	003f9606 	br	8394 <_realloc_r+0x318>
    853c:	8809883a 	mov	r4,r17
    8540:	980b883a 	mov	r5,r19
    8544:	0006f940 	call	6f94 <memmove>
    8548:	b8c00117 	ldw	r3,4(r23)
    854c:	b021883a 	mov	r16,r22
    8550:	b82b883a 	mov	r21,r23
    8554:	003f2306 	br	81e4 <_realloc_r+0x168>
    8558:	98c00217 	ldw	r3,8(r19)
    855c:	88c00215 	stw	r3,8(r17)
    8560:	98c00317 	ldw	r3,12(r19)
    8564:	88c00315 	stw	r3,12(r17)
    8568:	30800c26 	beq	r6,r2,859c <_realloc_r+0x520>
    856c:	88800404 	addi	r2,r17,16
    8570:	98c00404 	addi	r3,r19,16
    8574:	003f8106 	br	837c <_realloc_r+0x300>
    8578:	893fff17 	ldw	r4,-4(r17)
    857c:	00bfff04 	movi	r2,-4
    8580:	9823883a 	mov	r17,r19
    8584:	2084703a 	and	r2,r4,r2
    8588:	80a1883a 	add	r16,r16,r2
    858c:	003f1506 	br	81e4 <_realloc_r+0x168>
    8590:	b8c00404 	addi	r3,r23,16
    8594:	9cc00204 	addi	r19,r19,8
    8598:	003f4b06 	br	82c8 <_realloc_r+0x24c>
    859c:	99000417 	ldw	r4,16(r19)
    85a0:	88800604 	addi	r2,r17,24
    85a4:	98c00604 	addi	r3,r19,24
    85a8:	89000415 	stw	r4,16(r17)
    85ac:	99000517 	ldw	r4,20(r19)
    85b0:	89000515 	stw	r4,20(r17)
    85b4:	003f7106 	br	837c <_realloc_r+0x300>
    85b8:	8805883a 	mov	r2,r17
    85bc:	003fb006 	br	8480 <_realloc_r+0x404>
    85c0:	8809883a 	mov	r4,r17
    85c4:	980b883a 	mov	r5,r19
    85c8:	0006f940 	call	6f94 <memmove>
    85cc:	003fb206 	br	8498 <_realloc_r+0x41c>
    85d0:	98800217 	ldw	r2,8(r19)
    85d4:	b8800415 	stw	r2,16(r23)
    85d8:	98800317 	ldw	r2,12(r19)
    85dc:	b8800515 	stw	r2,20(r23)
    85e0:	31000726 	beq	r6,r4,8600 <_realloc_r+0x584>
    85e4:	b8800604 	addi	r2,r23,24
    85e8:	9cc00404 	addi	r19,r19,16
    85ec:	003fa406 	br	8480 <_realloc_r+0x404>
    85f0:	9009883a 	mov	r4,r18
    85f4:	000db380 	call	db38 <__malloc_unlock>
    85f8:	0005883a 	mov	r2,zero
    85fc:	003f0606 	br	8218 <_realloc_r+0x19c>
    8600:	98c00417 	ldw	r3,16(r19)
    8604:	9cc00604 	addi	r19,r19,24
    8608:	b8800804 	addi	r2,r23,32
    860c:	b8c00615 	stw	r3,24(r23)
    8610:	98ffff17 	ldw	r3,-4(r19)
    8614:	b8c00715 	stw	r3,28(r23)
    8618:	003f9906 	br	8480 <_realloc_r+0x404>

0000861c <__fpclassifyd>:
    861c:	00a00034 	movhi	r2,32768
    8620:	10bfffc4 	addi	r2,r2,-1
    8624:	2884703a 	and	r2,r5,r2
    8628:	10000726 	beq	r2,zero,8648 <__fpclassifyd+0x2c>
    862c:	00fffc34 	movhi	r3,65520
    8630:	019ff834 	movhi	r6,32736
    8634:	28c7883a 	add	r3,r5,r3
    8638:	31bfffc4 	addi	r6,r6,-1
    863c:	30c00536 	bltu	r6,r3,8654 <__fpclassifyd+0x38>
    8640:	00800104 	movi	r2,4
    8644:	f800283a 	ret
    8648:	2000021e 	bne	r4,zero,8654 <__fpclassifyd+0x38>
    864c:	00800084 	movi	r2,2
    8650:	f800283a 	ret
    8654:	00dffc34 	movhi	r3,32752
    8658:	019ff834 	movhi	r6,32736
    865c:	28cb883a 	add	r5,r5,r3
    8660:	31bfffc4 	addi	r6,r6,-1
    8664:	317ff62e 	bgeu	r6,r5,8640 <__fpclassifyd+0x24>
    8668:	01400434 	movhi	r5,16
    866c:	297fffc4 	addi	r5,r5,-1
    8670:	28800236 	bltu	r5,r2,867c <__fpclassifyd+0x60>
    8674:	008000c4 	movi	r2,3
    8678:	f800283a 	ret
    867c:	10c00226 	beq	r2,r3,8688 <__fpclassifyd+0x6c>
    8680:	0005883a 	mov	r2,zero
    8684:	f800283a 	ret
    8688:	2005003a 	cmpeq	r2,r4,zero
    868c:	f800283a 	ret

00008690 <__sread>:
    8690:	defffe04 	addi	sp,sp,-8
    8694:	dc000015 	stw	r16,0(sp)
    8698:	2821883a 	mov	r16,r5
    869c:	2940038f 	ldh	r5,14(r5)
    86a0:	dfc00115 	stw	ra,4(sp)
    86a4:	000a1ac0 	call	a1ac <_read_r>
    86a8:	10000716 	blt	r2,zero,86c8 <__sread+0x38>
    86ac:	80c01417 	ldw	r3,80(r16)
    86b0:	1887883a 	add	r3,r3,r2
    86b4:	80c01415 	stw	r3,80(r16)
    86b8:	dfc00117 	ldw	ra,4(sp)
    86bc:	dc000017 	ldw	r16,0(sp)
    86c0:	dec00204 	addi	sp,sp,8
    86c4:	f800283a 	ret
    86c8:	80c0030b 	ldhu	r3,12(r16)
    86cc:	18fbffcc 	andi	r3,r3,61439
    86d0:	80c0030d 	sth	r3,12(r16)
    86d4:	dfc00117 	ldw	ra,4(sp)
    86d8:	dc000017 	ldw	r16,0(sp)
    86dc:	dec00204 	addi	sp,sp,8
    86e0:	f800283a 	ret

000086e4 <__seofread>:
    86e4:	0005883a 	mov	r2,zero
    86e8:	f800283a 	ret

000086ec <__swrite>:
    86ec:	2880030b 	ldhu	r2,12(r5)
    86f0:	defffb04 	addi	sp,sp,-20
    86f4:	dcc00315 	stw	r19,12(sp)
    86f8:	dc800215 	stw	r18,8(sp)
    86fc:	dc400115 	stw	r17,4(sp)
    8700:	dc000015 	stw	r16,0(sp)
    8704:	dfc00415 	stw	ra,16(sp)
    8708:	10c0400c 	andi	r3,r2,256
    870c:	2821883a 	mov	r16,r5
    8710:	2027883a 	mov	r19,r4
    8714:	3025883a 	mov	r18,r6
    8718:	3823883a 	mov	r17,r7
    871c:	18000526 	beq	r3,zero,8734 <__swrite+0x48>
    8720:	2940038f 	ldh	r5,14(r5)
    8724:	000d883a 	mov	r6,zero
    8728:	01c00084 	movi	r7,2
    872c:	000a1500 	call	a150 <_lseek_r>
    8730:	8080030b 	ldhu	r2,12(r16)
    8734:	8140038f 	ldh	r5,14(r16)
    8738:	10bbffcc 	andi	r2,r2,61439
    873c:	9809883a 	mov	r4,r19
    8740:	900d883a 	mov	r6,r18
    8744:	880f883a 	mov	r7,r17
    8748:	8080030d 	sth	r2,12(r16)
    874c:	dfc00417 	ldw	ra,16(sp)
    8750:	dcc00317 	ldw	r19,12(sp)
    8754:	dc800217 	ldw	r18,8(sp)
    8758:	dc400117 	ldw	r17,4(sp)
    875c:	dc000017 	ldw	r16,0(sp)
    8760:	dec00504 	addi	sp,sp,20
    8764:	0009d041 	jmpi	9d04 <_write_r>

00008768 <__sseek>:
    8768:	defffe04 	addi	sp,sp,-8
    876c:	dc000015 	stw	r16,0(sp)
    8770:	2821883a 	mov	r16,r5
    8774:	2940038f 	ldh	r5,14(r5)
    8778:	dfc00115 	stw	ra,4(sp)
    877c:	000a1500 	call	a150 <_lseek_r>
    8780:	00ffffc4 	movi	r3,-1
    8784:	10c00826 	beq	r2,r3,87a8 <__sseek+0x40>
    8788:	80c0030b 	ldhu	r3,12(r16)
    878c:	80801415 	stw	r2,80(r16)
    8790:	18c40014 	ori	r3,r3,4096
    8794:	80c0030d 	sth	r3,12(r16)
    8798:	dfc00117 	ldw	ra,4(sp)
    879c:	dc000017 	ldw	r16,0(sp)
    87a0:	dec00204 	addi	sp,sp,8
    87a4:	f800283a 	ret
    87a8:	80c0030b 	ldhu	r3,12(r16)
    87ac:	18fbffcc 	andi	r3,r3,61439
    87b0:	80c0030d 	sth	r3,12(r16)
    87b4:	dfc00117 	ldw	ra,4(sp)
    87b8:	dc000017 	ldw	r16,0(sp)
    87bc:	dec00204 	addi	sp,sp,8
    87c0:	f800283a 	ret

000087c4 <__sclose>:
    87c4:	2940038f 	ldh	r5,14(r5)
    87c8:	0009d601 	jmpi	9d60 <_close_r>

000087cc <strcmp>:
    87cc:	2144b03a 	or	r2,r4,r5
    87d0:	108000cc 	andi	r2,r2,3
    87d4:	1000171e 	bne	r2,zero,8834 <strcmp+0x68>
    87d8:	20800017 	ldw	r2,0(r4)
    87dc:	28c00017 	ldw	r3,0(r5)
    87e0:	10c0141e 	bne	r2,r3,8834 <strcmp+0x68>
    87e4:	027fbff4 	movhi	r9,65279
    87e8:	4a7fbfc4 	addi	r9,r9,-257
    87ec:	0086303a 	nor	r3,zero,r2
    87f0:	02202074 	movhi	r8,32897
    87f4:	1245883a 	add	r2,r2,r9
    87f8:	42202004 	addi	r8,r8,-32640
    87fc:	10c4703a 	and	r2,r2,r3
    8800:	1204703a 	and	r2,r2,r8
    8804:	10000226 	beq	r2,zero,8810 <strcmp+0x44>
    8808:	00001706 	br	8868 <strcmp+0x9c>
    880c:	1000161e 	bne	r2,zero,8868 <strcmp+0x9c>
    8810:	21000104 	addi	r4,r4,4
    8814:	20c00017 	ldw	r3,0(r4)
    8818:	29400104 	addi	r5,r5,4
    881c:	29800017 	ldw	r6,0(r5)
    8820:	1a4f883a 	add	r7,r3,r9
    8824:	00c4303a 	nor	r2,zero,r3
    8828:	3884703a 	and	r2,r7,r2
    882c:	1204703a 	and	r2,r2,r8
    8830:	19bff626 	beq	r3,r6,880c <strcmp+0x40>
    8834:	20800007 	ldb	r2,0(r4)
    8838:	1000051e 	bne	r2,zero,8850 <strcmp+0x84>
    883c:	00000606 	br	8858 <strcmp+0x8c>
    8840:	21000044 	addi	r4,r4,1
    8844:	20800007 	ldb	r2,0(r4)
    8848:	29400044 	addi	r5,r5,1
    884c:	10000226 	beq	r2,zero,8858 <strcmp+0x8c>
    8850:	28c00007 	ldb	r3,0(r5)
    8854:	10fffa26 	beq	r2,r3,8840 <strcmp+0x74>
    8858:	20800003 	ldbu	r2,0(r4)
    885c:	28c00003 	ldbu	r3,0(r5)
    8860:	10c5c83a 	sub	r2,r2,r3
    8864:	f800283a 	ret
    8868:	0005883a 	mov	r2,zero
    886c:	f800283a 	ret

00008870 <__sprint_r.part.0>:
    8870:	28801917 	ldw	r2,100(r5)
    8874:	defff604 	addi	sp,sp,-40
    8878:	dd400515 	stw	r21,20(sp)
    887c:	dcc00315 	stw	r19,12(sp)
    8880:	dfc00915 	stw	ra,36(sp)
    8884:	df000815 	stw	fp,32(sp)
    8888:	ddc00715 	stw	r23,28(sp)
    888c:	dd800615 	stw	r22,24(sp)
    8890:	dd000415 	stw	r20,16(sp)
    8894:	dc800215 	stw	r18,8(sp)
    8898:	dc400115 	stw	r17,4(sp)
    889c:	dc000015 	stw	r16,0(sp)
    88a0:	1088000c 	andi	r2,r2,8192
    88a4:	2827883a 	mov	r19,r5
    88a8:	302b883a 	mov	r21,r6
    88ac:	10002d26 	beq	r2,zero,8964 <__sprint_r.part.0+0xf4>
    88b0:	30800217 	ldw	r2,8(r6)
    88b4:	35800017 	ldw	r22,0(r6)
    88b8:	10002826 	beq	r2,zero,895c <__sprint_r.part.0+0xec>
    88bc:	2029883a 	mov	r20,r4
    88c0:	b5c00104 	addi	r23,r22,4
    88c4:	04bfffc4 	movi	r18,-1
    88c8:	bc400017 	ldw	r17,0(r23)
    88cc:	b4000017 	ldw	r16,0(r22)
    88d0:	0039883a 	mov	fp,zero
    88d4:	8822d0ba 	srli	r17,r17,2
    88d8:	04400316 	blt	zero,r17,88e8 <__sprint_r.part.0+0x78>
    88dc:	00001706 	br	893c <__sprint_r.part.0+0xcc>
    88e0:	84000104 	addi	r16,r16,4
    88e4:	8f001526 	beq	r17,fp,893c <__sprint_r.part.0+0xcc>
    88e8:	81400017 	ldw	r5,0(r16)
    88ec:	a009883a 	mov	r4,r20
    88f0:	980d883a 	mov	r6,r19
    88f4:	0009ec80 	call	9ec8 <_fputwc_r>
    88f8:	e7000044 	addi	fp,fp,1
    88fc:	14bff81e 	bne	r2,r18,88e0 <__sprint_r.part.0+0x70>
    8900:	9005883a 	mov	r2,r18
    8904:	a8000215 	stw	zero,8(r21)
    8908:	a8000115 	stw	zero,4(r21)
    890c:	dfc00917 	ldw	ra,36(sp)
    8910:	df000817 	ldw	fp,32(sp)
    8914:	ddc00717 	ldw	r23,28(sp)
    8918:	dd800617 	ldw	r22,24(sp)
    891c:	dd400517 	ldw	r21,20(sp)
    8920:	dd000417 	ldw	r20,16(sp)
    8924:	dcc00317 	ldw	r19,12(sp)
    8928:	dc800217 	ldw	r18,8(sp)
    892c:	dc400117 	ldw	r17,4(sp)
    8930:	dc000017 	ldw	r16,0(sp)
    8934:	dec00a04 	addi	sp,sp,40
    8938:	f800283a 	ret
    893c:	a8c00217 	ldw	r3,8(r21)
    8940:	8c63883a 	add	r17,r17,r17
    8944:	8c63883a 	add	r17,r17,r17
    8948:	1c45c83a 	sub	r2,r3,r17
    894c:	a8800215 	stw	r2,8(r21)
    8950:	b5800204 	addi	r22,r22,8
    8954:	bdc00204 	addi	r23,r23,8
    8958:	103fdb1e 	bne	r2,zero,88c8 <__sprint_r.part.0+0x58>
    895c:	0005883a 	mov	r2,zero
    8960:	003fe806 	br	8904 <__sprint_r.part.0+0x94>
    8964:	00064c80 	call	64c8 <__sfvwrite_r>
    8968:	003fe606 	br	8904 <__sprint_r.part.0+0x94>

0000896c <__sprint_r>:
    896c:	30c00217 	ldw	r3,8(r6)
    8970:	18000126 	beq	r3,zero,8978 <__sprint_r+0xc>
    8974:	00088701 	jmpi	8870 <__sprint_r.part.0>
    8978:	30000115 	stw	zero,4(r6)
    897c:	0005883a 	mov	r2,zero
    8980:	f800283a 	ret

00008984 <___vfiprintf_internal_r>:
    8984:	defeca04 	addi	sp,sp,-1240
    8988:	dd813215 	stw	r22,1224(sp)
    898c:	dd013015 	stw	r20,1216(sp)
    8990:	dfc13515 	stw	ra,1236(sp)
    8994:	df013415 	stw	fp,1232(sp)
    8998:	ddc13315 	stw	r23,1228(sp)
    899c:	dd413115 	stw	r21,1220(sp)
    89a0:	dcc12f15 	stw	r19,1212(sp)
    89a4:	dc812e15 	stw	r18,1208(sp)
    89a8:	dc412d15 	stw	r17,1204(sp)
    89ac:	dc012c15 	stw	r16,1200(sp)
    89b0:	d9012015 	stw	r4,1152(sp)
    89b4:	d9c12115 	stw	r7,1156(sp)
    89b8:	2829883a 	mov	r20,r5
    89bc:	302d883a 	mov	r22,r6
    89c0:	20000226 	beq	r4,zero,89cc <___vfiprintf_internal_r+0x48>
    89c4:	20800e17 	ldw	r2,56(r4)
    89c8:	1001d326 	beq	r2,zero,9118 <___vfiprintf_internal_r+0x794>
    89cc:	a0c0030b 	ldhu	r3,12(r20)
    89d0:	1908000c 	andi	r4,r3,8192
    89d4:	1805883a 	mov	r2,r3
    89d8:	2000071e 	bne	r4,zero,89f8 <___vfiprintf_internal_r+0x74>
    89dc:	a1001917 	ldw	r4,100(r20)
    89e0:	18880014 	ori	r2,r3,8192
    89e4:	00f7ffc4 	movi	r3,-8193
    89e8:	20c8703a 	and	r4,r4,r3
    89ec:	a080030d 	sth	r2,12(r20)
    89f0:	1007883a 	mov	r3,r2
    89f4:	a1001915 	stw	r4,100(r20)
    89f8:	1100020c 	andi	r4,r2,8
    89fc:	20018926 	beq	r4,zero,9024 <___vfiprintf_internal_r+0x6a0>
    8a00:	a1000417 	ldw	r4,16(r20)
    8a04:	20018726 	beq	r4,zero,9024 <___vfiprintf_internal_r+0x6a0>
    8a08:	1080068c 	andi	r2,r2,26
    8a0c:	01000284 	movi	r4,10
    8a10:	11018d26 	beq	r2,r4,9048 <___vfiprintf_internal_r+0x6c4>
    8a14:	da810a04 	addi	r10,sp,1064
    8a18:	dac109c4 	addi	r11,sp,1063
    8a1c:	07000074 	movhi	fp,1
    8a20:	05c00074 	movhi	r23,1
    8a24:	da811e15 	stw	r10,1144(sp)
    8a28:	52d5c83a 	sub	r10,r10,r11
    8a2c:	e7000804 	addi	fp,fp,32
    8a30:	bdc00404 	addi	r23,r23,16
    8a34:	dac11f15 	stw	r11,1148(sp)
    8a38:	dec11a15 	stw	sp,1128(sp)
    8a3c:	d8011c15 	stw	zero,1136(sp)
    8a40:	d8011b15 	stw	zero,1132(sp)
    8a44:	d8012615 	stw	zero,1176(sp)
    8a48:	d8012215 	stw	zero,1160(sp)
    8a4c:	da812715 	stw	r10,1180(sp)
    8a50:	d811883a 	mov	r8,sp
    8a54:	b021883a 	mov	r16,r22
    8a58:	80800007 	ldb	r2,0(r16)
    8a5c:	10039c26 	beq	r2,zero,98d0 <___vfiprintf_internal_r+0xf4c>
    8a60:	01000944 	movi	r4,37
    8a64:	11039a26 	beq	r2,r4,98d0 <___vfiprintf_internal_r+0xf4c>
    8a68:	8005883a 	mov	r2,r16
    8a6c:	00000106 	br	8a74 <___vfiprintf_internal_r+0xf0>
    8a70:	19000326 	beq	r3,r4,8a80 <___vfiprintf_internal_r+0xfc>
    8a74:	10800044 	addi	r2,r2,1
    8a78:	10c00007 	ldb	r3,0(r2)
    8a7c:	183ffc1e 	bne	r3,zero,8a70 <___vfiprintf_internal_r+0xec>
    8a80:	1425c83a 	sub	r18,r2,r16
    8a84:	1023883a 	mov	r17,r2
    8a88:	90001026 	beq	r18,zero,8acc <___vfiprintf_internal_r+0x148>
    8a8c:	d8c11c17 	ldw	r3,1136(sp)
    8a90:	d8811b17 	ldw	r2,1132(sp)
    8a94:	44000015 	stw	r16,0(r8)
    8a98:	90c7883a 	add	r3,r18,r3
    8a9c:	10800044 	addi	r2,r2,1
    8aa0:	44800115 	stw	r18,4(r8)
    8aa4:	d8c11c15 	stw	r3,1136(sp)
    8aa8:	d8811b15 	stw	r2,1132(sp)
    8aac:	010001c4 	movi	r4,7
    8ab0:	2080750e 	bge	r4,r2,8c88 <___vfiprintf_internal_r+0x304>
    8ab4:	18039d1e 	bne	r3,zero,992c <___vfiprintf_internal_r+0xfa8>
    8ab8:	dac12217 	ldw	r11,1160(sp)
    8abc:	d8011b15 	stw	zero,1132(sp)
    8ac0:	d811883a 	mov	r8,sp
    8ac4:	5c97883a 	add	r11,r11,r18
    8ac8:	dac12215 	stw	r11,1160(sp)
    8acc:	88800007 	ldb	r2,0(r17)
    8ad0:	1002e026 	beq	r2,zero,9654 <___vfiprintf_internal_r+0xcd0>
    8ad4:	88c00047 	ldb	r3,1(r17)
    8ad8:	8c000044 	addi	r16,r17,1
    8adc:	d8011d85 	stb	zero,1142(sp)
    8ae0:	000d883a 	mov	r6,zero
    8ae4:	027fffc4 	movi	r9,-1
    8ae8:	0027883a 	mov	r19,zero
    8aec:	002b883a 	mov	r21,zero
    8af0:	01001604 	movi	r4,88
    8af4:	01400244 	movi	r5,9
    8af8:	03000a84 	movi	r12,42
    8afc:	01c01b04 	movi	r7,108
    8b00:	84000044 	addi	r16,r16,1
    8b04:	18bff804 	addi	r2,r3,-32
    8b08:	20825f36 	bltu	r4,r2,9488 <___vfiprintf_internal_r+0xb04>
    8b0c:	100490ba 	slli	r2,r2,2
    8b10:	02800074 	movhi	r10,1
    8b14:	52a2c904 	addi	r10,r10,-29916
    8b18:	1285883a 	add	r2,r2,r10
    8b1c:	10800017 	ldw	r2,0(r2)
    8b20:	1000683a 	jmp	r2
    8b24:	000092f8 	rdprs	zero,zero,587
    8b28:	00009488 	cmpgei	zero,zero,594
    8b2c:	00009488 	cmpgei	zero,zero,594
    8b30:	0000947c 	xorhi	zero,zero,593
    8b34:	00009488 	cmpgei	zero,zero,594
    8b38:	00009488 	cmpgei	zero,zero,594
    8b3c:	00009488 	cmpgei	zero,zero,594
    8b40:	00009488 	cmpgei	zero,zero,594
    8b44:	00009488 	cmpgei	zero,zero,594
    8b48:	00009488 	cmpgei	zero,zero,594
    8b4c:	00009454 	movui	zero,593
    8b50:	00009470 	cmpltui	zero,zero,593
    8b54:	00009488 	cmpgei	zero,zero,594
    8b58:	00009128 	cmpgeui	zero,zero,580
    8b5c:	00009288 	cmpgei	zero,zero,586
    8b60:	00009488 	cmpgei	zero,zero,594
    8b64:	0000920c 	andi	zero,zero,584
    8b68:	00009218 	cmpnei	zero,zero,584
    8b6c:	00009218 	cmpnei	zero,zero,584
    8b70:	00009218 	cmpnei	zero,zero,584
    8b74:	00009218 	cmpnei	zero,zero,584
    8b78:	00009218 	cmpnei	zero,zero,584
    8b7c:	00009218 	cmpnei	zero,zero,584
    8b80:	00009218 	cmpnei	zero,zero,584
    8b84:	00009218 	cmpnei	zero,zero,584
    8b88:	00009218 	cmpnei	zero,zero,584
    8b8c:	00009488 	cmpgei	zero,zero,594
    8b90:	00009488 	cmpgei	zero,zero,594
    8b94:	00009488 	cmpgei	zero,zero,594
    8b98:	00009488 	cmpgei	zero,zero,594
    8b9c:	00009488 	cmpgei	zero,zero,594
    8ba0:	00009488 	cmpgei	zero,zero,594
    8ba4:	00009488 	cmpgei	zero,zero,594
    8ba8:	00009488 	cmpgei	zero,zero,594
    8bac:	00009488 	cmpgei	zero,zero,594
    8bb0:	00009488 	cmpgei	zero,zero,594
    8bb4:	00009244 	movi	zero,585
    8bb8:	00009488 	cmpgei	zero,zero,594
    8bbc:	00009488 	cmpgei	zero,zero,594
    8bc0:	00009488 	cmpgei	zero,zero,594
    8bc4:	00009488 	cmpgei	zero,zero,594
    8bc8:	00009488 	cmpgei	zero,zero,594
    8bcc:	00009488 	cmpgei	zero,zero,594
    8bd0:	00009488 	cmpgei	zero,zero,594
    8bd4:	00009488 	cmpgei	zero,zero,594
    8bd8:	00009488 	cmpgei	zero,zero,594
    8bdc:	00009488 	cmpgei	zero,zero,594
    8be0:	00008cd8 	cmpnei	zero,zero,563
    8be4:	00009488 	cmpgei	zero,zero,594
    8be8:	00009488 	cmpgei	zero,zero,594
    8bec:	00009488 	cmpgei	zero,zero,594
    8bf0:	00009488 	cmpgei	zero,zero,594
    8bf4:	00009488 	cmpgei	zero,zero,594
    8bf8:	00008c9c 	xori	zero,zero,562
    8bfc:	00009488 	cmpgei	zero,zero,594
    8c00:	00009488 	cmpgei	zero,zero,594
    8c04:	00009184 	movi	zero,582
    8c08:	00009488 	cmpgei	zero,zero,594
    8c0c:	00009488 	cmpgei	zero,zero,594
    8c10:	00009488 	cmpgei	zero,zero,594
    8c14:	00009488 	cmpgei	zero,zero,594
    8c18:	00009488 	cmpgei	zero,zero,594
    8c1c:	00009488 	cmpgei	zero,zero,594
    8c20:	00009488 	cmpgei	zero,zero,594
    8c24:	00009488 	cmpgei	zero,zero,594
    8c28:	00009488 	cmpgei	zero,zero,594
    8c2c:	00009488 	cmpgei	zero,zero,594
    8c30:	000091dc 	xori	zero,zero,583
    8c34:	00009374 	movhi	zero,589
    8c38:	00009488 	cmpgei	zero,zero,594
    8c3c:	00009488 	cmpgei	zero,zero,594
    8c40:	00009488 	cmpgei	zero,zero,594
    8c44:	000093fc 	xorhi	zero,zero,591
    8c48:	00009374 	movhi	zero,589
    8c4c:	00009488 	cmpgei	zero,zero,594
    8c50:	00009488 	cmpgei	zero,zero,594
    8c54:	00009408 	cmpgei	zero,zero,592
    8c58:	00009488 	cmpgei	zero,zero,594
    8c5c:	000092c8 	cmpgei	zero,zero,587
    8c60:	00008cdc 	xori	zero,zero,563
    8c64:	000093b0 	cmpltui	zero,zero,590
    8c68:	000093f0 	cmpltui	zero,zero,591
    8c6c:	00009488 	cmpgei	zero,zero,594
    8c70:	00009314 	movui	zero,588
    8c74:	00009488 	cmpgei	zero,zero,594
    8c78:	00008ca0 	cmpeqi	zero,zero,562
    8c7c:	00009488 	cmpgei	zero,zero,594
    8c80:	00009488 	cmpgei	zero,zero,594
    8c84:	00009418 	cmpnei	zero,zero,592
    8c88:	42000204 	addi	r8,r8,8
    8c8c:	dac12217 	ldw	r11,1160(sp)
    8c90:	5c97883a 	add	r11,r11,r18
    8c94:	dac12215 	stw	r11,1160(sp)
    8c98:	003f8c06 	br	8acc <___vfiprintf_internal_r+0x148>
    8c9c:	ad400414 	ori	r21,r21,16
    8ca0:	a880080c 	andi	r2,r21,32
    8ca4:	10012f1e 	bne	r2,zero,9164 <___vfiprintf_internal_r+0x7e0>
    8ca8:	a880040c 	andi	r2,r21,16
    8cac:	1001ff1e 	bne	r2,zero,94ac <___vfiprintf_internal_r+0xb28>
    8cb0:	a880100c 	andi	r2,r21,64
    8cb4:	1001fd26 	beq	r2,zero,94ac <___vfiprintf_internal_r+0xb28>
    8cb8:	da812117 	ldw	r10,1156(sp)
    8cbc:	002d883a 	mov	r22,zero
    8cc0:	00800044 	movi	r2,1
    8cc4:	5480000b 	ldhu	r18,0(r10)
    8cc8:	52800104 	addi	r10,r10,4
    8ccc:	da812115 	stw	r10,1156(sp)
    8cd0:	9009883a 	mov	r4,r18
    8cd4:	00000a06 	br	8d00 <___vfiprintf_internal_r+0x37c>
    8cd8:	ad400414 	ori	r21,r21,16
    8cdc:	a880080c 	andi	r2,r21,32
    8ce0:	10011426 	beq	r2,zero,9134 <___vfiprintf_internal_r+0x7b0>
    8ce4:	da812117 	ldw	r10,1156(sp)
    8ce8:	0005883a 	mov	r2,zero
    8cec:	54800017 	ldw	r18,0(r10)
    8cf0:	55800117 	ldw	r22,4(r10)
    8cf4:	52800204 	addi	r10,r10,8
    8cf8:	da812115 	stw	r10,1156(sp)
    8cfc:	9588b03a 	or	r4,r18,r22
    8d00:	d8011d85 	stb	zero,1142(sp)
    8d04:	4823883a 	mov	r17,r9
    8d08:	0019883a 	mov	r12,zero
    8d0c:	48000216 	blt	r9,zero,8d18 <___vfiprintf_internal_r+0x394>
    8d10:	00ffdfc4 	movi	r3,-129
    8d14:	a8ea703a 	and	r21,r21,r3
    8d18:	2002221e 	bne	r4,zero,95a4 <___vfiprintf_internal_r+0xc20>
    8d1c:	4802c726 	beq	r9,zero,983c <___vfiprintf_internal_r+0xeb8>
    8d20:	10803fcc 	andi	r2,r2,255
    8d24:	00c00044 	movi	r3,1
    8d28:	10c24426 	beq	r2,r3,963c <___vfiprintf_internal_r+0xcb8>
    8d2c:	00c00084 	movi	r3,2
    8d30:	10c2cc26 	beq	r2,r3,9864 <___vfiprintf_internal_r+0xee0>
    8d34:	d8c10a04 	addi	r3,sp,1064
    8d38:	9008d0fa 	srli	r4,r18,3
    8d3c:	b00a977a 	slli	r5,r22,29
    8d40:	b02cd0fa 	srli	r22,r22,3
    8d44:	948001cc 	andi	r18,r18,7
    8d48:	90800c04 	addi	r2,r18,48
    8d4c:	18ffffc4 	addi	r3,r3,-1
    8d50:	2924b03a 	or	r18,r5,r4
    8d54:	18800005 	stb	r2,0(r3)
    8d58:	9588b03a 	or	r4,r18,r22
    8d5c:	203ff61e 	bne	r4,zero,8d38 <___vfiprintf_internal_r+0x3b4>
    8d60:	a900004c 	andi	r4,r21,1
    8d64:	d8c12415 	stw	r3,1168(sp)
    8d68:	2002fb1e 	bne	r4,zero,9958 <___vfiprintf_internal_r+0xfd4>
    8d6c:	da811e17 	ldw	r10,1144(sp)
    8d70:	50e3c83a 	sub	r17,r10,r3
    8d74:	8825883a 	mov	r18,r17
    8d78:	8a40010e 	bge	r17,r9,8d80 <___vfiprintf_internal_r+0x3fc>
    8d7c:	4825883a 	mov	r18,r9
    8d80:	63003fcc 	andi	r12,r12,255
    8d84:	6300201c 	xori	r12,r12,128
    8d88:	633fe004 	addi	r12,r12,-128
    8d8c:	60000126 	beq	r12,zero,8d94 <___vfiprintf_internal_r+0x410>
    8d90:	94800044 	addi	r18,r18,1
    8d94:	ab80008c 	andi	r14,r21,2
    8d98:	70000126 	beq	r14,zero,8da0 <___vfiprintf_internal_r+0x41c>
    8d9c:	94800084 	addi	r18,r18,2
    8da0:	ad80210c 	andi	r22,r21,132
    8da4:	b001df1e 	bne	r22,zero,9524 <___vfiprintf_internal_r+0xba0>
    8da8:	9c8fc83a 	sub	r7,r19,r18
    8dac:	01c1dd0e 	bge	zero,r7,9524 <___vfiprintf_internal_r+0xba0>
    8db0:	03000404 	movi	r12,16
    8db4:	d8811c17 	ldw	r2,1136(sp)
    8db8:	61c3920e 	bge	r12,r7,9c04 <___vfiprintf_internal_r+0x1280>
    8dbc:	02800074 	movhi	r10,1
    8dc0:	52800804 	addi	r10,r10,32
    8dc4:	dc012915 	stw	r16,1188(sp)
    8dc8:	d9811b17 	ldw	r6,1132(sp)
    8dcc:	da812315 	stw	r10,1164(sp)
    8dd0:	00c001c4 	movi	r3,7
    8dd4:	da412515 	stw	r9,1172(sp)
    8dd8:	db812815 	stw	r14,1184(sp)
    8ddc:	3821883a 	mov	r16,r7
    8de0:	00000506 	br	8df8 <___vfiprintf_internal_r+0x474>
    8de4:	31400084 	addi	r5,r6,2
    8de8:	42000204 	addi	r8,r8,8
    8dec:	200d883a 	mov	r6,r4
    8df0:	843ffc04 	addi	r16,r16,-16
    8df4:	64000d0e 	bge	r12,r16,8e2c <___vfiprintf_internal_r+0x4a8>
    8df8:	10800404 	addi	r2,r2,16
    8dfc:	31000044 	addi	r4,r6,1
    8e00:	47000015 	stw	fp,0(r8)
    8e04:	43000115 	stw	r12,4(r8)
    8e08:	d8811c15 	stw	r2,1136(sp)
    8e0c:	d9011b15 	stw	r4,1132(sp)
    8e10:	193ff40e 	bge	r3,r4,8de4 <___vfiprintf_internal_r+0x460>
    8e14:	1001b51e 	bne	r2,zero,94ec <___vfiprintf_internal_r+0xb68>
    8e18:	843ffc04 	addi	r16,r16,-16
    8e1c:	000d883a 	mov	r6,zero
    8e20:	01400044 	movi	r5,1
    8e24:	d811883a 	mov	r8,sp
    8e28:	643ff316 	blt	r12,r16,8df8 <___vfiprintf_internal_r+0x474>
    8e2c:	800f883a 	mov	r7,r16
    8e30:	da412517 	ldw	r9,1172(sp)
    8e34:	db812817 	ldw	r14,1184(sp)
    8e38:	dc012917 	ldw	r16,1188(sp)
    8e3c:	dac12317 	ldw	r11,1164(sp)
    8e40:	3887883a 	add	r3,r7,r2
    8e44:	41c00115 	stw	r7,4(r8)
    8e48:	42c00015 	stw	r11,0(r8)
    8e4c:	d8c11c15 	stw	r3,1136(sp)
    8e50:	d9411b15 	stw	r5,1132(sp)
    8e54:	008001c4 	movi	r2,7
    8e58:	11429316 	blt	r2,r5,98a8 <___vfiprintf_internal_r+0xf24>
    8e5c:	d9011d87 	ldb	r4,1142(sp)
    8e60:	42000204 	addi	r8,r8,8
    8e64:	28800044 	addi	r2,r5,1
    8e68:	2001b31e 	bne	r4,zero,9538 <___vfiprintf_internal_r+0xbb4>
    8e6c:	70000c26 	beq	r14,zero,8ea0 <___vfiprintf_internal_r+0x51c>
    8e70:	d9011d04 	addi	r4,sp,1140
    8e74:	18c00084 	addi	r3,r3,2
    8e78:	41000015 	stw	r4,0(r8)
    8e7c:	01000084 	movi	r4,2
    8e80:	41000115 	stw	r4,4(r8)
    8e84:	d8c11c15 	stw	r3,1136(sp)
    8e88:	d8811b15 	stw	r2,1132(sp)
    8e8c:	010001c4 	movi	r4,7
    8e90:	20826516 	blt	r4,r2,9828 <___vfiprintf_internal_r+0xea4>
    8e94:	100b883a 	mov	r5,r2
    8e98:	42000204 	addi	r8,r8,8
    8e9c:	10800044 	addi	r2,r2,1
    8ea0:	01002004 	movi	r4,128
    8ea4:	b1021a26 	beq	r22,r4,9710 <___vfiprintf_internal_r+0xd8c>
    8ea8:	4c6dc83a 	sub	r22,r9,r17
    8eac:	0580230e 	bge	zero,r22,8f3c <___vfiprintf_internal_r+0x5b8>
    8eb0:	01c00404 	movi	r7,16
    8eb4:	3d83300e 	bge	r7,r22,9b78 <___vfiprintf_internal_r+0x11f4>
    8eb8:	00800074 	movhi	r2,1
    8ebc:	10800404 	addi	r2,r2,16
    8ec0:	d8812315 	stw	r2,1164(sp)
    8ec4:	030001c4 	movi	r12,7
    8ec8:	00000506 	br	8ee0 <___vfiprintf_internal_r+0x55c>
    8ecc:	28800084 	addi	r2,r5,2
    8ed0:	42000204 	addi	r8,r8,8
    8ed4:	200b883a 	mov	r5,r4
    8ed8:	b5bffc04 	addi	r22,r22,-16
    8edc:	3d800d0e 	bge	r7,r22,8f14 <___vfiprintf_internal_r+0x590>
    8ee0:	18c00404 	addi	r3,r3,16
    8ee4:	29000044 	addi	r4,r5,1
    8ee8:	45c00015 	stw	r23,0(r8)
    8eec:	41c00115 	stw	r7,4(r8)
    8ef0:	d8c11c15 	stw	r3,1136(sp)
    8ef4:	d9011b15 	stw	r4,1132(sp)
    8ef8:	613ff40e 	bge	r12,r4,8ecc <___vfiprintf_internal_r+0x548>
    8efc:	18019b1e 	bne	r3,zero,956c <___vfiprintf_internal_r+0xbe8>
    8f00:	b5bffc04 	addi	r22,r22,-16
    8f04:	000b883a 	mov	r5,zero
    8f08:	00800044 	movi	r2,1
    8f0c:	d811883a 	mov	r8,sp
    8f10:	3dbff316 	blt	r7,r22,8ee0 <___vfiprintf_internal_r+0x55c>
    8f14:	da812317 	ldw	r10,1164(sp)
    8f18:	1d87883a 	add	r3,r3,r22
    8f1c:	45800115 	stw	r22,4(r8)
    8f20:	42800015 	stw	r10,0(r8)
    8f24:	d8c11c15 	stw	r3,1136(sp)
    8f28:	d8811b15 	stw	r2,1132(sp)
    8f2c:	010001c4 	movi	r4,7
    8f30:	2081dd16 	blt	r4,r2,96a8 <___vfiprintf_internal_r+0xd24>
    8f34:	42000204 	addi	r8,r8,8
    8f38:	10800044 	addi	r2,r2,1
    8f3c:	da812417 	ldw	r10,1168(sp)
    8f40:	1c47883a 	add	r3,r3,r17
    8f44:	44400115 	stw	r17,4(r8)
    8f48:	42800015 	stw	r10,0(r8)
    8f4c:	d8c11c15 	stw	r3,1136(sp)
    8f50:	d8811b15 	stw	r2,1132(sp)
    8f54:	010001c4 	movi	r4,7
    8f58:	2081dc0e 	bge	r4,r2,96cc <___vfiprintf_internal_r+0xd48>
    8f5c:	1802611e 	bne	r3,zero,98e4 <___vfiprintf_internal_r+0xf60>
    8f60:	d8011b15 	stw	zero,1132(sp)
    8f64:	aac0010c 	andi	r11,r21,4
    8f68:	58002726 	beq	r11,zero,9008 <___vfiprintf_internal_r+0x684>
    8f6c:	9ca3c83a 	sub	r17,r19,r18
    8f70:	d811883a 	mov	r8,sp
    8f74:	0443510e 	bge	zero,r17,9cbc <___vfiprintf_internal_r+0x1338>
    8f78:	01c00404 	movi	r7,16
    8f7c:	3c43320e 	bge	r7,r17,9c48 <___vfiprintf_internal_r+0x12c4>
    8f80:	00800074 	movhi	r2,1
    8f84:	10800804 	addi	r2,r2,32
    8f88:	d9011b17 	ldw	r4,1132(sp)
    8f8c:	d8812315 	stw	r2,1164(sp)
    8f90:	382d883a 	mov	r22,r7
    8f94:	054001c4 	movi	r21,7
    8f98:	00000506 	br	8fb0 <___vfiprintf_internal_r+0x62c>
    8f9c:	21400084 	addi	r5,r4,2
    8fa0:	42000204 	addi	r8,r8,8
    8fa4:	1009883a 	mov	r4,r2
    8fa8:	8c7ffc04 	addi	r17,r17,-16
    8fac:	b4400d0e 	bge	r22,r17,8fe4 <___vfiprintf_internal_r+0x660>
    8fb0:	18c00404 	addi	r3,r3,16
    8fb4:	20800044 	addi	r2,r4,1
    8fb8:	47000015 	stw	fp,0(r8)
    8fbc:	45800115 	stw	r22,4(r8)
    8fc0:	d8c11c15 	stw	r3,1136(sp)
    8fc4:	d8811b15 	stw	r2,1132(sp)
    8fc8:	a8bff40e 	bge	r21,r2,8f9c <___vfiprintf_internal_r+0x618>
    8fcc:	1801ac1e 	bne	r3,zero,9680 <___vfiprintf_internal_r+0xcfc>
    8fd0:	8c7ffc04 	addi	r17,r17,-16
    8fd4:	0009883a 	mov	r4,zero
    8fd8:	01400044 	movi	r5,1
    8fdc:	d811883a 	mov	r8,sp
    8fe0:	b47ff316 	blt	r22,r17,8fb0 <___vfiprintf_internal_r+0x62c>
    8fe4:	da812317 	ldw	r10,1164(sp)
    8fe8:	1c47883a 	add	r3,r3,r17
    8fec:	44400115 	stw	r17,4(r8)
    8ff0:	42800015 	stw	r10,0(r8)
    8ff4:	d8c11c15 	stw	r3,1136(sp)
    8ff8:	d9411b15 	stw	r5,1132(sp)
    8ffc:	008001c4 	movi	r2,7
    9000:	1141b70e 	bge	r2,r5,96e0 <___vfiprintf_internal_r+0xd5c>
    9004:	1802cf1e 	bne	r3,zero,9b44 <___vfiprintf_internal_r+0x11c0>
    9008:	94c2ca16 	blt	r18,r19,9b34 <___vfiprintf_internal_r+0x11b0>
    900c:	dac12217 	ldw	r11,1160(sp)
    9010:	5c97883a 	add	r11,r11,r18
    9014:	dac12215 	stw	r11,1160(sp)
    9018:	d8011b15 	stw	zero,1132(sp)
    901c:	d811883a 	mov	r8,sp
    9020:	003e8d06 	br	8a58 <___vfiprintf_internal_r+0xd4>
    9024:	d9012017 	ldw	r4,1152(sp)
    9028:	a00b883a 	mov	r5,r20
    902c:	00040640 	call	4064 <__swsetup_r>
    9030:	10002c1e 	bne	r2,zero,90e4 <___vfiprintf_internal_r+0x760>
    9034:	a0c0030b 	ldhu	r3,12(r20)
    9038:	01000284 	movi	r4,10
    903c:	1805883a 	mov	r2,r3
    9040:	1080068c 	andi	r2,r2,26
    9044:	113e731e 	bne	r2,r4,8a14 <___vfiprintf_internal_r+0x90>
    9048:	a080038b 	ldhu	r2,14(r20)
    904c:	113fffcc 	andi	r4,r2,65535
    9050:	2120001c 	xori	r4,r4,32768
    9054:	21200004 	addi	r4,r4,-32768
    9058:	203e6e16 	blt	r4,zero,8a14 <___vfiprintf_internal_r+0x90>
    905c:	a3001917 	ldw	r12,100(r20)
    9060:	a2c00717 	ldw	r11,28(r20)
    9064:	a2800917 	ldw	r10,36(r20)
    9068:	d9012017 	ldw	r4,1152(sp)
    906c:	d9c12117 	ldw	r7,1156(sp)
    9070:	02410004 	movi	r9,1024
    9074:	18ffff4c 	andi	r3,r3,65533
    9078:	da4b883a 	add	r5,sp,r9
    907c:	b00d883a 	mov	r6,r22
    9080:	d8c1030d 	sth	r3,1036(sp)
    9084:	db011915 	stw	r12,1124(sp)
    9088:	d881038d 	sth	r2,1038(sp)
    908c:	dac10715 	stw	r11,1052(sp)
    9090:	da810915 	stw	r10,1060(sp)
    9094:	dec10015 	stw	sp,1024(sp)
    9098:	dec10415 	stw	sp,1040(sp)
    909c:	da410215 	stw	r9,1032(sp)
    90a0:	da410515 	stw	r9,1044(sp)
    90a4:	d8010615 	stw	zero,1048(sp)
    90a8:	00089840 	call	8984 <___vfiprintf_internal_r>
    90ac:	1021883a 	mov	r16,r2
    90b0:	10000416 	blt	r2,zero,90c4 <___vfiprintf_internal_r+0x740>
    90b4:	d9012017 	ldw	r4,1152(sp)
    90b8:	d9410004 	addi	r5,sp,1024
    90bc:	0005abc0 	call	5abc <_fflush_r>
    90c0:	1002fc1e 	bne	r2,zero,9cb4 <___vfiprintf_internal_r+0x1330>
    90c4:	d881030b 	ldhu	r2,1036(sp)
    90c8:	1080100c 	andi	r2,r2,64
    90cc:	10000326 	beq	r2,zero,90dc <___vfiprintf_internal_r+0x758>
    90d0:	a080030b 	ldhu	r2,12(r20)
    90d4:	10801014 	ori	r2,r2,64
    90d8:	a080030d 	sth	r2,12(r20)
    90dc:	8005883a 	mov	r2,r16
    90e0:	00000106 	br	90e8 <___vfiprintf_internal_r+0x764>
    90e4:	00bfffc4 	movi	r2,-1
    90e8:	dfc13517 	ldw	ra,1236(sp)
    90ec:	df013417 	ldw	fp,1232(sp)
    90f0:	ddc13317 	ldw	r23,1228(sp)
    90f4:	dd813217 	ldw	r22,1224(sp)
    90f8:	dd413117 	ldw	r21,1220(sp)
    90fc:	dd013017 	ldw	r20,1216(sp)
    9100:	dcc12f17 	ldw	r19,1212(sp)
    9104:	dc812e17 	ldw	r18,1208(sp)
    9108:	dc412d17 	ldw	r17,1204(sp)
    910c:	dc012c17 	ldw	r16,1200(sp)
    9110:	dec13604 	addi	sp,sp,1240
    9114:	f800283a 	ret
    9118:	00060640 	call	6064 <__sinit>
    911c:	003e2b06 	br	89cc <___vfiprintf_internal_r+0x48>
    9120:	04e7c83a 	sub	r19,zero,r19
    9124:	d8812115 	stw	r2,1156(sp)
    9128:	ad400114 	ori	r21,r21,4
    912c:	80c00007 	ldb	r3,0(r16)
    9130:	003e7306 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9134:	a880040c 	andi	r2,r21,16
    9138:	1000e41e 	bne	r2,zero,94cc <___vfiprintf_internal_r+0xb48>
    913c:	a880100c 	andi	r2,r21,64
    9140:	1000e226 	beq	r2,zero,94cc <___vfiprintf_internal_r+0xb48>
    9144:	da812117 	ldw	r10,1156(sp)
    9148:	002d883a 	mov	r22,zero
    914c:	0005883a 	mov	r2,zero
    9150:	5480000b 	ldhu	r18,0(r10)
    9154:	52800104 	addi	r10,r10,4
    9158:	da812115 	stw	r10,1156(sp)
    915c:	9009883a 	mov	r4,r18
    9160:	003ee706 	br	8d00 <___vfiprintf_internal_r+0x37c>
    9164:	da812117 	ldw	r10,1156(sp)
    9168:	00800044 	movi	r2,1
    916c:	54800017 	ldw	r18,0(r10)
    9170:	55800117 	ldw	r22,4(r10)
    9174:	52800204 	addi	r10,r10,8
    9178:	da812115 	stw	r10,1156(sp)
    917c:	9588b03a 	or	r4,r18,r22
    9180:	003edf06 	br	8d00 <___vfiprintf_internal_r+0x37c>
    9184:	02c00074 	movhi	r11,1
    9188:	5aff9f04 	addi	r11,r11,-388
    918c:	d9811d85 	stb	r6,1142(sp)
    9190:	dac12615 	stw	r11,1176(sp)
    9194:	a900080c 	andi	r4,r21,32
    9198:	d8812117 	ldw	r2,1156(sp)
    919c:	2000a526 	beq	r4,zero,9434 <___vfiprintf_internal_r+0xab0>
    91a0:	da812117 	ldw	r10,1156(sp)
    91a4:	14800017 	ldw	r18,0(r2)
    91a8:	15800117 	ldw	r22,4(r2)
    91ac:	52800204 	addi	r10,r10,8
    91b0:	da812115 	stw	r10,1156(sp)
    91b4:	a880004c 	andi	r2,r21,1
    91b8:	1001d926 	beq	r2,zero,9920 <___vfiprintf_internal_r+0xf9c>
    91bc:	9588b03a 	or	r4,r18,r22
    91c0:	20024426 	beq	r4,zero,9ad4 <___vfiprintf_internal_r+0x1150>
    91c4:	00800c04 	movi	r2,48
    91c8:	d8811d05 	stb	r2,1140(sp)
    91cc:	d8c11d45 	stb	r3,1141(sp)
    91d0:	ad400094 	ori	r21,r21,2
    91d4:	00800084 	movi	r2,2
    91d8:	003ec906 	br	8d00 <___vfiprintf_internal_r+0x37c>
    91dc:	da812117 	ldw	r10,1156(sp)
    91e0:	04800044 	movi	r18,1
    91e4:	dac10004 	addi	r11,sp,1024
    91e8:	50800017 	ldw	r2,0(r10)
    91ec:	52800104 	addi	r10,r10,4
    91f0:	d8011d85 	stb	zero,1142(sp)
    91f4:	d8810005 	stb	r2,1024(sp)
    91f8:	da812115 	stw	r10,1156(sp)
    91fc:	9023883a 	mov	r17,r18
    9200:	dac12415 	stw	r11,1168(sp)
    9204:	0013883a 	mov	r9,zero
    9208:	003ee206 	br	8d94 <___vfiprintf_internal_r+0x410>
    920c:	ad402014 	ori	r21,r21,128
    9210:	80c00007 	ldb	r3,0(r16)
    9214:	003e3a06 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9218:	8015883a 	mov	r10,r16
    921c:	0027883a 	mov	r19,zero
    9220:	18bff404 	addi	r2,r3,-48
    9224:	50c00007 	ldb	r3,0(r10)
    9228:	9cc002a4 	muli	r19,r19,10
    922c:	84000044 	addi	r16,r16,1
    9230:	8015883a 	mov	r10,r16
    9234:	98a7883a 	add	r19,r19,r2
    9238:	18bff404 	addi	r2,r3,-48
    923c:	28bff92e 	bgeu	r5,r2,9224 <___vfiprintf_internal_r+0x8a0>
    9240:	003e3006 	br	8b04 <___vfiprintf_internal_r+0x180>
    9244:	ad400414 	ori	r21,r21,16
    9248:	d9811d85 	stb	r6,1142(sp)
    924c:	a880080c 	andi	r2,r21,32
    9250:	d8c12117 	ldw	r3,1156(sp)
    9254:	10004b26 	beq	r2,zero,9384 <___vfiprintf_internal_r+0xa00>
    9258:	da812117 	ldw	r10,1156(sp)
    925c:	18800117 	ldw	r2,4(r3)
    9260:	1c800017 	ldw	r18,0(r3)
    9264:	52800204 	addi	r10,r10,8
    9268:	da812115 	stw	r10,1156(sp)
    926c:	102d883a 	mov	r22,r2
    9270:	1001f116 	blt	r2,zero,9a38 <___vfiprintf_internal_r+0x10b4>
    9274:	db011d83 	ldbu	r12,1142(sp)
    9278:	4823883a 	mov	r17,r9
    927c:	00800044 	movi	r2,1
    9280:	9588b03a 	or	r4,r18,r22
    9284:	003ea106 	br	8d0c <___vfiprintf_internal_r+0x388>
    9288:	80c00007 	ldb	r3,0(r16)
    928c:	82800044 	addi	r10,r16,1
    9290:	1b027f26 	beq	r3,r12,9c90 <___vfiprintf_internal_r+0x130c>
    9294:	18bff404 	addi	r2,r3,-48
    9298:	5021883a 	mov	r16,r10
    929c:	0013883a 	mov	r9,zero
    92a0:	28be1836 	bltu	r5,r2,8b04 <___vfiprintf_internal_r+0x180>
    92a4:	80c00007 	ldb	r3,0(r16)
    92a8:	4a4002a4 	muli	r9,r9,10
    92ac:	84000044 	addi	r16,r16,1
    92b0:	1253883a 	add	r9,r2,r9
    92b4:	18bff404 	addi	r2,r3,-48
    92b8:	28bffa2e 	bgeu	r5,r2,92a4 <___vfiprintf_internal_r+0x920>
    92bc:	483e110e 	bge	r9,zero,8b04 <___vfiprintf_internal_r+0x180>
    92c0:	027fffc4 	movi	r9,-1
    92c4:	003e0f06 	br	8b04 <___vfiprintf_internal_r+0x180>
    92c8:	d9811d85 	stb	r6,1142(sp)
    92cc:	a880080c 	andi	r2,r21,32
    92d0:	1001ee26 	beq	r2,zero,9a8c <___vfiprintf_internal_r+0x1108>
    92d4:	da812117 	ldw	r10,1156(sp)
    92d8:	dac12217 	ldw	r11,1160(sp)
    92dc:	50800017 	ldw	r2,0(r10)
    92e0:	5807d7fa 	srai	r3,r11,31
    92e4:	52800104 	addi	r10,r10,4
    92e8:	da812115 	stw	r10,1156(sp)
    92ec:	12c00015 	stw	r11,0(r2)
    92f0:	10c00115 	stw	r3,4(r2)
    92f4:	003dd806 	br	8a58 <___vfiprintf_internal_r+0xd4>
    92f8:	30803fcc 	andi	r2,r6,255
    92fc:	1080201c 	xori	r2,r2,128
    9300:	10bfe004 	addi	r2,r2,-128
    9304:	1001df1e 	bne	r2,zero,9a84 <___vfiprintf_internal_r+0x1100>
    9308:	01800804 	movi	r6,32
    930c:	80c00007 	ldb	r3,0(r16)
    9310:	003dfb06 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9314:	da812117 	ldw	r10,1156(sp)
    9318:	dac12117 	ldw	r11,1156(sp)
    931c:	d8011d85 	stb	zero,1142(sp)
    9320:	52800017 	ldw	r10,0(r10)
    9324:	5d800104 	addi	r22,r11,4
    9328:	da812415 	stw	r10,1168(sp)
    932c:	50023b26 	beq	r10,zero,9c1c <___vfiprintf_internal_r+0x1298>
    9330:	d9012417 	ldw	r4,1168(sp)
    9334:	48021f16 	blt	r9,zero,9bb4 <___vfiprintf_internal_r+0x1230>
    9338:	480d883a 	mov	r6,r9
    933c:	000b883a 	mov	r5,zero
    9340:	da012a15 	stw	r8,1192(sp)
    9344:	da412b15 	stw	r9,1196(sp)
    9348:	0006d740 	call	6d74 <memchr>
    934c:	da012a17 	ldw	r8,1192(sp)
    9350:	da412b17 	ldw	r9,1196(sp)
    9354:	10024726 	beq	r2,zero,9c74 <___vfiprintf_internal_r+0x12f0>
    9358:	d8c12417 	ldw	r3,1168(sp)
    935c:	10e3c83a 	sub	r17,r2,r3
    9360:	4c41f616 	blt	r9,r17,9b3c <___vfiprintf_internal_r+0x11b8>
    9364:	db011d83 	ldbu	r12,1142(sp)
    9368:	dd812115 	stw	r22,1156(sp)
    936c:	0013883a 	mov	r9,zero
    9370:	003e8006 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    9374:	d9811d85 	stb	r6,1142(sp)
    9378:	a880080c 	andi	r2,r21,32
    937c:	d8c12117 	ldw	r3,1156(sp)
    9380:	103fb51e 	bne	r2,zero,9258 <___vfiprintf_internal_r+0x8d4>
    9384:	a880040c 	andi	r2,r21,16
    9388:	10015e1e 	bne	r2,zero,9904 <___vfiprintf_internal_r+0xf80>
    938c:	a880100c 	andi	r2,r21,64
    9390:	10015c26 	beq	r2,zero,9904 <___vfiprintf_internal_r+0xf80>
    9394:	1c80000f 	ldh	r18,0(r3)
    9398:	da812117 	ldw	r10,1156(sp)
    939c:	902dd7fa 	srai	r22,r18,31
    93a0:	52800104 	addi	r10,r10,4
    93a4:	da812115 	stw	r10,1156(sp)
    93a8:	b005883a 	mov	r2,r22
    93ac:	003fb006 	br	9270 <___vfiprintf_internal_r+0x8ec>
    93b0:	da812117 	ldw	r10,1156(sp)
    93b4:	00800c04 	movi	r2,48
    93b8:	02c00074 	movhi	r11,1
    93bc:	54800017 	ldw	r18,0(r10)
    93c0:	d8811d05 	stb	r2,1140(sp)
    93c4:	52800104 	addi	r10,r10,4
    93c8:	00801e04 	movi	r2,120
    93cc:	5affa404 	addi	r11,r11,-368
    93d0:	d8811d45 	stb	r2,1141(sp)
    93d4:	002d883a 	mov	r22,zero
    93d8:	ad400094 	ori	r21,r21,2
    93dc:	da812115 	stw	r10,1156(sp)
    93e0:	dac12615 	stw	r11,1176(sp)
    93e4:	00800084 	movi	r2,2
    93e8:	9009883a 	mov	r4,r18
    93ec:	003e4406 	br	8d00 <___vfiprintf_internal_r+0x37c>
    93f0:	ad400814 	ori	r21,r21,32
    93f4:	80c00007 	ldb	r3,0(r16)
    93f8:	003dc106 	br	8b00 <___vfiprintf_internal_r+0x17c>
    93fc:	ad401014 	ori	r21,r21,64
    9400:	80c00007 	ldb	r3,0(r16)
    9404:	003dbe06 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9408:	80c00007 	ldb	r3,0(r16)
    940c:	19c1de26 	beq	r3,r7,9b88 <___vfiprintf_internal_r+0x1204>
    9410:	ad400414 	ori	r21,r21,16
    9414:	003dba06 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9418:	00800074 	movhi	r2,1
    941c:	10bfa404 	addi	r2,r2,-368
    9420:	d8812615 	stw	r2,1176(sp)
    9424:	d9811d85 	stb	r6,1142(sp)
    9428:	a900080c 	andi	r4,r21,32
    942c:	d8812117 	ldw	r2,1156(sp)
    9430:	203f5b1e 	bne	r4,zero,91a0 <___vfiprintf_internal_r+0x81c>
    9434:	a900040c 	andi	r4,r21,16
    9438:	2001a826 	beq	r4,zero,9adc <___vfiprintf_internal_r+0x1158>
    943c:	dac12117 	ldw	r11,1156(sp)
    9440:	14800017 	ldw	r18,0(r2)
    9444:	002d883a 	mov	r22,zero
    9448:	5ac00104 	addi	r11,r11,4
    944c:	dac12115 	stw	r11,1156(sp)
    9450:	003f5806 	br	91b4 <___vfiprintf_internal_r+0x830>
    9454:	da812117 	ldw	r10,1156(sp)
    9458:	54c00017 	ldw	r19,0(r10)
    945c:	50800104 	addi	r2,r10,4
    9460:	983f2f16 	blt	r19,zero,9120 <___vfiprintf_internal_r+0x79c>
    9464:	d8812115 	stw	r2,1156(sp)
    9468:	80c00007 	ldb	r3,0(r16)
    946c:	003da406 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9470:	01800ac4 	movi	r6,43
    9474:	80c00007 	ldb	r3,0(r16)
    9478:	003da106 	br	8b00 <___vfiprintf_internal_r+0x17c>
    947c:	ad400054 	ori	r21,r21,1
    9480:	80c00007 	ldb	r3,0(r16)
    9484:	003d9e06 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9488:	d9811d85 	stb	r6,1142(sp)
    948c:	18007126 	beq	r3,zero,9654 <___vfiprintf_internal_r+0xcd0>
    9490:	04800044 	movi	r18,1
    9494:	d8c10005 	stb	r3,1024(sp)
    9498:	d8c10004 	addi	r3,sp,1024
    949c:	d8011d85 	stb	zero,1142(sp)
    94a0:	9023883a 	mov	r17,r18
    94a4:	d8c12415 	stw	r3,1168(sp)
    94a8:	003f5606 	br	9204 <___vfiprintf_internal_r+0x880>
    94ac:	dac12117 	ldw	r11,1156(sp)
    94b0:	002d883a 	mov	r22,zero
    94b4:	00800044 	movi	r2,1
    94b8:	5c800017 	ldw	r18,0(r11)
    94bc:	5ac00104 	addi	r11,r11,4
    94c0:	dac12115 	stw	r11,1156(sp)
    94c4:	9009883a 	mov	r4,r18
    94c8:	003e0d06 	br	8d00 <___vfiprintf_internal_r+0x37c>
    94cc:	dac12117 	ldw	r11,1156(sp)
    94d0:	002d883a 	mov	r22,zero
    94d4:	0005883a 	mov	r2,zero
    94d8:	5c800017 	ldw	r18,0(r11)
    94dc:	5ac00104 	addi	r11,r11,4
    94e0:	dac12115 	stw	r11,1156(sp)
    94e4:	9009883a 	mov	r4,r18
    94e8:	003e0506 	br	8d00 <___vfiprintf_internal_r+0x37c>
    94ec:	d9012017 	ldw	r4,1152(sp)
    94f0:	a00b883a 	mov	r5,r20
    94f4:	d9811a04 	addi	r6,sp,1128
    94f8:	d8c12a15 	stw	r3,1192(sp)
    94fc:	db012b15 	stw	r12,1196(sp)
    9500:	00088700 	call	8870 <__sprint_r.part.0>
    9504:	d8c12a17 	ldw	r3,1192(sp)
    9508:	db012b17 	ldw	r12,1196(sp)
    950c:	1000571e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    9510:	d9811b17 	ldw	r6,1132(sp)
    9514:	d8811c17 	ldw	r2,1136(sp)
    9518:	d811883a 	mov	r8,sp
    951c:	31400044 	addi	r5,r6,1
    9520:	003e3306 	br	8df0 <___vfiprintf_internal_r+0x46c>
    9524:	d9411b17 	ldw	r5,1132(sp)
    9528:	d8c11c17 	ldw	r3,1136(sp)
    952c:	28800044 	addi	r2,r5,1
    9530:	d9011d87 	ldb	r4,1142(sp)
    9534:	203e4d26 	beq	r4,zero,8e6c <___vfiprintf_internal_r+0x4e8>
    9538:	01000044 	movi	r4,1
    953c:	d9411d84 	addi	r5,sp,1142
    9540:	1907883a 	add	r3,r3,r4
    9544:	41400015 	stw	r5,0(r8)
    9548:	41000115 	stw	r4,4(r8)
    954c:	d8c11c15 	stw	r3,1136(sp)
    9550:	d8811b15 	stw	r2,1132(sp)
    9554:	014001c4 	movi	r5,7
    9558:	2880aa16 	blt	r5,r2,9804 <___vfiprintf_internal_r+0xe80>
    955c:	100b883a 	mov	r5,r2
    9560:	42000204 	addi	r8,r8,8
    9564:	10800044 	addi	r2,r2,1
    9568:	003e4006 	br	8e6c <___vfiprintf_internal_r+0x4e8>
    956c:	d9012017 	ldw	r4,1152(sp)
    9570:	a00b883a 	mov	r5,r20
    9574:	d9811a04 	addi	r6,sp,1128
    9578:	d9c12a15 	stw	r7,1192(sp)
    957c:	db012b15 	stw	r12,1196(sp)
    9580:	00088700 	call	8870 <__sprint_r.part.0>
    9584:	d9c12a17 	ldw	r7,1192(sp)
    9588:	db012b17 	ldw	r12,1196(sp)
    958c:	1000371e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    9590:	d9411b17 	ldw	r5,1132(sp)
    9594:	d8c11c17 	ldw	r3,1136(sp)
    9598:	d811883a 	mov	r8,sp
    959c:	28800044 	addi	r2,r5,1
    95a0:	003e4d06 	br	8ed8 <___vfiprintf_internal_r+0x554>
    95a4:	10803fcc 	andi	r2,r2,255
    95a8:	00c00044 	movi	r3,1
    95ac:	10fddf1e 	bne	r2,r3,8d2c <___vfiprintf_internal_r+0x3a8>
    95b0:	b000021e 	bne	r22,zero,95bc <___vfiprintf_internal_r+0xc38>
    95b4:	00800244 	movi	r2,9
    95b8:	1480202e 	bgeu	r2,r18,963c <___vfiprintf_internal_r+0xcb8>
    95bc:	dc012515 	stw	r16,1172(sp)
    95c0:	dc410a04 	addi	r17,sp,1064
    95c4:	9021883a 	mov	r16,r18
    95c8:	da012415 	stw	r8,1168(sp)
    95cc:	b025883a 	mov	r18,r22
    95d0:	da412315 	stw	r9,1164(sp)
    95d4:	602d883a 	mov	r22,r12
    95d8:	8009883a 	mov	r4,r16
    95dc:	900b883a 	mov	r5,r18
    95e0:	01800284 	movi	r6,10
    95e4:	000f883a 	mov	r7,zero
    95e8:	000a9c80 	call	a9c8 <__umoddi3>
    95ec:	10800c04 	addi	r2,r2,48
    95f0:	8c7fffc4 	addi	r17,r17,-1
    95f4:	8009883a 	mov	r4,r16
    95f8:	900b883a 	mov	r5,r18
    95fc:	01800284 	movi	r6,10
    9600:	000f883a 	mov	r7,zero
    9604:	88800005 	stb	r2,0(r17)
    9608:	000a4080 	call	a408 <__udivdi3>
    960c:	1021883a 	mov	r16,r2
    9610:	10c4b03a 	or	r2,r2,r3
    9614:	1825883a 	mov	r18,r3
    9618:	103fef1e 	bne	r2,zero,95d8 <___vfiprintf_internal_r+0xc54>
    961c:	da811e17 	ldw	r10,1144(sp)
    9620:	da012417 	ldw	r8,1168(sp)
    9624:	da412317 	ldw	r9,1164(sp)
    9628:	dc412415 	stw	r17,1168(sp)
    962c:	b019883a 	mov	r12,r22
    9630:	dc012517 	ldw	r16,1172(sp)
    9634:	5463c83a 	sub	r17,r10,r17
    9638:	003dce06 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    963c:	94800c04 	addi	r18,r18,48
    9640:	d8c109c4 	addi	r3,sp,1063
    9644:	dc8109c5 	stb	r18,1063(sp)
    9648:	dc412717 	ldw	r17,1180(sp)
    964c:	d8c12415 	stw	r3,1168(sp)
    9650:	003dc806 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    9654:	d8811c17 	ldw	r2,1136(sp)
    9658:	10000426 	beq	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    965c:	d9012017 	ldw	r4,1152(sp)
    9660:	a00b883a 	mov	r5,r20
    9664:	d9811a04 	addi	r6,sp,1128
    9668:	00088700 	call	8870 <__sprint_r.part.0>
    966c:	a080030b 	ldhu	r2,12(r20)
    9670:	1080100c 	andi	r2,r2,64
    9674:	103e9b1e 	bne	r2,zero,90e4 <___vfiprintf_internal_r+0x760>
    9678:	d8812217 	ldw	r2,1160(sp)
    967c:	003e9a06 	br	90e8 <___vfiprintf_internal_r+0x764>
    9680:	d9012017 	ldw	r4,1152(sp)
    9684:	a00b883a 	mov	r5,r20
    9688:	d9811a04 	addi	r6,sp,1128
    968c:	00088700 	call	8870 <__sprint_r.part.0>
    9690:	103ff61e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    9694:	d9011b17 	ldw	r4,1132(sp)
    9698:	d8c11c17 	ldw	r3,1136(sp)
    969c:	d811883a 	mov	r8,sp
    96a0:	21400044 	addi	r5,r4,1
    96a4:	003e4006 	br	8fa8 <___vfiprintf_internal_r+0x624>
    96a8:	1800d61e 	bne	r3,zero,9a04 <___vfiprintf_internal_r+0x1080>
    96ac:	dac12417 	ldw	r11,1168(sp)
    96b0:	00800044 	movi	r2,1
    96b4:	dc400115 	stw	r17,4(sp)
    96b8:	dac00015 	stw	r11,0(sp)
    96bc:	dc411c15 	stw	r17,1136(sp)
    96c0:	d8811b15 	stw	r2,1132(sp)
    96c4:	8807883a 	mov	r3,r17
    96c8:	d811883a 	mov	r8,sp
    96cc:	42000204 	addi	r8,r8,8
    96d0:	aac0010c 	andi	r11,r21,4
    96d4:	58000226 	beq	r11,zero,96e0 <___vfiprintf_internal_r+0xd5c>
    96d8:	9ca3c83a 	sub	r17,r19,r18
    96dc:	047e2616 	blt	zero,r17,8f78 <___vfiprintf_internal_r+0x5f4>
    96e0:	94c0010e 	bge	r18,r19,96e8 <___vfiprintf_internal_r+0xd64>
    96e4:	9825883a 	mov	r18,r19
    96e8:	da812217 	ldw	r10,1160(sp)
    96ec:	5495883a 	add	r10,r10,r18
    96f0:	da812215 	stw	r10,1160(sp)
    96f4:	183e4826 	beq	r3,zero,9018 <___vfiprintf_internal_r+0x694>
    96f8:	d9012017 	ldw	r4,1152(sp)
    96fc:	a00b883a 	mov	r5,r20
    9700:	d9811a04 	addi	r6,sp,1128
    9704:	00088700 	call	8870 <__sprint_r.part.0>
    9708:	103e4326 	beq	r2,zero,9018 <___vfiprintf_internal_r+0x694>
    970c:	003fd706 	br	966c <___vfiprintf_internal_r+0xce8>
    9710:	9cadc83a 	sub	r22,r19,r18
    9714:	05bde40e 	bge	zero,r22,8ea8 <___vfiprintf_internal_r+0x524>
    9718:	03000404 	movi	r12,16
    971c:	6581500e 	bge	r12,r22,9c60 <___vfiprintf_internal_r+0x12dc>
    9720:	00800074 	movhi	r2,1
    9724:	10800404 	addi	r2,r2,16
    9728:	d8812315 	stw	r2,1164(sp)
    972c:	8005883a 	mov	r2,r16
    9730:	038001c4 	movi	r14,7
    9734:	b021883a 	mov	r16,r22
    9738:	da412515 	stw	r9,1172(sp)
    973c:	102d883a 	mov	r22,r2
    9740:	00000506 	br	9758 <___vfiprintf_internal_r+0xdd4>
    9744:	29000084 	addi	r4,r5,2
    9748:	42000204 	addi	r8,r8,8
    974c:	100b883a 	mov	r5,r2
    9750:	843ffc04 	addi	r16,r16,-16
    9754:	64000d0e 	bge	r12,r16,978c <___vfiprintf_internal_r+0xe08>
    9758:	18c00404 	addi	r3,r3,16
    975c:	28800044 	addi	r2,r5,1
    9760:	45c00015 	stw	r23,0(r8)
    9764:	43000115 	stw	r12,4(r8)
    9768:	d8c11c15 	stw	r3,1136(sp)
    976c:	d8811b15 	stw	r2,1132(sp)
    9770:	70bff40e 	bge	r14,r2,9744 <___vfiprintf_internal_r+0xdc0>
    9774:	1800151e 	bne	r3,zero,97cc <___vfiprintf_internal_r+0xe48>
    9778:	843ffc04 	addi	r16,r16,-16
    977c:	000b883a 	mov	r5,zero
    9780:	01000044 	movi	r4,1
    9784:	d811883a 	mov	r8,sp
    9788:	643ff316 	blt	r12,r16,9758 <___vfiprintf_internal_r+0xdd4>
    978c:	da412517 	ldw	r9,1172(sp)
    9790:	b005883a 	mov	r2,r22
    9794:	802d883a 	mov	r22,r16
    9798:	1021883a 	mov	r16,r2
    979c:	da812317 	ldw	r10,1164(sp)
    97a0:	1d87883a 	add	r3,r3,r22
    97a4:	45800115 	stw	r22,4(r8)
    97a8:	42800015 	stw	r10,0(r8)
    97ac:	d8c11c15 	stw	r3,1136(sp)
    97b0:	d9011b15 	stw	r4,1132(sp)
    97b4:	008001c4 	movi	r2,7
    97b8:	11008d16 	blt	r2,r4,99f0 <___vfiprintf_internal_r+0x106c>
    97bc:	42000204 	addi	r8,r8,8
    97c0:	20800044 	addi	r2,r4,1
    97c4:	200b883a 	mov	r5,r4
    97c8:	003db706 	br	8ea8 <___vfiprintf_internal_r+0x524>
    97cc:	d9012017 	ldw	r4,1152(sp)
    97d0:	a00b883a 	mov	r5,r20
    97d4:	d9811a04 	addi	r6,sp,1128
    97d8:	db012b15 	stw	r12,1196(sp)
    97dc:	db812a15 	stw	r14,1192(sp)
    97e0:	00088700 	call	8870 <__sprint_r.part.0>
    97e4:	db012b17 	ldw	r12,1196(sp)
    97e8:	db812a17 	ldw	r14,1192(sp)
    97ec:	103f9f1e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    97f0:	d9411b17 	ldw	r5,1132(sp)
    97f4:	d8c11c17 	ldw	r3,1136(sp)
    97f8:	d811883a 	mov	r8,sp
    97fc:	29000044 	addi	r4,r5,1
    9800:	003fd306 	br	9750 <___vfiprintf_internal_r+0xdcc>
    9804:	18006c1e 	bne	r3,zero,99b8 <___vfiprintf_internal_r+0x1034>
    9808:	70004f26 	beq	r14,zero,9948 <___vfiprintf_internal_r+0xfc4>
    980c:	d8811d04 	addi	r2,sp,1140
    9810:	00c00084 	movi	r3,2
    9814:	d8800015 	stw	r2,0(sp)
    9818:	d8c00115 	stw	r3,4(sp)
    981c:	2005883a 	mov	r2,r4
    9820:	d811883a 	mov	r8,sp
    9824:	003d9b06 	br	8e94 <___vfiprintf_internal_r+0x510>
    9828:	1800571e 	bne	r3,zero,9988 <___vfiprintf_internal_r+0x1004>
    982c:	000b883a 	mov	r5,zero
    9830:	00800044 	movi	r2,1
    9834:	d811883a 	mov	r8,sp
    9838:	003d9906 	br	8ea0 <___vfiprintf_internal_r+0x51c>
    983c:	10803fcc 	andi	r2,r2,255
    9840:	1000251e 	bne	r2,zero,98d8 <___vfiprintf_internal_r+0xf54>
    9844:	a880004c 	andi	r2,r21,1
    9848:	10007826 	beq	r2,zero,9a2c <___vfiprintf_internal_r+0x10a8>
    984c:	00800c04 	movi	r2,48
    9850:	d8c109c4 	addi	r3,sp,1063
    9854:	d88109c5 	stb	r2,1063(sp)
    9858:	dc412717 	ldw	r17,1180(sp)
    985c:	d8c12415 	stw	r3,1168(sp)
    9860:	003d4406 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    9864:	d9012617 	ldw	r4,1176(sp)
    9868:	dc410a04 	addi	r17,sp,1064
    986c:	908003cc 	andi	r2,r18,15
    9870:	b006973a 	slli	r3,r22,28
    9874:	2085883a 	add	r2,r4,r2
    9878:	9024d13a 	srli	r18,r18,4
    987c:	10800003 	ldbu	r2,0(r2)
    9880:	b02cd13a 	srli	r22,r22,4
    9884:	8c7fffc4 	addi	r17,r17,-1
    9888:	1ca4b03a 	or	r18,r3,r18
    988c:	88800005 	stb	r2,0(r17)
    9890:	9584b03a 	or	r2,r18,r22
    9894:	103ff51e 	bne	r2,zero,986c <___vfiprintf_internal_r+0xee8>
    9898:	dac11e17 	ldw	r11,1144(sp)
    989c:	dc412415 	stw	r17,1168(sp)
    98a0:	5c63c83a 	sub	r17,r11,r17
    98a4:	003d3306 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    98a8:	1800941e 	bne	r3,zero,9afc <___vfiprintf_internal_r+0x1178>
    98ac:	d8811d87 	ldb	r2,1142(sp)
    98b0:	10006b26 	beq	r2,zero,9a60 <___vfiprintf_internal_r+0x10dc>
    98b4:	00c00044 	movi	r3,1
    98b8:	d9011d84 	addi	r4,sp,1142
    98bc:	1805883a 	mov	r2,r3
    98c0:	d9000015 	stw	r4,0(sp)
    98c4:	d8c00115 	stw	r3,4(sp)
    98c8:	d811883a 	mov	r8,sp
    98cc:	003f2306 	br	955c <___vfiprintf_internal_r+0xbd8>
    98d0:	8023883a 	mov	r17,r16
    98d4:	003c7d06 	br	8acc <___vfiprintf_internal_r+0x148>
    98d8:	da810a04 	addi	r10,sp,1064
    98dc:	da812415 	stw	r10,1168(sp)
    98e0:	003d2406 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    98e4:	d9012017 	ldw	r4,1152(sp)
    98e8:	a00b883a 	mov	r5,r20
    98ec:	d9811a04 	addi	r6,sp,1128
    98f0:	00088700 	call	8870 <__sprint_r.part.0>
    98f4:	103f5d1e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    98f8:	d8c11c17 	ldw	r3,1136(sp)
    98fc:	d811883a 	mov	r8,sp
    9900:	003f7306 	br	96d0 <___vfiprintf_internal_r+0xd4c>
    9904:	1c800017 	ldw	r18,0(r3)
    9908:	dac12117 	ldw	r11,1156(sp)
    990c:	902dd7fa 	srai	r22,r18,31
    9910:	5ac00104 	addi	r11,r11,4
    9914:	dac12115 	stw	r11,1156(sp)
    9918:	b005883a 	mov	r2,r22
    991c:	003e5406 	br	9270 <___vfiprintf_internal_r+0x8ec>
    9920:	00800084 	movi	r2,2
    9924:	9588b03a 	or	r4,r18,r22
    9928:	003cf506 	br	8d00 <___vfiprintf_internal_r+0x37c>
    992c:	d9012017 	ldw	r4,1152(sp)
    9930:	a00b883a 	mov	r5,r20
    9934:	d9811a04 	addi	r6,sp,1128
    9938:	00088700 	call	8870 <__sprint_r.part.0>
    993c:	103f4b1e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    9940:	d811883a 	mov	r8,sp
    9944:	003cd106 	br	8c8c <___vfiprintf_internal_r+0x308>
    9948:	000b883a 	mov	r5,zero
    994c:	2005883a 	mov	r2,r4
    9950:	d811883a 	mov	r8,sp
    9954:	003d5206 	br	8ea0 <___vfiprintf_internal_r+0x51c>
    9958:	10803fcc 	andi	r2,r2,255
    995c:	1080201c 	xori	r2,r2,128
    9960:	10bfe004 	addi	r2,r2,-128
    9964:	01000c04 	movi	r4,48
    9968:	11008e26 	beq	r2,r4,9ba4 <___vfiprintf_internal_r+0x1220>
    996c:	da812417 	ldw	r10,1168(sp)
    9970:	dac11e17 	ldw	r11,1144(sp)
    9974:	193fffc5 	stb	r4,-1(r3)
    9978:	52bfffc4 	addi	r10,r10,-1
    997c:	da812415 	stw	r10,1168(sp)
    9980:	5aa3c83a 	sub	r17,r11,r10
    9984:	003cfb06 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    9988:	d9012017 	ldw	r4,1152(sp)
    998c:	a00b883a 	mov	r5,r20
    9990:	d9811a04 	addi	r6,sp,1128
    9994:	da412b15 	stw	r9,1196(sp)
    9998:	00088700 	call	8870 <__sprint_r.part.0>
    999c:	da412b17 	ldw	r9,1196(sp)
    99a0:	103f321e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    99a4:	d9411b17 	ldw	r5,1132(sp)
    99a8:	d8c11c17 	ldw	r3,1136(sp)
    99ac:	d811883a 	mov	r8,sp
    99b0:	28800044 	addi	r2,r5,1
    99b4:	003d3a06 	br	8ea0 <___vfiprintf_internal_r+0x51c>
    99b8:	d9012017 	ldw	r4,1152(sp)
    99bc:	a00b883a 	mov	r5,r20
    99c0:	d9811a04 	addi	r6,sp,1128
    99c4:	da412b15 	stw	r9,1196(sp)
    99c8:	db812a15 	stw	r14,1192(sp)
    99cc:	00088700 	call	8870 <__sprint_r.part.0>
    99d0:	da412b17 	ldw	r9,1196(sp)
    99d4:	db812a17 	ldw	r14,1192(sp)
    99d8:	103f241e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    99dc:	d9411b17 	ldw	r5,1132(sp)
    99e0:	d8c11c17 	ldw	r3,1136(sp)
    99e4:	d811883a 	mov	r8,sp
    99e8:	28800044 	addi	r2,r5,1
    99ec:	003d1f06 	br	8e6c <___vfiprintf_internal_r+0x4e8>
    99f0:	1800781e 	bne	r3,zero,9bd4 <___vfiprintf_internal_r+0x1250>
    99f4:	000b883a 	mov	r5,zero
    99f8:	00800044 	movi	r2,1
    99fc:	d811883a 	mov	r8,sp
    9a00:	003d2906 	br	8ea8 <___vfiprintf_internal_r+0x524>
    9a04:	d9012017 	ldw	r4,1152(sp)
    9a08:	a00b883a 	mov	r5,r20
    9a0c:	d9811a04 	addi	r6,sp,1128
    9a10:	00088700 	call	8870 <__sprint_r.part.0>
    9a14:	103f151e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    9a18:	d8811b17 	ldw	r2,1132(sp)
    9a1c:	d8c11c17 	ldw	r3,1136(sp)
    9a20:	d811883a 	mov	r8,sp
    9a24:	10800044 	addi	r2,r2,1
    9a28:	003d4406 	br	8f3c <___vfiprintf_internal_r+0x5b8>
    9a2c:	dac10a04 	addi	r11,sp,1064
    9a30:	dac12415 	stw	r11,1168(sp)
    9a34:	003ccf06 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    9a38:	04a5c83a 	sub	r18,zero,r18
    9a3c:	9004c03a 	cmpne	r2,r18,zero
    9a40:	05adc83a 	sub	r22,zero,r22
    9a44:	b0adc83a 	sub	r22,r22,r2
    9a48:	03000b44 	movi	r12,45
    9a4c:	db011d85 	stb	r12,1142(sp)
    9a50:	4823883a 	mov	r17,r9
    9a54:	00800044 	movi	r2,1
    9a58:	9588b03a 	or	r4,r18,r22
    9a5c:	003cab06 	br	8d0c <___vfiprintf_internal_r+0x388>
    9a60:	000b883a 	mov	r5,zero
    9a64:	00800044 	movi	r2,1
    9a68:	d811883a 	mov	r8,sp
    9a6c:	703d0c26 	beq	r14,zero,8ea0 <___vfiprintf_internal_r+0x51c>
    9a70:	00c00084 	movi	r3,2
    9a74:	d9011d04 	addi	r4,sp,1140
    9a78:	d9000015 	stw	r4,0(sp)
    9a7c:	d8c00115 	stw	r3,4(sp)
    9a80:	003d0406 	br	8e94 <___vfiprintf_internal_r+0x510>
    9a84:	80c00007 	ldb	r3,0(r16)
    9a88:	003c1d06 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9a8c:	a880040c 	andi	r2,r21,16
    9a90:	1000091e 	bne	r2,zero,9ab8 <___vfiprintf_internal_r+0x1134>
    9a94:	aac0100c 	andi	r11,r21,64
    9a98:	58000726 	beq	r11,zero,9ab8 <___vfiprintf_internal_r+0x1134>
    9a9c:	da812117 	ldw	r10,1156(sp)
    9aa0:	dac12217 	ldw	r11,1160(sp)
    9aa4:	50800017 	ldw	r2,0(r10)
    9aa8:	52800104 	addi	r10,r10,4
    9aac:	da812115 	stw	r10,1156(sp)
    9ab0:	12c0000d 	sth	r11,0(r2)
    9ab4:	003be806 	br	8a58 <___vfiprintf_internal_r+0xd4>
    9ab8:	da812117 	ldw	r10,1156(sp)
    9abc:	dac12217 	ldw	r11,1160(sp)
    9ac0:	50800017 	ldw	r2,0(r10)
    9ac4:	52800104 	addi	r10,r10,4
    9ac8:	da812115 	stw	r10,1156(sp)
    9acc:	12c00015 	stw	r11,0(r2)
    9ad0:	003be106 	br	8a58 <___vfiprintf_internal_r+0xd4>
    9ad4:	00800084 	movi	r2,2
    9ad8:	003c8906 	br	8d00 <___vfiprintf_internal_r+0x37c>
    9adc:	a900100c 	andi	r4,r21,64
    9ae0:	20001f26 	beq	r4,zero,9b60 <___vfiprintf_internal_r+0x11dc>
    9ae4:	da812117 	ldw	r10,1156(sp)
    9ae8:	1480000b 	ldhu	r18,0(r2)
    9aec:	002d883a 	mov	r22,zero
    9af0:	52800104 	addi	r10,r10,4
    9af4:	da812115 	stw	r10,1156(sp)
    9af8:	003dae06 	br	91b4 <___vfiprintf_internal_r+0x830>
    9afc:	d9012017 	ldw	r4,1152(sp)
    9b00:	a00b883a 	mov	r5,r20
    9b04:	d9811a04 	addi	r6,sp,1128
    9b08:	da412b15 	stw	r9,1196(sp)
    9b0c:	db812a15 	stw	r14,1192(sp)
    9b10:	00088700 	call	8870 <__sprint_r.part.0>
    9b14:	da412b17 	ldw	r9,1196(sp)
    9b18:	db812a17 	ldw	r14,1192(sp)
    9b1c:	103ed31e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    9b20:	d9411b17 	ldw	r5,1132(sp)
    9b24:	d8c11c17 	ldw	r3,1136(sp)
    9b28:	d811883a 	mov	r8,sp
    9b2c:	28800044 	addi	r2,r5,1
    9b30:	003e7f06 	br	9530 <___vfiprintf_internal_r+0xbac>
    9b34:	9825883a 	mov	r18,r19
    9b38:	003d3406 	br	900c <___vfiprintf_internal_r+0x688>
    9b3c:	4823883a 	mov	r17,r9
    9b40:	003e0806 	br	9364 <___vfiprintf_internal_r+0x9e0>
    9b44:	d9012017 	ldw	r4,1152(sp)
    9b48:	a00b883a 	mov	r5,r20
    9b4c:	d9811a04 	addi	r6,sp,1128
    9b50:	00088700 	call	8870 <__sprint_r.part.0>
    9b54:	103ec51e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    9b58:	d8c11c17 	ldw	r3,1136(sp)
    9b5c:	003ee006 	br	96e0 <___vfiprintf_internal_r+0xd5c>
    9b60:	dac12117 	ldw	r11,1156(sp)
    9b64:	14800017 	ldw	r18,0(r2)
    9b68:	002d883a 	mov	r22,zero
    9b6c:	5ac00104 	addi	r11,r11,4
    9b70:	dac12115 	stw	r11,1156(sp)
    9b74:	003d8f06 	br	91b4 <___vfiprintf_internal_r+0x830>
    9b78:	02c00074 	movhi	r11,1
    9b7c:	5ac00404 	addi	r11,r11,16
    9b80:	dac12315 	stw	r11,1164(sp)
    9b84:	003ce306 	br	8f14 <___vfiprintf_internal_r+0x590>
    9b88:	80c00043 	ldbu	r3,1(r16)
    9b8c:	ad400814 	ori	r21,r21,32
    9b90:	84000044 	addi	r16,r16,1
    9b94:	18c03fcc 	andi	r3,r3,255
    9b98:	18c0201c 	xori	r3,r3,128
    9b9c:	18ffe004 	addi	r3,r3,-128
    9ba0:	003bd706 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9ba4:	dac11e17 	ldw	r11,1144(sp)
    9ba8:	d8c12417 	ldw	r3,1168(sp)
    9bac:	58e3c83a 	sub	r17,r11,r3
    9bb0:	003c7006 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    9bb4:	da012a15 	stw	r8,1192(sp)
    9bb8:	0001e3c0 	call	1e3c <strlen>
    9bbc:	1023883a 	mov	r17,r2
    9bc0:	db011d83 	ldbu	r12,1142(sp)
    9bc4:	dd812115 	stw	r22,1156(sp)
    9bc8:	0013883a 	mov	r9,zero
    9bcc:	da012a17 	ldw	r8,1192(sp)
    9bd0:	003c6806 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    9bd4:	d9012017 	ldw	r4,1152(sp)
    9bd8:	a00b883a 	mov	r5,r20
    9bdc:	d9811a04 	addi	r6,sp,1128
    9be0:	da412b15 	stw	r9,1196(sp)
    9be4:	00088700 	call	8870 <__sprint_r.part.0>
    9be8:	da412b17 	ldw	r9,1196(sp)
    9bec:	103e9f1e 	bne	r2,zero,966c <___vfiprintf_internal_r+0xce8>
    9bf0:	d9411b17 	ldw	r5,1132(sp)
    9bf4:	d8c11c17 	ldw	r3,1136(sp)
    9bf8:	d811883a 	mov	r8,sp
    9bfc:	28800044 	addi	r2,r5,1
    9c00:	003ca906 	br	8ea8 <___vfiprintf_internal_r+0x524>
    9c04:	d9411b17 	ldw	r5,1132(sp)
    9c08:	01000074 	movhi	r4,1
    9c0c:	21000804 	addi	r4,r4,32
    9c10:	d9012315 	stw	r4,1164(sp)
    9c14:	29400044 	addi	r5,r5,1
    9c18:	003c8806 	br	8e3c <___vfiprintf_internal_r+0x4b8>
    9c1c:	00800184 	movi	r2,6
    9c20:	1240012e 	bgeu	r2,r9,9c28 <___vfiprintf_internal_r+0x12a4>
    9c24:	1013883a 	mov	r9,r2
    9c28:	4823883a 	mov	r17,r9
    9c2c:	4825883a 	mov	r18,r9
    9c30:	48001516 	blt	r9,zero,9c88 <___vfiprintf_internal_r+0x1304>
    9c34:	00800074 	movhi	r2,1
    9c38:	10bfa904 	addi	r2,r2,-348
    9c3c:	dd812115 	stw	r22,1156(sp)
    9c40:	d8812415 	stw	r2,1168(sp)
    9c44:	003d6f06 	br	9204 <___vfiprintf_internal_r+0x880>
    9c48:	d9411b17 	ldw	r5,1132(sp)
    9c4c:	02c00074 	movhi	r11,1
    9c50:	5ac00804 	addi	r11,r11,32
    9c54:	dac12315 	stw	r11,1164(sp)
    9c58:	29400044 	addi	r5,r5,1
    9c5c:	003ce106 	br	8fe4 <___vfiprintf_internal_r+0x660>
    9c60:	01000074 	movhi	r4,1
    9c64:	21000404 	addi	r4,r4,16
    9c68:	d9012315 	stw	r4,1164(sp)
    9c6c:	1009883a 	mov	r4,r2
    9c70:	003eca06 	br	979c <___vfiprintf_internal_r+0xe18>
    9c74:	4823883a 	mov	r17,r9
    9c78:	db011d83 	ldbu	r12,1142(sp)
    9c7c:	dd812115 	stw	r22,1156(sp)
    9c80:	0013883a 	mov	r9,zero
    9c84:	003c3b06 	br	8d74 <___vfiprintf_internal_r+0x3f0>
    9c88:	0025883a 	mov	r18,zero
    9c8c:	003fe906 	br	9c34 <___vfiprintf_internal_r+0x12b0>
    9c90:	dac12117 	ldw	r11,1156(sp)
    9c94:	8005883a 	mov	r2,r16
    9c98:	5021883a 	mov	r16,r10
    9c9c:	5a400017 	ldw	r9,0(r11)
    9ca0:	58c00104 	addi	r3,r11,4
    9ca4:	d8c12115 	stw	r3,1156(sp)
    9ca8:	48000a16 	blt	r9,zero,9cd4 <___vfiprintf_internal_r+0x1350>
    9cac:	10c00047 	ldb	r3,1(r2)
    9cb0:	003b9306 	br	8b00 <___vfiprintf_internal_r+0x17c>
    9cb4:	043fffc4 	movi	r16,-1
    9cb8:	003d0206 	br	90c4 <___vfiprintf_internal_r+0x740>
    9cbc:	94c0010e 	bge	r18,r19,9cc4 <___vfiprintf_internal_r+0x1340>
    9cc0:	9825883a 	mov	r18,r19
    9cc4:	da812217 	ldw	r10,1160(sp)
    9cc8:	5495883a 	add	r10,r10,r18
    9ccc:	da812215 	stw	r10,1160(sp)
    9cd0:	003cd106 	br	9018 <___vfiprintf_internal_r+0x694>
    9cd4:	027fffc4 	movi	r9,-1
    9cd8:	10c00047 	ldb	r3,1(r2)
    9cdc:	003b8806 	br	8b00 <___vfiprintf_internal_r+0x17c>

00009ce0 <__vfiprintf_internal>:
    9ce0:	2007883a 	mov	r3,r4
    9ce4:	01000074 	movhi	r4,1
    9ce8:	21070304 	addi	r4,r4,7180
    9cec:	21000017 	ldw	r4,0(r4)
    9cf0:	2805883a 	mov	r2,r5
    9cf4:	300f883a 	mov	r7,r6
    9cf8:	180b883a 	mov	r5,r3
    9cfc:	100d883a 	mov	r6,r2
    9d00:	00089841 	jmpi	8984 <___vfiprintf_internal_r>

00009d04 <_write_r>:
    9d04:	defffd04 	addi	sp,sp,-12
    9d08:	dc000015 	stw	r16,0(sp)
    9d0c:	04000074 	movhi	r16,1
    9d10:	dc400115 	stw	r17,4(sp)
    9d14:	840dd004 	addi	r16,r16,14144
    9d18:	2023883a 	mov	r17,r4
    9d1c:	2809883a 	mov	r4,r5
    9d20:	300b883a 	mov	r5,r6
    9d24:	380d883a 	mov	r6,r7
    9d28:	dfc00215 	stw	ra,8(sp)
    9d2c:	80000015 	stw	zero,0(r16)
    9d30:	000de340 	call	de34 <write>
    9d34:	00ffffc4 	movi	r3,-1
    9d38:	10c00526 	beq	r2,r3,9d50 <_write_r+0x4c>
    9d3c:	dfc00217 	ldw	ra,8(sp)
    9d40:	dc400117 	ldw	r17,4(sp)
    9d44:	dc000017 	ldw	r16,0(sp)
    9d48:	dec00304 	addi	sp,sp,12
    9d4c:	f800283a 	ret
    9d50:	80c00017 	ldw	r3,0(r16)
    9d54:	183ff926 	beq	r3,zero,9d3c <_write_r+0x38>
    9d58:	88c00015 	stw	r3,0(r17)
    9d5c:	003ff706 	br	9d3c <_write_r+0x38>

00009d60 <_close_r>:
    9d60:	defffd04 	addi	sp,sp,-12
    9d64:	dc000015 	stw	r16,0(sp)
    9d68:	04000074 	movhi	r16,1
    9d6c:	dc400115 	stw	r17,4(sp)
    9d70:	840dd004 	addi	r16,r16,14144
    9d74:	2023883a 	mov	r17,r4
    9d78:	2809883a 	mov	r4,r5
    9d7c:	dfc00215 	stw	ra,8(sp)
    9d80:	80000015 	stw	zero,0(r16)
    9d84:	000d5a80 	call	d5a8 <close>
    9d88:	00ffffc4 	movi	r3,-1
    9d8c:	10c00526 	beq	r2,r3,9da4 <_close_r+0x44>
    9d90:	dfc00217 	ldw	ra,8(sp)
    9d94:	dc400117 	ldw	r17,4(sp)
    9d98:	dc000017 	ldw	r16,0(sp)
    9d9c:	dec00304 	addi	sp,sp,12
    9da0:	f800283a 	ret
    9da4:	80c00017 	ldw	r3,0(r16)
    9da8:	183ff926 	beq	r3,zero,9d90 <_close_r+0x30>
    9dac:	88c00015 	stw	r3,0(r17)
    9db0:	003ff706 	br	9d90 <_close_r+0x30>

00009db4 <_fclose_r>:
    9db4:	28003226 	beq	r5,zero,9e80 <_fclose_r+0xcc>
    9db8:	defffc04 	addi	sp,sp,-16
    9dbc:	dc400115 	stw	r17,4(sp)
    9dc0:	2023883a 	mov	r17,r4
    9dc4:	dc000015 	stw	r16,0(sp)
    9dc8:	dfc00315 	stw	ra,12(sp)
    9dcc:	dc800215 	stw	r18,8(sp)
    9dd0:	2821883a 	mov	r16,r5
    9dd4:	00060740 	call	6074 <__sfp_lock_acquire>
    9dd8:	88000226 	beq	r17,zero,9de4 <_fclose_r+0x30>
    9ddc:	88800e17 	ldw	r2,56(r17)
    9de0:	10002926 	beq	r2,zero,9e88 <_fclose_r+0xd4>
    9de4:	8080030f 	ldh	r2,12(r16)
    9de8:	10002226 	beq	r2,zero,9e74 <_fclose_r+0xc0>
    9dec:	8809883a 	mov	r4,r17
    9df0:	800b883a 	mov	r5,r16
    9df4:	0005abc0 	call	5abc <_fflush_r>
    9df8:	1025883a 	mov	r18,r2
    9dfc:	80800b17 	ldw	r2,44(r16)
    9e00:	10000426 	beq	r2,zero,9e14 <_fclose_r+0x60>
    9e04:	81400717 	ldw	r5,28(r16)
    9e08:	8809883a 	mov	r4,r17
    9e0c:	103ee83a 	callr	r2
    9e10:	10002616 	blt	r2,zero,9eac <_fclose_r+0xf8>
    9e14:	8080030b 	ldhu	r2,12(r16)
    9e18:	1080200c 	andi	r2,r2,128
    9e1c:	10001f1e 	bne	r2,zero,9e9c <_fclose_r+0xe8>
    9e20:	81400c17 	ldw	r5,48(r16)
    9e24:	28000526 	beq	r5,zero,9e3c <_fclose_r+0x88>
    9e28:	80801004 	addi	r2,r16,64
    9e2c:	28800226 	beq	r5,r2,9e38 <_fclose_r+0x84>
    9e30:	8809883a 	mov	r4,r17
    9e34:	00061d80 	call	61d8 <_free_r>
    9e38:	80000c15 	stw	zero,48(r16)
    9e3c:	81401117 	ldw	r5,68(r16)
    9e40:	28000326 	beq	r5,zero,9e50 <_fclose_r+0x9c>
    9e44:	8809883a 	mov	r4,r17
    9e48:	00061d80 	call	61d8 <_free_r>
    9e4c:	80001115 	stw	zero,68(r16)
    9e50:	8000030d 	sth	zero,12(r16)
    9e54:	00060780 	call	6078 <__sfp_lock_release>
    9e58:	9005883a 	mov	r2,r18
    9e5c:	dfc00317 	ldw	ra,12(sp)
    9e60:	dc800217 	ldw	r18,8(sp)
    9e64:	dc400117 	ldw	r17,4(sp)
    9e68:	dc000017 	ldw	r16,0(sp)
    9e6c:	dec00404 	addi	sp,sp,16
    9e70:	f800283a 	ret
    9e74:	00060780 	call	6078 <__sfp_lock_release>
    9e78:	0005883a 	mov	r2,zero
    9e7c:	003ff706 	br	9e5c <_fclose_r+0xa8>
    9e80:	0005883a 	mov	r2,zero
    9e84:	f800283a 	ret
    9e88:	8809883a 	mov	r4,r17
    9e8c:	00060640 	call	6064 <__sinit>
    9e90:	8080030f 	ldh	r2,12(r16)
    9e94:	103fd51e 	bne	r2,zero,9dec <_fclose_r+0x38>
    9e98:	003ff606 	br	9e74 <_fclose_r+0xc0>
    9e9c:	81400417 	ldw	r5,16(r16)
    9ea0:	8809883a 	mov	r4,r17
    9ea4:	00061d80 	call	61d8 <_free_r>
    9ea8:	003fdd06 	br	9e20 <_fclose_r+0x6c>
    9eac:	04bfffc4 	movi	r18,-1
    9eb0:	003fd806 	br	9e14 <_fclose_r+0x60>

00009eb4 <fclose>:
    9eb4:	00800074 	movhi	r2,1
    9eb8:	10870304 	addi	r2,r2,7180
    9ebc:	200b883a 	mov	r5,r4
    9ec0:	11000017 	ldw	r4,0(r2)
    9ec4:	0009db41 	jmpi	9db4 <_fclose_r>

00009ec8 <_fputwc_r>:
    9ec8:	3080030b 	ldhu	r2,12(r6)
    9ecc:	defff804 	addi	sp,sp,-32
    9ed0:	dcc00415 	stw	r19,16(sp)
    9ed4:	dc800315 	stw	r18,12(sp)
    9ed8:	dc000115 	stw	r16,4(sp)
    9edc:	dfc00715 	stw	ra,28(sp)
    9ee0:	dd400615 	stw	r21,24(sp)
    9ee4:	dd000515 	stw	r20,20(sp)
    9ee8:	dc400215 	stw	r17,8(sp)
    9eec:	10c8000c 	andi	r3,r2,8192
    9ef0:	3021883a 	mov	r16,r6
    9ef4:	2027883a 	mov	r19,r4
    9ef8:	2825883a 	mov	r18,r5
    9efc:	1800051e 	bne	r3,zero,9f14 <_fputwc_r+0x4c>
    9f00:	30c01917 	ldw	r3,100(r6)
    9f04:	10880014 	ori	r2,r2,8192
    9f08:	3080030d 	sth	r2,12(r6)
    9f0c:	18880014 	ori	r2,r3,8192
    9f10:	30801915 	stw	r2,100(r6)
    9f14:	0006b640 	call	6b64 <__locale_mb_cur_max>
    9f18:	00c00044 	movi	r3,1
    9f1c:	10c03e26 	beq	r2,r3,a018 <_fputwc_r+0x150>
    9f20:	9809883a 	mov	r4,r19
    9f24:	d80b883a 	mov	r5,sp
    9f28:	900d883a 	mov	r6,r18
    9f2c:	81c01704 	addi	r7,r16,92
    9f30:	000a2080 	call	a208 <_wcrtomb_r>
    9f34:	1029883a 	mov	r20,r2
    9f38:	00bfffc4 	movi	r2,-1
    9f3c:	a0802026 	beq	r20,r2,9fc0 <_fputwc_r+0xf8>
    9f40:	d9400003 	ldbu	r5,0(sp)
    9f44:	a0001c26 	beq	r20,zero,9fb8 <_fputwc_r+0xf0>
    9f48:	0023883a 	mov	r17,zero
    9f4c:	05400284 	movi	r21,10
    9f50:	00000906 	br	9f78 <_fputwc_r+0xb0>
    9f54:	80800017 	ldw	r2,0(r16)
    9f58:	11400005 	stb	r5,0(r2)
    9f5c:	80c00017 	ldw	r3,0(r16)
    9f60:	18c00044 	addi	r3,r3,1
    9f64:	80c00015 	stw	r3,0(r16)
    9f68:	8c400044 	addi	r17,r17,1
    9f6c:	dc45883a 	add	r2,sp,r17
    9f70:	8d00112e 	bgeu	r17,r20,9fb8 <_fputwc_r+0xf0>
    9f74:	11400003 	ldbu	r5,0(r2)
    9f78:	80c00217 	ldw	r3,8(r16)
    9f7c:	18ffffc4 	addi	r3,r3,-1
    9f80:	80c00215 	stw	r3,8(r16)
    9f84:	183ff30e 	bge	r3,zero,9f54 <_fputwc_r+0x8c>
    9f88:	80800617 	ldw	r2,24(r16)
    9f8c:	18801916 	blt	r3,r2,9ff4 <_fputwc_r+0x12c>
    9f90:	80800017 	ldw	r2,0(r16)
    9f94:	11400005 	stb	r5,0(r2)
    9f98:	80800017 	ldw	r2,0(r16)
    9f9c:	10c00003 	ldbu	r3,0(r2)
    9fa0:	10800044 	addi	r2,r2,1
    9fa4:	1d402326 	beq	r3,r21,a034 <_fputwc_r+0x16c>
    9fa8:	80800015 	stw	r2,0(r16)
    9fac:	8c400044 	addi	r17,r17,1
    9fb0:	dc45883a 	add	r2,sp,r17
    9fb4:	8d3fef36 	bltu	r17,r20,9f74 <_fputwc_r+0xac>
    9fb8:	9005883a 	mov	r2,r18
    9fbc:	00000406 	br	9fd0 <_fputwc_r+0x108>
    9fc0:	80c0030b 	ldhu	r3,12(r16)
    9fc4:	a005883a 	mov	r2,r20
    9fc8:	18c01014 	ori	r3,r3,64
    9fcc:	80c0030d 	sth	r3,12(r16)
    9fd0:	dfc00717 	ldw	ra,28(sp)
    9fd4:	dd400617 	ldw	r21,24(sp)
    9fd8:	dd000517 	ldw	r20,20(sp)
    9fdc:	dcc00417 	ldw	r19,16(sp)
    9fe0:	dc800317 	ldw	r18,12(sp)
    9fe4:	dc400217 	ldw	r17,8(sp)
    9fe8:	dc000117 	ldw	r16,4(sp)
    9fec:	dec00804 	addi	sp,sp,32
    9ff0:	f800283a 	ret
    9ff4:	9809883a 	mov	r4,r19
    9ff8:	29403fcc 	andi	r5,r5,255
    9ffc:	800d883a 	mov	r6,r16
    a000:	0003ef40 	call	3ef4 <__swbuf_r>
    a004:	10bfffe0 	cmpeqi	r2,r2,-1
    a008:	10803fcc 	andi	r2,r2,255
    a00c:	103fd626 	beq	r2,zero,9f68 <_fputwc_r+0xa0>
    a010:	00bfffc4 	movi	r2,-1
    a014:	003fee06 	br	9fd0 <_fputwc_r+0x108>
    a018:	90ffffc4 	addi	r3,r18,-1
    a01c:	01003f84 	movi	r4,254
    a020:	20ffbf36 	bltu	r4,r3,9f20 <_fputwc_r+0x58>
    a024:	900b883a 	mov	r5,r18
    a028:	dc800005 	stb	r18,0(sp)
    a02c:	1029883a 	mov	r20,r2
    a030:	003fc506 	br	9f48 <_fputwc_r+0x80>
    a034:	9809883a 	mov	r4,r19
    a038:	a80b883a 	mov	r5,r21
    a03c:	800d883a 	mov	r6,r16
    a040:	0003ef40 	call	3ef4 <__swbuf_r>
    a044:	10bfffe0 	cmpeqi	r2,r2,-1
    a048:	003fef06 	br	a008 <_fputwc_r+0x140>

0000a04c <fputwc>:
    a04c:	defffc04 	addi	sp,sp,-16
    a050:	dc000115 	stw	r16,4(sp)
    a054:	04000074 	movhi	r16,1
    a058:	84070304 	addi	r16,r16,7180
    a05c:	dc400215 	stw	r17,8(sp)
    a060:	2023883a 	mov	r17,r4
    a064:	81000017 	ldw	r4,0(r16)
    a068:	dfc00315 	stw	ra,12(sp)
    a06c:	280d883a 	mov	r6,r5
    a070:	20000626 	beq	r4,zero,a08c <fputwc+0x40>
    a074:	20800e17 	ldw	r2,56(r4)
    a078:	1000041e 	bne	r2,zero,a08c <fputwc+0x40>
    a07c:	d9400015 	stw	r5,0(sp)
    a080:	00060640 	call	6064 <__sinit>
    a084:	81000017 	ldw	r4,0(r16)
    a088:	d9800017 	ldw	r6,0(sp)
    a08c:	880b883a 	mov	r5,r17
    a090:	dfc00317 	ldw	ra,12(sp)
    a094:	dc400217 	ldw	r17,8(sp)
    a098:	dc000117 	ldw	r16,4(sp)
    a09c:	dec00404 	addi	sp,sp,16
    a0a0:	0009ec81 	jmpi	9ec8 <_fputwc_r>

0000a0a4 <_fstat_r>:
    a0a4:	defffd04 	addi	sp,sp,-12
    a0a8:	dc000015 	stw	r16,0(sp)
    a0ac:	04000074 	movhi	r16,1
    a0b0:	dc400115 	stw	r17,4(sp)
    a0b4:	840dd004 	addi	r16,r16,14144
    a0b8:	2023883a 	mov	r17,r4
    a0bc:	2809883a 	mov	r4,r5
    a0c0:	300b883a 	mov	r5,r6
    a0c4:	dfc00215 	stw	ra,8(sp)
    a0c8:	80000015 	stw	zero,0(r16)
    a0cc:	000d6f40 	call	d6f4 <fstat>
    a0d0:	00ffffc4 	movi	r3,-1
    a0d4:	10c00526 	beq	r2,r3,a0ec <_fstat_r+0x48>
    a0d8:	dfc00217 	ldw	ra,8(sp)
    a0dc:	dc400117 	ldw	r17,4(sp)
    a0e0:	dc000017 	ldw	r16,0(sp)
    a0e4:	dec00304 	addi	sp,sp,12
    a0e8:	f800283a 	ret
    a0ec:	80c00017 	ldw	r3,0(r16)
    a0f0:	183ff926 	beq	r3,zero,a0d8 <_fstat_r+0x34>
    a0f4:	88c00015 	stw	r3,0(r17)
    a0f8:	003ff706 	br	a0d8 <_fstat_r+0x34>

0000a0fc <_isatty_r>:
    a0fc:	defffd04 	addi	sp,sp,-12
    a100:	dc000015 	stw	r16,0(sp)
    a104:	04000074 	movhi	r16,1
    a108:	dc400115 	stw	r17,4(sp)
    a10c:	840dd004 	addi	r16,r16,14144
    a110:	2023883a 	mov	r17,r4
    a114:	2809883a 	mov	r4,r5
    a118:	dfc00215 	stw	ra,8(sp)
    a11c:	80000015 	stw	zero,0(r16)
    a120:	000d7f40 	call	d7f4 <isatty>
    a124:	00ffffc4 	movi	r3,-1
    a128:	10c00526 	beq	r2,r3,a140 <_isatty_r+0x44>
    a12c:	dfc00217 	ldw	ra,8(sp)
    a130:	dc400117 	ldw	r17,4(sp)
    a134:	dc000017 	ldw	r16,0(sp)
    a138:	dec00304 	addi	sp,sp,12
    a13c:	f800283a 	ret
    a140:	80c00017 	ldw	r3,0(r16)
    a144:	183ff926 	beq	r3,zero,a12c <_isatty_r+0x30>
    a148:	88c00015 	stw	r3,0(r17)
    a14c:	003ff706 	br	a12c <_isatty_r+0x30>

0000a150 <_lseek_r>:
    a150:	defffd04 	addi	sp,sp,-12
    a154:	dc000015 	stw	r16,0(sp)
    a158:	04000074 	movhi	r16,1
    a15c:	dc400115 	stw	r17,4(sp)
    a160:	840dd004 	addi	r16,r16,14144
    a164:	2023883a 	mov	r17,r4
    a168:	2809883a 	mov	r4,r5
    a16c:	300b883a 	mov	r5,r6
    a170:	380d883a 	mov	r6,r7
    a174:	dfc00215 	stw	ra,8(sp)
    a178:	80000015 	stw	zero,0(r16)
    a17c:	000d9cc0 	call	d9cc <lseek>
    a180:	00ffffc4 	movi	r3,-1
    a184:	10c00526 	beq	r2,r3,a19c <_lseek_r+0x4c>
    a188:	dfc00217 	ldw	ra,8(sp)
    a18c:	dc400117 	ldw	r17,4(sp)
    a190:	dc000017 	ldw	r16,0(sp)
    a194:	dec00304 	addi	sp,sp,12
    a198:	f800283a 	ret
    a19c:	80c00017 	ldw	r3,0(r16)
    a1a0:	183ff926 	beq	r3,zero,a188 <_lseek_r+0x38>
    a1a4:	88c00015 	stw	r3,0(r17)
    a1a8:	003ff706 	br	a188 <_lseek_r+0x38>

0000a1ac <_read_r>:
    a1ac:	defffd04 	addi	sp,sp,-12
    a1b0:	dc000015 	stw	r16,0(sp)
    a1b4:	04000074 	movhi	r16,1
    a1b8:	dc400115 	stw	r17,4(sp)
    a1bc:	840dd004 	addi	r16,r16,14144
    a1c0:	2023883a 	mov	r17,r4
    a1c4:	2809883a 	mov	r4,r5
    a1c8:	300b883a 	mov	r5,r6
    a1cc:	380d883a 	mov	r6,r7
    a1d0:	dfc00215 	stw	ra,8(sp)
    a1d4:	80000015 	stw	zero,0(r16)
    a1d8:	000dba80 	call	dba8 <read>
    a1dc:	00ffffc4 	movi	r3,-1
    a1e0:	10c00526 	beq	r2,r3,a1f8 <_read_r+0x4c>
    a1e4:	dfc00217 	ldw	ra,8(sp)
    a1e8:	dc400117 	ldw	r17,4(sp)
    a1ec:	dc000017 	ldw	r16,0(sp)
    a1f0:	dec00304 	addi	sp,sp,12
    a1f4:	f800283a 	ret
    a1f8:	80c00017 	ldw	r3,0(r16)
    a1fc:	183ff926 	beq	r3,zero,a1e4 <_read_r+0x38>
    a200:	88c00015 	stw	r3,0(r17)
    a204:	003ff706 	br	a1e4 <_read_r+0x38>

0000a208 <_wcrtomb_r>:
    a208:	defff604 	addi	sp,sp,-40
    a20c:	00800074 	movhi	r2,1
    a210:	dc800815 	stw	r18,32(sp)
    a214:	dc400715 	stw	r17,28(sp)
    a218:	dc000615 	stw	r16,24(sp)
    a21c:	10870704 	addi	r2,r2,7196
    a220:	dfc00915 	stw	ra,36(sp)
    a224:	2021883a 	mov	r16,r4
    a228:	3823883a 	mov	r17,r7
    a22c:	14800017 	ldw	r18,0(r2)
    a230:	28001426 	beq	r5,zero,a284 <_wcrtomb_r+0x7c>
    a234:	d9400415 	stw	r5,16(sp)
    a238:	d9800515 	stw	r6,20(sp)
    a23c:	0006b580 	call	6b58 <__locale_charset>
    a240:	d9400417 	ldw	r5,16(sp)
    a244:	d9800517 	ldw	r6,20(sp)
    a248:	8009883a 	mov	r4,r16
    a24c:	dc400015 	stw	r17,0(sp)
    a250:	100f883a 	mov	r7,r2
    a254:	903ee83a 	callr	r18
    a258:	00ffffc4 	movi	r3,-1
    a25c:	10c0031e 	bne	r2,r3,a26c <_wcrtomb_r+0x64>
    a260:	88000015 	stw	zero,0(r17)
    a264:	00c02284 	movi	r3,138
    a268:	80c00015 	stw	r3,0(r16)
    a26c:	dfc00917 	ldw	ra,36(sp)
    a270:	dc800817 	ldw	r18,32(sp)
    a274:	dc400717 	ldw	r17,28(sp)
    a278:	dc000617 	ldw	r16,24(sp)
    a27c:	dec00a04 	addi	sp,sp,40
    a280:	f800283a 	ret
    a284:	0006b580 	call	6b58 <__locale_charset>
    a288:	8009883a 	mov	r4,r16
    a28c:	dc400015 	stw	r17,0(sp)
    a290:	d9400104 	addi	r5,sp,4
    a294:	000d883a 	mov	r6,zero
    a298:	100f883a 	mov	r7,r2
    a29c:	903ee83a 	callr	r18
    a2a0:	003fed06 	br	a258 <_wcrtomb_r+0x50>

0000a2a4 <wcrtomb>:
    a2a4:	defff504 	addi	sp,sp,-44
    a2a8:	dc400515 	stw	r17,20(sp)
    a2ac:	dc000415 	stw	r16,16(sp)
    a2b0:	dfc00a15 	stw	ra,40(sp)
    a2b4:	dd400915 	stw	r21,36(sp)
    a2b8:	dd000815 	stw	r20,32(sp)
    a2bc:	dcc00715 	stw	r19,28(sp)
    a2c0:	dc800615 	stw	r18,24(sp)
    a2c4:	2021883a 	mov	r16,r4
    a2c8:	3023883a 	mov	r17,r6
    a2cc:	20001d26 	beq	r4,zero,a344 <wcrtomb+0xa0>
    a2d0:	04800074 	movhi	r18,1
    a2d4:	94870304 	addi	r18,r18,7180
    a2d8:	00800074 	movhi	r2,1
    a2dc:	95400017 	ldw	r21,0(r18)
    a2e0:	10870704 	addi	r2,r2,7196
    a2e4:	15000017 	ldw	r20,0(r2)
    a2e8:	2827883a 	mov	r19,r5
    a2ec:	0006b580 	call	6b58 <__locale_charset>
    a2f0:	a809883a 	mov	r4,r21
    a2f4:	dc400015 	stw	r17,0(sp)
    a2f8:	800b883a 	mov	r5,r16
    a2fc:	980d883a 	mov	r6,r19
    a300:	100f883a 	mov	r7,r2
    a304:	a03ee83a 	callr	r20
    a308:	00ffffc4 	movi	r3,-1
    a30c:	10c0041e 	bne	r2,r3,a320 <wcrtomb+0x7c>
    a310:	90c00017 	ldw	r3,0(r18)
    a314:	01002284 	movi	r4,138
    a318:	88000015 	stw	zero,0(r17)
    a31c:	19000015 	stw	r4,0(r3)
    a320:	dfc00a17 	ldw	ra,40(sp)
    a324:	dd400917 	ldw	r21,36(sp)
    a328:	dd000817 	ldw	r20,32(sp)
    a32c:	dcc00717 	ldw	r19,28(sp)
    a330:	dc800617 	ldw	r18,24(sp)
    a334:	dc400517 	ldw	r17,20(sp)
    a338:	dc000417 	ldw	r16,16(sp)
    a33c:	dec00b04 	addi	sp,sp,44
    a340:	f800283a 	ret
    a344:	04800074 	movhi	r18,1
    a348:	94870304 	addi	r18,r18,7180
    a34c:	00800074 	movhi	r2,1
    a350:	94c00017 	ldw	r19,0(r18)
    a354:	10870704 	addi	r2,r2,7196
    a358:	14000017 	ldw	r16,0(r2)
    a35c:	0006b580 	call	6b58 <__locale_charset>
    a360:	9809883a 	mov	r4,r19
    a364:	dc400015 	stw	r17,0(sp)
    a368:	d9400104 	addi	r5,sp,4
    a36c:	000d883a 	mov	r6,zero
    a370:	100f883a 	mov	r7,r2
    a374:	803ee83a 	callr	r16
    a378:	003fe306 	br	a308 <wcrtomb+0x64>

0000a37c <__ascii_wctomb>:
    a37c:	28000526 	beq	r5,zero,a394 <__ascii_wctomb+0x18>
    a380:	00803fc4 	movi	r2,255
    a384:	11800536 	bltu	r2,r6,a39c <__ascii_wctomb+0x20>
    a388:	29800005 	stb	r6,0(r5)
    a38c:	00800044 	movi	r2,1
    a390:	f800283a 	ret
    a394:	0005883a 	mov	r2,zero
    a398:	f800283a 	ret
    a39c:	00802284 	movi	r2,138
    a3a0:	20800015 	stw	r2,0(r4)
    a3a4:	00bfffc4 	movi	r2,-1
    a3a8:	f800283a 	ret

0000a3ac <_wctomb_r>:
    a3ac:	00800074 	movhi	r2,1
    a3b0:	defff904 	addi	sp,sp,-28
    a3b4:	10870704 	addi	r2,r2,7196
    a3b8:	dfc00615 	stw	ra,24(sp)
    a3bc:	dc400515 	stw	r17,20(sp)
    a3c0:	dc000415 	stw	r16,16(sp)
    a3c4:	3823883a 	mov	r17,r7
    a3c8:	14000017 	ldw	r16,0(r2)
    a3cc:	d9000115 	stw	r4,4(sp)
    a3d0:	d9400215 	stw	r5,8(sp)
    a3d4:	d9800315 	stw	r6,12(sp)
    a3d8:	0006b580 	call	6b58 <__locale_charset>
    a3dc:	d9000117 	ldw	r4,4(sp)
    a3e0:	d9400217 	ldw	r5,8(sp)
    a3e4:	d9800317 	ldw	r6,12(sp)
    a3e8:	dc400015 	stw	r17,0(sp)
    a3ec:	100f883a 	mov	r7,r2
    a3f0:	803ee83a 	callr	r16
    a3f4:	dfc00617 	ldw	ra,24(sp)
    a3f8:	dc400517 	ldw	r17,20(sp)
    a3fc:	dc000417 	ldw	r16,16(sp)
    a400:	dec00704 	addi	sp,sp,28
    a404:	f800283a 	ret

0000a408 <__udivdi3>:
    a408:	defff504 	addi	sp,sp,-44
    a40c:	dcc00415 	stw	r19,16(sp)
    a410:	dc000115 	stw	r16,4(sp)
    a414:	dfc00a15 	stw	ra,40(sp)
    a418:	df000915 	stw	fp,36(sp)
    a41c:	ddc00815 	stw	r23,32(sp)
    a420:	dd800715 	stw	r22,28(sp)
    a424:	dd400615 	stw	r21,24(sp)
    a428:	dd000515 	stw	r20,20(sp)
    a42c:	dc800315 	stw	r18,12(sp)
    a430:	dc400215 	stw	r17,8(sp)
    a434:	2027883a 	mov	r19,r4
    a438:	2821883a 	mov	r16,r5
    a43c:	3800421e 	bne	r7,zero,a548 <__udivdi3+0x140>
    a440:	3025883a 	mov	r18,r6
    a444:	2023883a 	mov	r17,r4
    a448:	2980542e 	bgeu	r5,r6,a59c <__udivdi3+0x194>
    a44c:	00bfffd4 	movui	r2,65535
    a450:	282d883a 	mov	r22,r5
    a454:	1180a836 	bltu	r2,r6,a6f8 <__udivdi3+0x2f0>
    a458:	00803fc4 	movi	r2,255
    a45c:	1181422e 	bgeu	r2,r6,a968 <__udivdi3+0x560>
    a460:	00800204 	movi	r2,8
    a464:	1007883a 	mov	r3,r2
    a468:	3084d83a 	srl	r2,r6,r2
    a46c:	01000074 	movhi	r4,1
    a470:	21000c04 	addi	r4,r4,48
    a474:	2085883a 	add	r2,r4,r2
    a478:	10800003 	ldbu	r2,0(r2)
    a47c:	10c7883a 	add	r3,r2,r3
    a480:	00800804 	movi	r2,32
    a484:	10c5c83a 	sub	r2,r2,r3
    a488:	10000526 	beq	r2,zero,a4a0 <__udivdi3+0x98>
    a48c:	80a0983a 	sll	r16,r16,r2
    a490:	98c6d83a 	srl	r3,r19,r3
    a494:	30a4983a 	sll	r18,r6,r2
    a498:	98a2983a 	sll	r17,r19,r2
    a49c:	80ecb03a 	or	r22,r16,r3
    a4a0:	902ad43a 	srli	r21,r18,16
    a4a4:	b009883a 	mov	r4,r22
    a4a8:	953fffcc 	andi	r20,r18,65535
    a4ac:	a80b883a 	mov	r5,r21
    a4b0:	00011980 	call	1198 <__umodsi3>
    a4b4:	b009883a 	mov	r4,r22
    a4b8:	a80b883a 	mov	r5,r21
    a4bc:	1027883a 	mov	r19,r2
    a4c0:	00011900 	call	1190 <__udivsi3>
    a4c4:	1021883a 	mov	r16,r2
    a4c8:	8806d43a 	srli	r3,r17,16
    a4cc:	9804943a 	slli	r2,r19,16
    a4d0:	8527383a 	mul	r19,r16,r20
    a4d4:	10c4b03a 	or	r2,r2,r3
    a4d8:	14c0052e 	bgeu	r2,r19,a4f0 <__udivdi3+0xe8>
    a4dc:	1485883a 	add	r2,r2,r18
    a4e0:	80ffffc4 	addi	r3,r16,-1
    a4e4:	14800136 	bltu	r2,r18,a4ec <__udivdi3+0xe4>
    a4e8:	14c13436 	bltu	r2,r19,a9bc <__udivdi3+0x5b4>
    a4ec:	1821883a 	mov	r16,r3
    a4f0:	14e7c83a 	sub	r19,r2,r19
    a4f4:	9809883a 	mov	r4,r19
    a4f8:	a80b883a 	mov	r5,r21
    a4fc:	00011980 	call	1198 <__umodsi3>
    a500:	102d883a 	mov	r22,r2
    a504:	9809883a 	mov	r4,r19
    a508:	a80b883a 	mov	r5,r21
    a50c:	00011900 	call	1190 <__udivsi3>
    a510:	b02c943a 	slli	r22,r22,16
    a514:	1529383a 	mul	r20,r2,r20
    a518:	8c7fffcc 	andi	r17,r17,65535
    a51c:	b462b03a 	or	r17,r22,r17
    a520:	8d00052e 	bgeu	r17,r20,a538 <__udivdi3+0x130>
    a524:	8ca3883a 	add	r17,r17,r18
    a528:	10ffffc4 	addi	r3,r2,-1
    a52c:	8c80f636 	bltu	r17,r18,a908 <__udivdi3+0x500>
    a530:	8d00f52e 	bgeu	r17,r20,a908 <__udivdi3+0x500>
    a534:	10bfff84 	addi	r2,r2,-2
    a538:	8020943a 	slli	r16,r16,16
    a53c:	0007883a 	mov	r3,zero
    a540:	1404b03a 	or	r2,r2,r16
    a544:	00005b06 	br	a6b4 <__udivdi3+0x2ac>
    a548:	29c05836 	bltu	r5,r7,a6ac <__udivdi3+0x2a4>
    a54c:	00bfffd4 	movui	r2,65535
    a550:	11c0642e 	bgeu	r2,r7,a6e4 <__udivdi3+0x2dc>
    a554:	00804034 	movhi	r2,256
    a558:	10bfffc4 	addi	r2,r2,-1
    a55c:	11c0f32e 	bgeu	r2,r7,a92c <__udivdi3+0x524>
    a560:	00c00604 	movi	r3,24
    a564:	180b883a 	mov	r5,r3
    a568:	38c6d83a 	srl	r3,r7,r3
    a56c:	00800074 	movhi	r2,1
    a570:	10800c04 	addi	r2,r2,48
    a574:	10c7883a 	add	r3,r2,r3
    a578:	18c00003 	ldbu	r3,0(r3)
    a57c:	01000804 	movi	r4,32
    a580:	1947883a 	add	r3,r3,r5
    a584:	20e5c83a 	sub	r18,r4,r3
    a588:	9000661e 	bne	r18,zero,a724 <__udivdi3+0x31c>
    a58c:	3c00f936 	bltu	r7,r16,a974 <__udivdi3+0x56c>
    a590:	9985403a 	cmpgeu	r2,r19,r6
    a594:	0007883a 	mov	r3,zero
    a598:	00004606 	br	a6b4 <__udivdi3+0x2ac>
    a59c:	3000041e 	bne	r6,zero,a5b0 <__udivdi3+0x1a8>
    a5a0:	01000044 	movi	r4,1
    a5a4:	000b883a 	mov	r5,zero
    a5a8:	00011900 	call	1190 <__udivsi3>
    a5ac:	1025883a 	mov	r18,r2
    a5b0:	00bfffd4 	movui	r2,65535
    a5b4:	1480562e 	bgeu	r2,r18,a710 <__udivdi3+0x308>
    a5b8:	00804034 	movhi	r2,256
    a5bc:	10bfffc4 	addi	r2,r2,-1
    a5c0:	1480e32e 	bgeu	r2,r18,a950 <__udivdi3+0x548>
    a5c4:	00800604 	movi	r2,24
    a5c8:	1007883a 	mov	r3,r2
    a5cc:	9084d83a 	srl	r2,r18,r2
    a5d0:	01000074 	movhi	r4,1
    a5d4:	21000c04 	addi	r4,r4,48
    a5d8:	2085883a 	add	r2,r4,r2
    a5dc:	10800003 	ldbu	r2,0(r2)
    a5e0:	10c5883a 	add	r2,r2,r3
    a5e4:	00c00804 	movi	r3,32
    a5e8:	1887c83a 	sub	r3,r3,r2
    a5ec:	1800911e 	bne	r3,zero,a834 <__udivdi3+0x42c>
    a5f0:	9028d43a 	srli	r20,r18,16
    a5f4:	84a1c83a 	sub	r16,r16,r18
    a5f8:	957fffcc 	andi	r21,r18,65535
    a5fc:	00c00044 	movi	r3,1
    a600:	8009883a 	mov	r4,r16
    a604:	a00b883a 	mov	r5,r20
    a608:	d8c00015 	stw	r3,0(sp)
    a60c:	00011980 	call	1198 <__umodsi3>
    a610:	8009883a 	mov	r4,r16
    a614:	a00b883a 	mov	r5,r20
    a618:	1027883a 	mov	r19,r2
    a61c:	00011900 	call	1190 <__udivsi3>
    a620:	1021883a 	mov	r16,r2
    a624:	880cd43a 	srli	r6,r17,16
    a628:	9804943a 	slli	r2,r19,16
    a62c:	8567383a 	mul	r19,r16,r21
    a630:	d8c00017 	ldw	r3,0(sp)
    a634:	1188b03a 	or	r4,r2,r6
    a638:	24c0052e 	bgeu	r4,r19,a650 <__udivdi3+0x248>
    a63c:	2489883a 	add	r4,r4,r18
    a640:	80bfffc4 	addi	r2,r16,-1
    a644:	24800136 	bltu	r4,r18,a64c <__udivdi3+0x244>
    a648:	24c0d936 	bltu	r4,r19,a9b0 <__udivdi3+0x5a8>
    a64c:	1021883a 	mov	r16,r2
    a650:	24e7c83a 	sub	r19,r4,r19
    a654:	9809883a 	mov	r4,r19
    a658:	a00b883a 	mov	r5,r20
    a65c:	d8c00015 	stw	r3,0(sp)
    a660:	00011980 	call	1198 <__umodsi3>
    a664:	102d883a 	mov	r22,r2
    a668:	9809883a 	mov	r4,r19
    a66c:	a00b883a 	mov	r5,r20
    a670:	00011900 	call	1190 <__udivsi3>
    a674:	b02c943a 	slli	r22,r22,16
    a678:	156b383a 	mul	r21,r2,r21
    a67c:	8c7fffcc 	andi	r17,r17,65535
    a680:	b462b03a 	or	r17,r22,r17
    a684:	d8c00017 	ldw	r3,0(sp)
    a688:	8d40052e 	bgeu	r17,r21,a6a0 <__udivdi3+0x298>
    a68c:	8ca3883a 	add	r17,r17,r18
    a690:	113fffc4 	addi	r4,r2,-1
    a694:	8c809a36 	bltu	r17,r18,a900 <__udivdi3+0x4f8>
    a698:	8d40992e 	bgeu	r17,r21,a900 <__udivdi3+0x4f8>
    a69c:	10bfff84 	addi	r2,r2,-2
    a6a0:	8020943a 	slli	r16,r16,16
    a6a4:	1404b03a 	or	r2,r2,r16
    a6a8:	00000206 	br	a6b4 <__udivdi3+0x2ac>
    a6ac:	0007883a 	mov	r3,zero
    a6b0:	0005883a 	mov	r2,zero
    a6b4:	dfc00a17 	ldw	ra,40(sp)
    a6b8:	df000917 	ldw	fp,36(sp)
    a6bc:	ddc00817 	ldw	r23,32(sp)
    a6c0:	dd800717 	ldw	r22,28(sp)
    a6c4:	dd400617 	ldw	r21,24(sp)
    a6c8:	dd000517 	ldw	r20,20(sp)
    a6cc:	dcc00417 	ldw	r19,16(sp)
    a6d0:	dc800317 	ldw	r18,12(sp)
    a6d4:	dc400217 	ldw	r17,8(sp)
    a6d8:	dc000117 	ldw	r16,4(sp)
    a6dc:	dec00b04 	addi	sp,sp,44
    a6e0:	f800283a 	ret
    a6e4:	00803fc4 	movi	r2,255
    a6e8:	11c0932e 	bgeu	r2,r7,a938 <__udivdi3+0x530>
    a6ec:	00c00204 	movi	r3,8
    a6f0:	180b883a 	mov	r5,r3
    a6f4:	003f9c06 	br	a568 <__udivdi3+0x160>
    a6f8:	00804034 	movhi	r2,256
    a6fc:	10bfffc4 	addi	r2,r2,-1
    a700:	1180902e 	bgeu	r2,r6,a944 <__udivdi3+0x53c>
    a704:	00800604 	movi	r2,24
    a708:	1007883a 	mov	r3,r2
    a70c:	003f5606 	br	a468 <__udivdi3+0x60>
    a710:	00803fc4 	movi	r2,255
    a714:	1480912e 	bgeu	r2,r18,a95c <__udivdi3+0x554>
    a718:	00800204 	movi	r2,8
    a71c:	1007883a 	mov	r3,r2
    a720:	003faa06 	br	a5cc <__udivdi3+0x1c4>
    a724:	30eed83a 	srl	r23,r6,r3
    a728:	3c8e983a 	sll	r7,r7,r18
    a72c:	80f8d83a 	srl	fp,r16,r3
    a730:	98c6d83a 	srl	r3,r19,r3
    a734:	3deeb03a 	or	r23,r7,r23
    a738:	b828d43a 	srli	r20,r23,16
    a73c:	84a0983a 	sll	r16,r16,r18
    a740:	e009883a 	mov	r4,fp
    a744:	a00b883a 	mov	r5,r20
    a748:	80e2b03a 	or	r17,r16,r3
    a74c:	34aa983a 	sll	r21,r6,r18
    a750:	00011980 	call	1198 <__umodsi3>
    a754:	e009883a 	mov	r4,fp
    a758:	a00b883a 	mov	r5,r20
    a75c:	102d883a 	mov	r22,r2
    a760:	00011900 	call	1190 <__udivsi3>
    a764:	1021883a 	mov	r16,r2
    a768:	bf3fffcc 	andi	fp,r23,65535
    a76c:	b004943a 	slli	r2,r22,16
    a770:	8808d43a 	srli	r4,r17,16
    a774:	872d383a 	mul	r22,r16,fp
    a778:	1104b03a 	or	r2,r2,r4
    a77c:	1580042e 	bgeu	r2,r22,a790 <__udivdi3+0x388>
    a780:	15c5883a 	add	r2,r2,r23
    a784:	80ffffc4 	addi	r3,r16,-1
    a788:	15c0812e 	bgeu	r2,r23,a990 <__udivdi3+0x588>
    a78c:	1821883a 	mov	r16,r3
    a790:	15adc83a 	sub	r22,r2,r22
    a794:	b009883a 	mov	r4,r22
    a798:	a00b883a 	mov	r5,r20
    a79c:	00011980 	call	1198 <__umodsi3>
    a7a0:	a00b883a 	mov	r5,r20
    a7a4:	b009883a 	mov	r4,r22
    a7a8:	d8800015 	stw	r2,0(sp)
    a7ac:	00011900 	call	1190 <__udivsi3>
    a7b0:	d8c00017 	ldw	r3,0(sp)
    a7b4:	170b383a 	mul	r5,r2,fp
    a7b8:	8c7fffcc 	andi	r17,r17,65535
    a7bc:	1806943a 	slli	r3,r3,16
    a7c0:	1c46b03a 	or	r3,r3,r17
    a7c4:	1940042e 	bgeu	r3,r5,a7d8 <__udivdi3+0x3d0>
    a7c8:	1dc7883a 	add	r3,r3,r23
    a7cc:	113fffc4 	addi	r4,r2,-1
    a7d0:	1dc06b2e 	bgeu	r3,r23,a980 <__udivdi3+0x578>
    a7d4:	2005883a 	mov	r2,r4
    a7d8:	8020943a 	slli	r16,r16,16
    a7dc:	a9ffffcc 	andi	r7,r21,65535
    a7e0:	a82ad43a 	srli	r21,r21,16
    a7e4:	1404b03a 	or	r2,r2,r16
    a7e8:	113fffcc 	andi	r4,r2,65535
    a7ec:	100cd43a 	srli	r6,r2,16
    a7f0:	21d3383a 	mul	r9,r4,r7
    a7f4:	2549383a 	mul	r4,r4,r21
    a7f8:	31cf383a 	mul	r7,r6,r7
    a7fc:	4810d43a 	srli	r8,r9,16
    a800:	1947c83a 	sub	r3,r3,r5
    a804:	3909883a 	add	r4,r7,r4
    a808:	2209883a 	add	r4,r4,r8
    a80c:	354d383a 	mul	r6,r6,r21
    a810:	21c0022e 	bgeu	r4,r7,a81c <__udivdi3+0x414>
    a814:	01400074 	movhi	r5,1
    a818:	314d883a 	add	r6,r6,r5
    a81c:	202ad43a 	srli	r21,r4,16
    a820:	354d883a 	add	r6,r6,r21
    a824:	19803f36 	bltu	r3,r6,a924 <__udivdi3+0x51c>
    a828:	19803926 	beq	r3,r6,a910 <__udivdi3+0x508>
    a82c:	0007883a 	mov	r3,zero
    a830:	003fa006 	br	a6b4 <__udivdi3+0x2ac>
    a834:	90e4983a 	sll	r18,r18,r3
    a838:	80aad83a 	srl	r21,r16,r2
    a83c:	80e0983a 	sll	r16,r16,r3
    a840:	9028d43a 	srli	r20,r18,16
    a844:	9884d83a 	srl	r2,r19,r2
    a848:	a809883a 	mov	r4,r21
    a84c:	a00b883a 	mov	r5,r20
    a850:	80acb03a 	or	r22,r16,r2
    a854:	98e2983a 	sll	r17,r19,r3
    a858:	00011980 	call	1198 <__umodsi3>
    a85c:	a809883a 	mov	r4,r21
    a860:	a00b883a 	mov	r5,r20
    a864:	1021883a 	mov	r16,r2
    a868:	00011900 	call	1190 <__udivsi3>
    a86c:	957fffcc 	andi	r21,r18,65535
    a870:	8020943a 	slli	r16,r16,16
    a874:	b00ad43a 	srli	r5,r22,16
    a878:	1567383a 	mul	r19,r2,r21
    a87c:	102f883a 	mov	r23,r2
    a880:	8148b03a 	or	r4,r16,r5
    a884:	24c0062e 	bgeu	r4,r19,a8a0 <__udivdi3+0x498>
    a888:	2489883a 	add	r4,r4,r18
    a88c:	10bfffc4 	addi	r2,r2,-1
    a890:	24804536 	bltu	r4,r18,a9a8 <__udivdi3+0x5a0>
    a894:	24c0442e 	bgeu	r4,r19,a9a8 <__udivdi3+0x5a0>
    a898:	bdffff84 	addi	r23,r23,-2
    a89c:	2489883a 	add	r4,r4,r18
    a8a0:	24e7c83a 	sub	r19,r4,r19
    a8a4:	9809883a 	mov	r4,r19
    a8a8:	a00b883a 	mov	r5,r20
    a8ac:	00011980 	call	1198 <__umodsi3>
    a8b0:	1021883a 	mov	r16,r2
    a8b4:	9809883a 	mov	r4,r19
    a8b8:	a00b883a 	mov	r5,r20
    a8bc:	00011900 	call	1190 <__udivsi3>
    a8c0:	8020943a 	slli	r16,r16,16
    a8c4:	1007883a 	mov	r3,r2
    a8c8:	1545383a 	mul	r2,r2,r21
    a8cc:	b13fffcc 	andi	r4,r22,65535
    a8d0:	8108b03a 	or	r4,r16,r4
    a8d4:	2080062e 	bgeu	r4,r2,a8f0 <__udivdi3+0x4e8>
    a8d8:	2489883a 	add	r4,r4,r18
    a8dc:	197fffc4 	addi	r5,r3,-1
    a8e0:	24802f36 	bltu	r4,r18,a9a0 <__udivdi3+0x598>
    a8e4:	20802e2e 	bgeu	r4,r2,a9a0 <__udivdi3+0x598>
    a8e8:	18ffff84 	addi	r3,r3,-2
    a8ec:	2489883a 	add	r4,r4,r18
    a8f0:	b82e943a 	slli	r23,r23,16
    a8f4:	20a1c83a 	sub	r16,r4,r2
    a8f8:	1dc6b03a 	or	r3,r3,r23
    a8fc:	003f4006 	br	a600 <__udivdi3+0x1f8>
    a900:	2005883a 	mov	r2,r4
    a904:	003f6606 	br	a6a0 <__udivdi3+0x298>
    a908:	1805883a 	mov	r2,r3
    a90c:	003f0a06 	br	a538 <__udivdi3+0x130>
    a910:	2006943a 	slli	r3,r4,16
    a914:	9c88983a 	sll	r4,r19,r18
    a918:	4a7fffcc 	andi	r9,r9,65535
    a91c:	1a47883a 	add	r3,r3,r9
    a920:	20ffc22e 	bgeu	r4,r3,a82c <__udivdi3+0x424>
    a924:	10bfffc4 	addi	r2,r2,-1
    a928:	003fc006 	br	a82c <__udivdi3+0x424>
    a92c:	00c00404 	movi	r3,16
    a930:	180b883a 	mov	r5,r3
    a934:	003f0c06 	br	a568 <__udivdi3+0x160>
    a938:	0007883a 	mov	r3,zero
    a93c:	000b883a 	mov	r5,zero
    a940:	003f0906 	br	a568 <__udivdi3+0x160>
    a944:	00800404 	movi	r2,16
    a948:	1007883a 	mov	r3,r2
    a94c:	003ec606 	br	a468 <__udivdi3+0x60>
    a950:	00800404 	movi	r2,16
    a954:	1007883a 	mov	r3,r2
    a958:	003f1c06 	br	a5cc <__udivdi3+0x1c4>
    a95c:	0005883a 	mov	r2,zero
    a960:	0007883a 	mov	r3,zero
    a964:	003f1906 	br	a5cc <__udivdi3+0x1c4>
    a968:	0005883a 	mov	r2,zero
    a96c:	0007883a 	mov	r3,zero
    a970:	003ebd06 	br	a468 <__udivdi3+0x60>
    a974:	0007883a 	mov	r3,zero
    a978:	00800044 	movi	r2,1
    a97c:	003f4d06 	br	a6b4 <__udivdi3+0x2ac>
    a980:	197f942e 	bgeu	r3,r5,a7d4 <__udivdi3+0x3cc>
    a984:	10bfff84 	addi	r2,r2,-2
    a988:	1dc7883a 	add	r3,r3,r23
    a98c:	003f9206 	br	a7d8 <__udivdi3+0x3d0>
    a990:	15bf7e2e 	bgeu	r2,r22,a78c <__udivdi3+0x384>
    a994:	843fff84 	addi	r16,r16,-2
    a998:	15c5883a 	add	r2,r2,r23
    a99c:	003f7c06 	br	a790 <__udivdi3+0x388>
    a9a0:	2807883a 	mov	r3,r5
    a9a4:	003fd206 	br	a8f0 <__udivdi3+0x4e8>
    a9a8:	102f883a 	mov	r23,r2
    a9ac:	003fbc06 	br	a8a0 <__udivdi3+0x498>
    a9b0:	843fff84 	addi	r16,r16,-2
    a9b4:	2489883a 	add	r4,r4,r18
    a9b8:	003f2506 	br	a650 <__udivdi3+0x248>
    a9bc:	843fff84 	addi	r16,r16,-2
    a9c0:	1485883a 	add	r2,r2,r18
    a9c4:	003eca06 	br	a4f0 <__udivdi3+0xe8>

0000a9c8 <__umoddi3>:
    a9c8:	defff404 	addi	sp,sp,-48
    a9cc:	ddc00915 	stw	r23,36(sp)
    a9d0:	dc400315 	stw	r17,12(sp)
    a9d4:	dc000215 	stw	r16,8(sp)
    a9d8:	dfc00b15 	stw	ra,44(sp)
    a9dc:	df000a15 	stw	fp,40(sp)
    a9e0:	dd800815 	stw	r22,32(sp)
    a9e4:	dd400715 	stw	r21,28(sp)
    a9e8:	dd000615 	stw	r20,24(sp)
    a9ec:	dcc00515 	stw	r19,20(sp)
    a9f0:	dc800415 	stw	r18,16(sp)
    a9f4:	2021883a 	mov	r16,r4
    a9f8:	2823883a 	mov	r17,r5
    a9fc:	282f883a 	mov	r23,r5
    aa00:	3800381e 	bne	r7,zero,aae4 <__umoddi3+0x11c>
    aa04:	3027883a 	mov	r19,r6
    aa08:	2029883a 	mov	r20,r4
    aa0c:	29804e2e 	bgeu	r5,r6,ab48 <__umoddi3+0x180>
    aa10:	00bfffd4 	movui	r2,65535
    aa14:	11809c36 	bltu	r2,r6,ac88 <__umoddi3+0x2c0>
    aa18:	00803fc4 	movi	r2,255
    aa1c:	11813b2e 	bgeu	r2,r6,af0c <__umoddi3+0x544>
    aa20:	01400204 	movi	r5,8
    aa24:	2805883a 	mov	r2,r5
    aa28:	314ad83a 	srl	r5,r6,r5
    aa2c:	00c00074 	movhi	r3,1
    aa30:	18c00c04 	addi	r3,r3,48
    aa34:	194b883a 	add	r5,r3,r5
    aa38:	29000003 	ldbu	r4,0(r5)
    aa3c:	2089883a 	add	r4,r4,r2
    aa40:	00800804 	movi	r2,32
    aa44:	1105c83a 	sub	r2,r2,r4
    aa48:	1000ec26 	beq	r2,zero,adfc <__umoddi3+0x434>
    aa4c:	88a2983a 	sll	r17,r17,r2
    aa50:	8108d83a 	srl	r4,r16,r4
    aa54:	30a6983a 	sll	r19,r6,r2
    aa58:	80a8983a 	sll	r20,r16,r2
    aa5c:	1025883a 	mov	r18,r2
    aa60:	892eb03a 	or	r23,r17,r4
    aa64:	982cd43a 	srli	r22,r19,16
    aa68:	b809883a 	mov	r4,r23
    aa6c:	9d7fffcc 	andi	r21,r19,65535
    aa70:	b00b883a 	mov	r5,r22
    aa74:	00011980 	call	1198 <__umodsi3>
    aa78:	b809883a 	mov	r4,r23
    aa7c:	b00b883a 	mov	r5,r22
    aa80:	1021883a 	mov	r16,r2
    aa84:	00011900 	call	1190 <__udivsi3>
    aa88:	8020943a 	slli	r16,r16,16
    aa8c:	a00cd43a 	srli	r6,r20,16
    aa90:	1545383a 	mul	r2,r2,r21
    aa94:	8188b03a 	or	r4,r16,r6
    aa98:	2080042e 	bgeu	r4,r2,aaac <__umoddi3+0xe4>
    aa9c:	24c9883a 	add	r4,r4,r19
    aaa0:	24c00236 	bltu	r4,r19,aaac <__umoddi3+0xe4>
    aaa4:	2080012e 	bgeu	r4,r2,aaac <__umoddi3+0xe4>
    aaa8:	24c9883a 	add	r4,r4,r19
    aaac:	20a3c83a 	sub	r17,r4,r2
    aab0:	8809883a 	mov	r4,r17
    aab4:	b00b883a 	mov	r5,r22
    aab8:	00011980 	call	1198 <__umodsi3>
    aabc:	8809883a 	mov	r4,r17
    aac0:	b00b883a 	mov	r5,r22
    aac4:	1021883a 	mov	r16,r2
    aac8:	00011900 	call	1190 <__udivsi3>
    aacc:	8006943a 	slli	r3,r16,16
    aad0:	1545383a 	mul	r2,r2,r21
    aad4:	a13fffcc 	andi	r4,r20,65535
    aad8:	1906b03a 	or	r3,r3,r4
    aadc:	1880532e 	bgeu	r3,r2,ac2c <__umoddi3+0x264>
    aae0:	00004e06 	br	ac1c <__umoddi3+0x254>
    aae4:	29c05536 	bltu	r5,r7,ac3c <__umoddi3+0x274>
    aae8:	00bfffd4 	movui	r2,65535
    aaec:	11c0612e 	bgeu	r2,r7,ac74 <__umoddi3+0x2ac>
    aaf0:	00804034 	movhi	r2,256
    aaf4:	10bfffc4 	addi	r2,r2,-1
    aaf8:	11c0f82e 	bgeu	r2,r7,aedc <__umoddi3+0x514>
    aafc:	01400604 	movi	r5,24
    ab00:	282b883a 	mov	r21,r5
    ab04:	394ad83a 	srl	r5,r7,r5
    ab08:	00c00074 	movhi	r3,1
    ab0c:	18c00c04 	addi	r3,r3,48
    ab10:	194b883a 	add	r5,r3,r5
    ab14:	28800003 	ldbu	r2,0(r5)
    ab18:	00c00804 	movi	r3,32
    ab1c:	156b883a 	add	r21,r2,r21
    ab20:	1d69c83a 	sub	r20,r3,r21
    ab24:	a000631e 	bne	r20,zero,acb4 <__umoddi3+0x2ec>
    ab28:	3c400136 	bltu	r7,r17,ab30 <__umoddi3+0x168>
    ab2c:	81810436 	bltu	r16,r6,af40 <__umoddi3+0x578>
    ab30:	8185c83a 	sub	r2,r16,r6
    ab34:	89e3c83a 	sub	r17,r17,r7
    ab38:	8087803a 	cmpltu	r3,r16,r2
    ab3c:	88efc83a 	sub	r23,r17,r3
    ab40:	b807883a 	mov	r3,r23
    ab44:	00003f06 	br	ac44 <__umoddi3+0x27c>
    ab48:	3000041e 	bne	r6,zero,ab5c <__umoddi3+0x194>
    ab4c:	01000044 	movi	r4,1
    ab50:	000b883a 	mov	r5,zero
    ab54:	00011900 	call	1190 <__udivsi3>
    ab58:	1027883a 	mov	r19,r2
    ab5c:	00bfffd4 	movui	r2,65535
    ab60:	14c04f2e 	bgeu	r2,r19,aca0 <__umoddi3+0x2d8>
    ab64:	00804034 	movhi	r2,256
    ab68:	10bfffc4 	addi	r2,r2,-1
    ab6c:	14c0e42e 	bgeu	r2,r19,af00 <__umoddi3+0x538>
    ab70:	00800604 	movi	r2,24
    ab74:	1007883a 	mov	r3,r2
    ab78:	9884d83a 	srl	r2,r19,r2
    ab7c:	01000074 	movhi	r4,1
    ab80:	21000c04 	addi	r4,r4,48
    ab84:	2085883a 	add	r2,r4,r2
    ab88:	11000003 	ldbu	r4,0(r2)
    ab8c:	00800804 	movi	r2,32
    ab90:	20c7883a 	add	r3,r4,r3
    ab94:	10c5c83a 	sub	r2,r2,r3
    ab98:	10009a1e 	bne	r2,zero,ae04 <__umoddi3+0x43c>
    ab9c:	982cd43a 	srli	r22,r19,16
    aba0:	8ce3c83a 	sub	r17,r17,r19
    aba4:	9c3fffcc 	andi	r16,r19,65535
    aba8:	0025883a 	mov	r18,zero
    abac:	8809883a 	mov	r4,r17
    abb0:	b00b883a 	mov	r5,r22
    abb4:	00011980 	call	1198 <__umodsi3>
    abb8:	8809883a 	mov	r4,r17
    abbc:	b00b883a 	mov	r5,r22
    abc0:	102b883a 	mov	r21,r2
    abc4:	00011900 	call	1190 <__udivsi3>
    abc8:	a806943a 	slli	r3,r21,16
    abcc:	a008d43a 	srli	r4,r20,16
    abd0:	1405383a 	mul	r2,r2,r16
    abd4:	190cb03a 	or	r6,r3,r4
    abd8:	3080032e 	bgeu	r6,r2,abe8 <__umoddi3+0x220>
    abdc:	34cd883a 	add	r6,r6,r19
    abe0:	34c00136 	bltu	r6,r19,abe8 <__umoddi3+0x220>
    abe4:	3080d436 	bltu	r6,r2,af38 <__umoddi3+0x570>
    abe8:	30abc83a 	sub	r21,r6,r2
    abec:	a809883a 	mov	r4,r21
    abf0:	b00b883a 	mov	r5,r22
    abf4:	00011980 	call	1198 <__umodsi3>
    abf8:	1023883a 	mov	r17,r2
    abfc:	a809883a 	mov	r4,r21
    ac00:	b00b883a 	mov	r5,r22
    ac04:	00011900 	call	1190 <__udivsi3>
    ac08:	8822943a 	slli	r17,r17,16
    ac0c:	1405383a 	mul	r2,r2,r16
    ac10:	a13fffcc 	andi	r4,r20,65535
    ac14:	8906b03a 	or	r3,r17,r4
    ac18:	1880042e 	bgeu	r3,r2,ac2c <__umoddi3+0x264>
    ac1c:	1cc7883a 	add	r3,r3,r19
    ac20:	1cc00236 	bltu	r3,r19,ac2c <__umoddi3+0x264>
    ac24:	1880012e 	bgeu	r3,r2,ac2c <__umoddi3+0x264>
    ac28:	1cc7883a 	add	r3,r3,r19
    ac2c:	1887c83a 	sub	r3,r3,r2
    ac30:	1c84d83a 	srl	r2,r3,r18
    ac34:	0007883a 	mov	r3,zero
    ac38:	00000206 	br	ac44 <__umoddi3+0x27c>
    ac3c:	2005883a 	mov	r2,r4
    ac40:	2807883a 	mov	r3,r5
    ac44:	dfc00b17 	ldw	ra,44(sp)
    ac48:	df000a17 	ldw	fp,40(sp)
    ac4c:	ddc00917 	ldw	r23,36(sp)
    ac50:	dd800817 	ldw	r22,32(sp)
    ac54:	dd400717 	ldw	r21,28(sp)
    ac58:	dd000617 	ldw	r20,24(sp)
    ac5c:	dcc00517 	ldw	r19,20(sp)
    ac60:	dc800417 	ldw	r18,16(sp)
    ac64:	dc400317 	ldw	r17,12(sp)
    ac68:	dc000217 	ldw	r16,8(sp)
    ac6c:	dec00c04 	addi	sp,sp,48
    ac70:	f800283a 	ret
    ac74:	00803fc4 	movi	r2,255
    ac78:	11c0952e 	bgeu	r2,r7,aed0 <__umoddi3+0x508>
    ac7c:	01400204 	movi	r5,8
    ac80:	282b883a 	mov	r21,r5
    ac84:	003f9f06 	br	ab04 <__umoddi3+0x13c>
    ac88:	00804034 	movhi	r2,256
    ac8c:	10bfffc4 	addi	r2,r2,-1
    ac90:	1180952e 	bgeu	r2,r6,aee8 <__umoddi3+0x520>
    ac94:	01400604 	movi	r5,24
    ac98:	2805883a 	mov	r2,r5
    ac9c:	003f6206 	br	aa28 <__umoddi3+0x60>
    aca0:	00803fc4 	movi	r2,255
    aca4:	14c0932e 	bgeu	r2,r19,aef4 <__umoddi3+0x52c>
    aca8:	00800204 	movi	r2,8
    acac:	1007883a 	mov	r3,r2
    acb0:	003fb106 	br	ab78 <__umoddi3+0x1b0>
    acb4:	3548d83a 	srl	r4,r6,r21
    acb8:	3d0e983a 	sll	r7,r7,r20
    acbc:	8d10983a 	sll	r8,r17,r20
    acc0:	8d6cd83a 	srl	r22,r17,r21
    acc4:	3922b03a 	or	r17,r7,r4
    acc8:	882ed43a 	srli	r23,r17,16
    accc:	8564d83a 	srl	r18,r16,r21
    acd0:	b009883a 	mov	r4,r22
    acd4:	b80b883a 	mov	r5,r23
    acd8:	44a4b03a 	or	r18,r8,r18
    acdc:	3526983a 	sll	r19,r6,r20
    ace0:	00011980 	call	1198 <__umodsi3>
    ace4:	b009883a 	mov	r4,r22
    ace8:	b80b883a 	mov	r5,r23
    acec:	1039883a 	mov	fp,r2
    acf0:	00011900 	call	1190 <__udivsi3>
    acf4:	102d883a 	mov	r22,r2
    acf8:	8a3fffcc 	andi	r8,r17,65535
    acfc:	e004943a 	slli	r2,fp,16
    ad00:	900cd43a 	srli	r6,r18,16
    ad04:	b239383a 	mul	fp,r22,r8
    ad08:	8520983a 	sll	r16,r16,r20
    ad0c:	118ab03a 	or	r5,r2,r6
    ad10:	2f00042e 	bgeu	r5,fp,ad24 <__umoddi3+0x35c>
    ad14:	2c4b883a 	add	r5,r5,r17
    ad18:	b0bfffc4 	addi	r2,r22,-1
    ad1c:	2c40822e 	bgeu	r5,r17,af28 <__umoddi3+0x560>
    ad20:	102d883a 	mov	r22,r2
    ad24:	2f39c83a 	sub	fp,r5,fp
    ad28:	e009883a 	mov	r4,fp
    ad2c:	b80b883a 	mov	r5,r23
    ad30:	da000115 	stw	r8,4(sp)
    ad34:	00011980 	call	1198 <__umodsi3>
    ad38:	e009883a 	mov	r4,fp
    ad3c:	b80b883a 	mov	r5,r23
    ad40:	d8800015 	stw	r2,0(sp)
    ad44:	00011900 	call	1190 <__udivsi3>
    ad48:	d9800017 	ldw	r6,0(sp)
    ad4c:	da000117 	ldw	r8,4(sp)
    ad50:	94bfffcc 	andi	r18,r18,65535
    ad54:	300c943a 	slli	r6,r6,16
    ad58:	1209383a 	mul	r4,r2,r8
    ad5c:	3490b03a 	or	r8,r6,r18
    ad60:	4100042e 	bgeu	r8,r4,ad74 <__umoddi3+0x3ac>
    ad64:	4451883a 	add	r8,r8,r17
    ad68:	10ffffc4 	addi	r3,r2,-1
    ad6c:	44406a2e 	bgeu	r8,r17,af18 <__umoddi3+0x550>
    ad70:	1805883a 	mov	r2,r3
    ad74:	b012943a 	slli	r9,r22,16
    ad78:	9abfffcc 	andi	r10,r19,65535
    ad7c:	980ed43a 	srli	r7,r19,16
    ad80:	124ab03a 	or	r5,r2,r9
    ad84:	2a7fffcc 	andi	r9,r5,65535
    ad88:	280ad43a 	srli	r5,r5,16
    ad8c:	4a8d383a 	mul	r6,r9,r10
    ad90:	49d3383a 	mul	r9,r9,r7
    ad94:	2a95383a 	mul	r10,r5,r10
    ad98:	3004d43a 	srli	r2,r6,16
    ad9c:	4111c83a 	sub	r8,r8,r4
    ada0:	5253883a 	add	r9,r10,r9
    ada4:	4893883a 	add	r9,r9,r2
    ada8:	29cb383a 	mul	r5,r5,r7
    adac:	4a80022e 	bgeu	r9,r10,adb8 <__umoddi3+0x3f0>
    adb0:	00800074 	movhi	r2,1
    adb4:	288b883a 	add	r5,r5,r2
    adb8:	4808d43a 	srli	r4,r9,16
    adbc:	4812943a 	slli	r9,r9,16
    adc0:	31bfffcc 	andi	r6,r6,65535
    adc4:	290b883a 	add	r5,r5,r4
    adc8:	498d883a 	add	r6,r9,r6
    adcc:	41403a36 	bltu	r8,r5,aeb8 <__umoddi3+0x4f0>
    add0:	41405d26 	beq	r8,r5,af48 <__umoddi3+0x580>
    add4:	4149c83a 	sub	r4,r8,r5
    add8:	300f883a 	mov	r7,r6
    addc:	81cfc83a 	sub	r7,r16,r7
    ade0:	81c7803a 	cmpltu	r3,r16,r7
    ade4:	20c7c83a 	sub	r3,r4,r3
    ade8:	1d44983a 	sll	r2,r3,r21
    adec:	3d0ed83a 	srl	r7,r7,r20
    adf0:	1d06d83a 	srl	r3,r3,r20
    adf4:	11c4b03a 	or	r2,r2,r7
    adf8:	003f9206 	br	ac44 <__umoddi3+0x27c>
    adfc:	0025883a 	mov	r18,zero
    ae00:	003f1806 	br	aa64 <__umoddi3+0x9c>
    ae04:	98a6983a 	sll	r19,r19,r2
    ae08:	88e8d83a 	srl	r20,r17,r3
    ae0c:	80c6d83a 	srl	r3,r16,r3
    ae10:	982cd43a 	srli	r22,r19,16
    ae14:	88a2983a 	sll	r17,r17,r2
    ae18:	a009883a 	mov	r4,r20
    ae1c:	b00b883a 	mov	r5,r22
    ae20:	88eab03a 	or	r21,r17,r3
    ae24:	1025883a 	mov	r18,r2
    ae28:	00011980 	call	1198 <__umodsi3>
    ae2c:	a009883a 	mov	r4,r20
    ae30:	b00b883a 	mov	r5,r22
    ae34:	1023883a 	mov	r17,r2
    ae38:	00011900 	call	1190 <__udivsi3>
    ae3c:	9f3fffcc 	andi	fp,r19,65535
    ae40:	8822943a 	slli	r17,r17,16
    ae44:	a80ad43a 	srli	r5,r21,16
    ae48:	1705383a 	mul	r2,r2,fp
    ae4c:	84a8983a 	sll	r20,r16,r18
    ae50:	8948b03a 	or	r4,r17,r5
    ae54:	2080042e 	bgeu	r4,r2,ae68 <__umoddi3+0x4a0>
    ae58:	24c9883a 	add	r4,r4,r19
    ae5c:	24c00236 	bltu	r4,r19,ae68 <__umoddi3+0x4a0>
    ae60:	2080012e 	bgeu	r4,r2,ae68 <__umoddi3+0x4a0>
    ae64:	24c9883a 	add	r4,r4,r19
    ae68:	20afc83a 	sub	r23,r4,r2
    ae6c:	b809883a 	mov	r4,r23
    ae70:	b00b883a 	mov	r5,r22
    ae74:	00011980 	call	1198 <__umodsi3>
    ae78:	1023883a 	mov	r17,r2
    ae7c:	b809883a 	mov	r4,r23
    ae80:	b00b883a 	mov	r5,r22
    ae84:	00011900 	call	1190 <__udivsi3>
    ae88:	8822943a 	slli	r17,r17,16
    ae8c:	1705383a 	mul	r2,r2,fp
    ae90:	a93fffcc 	andi	r4,r21,65535
    ae94:	8908b03a 	or	r4,r17,r4
    ae98:	2080042e 	bgeu	r4,r2,aeac <__umoddi3+0x4e4>
    ae9c:	24c9883a 	add	r4,r4,r19
    aea0:	24c00236 	bltu	r4,r19,aeac <__umoddi3+0x4e4>
    aea4:	2080012e 	bgeu	r4,r2,aeac <__umoddi3+0x4e4>
    aea8:	24c9883a 	add	r4,r4,r19
    aeac:	20a3c83a 	sub	r17,r4,r2
    aeb0:	e021883a 	mov	r16,fp
    aeb4:	003f3d06 	br	abac <__umoddi3+0x1e4>
    aeb8:	34cfc83a 	sub	r7,r6,r19
    aebc:	2c4bc83a 	sub	r5,r5,r17
    aec0:	31cd803a 	cmpltu	r6,r6,r7
    aec4:	298dc83a 	sub	r6,r5,r6
    aec8:	4189c83a 	sub	r4,r8,r6
    aecc:	003fc306 	br	addc <__umoddi3+0x414>
    aed0:	000b883a 	mov	r5,zero
    aed4:	002b883a 	mov	r21,zero
    aed8:	003f0a06 	br	ab04 <__umoddi3+0x13c>
    aedc:	01400404 	movi	r5,16
    aee0:	282b883a 	mov	r21,r5
    aee4:	003f0706 	br	ab04 <__umoddi3+0x13c>
    aee8:	01400404 	movi	r5,16
    aeec:	2805883a 	mov	r2,r5
    aef0:	003ecd06 	br	aa28 <__umoddi3+0x60>
    aef4:	0005883a 	mov	r2,zero
    aef8:	0007883a 	mov	r3,zero
    aefc:	003f1e06 	br	ab78 <__umoddi3+0x1b0>
    af00:	00800404 	movi	r2,16
    af04:	1007883a 	mov	r3,r2
    af08:	003f1b06 	br	ab78 <__umoddi3+0x1b0>
    af0c:	000b883a 	mov	r5,zero
    af10:	0005883a 	mov	r2,zero
    af14:	003ec406 	br	aa28 <__umoddi3+0x60>
    af18:	413f952e 	bgeu	r8,r4,ad70 <__umoddi3+0x3a8>
    af1c:	10bfff84 	addi	r2,r2,-2
    af20:	4451883a 	add	r8,r8,r17
    af24:	003f9306 	br	ad74 <__umoddi3+0x3ac>
    af28:	2f3f7d2e 	bgeu	r5,fp,ad20 <__umoddi3+0x358>
    af2c:	b5bfff84 	addi	r22,r22,-2
    af30:	2c4b883a 	add	r5,r5,r17
    af34:	003f7b06 	br	ad24 <__umoddi3+0x35c>
    af38:	34cd883a 	add	r6,r6,r19
    af3c:	003f2a06 	br	abe8 <__umoddi3+0x220>
    af40:	8005883a 	mov	r2,r16
    af44:	003efe06 	br	ab40 <__umoddi3+0x178>
    af48:	81bfdb36 	bltu	r16,r6,aeb8 <__umoddi3+0x4f0>
    af4c:	300f883a 	mov	r7,r6
    af50:	0009883a 	mov	r4,zero
    af54:	003fa106 	br	addc <__umoddi3+0x414>

0000af58 <__adddf3>:
    af58:	02000434 	movhi	r8,16
    af5c:	423fffc4 	addi	r8,r8,-1
    af60:	defffb04 	addi	sp,sp,-20
    af64:	2a12703a 	and	r9,r5,r8
    af68:	2806d7fa 	srli	r3,r5,31
    af6c:	3a10703a 	and	r8,r7,r8
    af70:	3804d53a 	srli	r2,r7,20
    af74:	3014d77a 	srli	r10,r6,29
    af78:	dc000015 	stw	r16,0(sp)
    af7c:	481290fa 	slli	r9,r9,3
    af80:	2820d53a 	srli	r16,r5,20
    af84:	401090fa 	slli	r8,r8,3
    af88:	200ad77a 	srli	r5,r4,29
    af8c:	380ed7fa 	srli	r7,r7,31
    af90:	dc800215 	stw	r18,8(sp)
    af94:	dc400115 	stw	r17,4(sp)
    af98:	dfc00415 	stw	ra,16(sp)
    af9c:	dcc00315 	stw	r19,12(sp)
    afa0:	1c803fcc 	andi	r18,r3,255
    afa4:	8401ffcc 	andi	r16,r16,2047
    afa8:	494ab03a 	or	r5,r9,r5
    afac:	202290fa 	slli	r17,r4,3
    afb0:	1081ffcc 	andi	r2,r2,2047
    afb4:	4290b03a 	or	r8,r8,r10
    afb8:	300c90fa 	slli	r6,r6,3
    afbc:	91c07026 	beq	r18,r7,b180 <__adddf3+0x228>
    afc0:	8087c83a 	sub	r3,r16,r2
    afc4:	00c0b30e 	bge	zero,r3,b294 <__adddf3+0x33c>
    afc8:	10002a1e 	bne	r2,zero,b074 <__adddf3+0x11c>
    afcc:	4184b03a 	or	r2,r8,r6
    afd0:	1000991e 	bne	r2,zero,b238 <__adddf3+0x2e0>
    afd4:	888001cc 	andi	r2,r17,7
    afd8:	10005b26 	beq	r2,zero,b148 <__adddf3+0x1f0>
    afdc:	88c003cc 	andi	r3,r17,15
    afe0:	00800104 	movi	r2,4
    afe4:	18805826 	beq	r3,r2,b148 <__adddf3+0x1f0>
    afe8:	89800104 	addi	r6,r17,4
    afec:	3463803a 	cmpltu	r17,r6,r17
    aff0:	2c4b883a 	add	r5,r5,r17
    aff4:	2880202c 	andhi	r2,r5,128
    aff8:	9007883a 	mov	r3,r18
    affc:	3023883a 	mov	r17,r6
    b000:	10005426 	beq	r2,zero,b154 <__adddf3+0x1fc>
    b004:	84000044 	addi	r16,r16,1
    b008:	0081ffc4 	movi	r2,2047
    b00c:	8080c126 	beq	r16,r2,b314 <__adddf3+0x3bc>
    b010:	013fe034 	movhi	r4,65408
    b014:	213fffc4 	addi	r4,r4,-1
    b018:	290a703a 	and	r5,r5,r4
    b01c:	2804977a 	slli	r2,r5,29
    b020:	280a927a 	slli	r5,r5,9
    b024:	8822d0fa 	srli	r17,r17,3
    b028:	8401ffcc 	andi	r16,r16,2047
    b02c:	2808d33a 	srli	r4,r5,12
    b030:	1444b03a 	or	r2,r2,r17
    b034:	8401ffcc 	andi	r16,r16,2047
    b038:	800a953a 	slli	r5,r16,20
    b03c:	18c03fcc 	andi	r3,r3,255
    b040:	04000434 	movhi	r16,16
    b044:	180697fa 	slli	r3,r3,31
    b048:	843fffc4 	addi	r16,r16,-1
    b04c:	2420703a 	and	r16,r4,r16
    b050:	8160b03a 	or	r16,r16,r5
    b054:	80c6b03a 	or	r3,r16,r3
    b058:	dfc00417 	ldw	ra,16(sp)
    b05c:	dcc00317 	ldw	r19,12(sp)
    b060:	dc800217 	ldw	r18,8(sp)
    b064:	dc400117 	ldw	r17,4(sp)
    b068:	dc000017 	ldw	r16,0(sp)
    b06c:	dec00504 	addi	sp,sp,20
    b070:	f800283a 	ret
    b074:	0081ffc4 	movi	r2,2047
    b078:	80bfd626 	beq	r16,r2,afd4 <__adddf3+0x7c>
    b07c:	42002034 	orhi	r8,r8,128
    b080:	00800e04 	movi	r2,56
    b084:	10c0a616 	blt	r2,r3,b320 <__adddf3+0x3c8>
    b088:	008007c4 	movi	r2,31
    b08c:	10c0c916 	blt	r2,r3,b3b4 <__adddf3+0x45c>
    b090:	00800804 	movi	r2,32
    b094:	10c5c83a 	sub	r2,r2,r3
    b098:	408e983a 	sll	r7,r8,r2
    b09c:	30c8d83a 	srl	r4,r6,r3
    b0a0:	3084983a 	sll	r2,r6,r2
    b0a4:	40c6d83a 	srl	r3,r8,r3
    b0a8:	390cb03a 	or	r6,r7,r4
    b0ac:	1004c03a 	cmpne	r2,r2,zero
    b0b0:	308cb03a 	or	r6,r6,r2
    b0b4:	898dc83a 	sub	r6,r17,r6
    b0b8:	89a3803a 	cmpltu	r17,r17,r6
    b0bc:	28cbc83a 	sub	r5,r5,r3
    b0c0:	2c4bc83a 	sub	r5,r5,r17
    b0c4:	3023883a 	mov	r17,r6
    b0c8:	2880202c 	andhi	r2,r5,128
    b0cc:	10006d26 	beq	r2,zero,b284 <__adddf3+0x32c>
    b0d0:	04c02034 	movhi	r19,128
    b0d4:	9cffffc4 	addi	r19,r19,-1
    b0d8:	2ce6703a 	and	r19,r5,r19
    b0dc:	98007e26 	beq	r19,zero,b2d8 <__adddf3+0x380>
    b0e0:	9809883a 	mov	r4,r19
    b0e4:	000d4f40 	call	d4f4 <__clzsi2>
    b0e8:	10fffe04 	addi	r3,r2,-8
    b0ec:	010007c4 	movi	r4,31
    b0f0:	20c07f16 	blt	r4,r3,b2f0 <__adddf3+0x398>
    b0f4:	01400a04 	movi	r5,40
    b0f8:	2885c83a 	sub	r2,r5,r2
    b0fc:	888ad83a 	srl	r5,r17,r2
    b100:	98e6983a 	sll	r19,r19,r3
    b104:	88e2983a 	sll	r17,r17,r3
    b108:	2ce6b03a 	or	r19,r5,r19
    b10c:	1c007c16 	blt	r3,r16,b300 <__adddf3+0x3a8>
    b110:	1c21c83a 	sub	r16,r3,r16
    b114:	81400044 	addi	r5,r16,1
    b118:	00c007c4 	movi	r3,31
    b11c:	19409816 	blt	r3,r5,b380 <__adddf3+0x428>
    b120:	1c21c83a 	sub	r16,r3,r16
    b124:	8c08983a 	sll	r4,r17,r16
    b128:	8946d83a 	srl	r3,r17,r5
    b12c:	9c20983a 	sll	r16,r19,r16
    b130:	2008c03a 	cmpne	r4,r4,zero
    b134:	994ad83a 	srl	r5,r19,r5
    b138:	1c06b03a 	or	r3,r3,r16
    b13c:	1922b03a 	or	r17,r3,r4
    b140:	0021883a 	mov	r16,zero
    b144:	003fa306 	br	afd4 <__adddf3+0x7c>
    b148:	2880202c 	andhi	r2,r5,128
    b14c:	9007883a 	mov	r3,r18
    b150:	103fac1e 	bne	r2,zero,b004 <__adddf3+0xac>
    b154:	2804977a 	slli	r2,r5,29
    b158:	8822d0fa 	srli	r17,r17,3
    b15c:	0101ffc4 	movi	r4,2047
    b160:	280ad0fa 	srli	r5,r5,3
    b164:	1444b03a 	or	r2,r2,r17
    b168:	81002c26 	beq	r16,r4,b21c <__adddf3+0x2c4>
    b16c:	8120703a 	and	r16,r16,r4
    b170:	01000434 	movhi	r4,16
    b174:	213fffc4 	addi	r4,r4,-1
    b178:	2908703a 	and	r4,r5,r4
    b17c:	003fad06 	br	b034 <__adddf3+0xdc>
    b180:	8089c83a 	sub	r4,r16,r2
    b184:	01006a0e 	bge	zero,r4,b330 <__adddf3+0x3d8>
    b188:	10003326 	beq	r2,zero,b258 <__adddf3+0x300>
    b18c:	0081ffc4 	movi	r2,2047
    b190:	80bf9026 	beq	r16,r2,afd4 <__adddf3+0x7c>
    b194:	42002034 	orhi	r8,r8,128
    b198:	00800e04 	movi	r2,56
    b19c:	1100b116 	blt	r2,r4,b464 <__adddf3+0x50c>
    b1a0:	008007c4 	movi	r2,31
    b1a4:	1100e216 	blt	r2,r4,b530 <__adddf3+0x5d8>
    b1a8:	00800804 	movi	r2,32
    b1ac:	1105c83a 	sub	r2,r2,r4
    b1b0:	4092983a 	sll	r9,r8,r2
    b1b4:	310ed83a 	srl	r7,r6,r4
    b1b8:	3084983a 	sll	r2,r6,r2
    b1bc:	4110d83a 	srl	r8,r8,r4
    b1c0:	49ccb03a 	or	r6,r9,r7
    b1c4:	1004c03a 	cmpne	r2,r2,zero
    b1c8:	308cb03a 	or	r6,r6,r2
    b1cc:	344d883a 	add	r6,r6,r17
    b1d0:	3463803a 	cmpltu	r17,r6,r17
    b1d4:	414b883a 	add	r5,r8,r5
    b1d8:	2c4b883a 	add	r5,r5,r17
    b1dc:	3023883a 	mov	r17,r6
    b1e0:	2880202c 	andhi	r2,r5,128
    b1e4:	10002726 	beq	r2,zero,b284 <__adddf3+0x32c>
    b1e8:	84000044 	addi	r16,r16,1
    b1ec:	0081ffc4 	movi	r2,2047
    b1f0:	8080ae26 	beq	r16,r2,b4ac <__adddf3+0x554>
    b1f4:	00bfe034 	movhi	r2,65408
    b1f8:	10bfffc4 	addi	r2,r2,-1
    b1fc:	288a703a 	and	r5,r5,r2
    b200:	880cd07a 	srli	r6,r17,1
    b204:	280897fa 	slli	r4,r5,31
    b208:	88c0004c 	andi	r3,r17,1
    b20c:	30e2b03a 	or	r17,r6,r3
    b210:	280ad07a 	srli	r5,r5,1
    b214:	8922b03a 	or	r17,r17,r4
    b218:	003f6e06 	br	afd4 <__adddf3+0x7c>
    b21c:	1148b03a 	or	r4,r2,r5
    b220:	20003c26 	beq	r4,zero,b314 <__adddf3+0x3bc>
    b224:	29000234 	orhi	r4,r5,8
    b228:	01400434 	movhi	r5,16
    b22c:	297fffc4 	addi	r5,r5,-1
    b230:	2148703a 	and	r4,r4,r5
    b234:	003f7f06 	br	b034 <__adddf3+0xdc>
    b238:	18ffffc4 	addi	r3,r3,-1
    b23c:	18004d1e 	bne	r3,zero,b374 <__adddf3+0x41c>
    b240:	898dc83a 	sub	r6,r17,r6
    b244:	89a3803a 	cmpltu	r17,r17,r6
    b248:	2a0bc83a 	sub	r5,r5,r8
    b24c:	2c4bc83a 	sub	r5,r5,r17
    b250:	3023883a 	mov	r17,r6
    b254:	003f9c06 	br	b0c8 <__adddf3+0x170>
    b258:	4184b03a 	or	r2,r8,r6
    b25c:	103f5d26 	beq	r2,zero,afd4 <__adddf3+0x7c>
    b260:	213fffc4 	addi	r4,r4,-1
    b264:	203fd926 	beq	r4,zero,b1cc <__adddf3+0x274>
    b268:	0081ffc4 	movi	r2,2047
    b26c:	80bfca1e 	bne	r16,r2,b198 <__adddf3+0x240>
    b270:	003f5806 	br	afd4 <__adddf3+0x7c>
    b274:	10c8b03a 	or	r4,r2,r3
    b278:	20008b26 	beq	r4,zero,b4a8 <__adddf3+0x550>
    b27c:	100b883a 	mov	r5,r2
    b280:	1823883a 	mov	r17,r3
    b284:	888001cc 	andi	r2,r17,7
    b288:	103f541e 	bne	r2,zero,afdc <__adddf3+0x84>
    b28c:	9007883a 	mov	r3,r18
    b290:	003fb006 	br	b154 <__adddf3+0x1fc>
    b294:	1800531e 	bne	r3,zero,b3e4 <__adddf3+0x48c>
    b298:	80800044 	addi	r2,r16,1
    b29c:	1081ffcc 	andi	r2,r2,2047
    b2a0:	00c00044 	movi	r3,1
    b2a4:	1880990e 	bge	r3,r2,b50c <__adddf3+0x5b4>
    b2a8:	8985c83a 	sub	r2,r17,r6
    b2ac:	8887803a 	cmpltu	r3,r17,r2
    b2b0:	2a27c83a 	sub	r19,r5,r8
    b2b4:	98e7c83a 	sub	r19,r19,r3
    b2b8:	98c0202c 	andhi	r3,r19,128
    b2bc:	18006226 	beq	r3,zero,b448 <__adddf3+0x4f0>
    b2c0:	3463c83a 	sub	r17,r6,r17
    b2c4:	4151c83a 	sub	r8,r8,r5
    b2c8:	344d803a 	cmpltu	r6,r6,r17
    b2cc:	41a7c83a 	sub	r19,r8,r6
    b2d0:	3825883a 	mov	r18,r7
    b2d4:	983f821e 	bne	r19,zero,b0e0 <__adddf3+0x188>
    b2d8:	8809883a 	mov	r4,r17
    b2dc:	000d4f40 	call	d4f4 <__clzsi2>
    b2e0:	10800804 	addi	r2,r2,32
    b2e4:	10fffe04 	addi	r3,r2,-8
    b2e8:	010007c4 	movi	r4,31
    b2ec:	20ff810e 	bge	r4,r3,b0f4 <__adddf3+0x19c>
    b2f0:	14fff604 	addi	r19,r2,-40
    b2f4:	8ce6983a 	sll	r19,r17,r19
    b2f8:	0023883a 	mov	r17,zero
    b2fc:	1c3f840e 	bge	r3,r16,b110 <__adddf3+0x1b8>
    b300:	017fe034 	movhi	r5,65408
    b304:	297fffc4 	addi	r5,r5,-1
    b308:	80e1c83a 	sub	r16,r16,r3
    b30c:	994a703a 	and	r5,r19,r5
    b310:	003f3006 	br	afd4 <__adddf3+0x7c>
    b314:	0009883a 	mov	r4,zero
    b318:	0005883a 	mov	r2,zero
    b31c:	003f4506 	br	b034 <__adddf3+0xdc>
    b320:	418cb03a 	or	r6,r8,r6
    b324:	300cc03a 	cmpne	r6,r6,zero
    b328:	0007883a 	mov	r3,zero
    b32c:	003f6106 	br	b0b4 <__adddf3+0x15c>
    b330:	2000921e 	bne	r4,zero,b57c <__adddf3+0x624>
    b334:	80800044 	addi	r2,r16,1
    b338:	11c1ffcc 	andi	r7,r2,2047
    b33c:	01000044 	movi	r4,1
    b340:	21c0610e 	bge	r4,r7,b4c8 <__adddf3+0x570>
    b344:	0101ffc4 	movi	r4,2047
    b348:	1100a326 	beq	r2,r4,b5d8 <__adddf3+0x680>
    b34c:	344d883a 	add	r6,r6,r17
    b350:	3463803a 	cmpltu	r17,r6,r17
    b354:	414b883a 	add	r5,r8,r5
    b358:	2c4b883a 	add	r5,r5,r17
    b35c:	282297fa 	slli	r17,r5,31
    b360:	300cd07a 	srli	r6,r6,1
    b364:	280ad07a 	srli	r5,r5,1
    b368:	1021883a 	mov	r16,r2
    b36c:	89a2b03a 	or	r17,r17,r6
    b370:	003f1806 	br	afd4 <__adddf3+0x7c>
    b374:	0081ffc4 	movi	r2,2047
    b378:	80bf411e 	bne	r16,r2,b080 <__adddf3+0x128>
    b37c:	003f1506 	br	afd4 <__adddf3+0x7c>
    b380:	80bff844 	addi	r2,r16,-31
    b384:	00c00804 	movi	r3,32
    b388:	9884d83a 	srl	r2,r19,r2
    b38c:	28c04a26 	beq	r5,r3,b4b8 <__adddf3+0x560>
    b390:	00c00fc4 	movi	r3,63
    b394:	1c21c83a 	sub	r16,r3,r16
    b398:	9c26983a 	sll	r19,r19,r16
    b39c:	9c62b03a 	or	r17,r19,r17
    b3a0:	8822c03a 	cmpne	r17,r17,zero
    b3a4:	88a2b03a 	or	r17,r17,r2
    b3a8:	000b883a 	mov	r5,zero
    b3ac:	0021883a 	mov	r16,zero
    b3b0:	003fb406 	br	b284 <__adddf3+0x32c>
    b3b4:	18bff804 	addi	r2,r3,-32
    b3b8:	01000804 	movi	r4,32
    b3bc:	4084d83a 	srl	r2,r8,r2
    b3c0:	19003f26 	beq	r3,r4,b4c0 <__adddf3+0x568>
    b3c4:	01001004 	movi	r4,64
    b3c8:	20c7c83a 	sub	r3,r4,r3
    b3cc:	40d0983a 	sll	r8,r8,r3
    b3d0:	418cb03a 	or	r6,r8,r6
    b3d4:	300cc03a 	cmpne	r6,r6,zero
    b3d8:	308cb03a 	or	r6,r6,r2
    b3dc:	0007883a 	mov	r3,zero
    b3e0:	003f3406 	br	b0b4 <__adddf3+0x15c>
    b3e4:	80002326 	beq	r16,zero,b474 <__adddf3+0x51c>
    b3e8:	0101ffc4 	movi	r4,2047
    b3ec:	11005e26 	beq	r2,r4,b568 <__adddf3+0x610>
    b3f0:	00c7c83a 	sub	r3,zero,r3
    b3f4:	29402034 	orhi	r5,r5,128
    b3f8:	01000e04 	movi	r4,56
    b3fc:	20c07216 	blt	r4,r3,b5c8 <__adddf3+0x670>
    b400:	010007c4 	movi	r4,31
    b404:	20c0ce16 	blt	r4,r3,b740 <__adddf3+0x7e8>
    b408:	01000804 	movi	r4,32
    b40c:	20c9c83a 	sub	r4,r4,r3
    b410:	2914983a 	sll	r10,r5,r4
    b414:	88d2d83a 	srl	r9,r17,r3
    b418:	8908983a 	sll	r4,r17,r4
    b41c:	28c6d83a 	srl	r3,r5,r3
    b420:	5262b03a 	or	r17,r10,r9
    b424:	2008c03a 	cmpne	r4,r4,zero
    b428:	8922b03a 	or	r17,r17,r4
    b42c:	3463c83a 	sub	r17,r6,r17
    b430:	40c7c83a 	sub	r3,r8,r3
    b434:	344d803a 	cmpltu	r6,r6,r17
    b438:	198bc83a 	sub	r5,r3,r6
    b43c:	1021883a 	mov	r16,r2
    b440:	3825883a 	mov	r18,r7
    b444:	003f2006 	br	b0c8 <__adddf3+0x170>
    b448:	9886b03a 	or	r3,r19,r2
    b44c:	1800141e 	bne	r3,zero,b4a0 <__adddf3+0x548>
    b450:	0007883a 	mov	r3,zero
    b454:	000b883a 	mov	r5,zero
    b458:	0023883a 	mov	r17,zero
    b45c:	0021883a 	mov	r16,zero
    b460:	003f3c06 	br	b154 <__adddf3+0x1fc>
    b464:	418cb03a 	or	r6,r8,r6
    b468:	300cc03a 	cmpne	r6,r6,zero
    b46c:	0011883a 	mov	r8,zero
    b470:	003f5606 	br	b1cc <__adddf3+0x274>
    b474:	2c48b03a 	or	r4,r5,r17
    b478:	20003b26 	beq	r4,zero,b568 <__adddf3+0x610>
    b47c:	00c6303a 	nor	r3,zero,r3
    b480:	1800371e 	bne	r3,zero,b560 <__adddf3+0x608>
    b484:	3463c83a 	sub	r17,r6,r17
    b488:	414bc83a 	sub	r5,r8,r5
    b48c:	344d803a 	cmpltu	r6,r6,r17
    b490:	298bc83a 	sub	r5,r5,r6
    b494:	1021883a 	mov	r16,r2
    b498:	3825883a 	mov	r18,r7
    b49c:	003f0a06 	br	b0c8 <__adddf3+0x170>
    b4a0:	1023883a 	mov	r17,r2
    b4a4:	003f0d06 	br	b0dc <__adddf3+0x184>
    b4a8:	0007883a 	mov	r3,zero
    b4ac:	000b883a 	mov	r5,zero
    b4b0:	0023883a 	mov	r17,zero
    b4b4:	003f2706 	br	b154 <__adddf3+0x1fc>
    b4b8:	0027883a 	mov	r19,zero
    b4bc:	003fb706 	br	b39c <__adddf3+0x444>
    b4c0:	0011883a 	mov	r8,zero
    b4c4:	003fc206 	br	b3d0 <__adddf3+0x478>
    b4c8:	2c44b03a 	or	r2,r5,r17
    b4cc:	8000871e 	bne	r16,zero,b6ec <__adddf3+0x794>
    b4d0:	1000b126 	beq	r2,zero,b798 <__adddf3+0x840>
    b4d4:	4184b03a 	or	r2,r8,r6
    b4d8:	103ebe26 	beq	r2,zero,afd4 <__adddf3+0x7c>
    b4dc:	3445883a 	add	r2,r6,r17
    b4e0:	1463803a 	cmpltu	r17,r2,r17
    b4e4:	414b883a 	add	r5,r8,r5
    b4e8:	2c4b883a 	add	r5,r5,r17
    b4ec:	28c0202c 	andhi	r3,r5,128
    b4f0:	1023883a 	mov	r17,r2
    b4f4:	183f6326 	beq	r3,zero,b284 <__adddf3+0x32c>
    b4f8:	00bfe034 	movhi	r2,65408
    b4fc:	10bfffc4 	addi	r2,r2,-1
    b500:	2021883a 	mov	r16,r4
    b504:	288a703a 	and	r5,r5,r2
    b508:	003eb206 	br	afd4 <__adddf3+0x7c>
    b50c:	2c44b03a 	or	r2,r5,r17
    b510:	8000251e 	bne	r16,zero,b5a8 <__adddf3+0x650>
    b514:	10004b1e 	bne	r2,zero,b644 <__adddf3+0x6ec>
    b518:	4184b03a 	or	r2,r8,r6
    b51c:	103fe226 	beq	r2,zero,b4a8 <__adddf3+0x550>
    b520:	400b883a 	mov	r5,r8
    b524:	3023883a 	mov	r17,r6
    b528:	3825883a 	mov	r18,r7
    b52c:	003ea906 	br	afd4 <__adddf3+0x7c>
    b530:	20bff804 	addi	r2,r4,-32
    b534:	01c00804 	movi	r7,32
    b538:	4084d83a 	srl	r2,r8,r2
    b53c:	21c07e26 	beq	r4,r7,b738 <__adddf3+0x7e0>
    b540:	01c01004 	movi	r7,64
    b544:	3909c83a 	sub	r4,r7,r4
    b548:	4110983a 	sll	r8,r8,r4
    b54c:	418cb03a 	or	r6,r8,r6
    b550:	300cc03a 	cmpne	r6,r6,zero
    b554:	308cb03a 	or	r6,r6,r2
    b558:	0011883a 	mov	r8,zero
    b55c:	003f1b06 	br	b1cc <__adddf3+0x274>
    b560:	0101ffc4 	movi	r4,2047
    b564:	113fa41e 	bne	r2,r4,b3f8 <__adddf3+0x4a0>
    b568:	400b883a 	mov	r5,r8
    b56c:	3023883a 	mov	r17,r6
    b570:	1021883a 	mov	r16,r2
    b574:	3825883a 	mov	r18,r7
    b578:	003e9606 	br	afd4 <__adddf3+0x7c>
    b57c:	80001a1e 	bne	r16,zero,b5e8 <__adddf3+0x690>
    b580:	2c4eb03a 	or	r7,r5,r17
    b584:	38005526 	beq	r7,zero,b6dc <__adddf3+0x784>
    b588:	0108303a 	nor	r4,zero,r4
    b58c:	2000511e 	bne	r4,zero,b6d4 <__adddf3+0x77c>
    b590:	89a3883a 	add	r17,r17,r6
    b594:	414b883a 	add	r5,r8,r5
    b598:	898d803a 	cmpltu	r6,r17,r6
    b59c:	298b883a 	add	r5,r5,r6
    b5a0:	1021883a 	mov	r16,r2
    b5a4:	003f0e06 	br	b1e0 <__adddf3+0x288>
    b5a8:	1000341e 	bne	r2,zero,b67c <__adddf3+0x724>
    b5ac:	4184b03a 	or	r2,r8,r6
    b5b0:	10006f26 	beq	r2,zero,b770 <__adddf3+0x818>
    b5b4:	400b883a 	mov	r5,r8
    b5b8:	3023883a 	mov	r17,r6
    b5bc:	3825883a 	mov	r18,r7
    b5c0:	0401ffc4 	movi	r16,2047
    b5c4:	003e8306 	br	afd4 <__adddf3+0x7c>
    b5c8:	2c62b03a 	or	r17,r5,r17
    b5cc:	8822c03a 	cmpne	r17,r17,zero
    b5d0:	0007883a 	mov	r3,zero
    b5d4:	003f9506 	br	b42c <__adddf3+0x4d4>
    b5d8:	1021883a 	mov	r16,r2
    b5dc:	000b883a 	mov	r5,zero
    b5e0:	0023883a 	mov	r17,zero
    b5e4:	003edb06 	br	b154 <__adddf3+0x1fc>
    b5e8:	01c1ffc4 	movi	r7,2047
    b5ec:	11c03b26 	beq	r2,r7,b6dc <__adddf3+0x784>
    b5f0:	0109c83a 	sub	r4,zero,r4
    b5f4:	29402034 	orhi	r5,r5,128
    b5f8:	01c00e04 	movi	r7,56
    b5fc:	39006216 	blt	r7,r4,b788 <__adddf3+0x830>
    b600:	01c007c4 	movi	r7,31
    b604:	39006b16 	blt	r7,r4,b7b4 <__adddf3+0x85c>
    b608:	01c00804 	movi	r7,32
    b60c:	390fc83a 	sub	r7,r7,r4
    b610:	29d4983a 	sll	r10,r5,r7
    b614:	8912d83a 	srl	r9,r17,r4
    b618:	89ce983a 	sll	r7,r17,r7
    b61c:	2908d83a 	srl	r4,r5,r4
    b620:	5262b03a 	or	r17,r10,r9
    b624:	380ac03a 	cmpne	r5,r7,zero
    b628:	8962b03a 	or	r17,r17,r5
    b62c:	89a3883a 	add	r17,r17,r6
    b630:	2211883a 	add	r8,r4,r8
    b634:	898d803a 	cmpltu	r6,r17,r6
    b638:	418b883a 	add	r5,r8,r6
    b63c:	1021883a 	mov	r16,r2
    b640:	003ee706 	br	b1e0 <__adddf3+0x288>
    b644:	4184b03a 	or	r2,r8,r6
    b648:	103e6226 	beq	r2,zero,afd4 <__adddf3+0x7c>
    b64c:	8987c83a 	sub	r3,r17,r6
    b650:	88c9803a 	cmpltu	r4,r17,r3
    b654:	2a05c83a 	sub	r2,r5,r8
    b658:	1105c83a 	sub	r2,r2,r4
    b65c:	1100202c 	andhi	r4,r2,128
    b660:	203f0426 	beq	r4,zero,b274 <__adddf3+0x31c>
    b664:	3463c83a 	sub	r17,r6,r17
    b668:	414bc83a 	sub	r5,r8,r5
    b66c:	344d803a 	cmpltu	r6,r6,r17
    b670:	298bc83a 	sub	r5,r5,r6
    b674:	3825883a 	mov	r18,r7
    b678:	003e5606 	br	afd4 <__adddf3+0x7c>
    b67c:	4184b03a 	or	r2,r8,r6
    b680:	10002b26 	beq	r2,zero,b730 <__adddf3+0x7d8>
    b684:	2804d0fa 	srli	r2,r5,3
    b688:	8822d0fa 	srli	r17,r17,3
    b68c:	280a977a 	slli	r5,r5,29
    b690:	10c0022c 	andhi	r3,r2,8
    b694:	2c62b03a 	or	r17,r5,r17
    b698:	18000826 	beq	r3,zero,b6bc <__adddf3+0x764>
    b69c:	4008d0fa 	srli	r4,r8,3
    b6a0:	20c0022c 	andhi	r3,r4,8
    b6a4:	1800051e 	bne	r3,zero,b6bc <__adddf3+0x764>
    b6a8:	300cd0fa 	srli	r6,r6,3
    b6ac:	4010977a 	slli	r8,r8,29
    b6b0:	2005883a 	mov	r2,r4
    b6b4:	3825883a 	mov	r18,r7
    b6b8:	41a2b03a 	or	r17,r8,r6
    b6bc:	880ad77a 	srli	r5,r17,29
    b6c0:	100490fa 	slli	r2,r2,3
    b6c4:	882290fa 	slli	r17,r17,3
    b6c8:	0401ffc4 	movi	r16,2047
    b6cc:	288ab03a 	or	r5,r5,r2
    b6d0:	003e4006 	br	afd4 <__adddf3+0x7c>
    b6d4:	01c1ffc4 	movi	r7,2047
    b6d8:	11ffc71e 	bne	r2,r7,b5f8 <__adddf3+0x6a0>
    b6dc:	400b883a 	mov	r5,r8
    b6e0:	3023883a 	mov	r17,r6
    b6e4:	1021883a 	mov	r16,r2
    b6e8:	003e3a06 	br	afd4 <__adddf3+0x7c>
    b6ec:	10002d26 	beq	r2,zero,b7a4 <__adddf3+0x84c>
    b6f0:	4184b03a 	or	r2,r8,r6
    b6f4:	10000e26 	beq	r2,zero,b730 <__adddf3+0x7d8>
    b6f8:	2804d0fa 	srli	r2,r5,3
    b6fc:	8822d0fa 	srli	r17,r17,3
    b700:	280a977a 	slli	r5,r5,29
    b704:	10c0022c 	andhi	r3,r2,8
    b708:	2c62b03a 	or	r17,r5,r17
    b70c:	183feb26 	beq	r3,zero,b6bc <__adddf3+0x764>
    b710:	4008d0fa 	srli	r4,r8,3
    b714:	20c0022c 	andhi	r3,r4,8
    b718:	183fe81e 	bne	r3,zero,b6bc <__adddf3+0x764>
    b71c:	300cd0fa 	srli	r6,r6,3
    b720:	4010977a 	slli	r8,r8,29
    b724:	2005883a 	mov	r2,r4
    b728:	41a2b03a 	or	r17,r8,r6
    b72c:	003fe306 	br	b6bc <__adddf3+0x764>
    b730:	0401ffc4 	movi	r16,2047
    b734:	003e2706 	br	afd4 <__adddf3+0x7c>
    b738:	0011883a 	mov	r8,zero
    b73c:	003f8306 	br	b54c <__adddf3+0x5f4>
    b740:	193ff804 	addi	r4,r3,-32
    b744:	02400804 	movi	r9,32
    b748:	2908d83a 	srl	r4,r5,r4
    b74c:	1a402526 	beq	r3,r9,b7e4 <__adddf3+0x88c>
    b750:	02401004 	movi	r9,64
    b754:	48c7c83a 	sub	r3,r9,r3
    b758:	28ca983a 	sll	r5,r5,r3
    b75c:	2c62b03a 	or	r17,r5,r17
    b760:	8822c03a 	cmpne	r17,r17,zero
    b764:	8922b03a 	or	r17,r17,r4
    b768:	0007883a 	mov	r3,zero
    b76c:	003f2f06 	br	b42c <__adddf3+0x4d4>
    b770:	01402034 	movhi	r5,128
    b774:	0007883a 	mov	r3,zero
    b778:	297fffc4 	addi	r5,r5,-1
    b77c:	047ffe04 	movi	r17,-8
    b780:	0401ffc4 	movi	r16,2047
    b784:	003e7306 	br	b154 <__adddf3+0x1fc>
    b788:	2c62b03a 	or	r17,r5,r17
    b78c:	8822c03a 	cmpne	r17,r17,zero
    b790:	0009883a 	mov	r4,zero
    b794:	003fa506 	br	b62c <__adddf3+0x6d4>
    b798:	400b883a 	mov	r5,r8
    b79c:	3023883a 	mov	r17,r6
    b7a0:	003e0c06 	br	afd4 <__adddf3+0x7c>
    b7a4:	400b883a 	mov	r5,r8
    b7a8:	3023883a 	mov	r17,r6
    b7ac:	0401ffc4 	movi	r16,2047
    b7b0:	003e0806 	br	afd4 <__adddf3+0x7c>
    b7b4:	21fff804 	addi	r7,r4,-32
    b7b8:	02400804 	movi	r9,32
    b7bc:	29ced83a 	srl	r7,r5,r7
    b7c0:	22400a26 	beq	r4,r9,b7ec <__adddf3+0x894>
    b7c4:	02401004 	movi	r9,64
    b7c8:	4909c83a 	sub	r4,r9,r4
    b7cc:	290a983a 	sll	r5,r5,r4
    b7d0:	2c62b03a 	or	r17,r5,r17
    b7d4:	8822c03a 	cmpne	r17,r17,zero
    b7d8:	89e2b03a 	or	r17,r17,r7
    b7dc:	0009883a 	mov	r4,zero
    b7e0:	003f9206 	br	b62c <__adddf3+0x6d4>
    b7e4:	000b883a 	mov	r5,zero
    b7e8:	003fdc06 	br	b75c <__adddf3+0x804>
    b7ec:	000b883a 	mov	r5,zero
    b7f0:	003ff706 	br	b7d0 <__adddf3+0x878>

0000b7f4 <__divdf3>:
    b7f4:	defff204 	addi	sp,sp,-56
    b7f8:	dd000815 	stw	r20,32(sp)
    b7fc:	2828d53a 	srli	r20,r5,20
    b800:	dd800a15 	stw	r22,40(sp)
    b804:	282cd7fa 	srli	r22,r5,31
    b808:	dc000415 	stw	r16,16(sp)
    b80c:	04000434 	movhi	r16,16
    b810:	df000c15 	stw	fp,48(sp)
    b814:	dcc00715 	stw	r19,28(sp)
    b818:	dc800615 	stw	r18,24(sp)
    b81c:	dc400515 	stw	r17,20(sp)
    b820:	843fffc4 	addi	r16,r16,-1
    b824:	dfc00d15 	stw	ra,52(sp)
    b828:	ddc00b15 	stw	r23,44(sp)
    b82c:	dd400915 	stw	r21,36(sp)
    b830:	a501ffcc 	andi	r20,r20,2047
    b834:	2025883a 	mov	r18,r4
    b838:	2027883a 	mov	r19,r4
    b83c:	2c22703a 	and	r17,r5,r16
    b840:	b7003fcc 	andi	fp,r22,255
    b844:	a0005e26 	beq	r20,zero,b9c0 <__divdf3+0x1cc>
    b848:	0081ffc4 	movi	r2,2047
    b84c:	a0803526 	beq	r20,r2,b924 <__divdf3+0x130>
    b850:	8c000434 	orhi	r16,r17,16
    b854:	2004d77a 	srli	r2,r4,29
    b858:	802090fa 	slli	r16,r16,3
    b85c:	202690fa 	slli	r19,r4,3
    b860:	a53f0044 	addi	r20,r20,-1023
    b864:	80a2b03a 	or	r17,r16,r2
    b868:	0025883a 	mov	r18,zero
    b86c:	0011883a 	mov	r8,zero
    b870:	380ad53a 	srli	r5,r7,20
    b874:	382ed7fa 	srli	r23,r7,31
    b878:	04000434 	movhi	r16,16
    b87c:	843fffc4 	addi	r16,r16,-1
    b880:	2941ffcc 	andi	r5,r5,2047
    b884:	302b883a 	mov	r21,r6
    b888:	3c20703a 	and	r16,r7,r16
    b88c:	ba403fcc 	andi	r9,r23,255
    b890:	28006726 	beq	r5,zero,ba30 <__divdf3+0x23c>
    b894:	0081ffc4 	movi	r2,2047
    b898:	28805f26 	beq	r5,r2,ba18 <__divdf3+0x224>
    b89c:	84000434 	orhi	r16,r16,16
    b8a0:	3004d77a 	srli	r2,r6,29
    b8a4:	802090fa 	slli	r16,r16,3
    b8a8:	302a90fa 	slli	r21,r6,3
    b8ac:	297f0044 	addi	r5,r5,-1023
    b8b0:	80a0b03a 	or	r16,r16,r2
    b8b4:	000f883a 	mov	r7,zero
    b8b8:	3c86b03a 	or	r3,r7,r18
    b8bc:	180690ba 	slli	r3,r3,2
    b8c0:	00800074 	movhi	r2,1
    b8c4:	10ae3904 	addi	r2,r2,-18204
    b8c8:	1887883a 	add	r3,r3,r2
    b8cc:	18c00017 	ldw	r3,0(r3)
    b8d0:	b5c8f03a 	xor	r4,r22,r23
    b8d4:	200d883a 	mov	r6,r4
    b8d8:	24803fcc 	andi	r18,r4,255
    b8dc:	a169c83a 	sub	r20,r20,r5
    b8e0:	1800683a 	jmp	r3
    b8e4:	0000bb2c 	andhi	zero,zero,748
    b8e8:	0000b95c 	xori	zero,zero,741
    b8ec:	0000baf0 	cmpltui	zero,zero,747
    b8f0:	0000b940 	call	b94 <i2c_write+0xd0>
    b8f4:	0000baf0 	cmpltui	zero,zero,747
    b8f8:	0000bac4 	movi	zero,747
    b8fc:	0000baf0 	cmpltui	zero,zero,747
    b900:	0000b940 	call	b94 <i2c_write+0xd0>
    b904:	0000b95c 	xori	zero,zero,741
    b908:	0000b95c 	xori	zero,zero,741
    b90c:	0000bac4 	movi	zero,747
    b910:	0000b940 	call	b94 <i2c_write+0xd0>
    b914:	0000b950 	cmplti	zero,zero,741
    b918:	0000b950 	cmplti	zero,zero,741
    b91c:	0000b950 	cmplti	zero,zero,741
    b920:	0000bb00 	call	bb0 <i2c_write+0xec>
    b924:	8904b03a 	or	r2,r17,r4
    b928:	1000631e 	bne	r2,zero,bab8 <__divdf3+0x2c4>
    b92c:	04800204 	movi	r18,8
    b930:	0023883a 	mov	r17,zero
    b934:	0027883a 	mov	r19,zero
    b938:	02000084 	movi	r8,2
    b93c:	003fcc06 	br	b870 <__divdf3+0x7c>
    b940:	8023883a 	mov	r17,r16
    b944:	a827883a 	mov	r19,r21
    b948:	4839883a 	mov	fp,r9
    b94c:	3811883a 	mov	r8,r7
    b950:	00800084 	movi	r2,2
    b954:	40812a1e 	bne	r8,r2,be00 <__divdf3+0x60c>
    b958:	e025883a 	mov	r18,fp
    b95c:	9180004c 	andi	r6,r18,1
    b960:	0101ffc4 	movi	r4,2047
    b964:	000b883a 	mov	r5,zero
    b968:	0027883a 	mov	r19,zero
    b96c:	2008953a 	slli	r4,r4,20
    b970:	30c03fcc 	andi	r3,r6,255
    b974:	04000434 	movhi	r16,16
    b978:	180697fa 	slli	r3,r3,31
    b97c:	843fffc4 	addi	r16,r16,-1
    b980:	2c20703a 	and	r16,r5,r16
    b984:	8120b03a 	or	r16,r16,r4
    b988:	80c6b03a 	or	r3,r16,r3
    b98c:	9805883a 	mov	r2,r19
    b990:	dfc00d17 	ldw	ra,52(sp)
    b994:	df000c17 	ldw	fp,48(sp)
    b998:	ddc00b17 	ldw	r23,44(sp)
    b99c:	dd800a17 	ldw	r22,40(sp)
    b9a0:	dd400917 	ldw	r21,36(sp)
    b9a4:	dd000817 	ldw	r20,32(sp)
    b9a8:	dcc00717 	ldw	r19,28(sp)
    b9ac:	dc800617 	ldw	r18,24(sp)
    b9b0:	dc400517 	ldw	r17,20(sp)
    b9b4:	dc000417 	ldw	r16,16(sp)
    b9b8:	dec00e04 	addi	sp,sp,56
    b9bc:	f800283a 	ret
    b9c0:	8904b03a 	or	r2,r17,r4
    b9c4:	10003726 	beq	r2,zero,baa4 <__divdf3+0x2b0>
    b9c8:	88011c26 	beq	r17,zero,be3c <__divdf3+0x648>
    b9cc:	8809883a 	mov	r4,r17
    b9d0:	d9800315 	stw	r6,12(sp)
    b9d4:	d9c00115 	stw	r7,4(sp)
    b9d8:	000d4f40 	call	d4f4 <__clzsi2>
    b9dc:	d9800317 	ldw	r6,12(sp)
    b9e0:	d9c00117 	ldw	r7,4(sp)
    b9e4:	1007883a 	mov	r3,r2
    b9e8:	01000a04 	movi	r4,40
    b9ec:	1cfffe04 	addi	r19,r3,-8
    b9f0:	20c9c83a 	sub	r4,r4,r3
    b9f4:	8cca983a 	sll	r5,r17,r19
    b9f8:	9108d83a 	srl	r4,r18,r4
    b9fc:	94e6983a 	sll	r19,r18,r19
    ba00:	2162b03a 	or	r17,r4,r5
    ba04:	053f0344 	movi	r20,-1011
    ba08:	a0e9c83a 	sub	r20,r20,r3
    ba0c:	0025883a 	mov	r18,zero
    ba10:	0011883a 	mov	r8,zero
    ba14:	003f9606 	br	b870 <__divdf3+0x7c>
    ba18:	8184b03a 	or	r2,r16,r6
    ba1c:	10001f1e 	bne	r2,zero,ba9c <__divdf3+0x2a8>
    ba20:	0021883a 	mov	r16,zero
    ba24:	002b883a 	mov	r21,zero
    ba28:	01c00084 	movi	r7,2
    ba2c:	003fa206 	br	b8b8 <__divdf3+0xc4>
    ba30:	8184b03a 	or	r2,r16,r6
    ba34:	10001526 	beq	r2,zero,ba8c <__divdf3+0x298>
    ba38:	80010c26 	beq	r16,zero,be6c <__divdf3+0x678>
    ba3c:	8009883a 	mov	r4,r16
    ba40:	d9800315 	stw	r6,12(sp)
    ba44:	da000215 	stw	r8,8(sp)
    ba48:	da400015 	stw	r9,0(sp)
    ba4c:	000d4f40 	call	d4f4 <__clzsi2>
    ba50:	d9800317 	ldw	r6,12(sp)
    ba54:	da000217 	ldw	r8,8(sp)
    ba58:	da400017 	ldw	r9,0(sp)
    ba5c:	1007883a 	mov	r3,r2
    ba60:	01000a04 	movi	r4,40
    ba64:	1d7ffe04 	addi	r21,r3,-8
    ba68:	20c9c83a 	sub	r4,r4,r3
    ba6c:	8560983a 	sll	r16,r16,r21
    ba70:	3108d83a 	srl	r4,r6,r4
    ba74:	356a983a 	sll	r21,r6,r21
    ba78:	2420b03a 	or	r16,r4,r16
    ba7c:	017f0344 	movi	r5,-1011
    ba80:	28cbc83a 	sub	r5,r5,r3
    ba84:	000f883a 	mov	r7,zero
    ba88:	003f8b06 	br	b8b8 <__divdf3+0xc4>
    ba8c:	0021883a 	mov	r16,zero
    ba90:	002b883a 	mov	r21,zero
    ba94:	01c00044 	movi	r7,1
    ba98:	003f8706 	br	b8b8 <__divdf3+0xc4>
    ba9c:	01c000c4 	movi	r7,3
    baa0:	003f8506 	br	b8b8 <__divdf3+0xc4>
    baa4:	04800104 	movi	r18,4
    baa8:	0023883a 	mov	r17,zero
    baac:	0027883a 	mov	r19,zero
    bab0:	02000044 	movi	r8,1
    bab4:	003f6e06 	br	b870 <__divdf3+0x7c>
    bab8:	04800304 	movi	r18,12
    babc:	020000c4 	movi	r8,3
    bac0:	003f6b06 	br	b870 <__divdf3+0x7c>
    bac4:	01400434 	movhi	r5,16
    bac8:	000d883a 	mov	r6,zero
    bacc:	297fffc4 	addi	r5,r5,-1
    bad0:	04ffffc4 	movi	r19,-1
    bad4:	0101ffc4 	movi	r4,2047
    bad8:	003fa406 	br	b96c <__divdf3+0x178>
    badc:	043f0084 	movi	r16,-1022
    bae0:	8521c83a 	sub	r16,r16,r20
    bae4:	00800e04 	movi	r2,56
    bae8:	1401200e 	bge	r2,r16,bf6c <__divdf3+0x778>
    baec:	9180004c 	andi	r6,r18,1
    baf0:	0009883a 	mov	r4,zero
    baf4:	000b883a 	mov	r5,zero
    baf8:	0027883a 	mov	r19,zero
    bafc:	003f9b06 	br	b96c <__divdf3+0x178>
    bb00:	8880022c 	andhi	r2,r17,8
    bb04:	1000c726 	beq	r2,zero,be24 <__divdf3+0x630>
    bb08:	8080022c 	andhi	r2,r16,8
    bb0c:	1000c51e 	bne	r2,zero,be24 <__divdf3+0x630>
    bb10:	00800434 	movhi	r2,16
    bb14:	81400234 	orhi	r5,r16,8
    bb18:	10bfffc4 	addi	r2,r2,-1
    bb1c:	b80d883a 	mov	r6,r23
    bb20:	288a703a 	and	r5,r5,r2
    bb24:	a827883a 	mov	r19,r21
    bb28:	003fea06 	br	bad4 <__divdf3+0x2e0>
    bb2c:	8440ea36 	bltu	r16,r17,bed8 <__divdf3+0x6e4>
    bb30:	8c00e826 	beq	r17,r16,bed4 <__divdf3+0x6e0>
    bb34:	a53fffc4 	addi	r20,r20,-1
    bb38:	882d883a 	mov	r22,r17
    bb3c:	000d883a 	mov	r6,zero
    bb40:	a804d63a 	srli	r2,r21,24
    bb44:	8020923a 	slli	r16,r16,8
    bb48:	b009883a 	mov	r4,r22
    bb4c:	d9800315 	stw	r6,12(sp)
    bb50:	1420b03a 	or	r16,r2,r16
    bb54:	802ed43a 	srli	r23,r16,16
    bb58:	873fffcc 	andi	fp,r16,65535
    bb5c:	a82a923a 	slli	r21,r21,8
    bb60:	b80b883a 	mov	r5,r23
    bb64:	00011900 	call	1190 <__udivsi3>
    bb68:	b009883a 	mov	r4,r22
    bb6c:	b80b883a 	mov	r5,r23
    bb70:	1023883a 	mov	r17,r2
    bb74:	00011980 	call	1198 <__umodsi3>
    bb78:	1004943a 	slli	r2,r2,16
    bb7c:	9808d43a 	srli	r4,r19,16
    bb80:	8f2d383a 	mul	r22,r17,fp
    bb84:	d9800317 	ldw	r6,12(sp)
    bb88:	1106b03a 	or	r3,r2,r4
    bb8c:	1d80062e 	bgeu	r3,r22,bba8 <__divdf3+0x3b4>
    bb90:	1c07883a 	add	r3,r3,r16
    bb94:	88bfffc4 	addi	r2,r17,-1
    bb98:	1c00dc36 	bltu	r3,r16,bf0c <__divdf3+0x718>
    bb9c:	1d80db2e 	bgeu	r3,r22,bf0c <__divdf3+0x718>
    bba0:	8c7fff84 	addi	r17,r17,-2
    bba4:	1c07883a 	add	r3,r3,r16
    bba8:	1dadc83a 	sub	r22,r3,r22
    bbac:	b009883a 	mov	r4,r22
    bbb0:	b80b883a 	mov	r5,r23
    bbb4:	d9800315 	stw	r6,12(sp)
    bbb8:	00011900 	call	1190 <__udivsi3>
    bbbc:	b009883a 	mov	r4,r22
    bbc0:	b80b883a 	mov	r5,r23
    bbc4:	d8800015 	stw	r2,0(sp)
    bbc8:	00011980 	call	1198 <__umodsi3>
    bbcc:	da400017 	ldw	r9,0(sp)
    bbd0:	1004943a 	slli	r2,r2,16
    bbd4:	9cffffcc 	andi	r19,r19,65535
    bbd8:	4f07383a 	mul	r3,r9,fp
    bbdc:	14c8b03a 	or	r4,r2,r19
    bbe0:	d9800317 	ldw	r6,12(sp)
    bbe4:	20c0062e 	bgeu	r4,r3,bc00 <__divdf3+0x40c>
    bbe8:	2409883a 	add	r4,r4,r16
    bbec:	48bfffc4 	addi	r2,r9,-1
    bbf0:	2400c436 	bltu	r4,r16,bf04 <__divdf3+0x710>
    bbf4:	20c0c32e 	bgeu	r4,r3,bf04 <__divdf3+0x710>
    bbf8:	4a7fff84 	addi	r9,r9,-2
    bbfc:	2409883a 	add	r4,r4,r16
    bc00:	8822943a 	slli	r17,r17,16
    bc04:	a80ed43a 	srli	r7,r21,16
    bc08:	aa3fffcc 	andi	r8,r21,65535
    bc0c:	4c62b03a 	or	r17,r9,r17
    bc10:	8816d43a 	srli	r11,r17,16
    bc14:	897fffcc 	andi	r5,r17,65535
    bc18:	2a15383a 	mul	r10,r5,r8
    bc1c:	5a19383a 	mul	r12,r11,r8
    bc20:	29cb383a 	mul	r5,r5,r7
    bc24:	5012d43a 	srli	r9,r10,16
    bc28:	20c5c83a 	sub	r2,r4,r3
    bc2c:	614b883a 	add	r5,r12,r5
    bc30:	2a4b883a 	add	r5,r5,r9
    bc34:	59c7383a 	mul	r3,r11,r7
    bc38:	2b00022e 	bgeu	r5,r12,bc44 <__divdf3+0x450>
    bc3c:	01000074 	movhi	r4,1
    bc40:	1907883a 	add	r3,r3,r4
    bc44:	2808d43a 	srli	r4,r5,16
    bc48:	280a943a 	slli	r5,r5,16
    bc4c:	54ffffcc 	andi	r19,r10,65535
    bc50:	1907883a 	add	r3,r3,r4
    bc54:	2ccb883a 	add	r5,r5,r19
    bc58:	10c09336 	bltu	r2,r3,bea8 <__divdf3+0x6b4>
    bc5c:	10c0ad26 	beq	r2,r3,bf14 <__divdf3+0x720>
    bc60:	10c7c83a 	sub	r3,r2,r3
    bc64:	3167c83a 	sub	r19,r6,r5
    bc68:	34ed803a 	cmpltu	r22,r6,r19
    bc6c:	1dadc83a 	sub	r22,r3,r22
    bc70:	b400b226 	beq	r22,r16,bf3c <__divdf3+0x748>
    bc74:	b009883a 	mov	r4,r22
    bc78:	b80b883a 	mov	r5,r23
    bc7c:	d9c00115 	stw	r7,4(sp)
    bc80:	da000215 	stw	r8,8(sp)
    bc84:	00011900 	call	1190 <__udivsi3>
    bc88:	b009883a 	mov	r4,r22
    bc8c:	b80b883a 	mov	r5,r23
    bc90:	d8800315 	stw	r2,12(sp)
    bc94:	00011980 	call	1198 <__umodsi3>
    bc98:	d9800317 	ldw	r6,12(sp)
    bc9c:	1004943a 	slli	r2,r2,16
    bca0:	9808d43a 	srli	r4,r19,16
    bca4:	372d383a 	mul	r22,r6,fp
    bca8:	d9c00117 	ldw	r7,4(sp)
    bcac:	1106b03a 	or	r3,r2,r4
    bcb0:	da000217 	ldw	r8,8(sp)
    bcb4:	1d80062e 	bgeu	r3,r22,bcd0 <__divdf3+0x4dc>
    bcb8:	1c07883a 	add	r3,r3,r16
    bcbc:	30bfffc4 	addi	r2,r6,-1
    bcc0:	1c00a036 	bltu	r3,r16,bf44 <__divdf3+0x750>
    bcc4:	1d809f2e 	bgeu	r3,r22,bf44 <__divdf3+0x750>
    bcc8:	31bfff84 	addi	r6,r6,-2
    bccc:	1c07883a 	add	r3,r3,r16
    bcd0:	1dadc83a 	sub	r22,r3,r22
    bcd4:	b009883a 	mov	r4,r22
    bcd8:	b80b883a 	mov	r5,r23
    bcdc:	d9800315 	stw	r6,12(sp)
    bce0:	d9c00115 	stw	r7,4(sp)
    bce4:	da000215 	stw	r8,8(sp)
    bce8:	00011900 	call	1190 <__udivsi3>
    bcec:	b009883a 	mov	r4,r22
    bcf0:	b80b883a 	mov	r5,r23
    bcf4:	d8800015 	stw	r2,0(sp)
    bcf8:	00011980 	call	1198 <__umodsi3>
    bcfc:	da400017 	ldw	r9,0(sp)
    bd00:	1004943a 	slli	r2,r2,16
    bd04:	993fffcc 	andi	r4,r19,65535
    bd08:	4f39383a 	mul	fp,r9,fp
    bd0c:	1106b03a 	or	r3,r2,r4
    bd10:	d9800317 	ldw	r6,12(sp)
    bd14:	d9c00117 	ldw	r7,4(sp)
    bd18:	da000217 	ldw	r8,8(sp)
    bd1c:	1f00062e 	bgeu	r3,fp,bd38 <__divdf3+0x544>
    bd20:	1c07883a 	add	r3,r3,r16
    bd24:	48bfffc4 	addi	r2,r9,-1
    bd28:	1c008836 	bltu	r3,r16,bf4c <__divdf3+0x758>
    bd2c:	1f00872e 	bgeu	r3,fp,bf4c <__divdf3+0x758>
    bd30:	4a7fff84 	addi	r9,r9,-2
    bd34:	1c07883a 	add	r3,r3,r16
    bd38:	3008943a 	slli	r4,r6,16
    bd3c:	1f07c83a 	sub	r3,r3,fp
    bd40:	4926b03a 	or	r19,r9,r4
    bd44:	993fffcc 	andi	r4,r19,65535
    bd48:	980cd43a 	srli	r6,r19,16
    bd4c:	220b383a 	mul	r5,r4,r8
    bd50:	21c5383a 	mul	r2,r4,r7
    bd54:	3211383a 	mul	r8,r6,r8
    bd58:	2808d43a 	srli	r4,r5,16
    bd5c:	31cf383a 	mul	r7,r6,r7
    bd60:	4085883a 	add	r2,r8,r2
    bd64:	1105883a 	add	r2,r2,r4
    bd68:	1200022e 	bgeu	r2,r8,bd74 <__divdf3+0x580>
    bd6c:	01000074 	movhi	r4,1
    bd70:	390f883a 	add	r7,r7,r4
    bd74:	1008d43a 	srli	r4,r2,16
    bd78:	1004943a 	slli	r2,r2,16
    bd7c:	297fffcc 	andi	r5,r5,65535
    bd80:	390f883a 	add	r7,r7,r4
    bd84:	1145883a 	add	r2,r2,r5
    bd88:	19c06536 	bltu	r3,r7,bf20 <__divdf3+0x72c>
    bd8c:	19c09f26 	beq	r3,r7,c00c <__divdf3+0x818>
    bd90:	9cc00054 	ori	r19,r19,1
    bd94:	a100ffc4 	addi	r4,r20,1023
    bd98:	013f500e 	bge	zero,r4,badc <__divdf3+0x2e8>
    bd9c:	988001cc 	andi	r2,r19,7
    bda0:	10000726 	beq	r2,zero,bdc0 <__divdf3+0x5cc>
    bda4:	98c003cc 	andi	r3,r19,15
    bda8:	00800104 	movi	r2,4
    bdac:	18800426 	beq	r3,r2,bdc0 <__divdf3+0x5cc>
    bdb0:	9885883a 	add	r2,r19,r2
    bdb4:	14e1803a 	cmpltu	r16,r2,r19
    bdb8:	8c23883a 	add	r17,r17,r16
    bdbc:	1027883a 	mov	r19,r2
    bdc0:	8880402c 	andhi	r2,r17,256
    bdc4:	10000426 	beq	r2,zero,bdd8 <__divdf3+0x5e4>
    bdc8:	00bfc034 	movhi	r2,65280
    bdcc:	10bfffc4 	addi	r2,r2,-1
    bdd0:	a1010004 	addi	r4,r20,1024
    bdd4:	88a2703a 	and	r17,r17,r2
    bdd8:	0081ff84 	movi	r2,2046
    bddc:	113edf16 	blt	r2,r4,b95c <__divdf3+0x168>
    bde0:	9826d0fa 	srli	r19,r19,3
    bde4:	8804977a 	slli	r2,r17,29
    bde8:	8820927a 	slli	r16,r17,9
    bdec:	2101ffcc 	andi	r4,r4,2047
    bdf0:	14e6b03a 	or	r19,r2,r19
    bdf4:	800ad33a 	srli	r5,r16,12
    bdf8:	9180004c 	andi	r6,r18,1
    bdfc:	003edb06 	br	b96c <__divdf3+0x178>
    be00:	008000c4 	movi	r2,3
    be04:	4080a826 	beq	r8,r2,c0a8 <__divdf3+0x8b4>
    be08:	00800044 	movi	r2,1
    be0c:	4080551e 	bne	r8,r2,bf64 <__divdf3+0x770>
    be10:	e00d883a 	mov	r6,fp
    be14:	0009883a 	mov	r4,zero
    be18:	000b883a 	mov	r5,zero
    be1c:	0027883a 	mov	r19,zero
    be20:	003ed206 	br	b96c <__divdf3+0x178>
    be24:	00800434 	movhi	r2,16
    be28:	89400234 	orhi	r5,r17,8
    be2c:	10bfffc4 	addi	r2,r2,-1
    be30:	b00d883a 	mov	r6,r22
    be34:	288a703a 	and	r5,r5,r2
    be38:	003f2606 	br	bad4 <__divdf3+0x2e0>
    be3c:	d9800315 	stw	r6,12(sp)
    be40:	d9c00115 	stw	r7,4(sp)
    be44:	000d4f40 	call	d4f4 <__clzsi2>
    be48:	10c00804 	addi	r3,r2,32
    be4c:	010009c4 	movi	r4,39
    be50:	d9800317 	ldw	r6,12(sp)
    be54:	d9c00117 	ldw	r7,4(sp)
    be58:	20fee30e 	bge	r4,r3,b9e8 <__divdf3+0x1f4>
    be5c:	117ffe04 	addi	r5,r2,-8
    be60:	9162983a 	sll	r17,r18,r5
    be64:	0027883a 	mov	r19,zero
    be68:	003ee606 	br	ba04 <__divdf3+0x210>
    be6c:	3009883a 	mov	r4,r6
    be70:	d9800315 	stw	r6,12(sp)
    be74:	da000215 	stw	r8,8(sp)
    be78:	da400015 	stw	r9,0(sp)
    be7c:	000d4f40 	call	d4f4 <__clzsi2>
    be80:	10c00804 	addi	r3,r2,32
    be84:	010009c4 	movi	r4,39
    be88:	d9800317 	ldw	r6,12(sp)
    be8c:	da000217 	ldw	r8,8(sp)
    be90:	da400017 	ldw	r9,0(sp)
    be94:	20fef20e 	bge	r4,r3,ba60 <__divdf3+0x26c>
    be98:	10bffe04 	addi	r2,r2,-8
    be9c:	a8a0983a 	sll	r16,r21,r2
    bea0:	002b883a 	mov	r21,zero
    bea4:	003ef506 	br	ba7c <__divdf3+0x288>
    bea8:	354d883a 	add	r6,r6,r21
    beac:	3549803a 	cmpltu	r4,r6,r21
    beb0:	2409883a 	add	r4,r4,r16
    beb4:	2089883a 	add	r4,r4,r2
    beb8:	88bfffc4 	addi	r2,r17,-1
    bebc:	81000c2e 	bgeu	r16,r4,bef0 <__divdf3+0x6fc>
    bec0:	20c04436 	bltu	r4,r3,bfd4 <__divdf3+0x7e0>
    bec4:	19006f26 	beq	r3,r4,c084 <__divdf3+0x890>
    bec8:	20c7c83a 	sub	r3,r4,r3
    becc:	1023883a 	mov	r17,r2
    bed0:	003f6406 	br	bc64 <__divdf3+0x470>
    bed4:	9d7f1736 	bltu	r19,r21,bb34 <__divdf3+0x340>
    bed8:	9806d07a 	srli	r3,r19,1
    bedc:	880497fa 	slli	r2,r17,31
    bee0:	980c97fa 	slli	r6,r19,31
    bee4:	882cd07a 	srli	r22,r17,1
    bee8:	18a6b03a 	or	r19,r3,r2
    beec:	003f1406 	br	bb40 <__divdf3+0x34c>
    bef0:	243ff51e 	bne	r4,r16,bec8 <__divdf3+0x6d4>
    bef4:	357ff22e 	bgeu	r6,r21,bec0 <__divdf3+0x6cc>
    bef8:	80c7c83a 	sub	r3,r16,r3
    befc:	1023883a 	mov	r17,r2
    bf00:	003f5806 	br	bc64 <__divdf3+0x470>
    bf04:	1013883a 	mov	r9,r2
    bf08:	003f3d06 	br	bc00 <__divdf3+0x40c>
    bf0c:	1023883a 	mov	r17,r2
    bf10:	003f2506 	br	bba8 <__divdf3+0x3b4>
    bf14:	317fe436 	bltu	r6,r5,bea8 <__divdf3+0x6b4>
    bf18:	0007883a 	mov	r3,zero
    bf1c:	003f5106 	br	bc64 <__divdf3+0x470>
    bf20:	1c07883a 	add	r3,r3,r16
    bf24:	993fffc4 	addi	r4,r19,-1
    bf28:	1c000a2e 	bgeu	r3,r16,bf54 <__divdf3+0x760>
    bf2c:	2027883a 	mov	r19,r4
    bf30:	19ff971e 	bne	r3,r7,bd90 <__divdf3+0x59c>
    bf34:	a8bf961e 	bne	r21,r2,bd90 <__divdf3+0x59c>
    bf38:	003f9606 	br	bd94 <__divdf3+0x5a0>
    bf3c:	04ffffc4 	movi	r19,-1
    bf40:	003f9406 	br	bd94 <__divdf3+0x5a0>
    bf44:	100d883a 	mov	r6,r2
    bf48:	003f6106 	br	bcd0 <__divdf3+0x4dc>
    bf4c:	1013883a 	mov	r9,r2
    bf50:	003f7906 	br	bd38 <__divdf3+0x544>
    bf54:	19c02636 	bltu	r3,r7,bff0 <__divdf3+0x7fc>
    bf58:	38c04d26 	beq	r7,r3,c090 <__divdf3+0x89c>
    bf5c:	2027883a 	mov	r19,r4
    bf60:	003f8b06 	br	bd90 <__divdf3+0x59c>
    bf64:	e025883a 	mov	r18,fp
    bf68:	003f8a06 	br	bd94 <__divdf3+0x5a0>
    bf6c:	008007c4 	movi	r2,31
    bf70:	14002a16 	blt	r2,r16,c01c <__divdf3+0x828>
    bf74:	a5010784 	addi	r20,r20,1054
    bf78:	8d04983a 	sll	r2,r17,r20
    bf7c:	9c06d83a 	srl	r3,r19,r16
    bf80:	9d28983a 	sll	r20,r19,r20
    bf84:	8c20d83a 	srl	r16,r17,r16
    bf88:	1886b03a 	or	r3,r3,r2
    bf8c:	a004c03a 	cmpne	r2,r20,zero
    bf90:	1884b03a 	or	r2,r3,r2
    bf94:	10c001cc 	andi	r3,r2,7
    bf98:	18000726 	beq	r3,zero,bfb8 <__divdf3+0x7c4>
    bf9c:	110003cc 	andi	r4,r2,15
    bfa0:	00c00104 	movi	r3,4
    bfa4:	20c00426 	beq	r4,r3,bfb8 <__divdf3+0x7c4>
    bfa8:	10c00104 	addi	r3,r2,4
    bfac:	1885803a 	cmpltu	r2,r3,r2
    bfb0:	80a1883a 	add	r16,r16,r2
    bfb4:	1805883a 	mov	r2,r3
    bfb8:	80c0202c 	andhi	r3,r16,128
    bfbc:	18002d26 	beq	r3,zero,c074 <__divdf3+0x880>
    bfc0:	9180004c 	andi	r6,r18,1
    bfc4:	01000044 	movi	r4,1
    bfc8:	000b883a 	mov	r5,zero
    bfcc:	0027883a 	mov	r19,zero
    bfd0:	003e6606 	br	b96c <__divdf3+0x178>
    bfd4:	354d883a 	add	r6,r6,r21
    bfd8:	356d803a 	cmpltu	r22,r6,r21
    bfdc:	b42d883a 	add	r22,r22,r16
    bfe0:	b12d883a 	add	r22,r22,r4
    bfe4:	8c7fff84 	addi	r17,r17,-2
    bfe8:	b0c7c83a 	sub	r3,r22,r3
    bfec:	003f1d06 	br	bc64 <__divdf3+0x470>
    bff0:	ad4b883a 	add	r5,r21,r21
    bff4:	2d6b803a 	cmpltu	r21,r5,r21
    bff8:	ac2b883a 	add	r21,r21,r16
    bffc:	1d47883a 	add	r3,r3,r21
    c000:	993fff84 	addi	r4,r19,-2
    c004:	282b883a 	mov	r21,r5
    c008:	003fc806 	br	bf2c <__divdf3+0x738>
    c00c:	103fc41e 	bne	r2,zero,bf20 <__divdf3+0x72c>
    c010:	002b883a 	mov	r21,zero
    c014:	a8bf5e1e 	bne	r21,r2,bd90 <__divdf3+0x59c>
    c018:	003f5e06 	br	bd94 <__divdf3+0x5a0>
    c01c:	00bef884 	movi	r2,-1054
    c020:	1505c83a 	sub	r2,r2,r20
    c024:	00c00804 	movi	r3,32
    c028:	8884d83a 	srl	r2,r17,r2
    c02c:	80c01c26 	beq	r16,r3,c0a0 <__divdf3+0x8ac>
    c030:	a0c10f84 	addi	r3,r20,1086
    c034:	88c6983a 	sll	r3,r17,r3
    c038:	1cc6b03a 	or	r3,r3,r19
    c03c:	1806c03a 	cmpne	r3,r3,zero
    c040:	1884b03a 	or	r2,r3,r2
    c044:	140001cc 	andi	r16,r2,7
    c048:	8000061e 	bne	r16,zero,c064 <__divdf3+0x870>
    c04c:	000b883a 	mov	r5,zero
    c050:	1004d0fa 	srli	r2,r2,3
    c054:	9180004c 	andi	r6,r18,1
    c058:	0009883a 	mov	r4,zero
    c05c:	1426b03a 	or	r19,r2,r16
    c060:	003e4206 	br	b96c <__divdf3+0x178>
    c064:	110003cc 	andi	r4,r2,15
    c068:	00c00104 	movi	r3,4
    c06c:	0021883a 	mov	r16,zero
    c070:	20ffcd1e 	bne	r4,r3,bfa8 <__divdf3+0x7b4>
    c074:	800a927a 	slli	r5,r16,9
    c078:	8020977a 	slli	r16,r16,29
    c07c:	280ad33a 	srli	r5,r5,12
    c080:	003ff306 	br	c050 <__divdf3+0x85c>
    c084:	317fd336 	bltu	r6,r5,bfd4 <__divdf3+0x7e0>
    c088:	1023883a 	mov	r17,r2
    c08c:	003fa206 	br	bf18 <__divdf3+0x724>
    c090:	a8bfd736 	bltu	r21,r2,bff0 <__divdf3+0x7fc>
    c094:	2027883a 	mov	r19,r4
    c098:	a8bf3d1e 	bne	r21,r2,bd90 <__divdf3+0x59c>
    c09c:	003f3d06 	br	bd94 <__divdf3+0x5a0>
    c0a0:	0007883a 	mov	r3,zero
    c0a4:	003fe406 	br	c038 <__divdf3+0x844>
    c0a8:	00800434 	movhi	r2,16
    c0ac:	89400234 	orhi	r5,r17,8
    c0b0:	10bfffc4 	addi	r2,r2,-1
    c0b4:	e00d883a 	mov	r6,fp
    c0b8:	288a703a 	and	r5,r5,r2
    c0bc:	003e8506 	br	bad4 <__divdf3+0x2e0>

0000c0c0 <__eqdf2>:
    c0c0:	2804d53a 	srli	r2,r5,20
    c0c4:	3806d53a 	srli	r3,r7,20
    c0c8:	02000434 	movhi	r8,16
    c0cc:	423fffc4 	addi	r8,r8,-1
    c0d0:	1081ffcc 	andi	r2,r2,2047
    c0d4:	0241ffc4 	movi	r9,2047
    c0d8:	2a14703a 	and	r10,r5,r8
    c0dc:	18c1ffcc 	andi	r3,r3,2047
    c0e0:	3a10703a 	and	r8,r7,r8
    c0e4:	280ad7fa 	srli	r5,r5,31
    c0e8:	380ed7fa 	srli	r7,r7,31
    c0ec:	12400f26 	beq	r2,r9,c12c <__eqdf2+0x6c>
    c0f0:	0241ffc4 	movi	r9,2047
    c0f4:	1a400326 	beq	r3,r9,c104 <__eqdf2+0x44>
    c0f8:	10c00526 	beq	r2,r3,c110 <__eqdf2+0x50>
    c0fc:	00800044 	movi	r2,1
    c100:	f800283a 	ret
    c104:	4192b03a 	or	r9,r8,r6
    c108:	483ffc1e 	bne	r9,zero,c0fc <__eqdf2+0x3c>
    c10c:	10fffb1e 	bne	r2,r3,c0fc <__eqdf2+0x3c>
    c110:	523ffa1e 	bne	r10,r8,c0fc <__eqdf2+0x3c>
    c114:	21bff91e 	bne	r4,r6,c0fc <__eqdf2+0x3c>
    c118:	29c00826 	beq	r5,r7,c13c <__eqdf2+0x7c>
    c11c:	103ff71e 	bne	r2,zero,c0fc <__eqdf2+0x3c>
    c120:	5104b03a 	or	r2,r10,r4
    c124:	1004c03a 	cmpne	r2,r2,zero
    c128:	f800283a 	ret
    c12c:	5112b03a 	or	r9,r10,r4
    c130:	483fef26 	beq	r9,zero,c0f0 <__eqdf2+0x30>
    c134:	00800044 	movi	r2,1
    c138:	f800283a 	ret
    c13c:	0005883a 	mov	r2,zero
    c140:	f800283a 	ret

0000c144 <__gedf2>:
    c144:	2804d53a 	srli	r2,r5,20
    c148:	3806d53a 	srli	r3,r7,20
    c14c:	02000434 	movhi	r8,16
    c150:	423fffc4 	addi	r8,r8,-1
    c154:	0241ffc4 	movi	r9,2047
    c158:	1081ffcc 	andi	r2,r2,2047
    c15c:	2a14703a 	and	r10,r5,r8
    c160:	1a46703a 	and	r3,r3,r9
    c164:	3a10703a 	and	r8,r7,r8
    c168:	280ad7fa 	srli	r5,r5,31
    c16c:	380ed7fa 	srli	r7,r7,31
    c170:	12400b26 	beq	r2,r9,c1a0 <__gedf2+0x5c>
    c174:	1a401626 	beq	r3,r9,c1d0 <__gedf2+0x8c>
    c178:	10000c1e 	bne	r2,zero,c1ac <__gedf2+0x68>
    c17c:	5112b03a 	or	r9,r10,r4
    c180:	4813003a 	cmpeq	r9,r9,zero
    c184:	4817883a 	mov	r11,r9
    c188:	18000c1e 	bne	r3,zero,c1bc <__gedf2+0x78>
    c18c:	4198b03a 	or	r12,r8,r6
    c190:	60000a1e 	bne	r12,zero,c1bc <__gedf2+0x78>
    c194:	48001326 	beq	r9,zero,c1e4 <__gedf2+0xa0>
    c198:	0005883a 	mov	r2,zero
    c19c:	f800283a 	ret
    c1a0:	5112b03a 	or	r9,r10,r4
    c1a4:	4800191e 	bne	r9,zero,c20c <__gedf2+0xc8>
    c1a8:	18800926 	beq	r3,r2,c1d0 <__gedf2+0x8c>
    c1ac:	18000b1e 	bne	r3,zero,c1dc <__gedf2+0x98>
    c1b0:	4192b03a 	or	r9,r8,r6
    c1b4:	0017883a 	mov	r11,zero
    c1b8:	48000a26 	beq	r9,zero,c1e4 <__gedf2+0xa0>
    c1bc:	39c03fcc 	andi	r7,r7,255
    c1c0:	58000726 	beq	r11,zero,c1e0 <__gedf2+0x9c>
    c1c4:	3800081e 	bne	r7,zero,c1e8 <__gedf2+0xa4>
    c1c8:	00bfffc4 	movi	r2,-1
    c1cc:	f800283a 	ret
    c1d0:	4192b03a 	or	r9,r8,r6
    c1d4:	48000d1e 	bne	r9,zero,c20c <__gedf2+0xc8>
    c1d8:	103fe826 	beq	r2,zero,c17c <__gedf2+0x38>
    c1dc:	39c03fcc 	andi	r7,r7,255
    c1e0:	29c00326 	beq	r5,r7,c1f0 <__gedf2+0xac>
    c1e4:	283ff81e 	bne	r5,zero,c1c8 <__gedf2+0x84>
    c1e8:	00800044 	movi	r2,1
    c1ec:	f800283a 	ret
    c1f0:	18bffc16 	blt	r3,r2,c1e4 <__gedf2+0xa0>
    c1f4:	10c00316 	blt	r2,r3,c204 <__gedf2+0xc0>
    c1f8:	42bffa36 	bltu	r8,r10,c1e4 <__gedf2+0xa0>
    c1fc:	52000526 	beq	r10,r8,c214 <__gedf2+0xd0>
    c200:	523fe52e 	bgeu	r10,r8,c198 <__gedf2+0x54>
    c204:	283ff026 	beq	r5,zero,c1c8 <__gedf2+0x84>
    c208:	003ff706 	br	c1e8 <__gedf2+0xa4>
    c20c:	00bfff84 	movi	r2,-2
    c210:	f800283a 	ret
    c214:	313ff336 	bltu	r6,r4,c1e4 <__gedf2+0xa0>
    c218:	21bfdf2e 	bgeu	r4,r6,c198 <__gedf2+0x54>
    c21c:	283fea26 	beq	r5,zero,c1c8 <__gedf2+0x84>
    c220:	003ff106 	br	c1e8 <__gedf2+0xa4>

0000c224 <__ledf2>:
    c224:	2804d53a 	srli	r2,r5,20
    c228:	3810d53a 	srli	r8,r7,20
    c22c:	00c00434 	movhi	r3,16
    c230:	18ffffc4 	addi	r3,r3,-1
    c234:	0241ffc4 	movi	r9,2047
    c238:	1081ffcc 	andi	r2,r2,2047
    c23c:	28d4703a 	and	r10,r5,r3
    c240:	4250703a 	and	r8,r8,r9
    c244:	38c6703a 	and	r3,r7,r3
    c248:	280ad7fa 	srli	r5,r5,31
    c24c:	380ed7fa 	srli	r7,r7,31
    c250:	12400b26 	beq	r2,r9,c280 <__ledf2+0x5c>
    c254:	42401926 	beq	r8,r9,c2bc <__ledf2+0x98>
    c258:	10000c1e 	bne	r2,zero,c28c <__ledf2+0x68>
    c25c:	5112b03a 	or	r9,r10,r4
    c260:	4813003a 	cmpeq	r9,r9,zero
    c264:	4817883a 	mov	r11,r9
    c268:	40000f26 	beq	r8,zero,c2a8 <__ledf2+0x84>
    c26c:	39c03fcc 	andi	r7,r7,255
    c270:	58001826 	beq	r11,zero,c2d4 <__ledf2+0xb0>
    c274:	38000a1e 	bne	r7,zero,c2a0 <__ledf2+0x7c>
    c278:	00bfffc4 	movi	r2,-1
    c27c:	f800283a 	ret
    c280:	5112b03a 	or	r9,r10,r4
    c284:	48000f1e 	bne	r9,zero,c2c4 <__ledf2+0xa0>
    c288:	40800c26 	beq	r8,r2,c2bc <__ledf2+0x98>
    c28c:	4000101e 	bne	r8,zero,c2d0 <__ledf2+0xac>
    c290:	1992b03a 	or	r9,r3,r6
    c294:	0017883a 	mov	r11,zero
    c298:	483ff41e 	bne	r9,zero,c26c <__ledf2+0x48>
    c29c:	283ff61e 	bne	r5,zero,c278 <__ledf2+0x54>
    c2a0:	00800044 	movi	r2,1
    c2a4:	f800283a 	ret
    c2a8:	1998b03a 	or	r12,r3,r6
    c2ac:	603fef1e 	bne	r12,zero,c26c <__ledf2+0x48>
    c2b0:	483ffa26 	beq	r9,zero,c29c <__ledf2+0x78>
    c2b4:	0005883a 	mov	r2,zero
    c2b8:	f800283a 	ret
    c2bc:	1992b03a 	or	r9,r3,r6
    c2c0:	48000226 	beq	r9,zero,c2cc <__ledf2+0xa8>
    c2c4:	00800084 	movi	r2,2
    c2c8:	f800283a 	ret
    c2cc:	103fe326 	beq	r2,zero,c25c <__ledf2+0x38>
    c2d0:	39c03fcc 	andi	r7,r7,255
    c2d4:	29fff11e 	bne	r5,r7,c29c <__ledf2+0x78>
    c2d8:	40bff016 	blt	r8,r2,c29c <__ledf2+0x78>
    c2dc:	12000316 	blt	r2,r8,c2ec <__ledf2+0xc8>
    c2e0:	1abfee36 	bltu	r3,r10,c29c <__ledf2+0x78>
    c2e4:	50c00326 	beq	r10,r3,c2f4 <__ledf2+0xd0>
    c2e8:	50fff22e 	bgeu	r10,r3,c2b4 <__ledf2+0x90>
    c2ec:	283fe226 	beq	r5,zero,c278 <__ledf2+0x54>
    c2f0:	003feb06 	br	c2a0 <__ledf2+0x7c>
    c2f4:	313fe936 	bltu	r6,r4,c29c <__ledf2+0x78>
    c2f8:	21bfee2e 	bgeu	r4,r6,c2b4 <__ledf2+0x90>
    c2fc:	283fde26 	beq	r5,zero,c278 <__ledf2+0x54>
    c300:	003fe706 	br	c2a0 <__ledf2+0x7c>

0000c304 <__muldf3>:
    c304:	defff204 	addi	sp,sp,-56
    c308:	2804d53a 	srli	r2,r5,20
    c30c:	dd800a15 	stw	r22,40(sp)
    c310:	282cd7fa 	srli	r22,r5,31
    c314:	dc000415 	stw	r16,16(sp)
    c318:	04000434 	movhi	r16,16
    c31c:	df000c15 	stw	fp,48(sp)
    c320:	dd000815 	stw	r20,32(sp)
    c324:	dcc00715 	stw	r19,28(sp)
    c328:	dc800615 	stw	r18,24(sp)
    c32c:	dc400515 	stw	r17,20(sp)
    c330:	843fffc4 	addi	r16,r16,-1
    c334:	dfc00d15 	stw	ra,52(sp)
    c338:	ddc00b15 	stw	r23,44(sp)
    c33c:	dd400915 	stw	r21,36(sp)
    c340:	1501ffcc 	andi	r20,r2,2047
    c344:	2023883a 	mov	r17,r4
    c348:	2025883a 	mov	r18,r4
    c34c:	2c20703a 	and	r16,r5,r16
    c350:	b027883a 	mov	r19,r22
    c354:	b7003fcc 	andi	fp,r22,255
    c358:	a0005926 	beq	r20,zero,c4c0 <__muldf3+0x1bc>
    c35c:	0081ffc4 	movi	r2,2047
    c360:	a0803426 	beq	r20,r2,c434 <__muldf3+0x130>
    c364:	84000434 	orhi	r16,r16,16
    c368:	2004d77a 	srli	r2,r4,29
    c36c:	802090fa 	slli	r16,r16,3
    c370:	202490fa 	slli	r18,r4,3
    c374:	a53f0044 	addi	r20,r20,-1023
    c378:	80a0b03a 	or	r16,r16,r2
    c37c:	002b883a 	mov	r21,zero
    c380:	0015883a 	mov	r10,zero
    c384:	3812d53a 	srli	r9,r7,20
    c388:	3806d7fa 	srli	r3,r7,31
    c38c:	02000434 	movhi	r8,16
    c390:	423fffc4 	addi	r8,r8,-1
    c394:	4941ffcc 	andi	r5,r9,2047
    c398:	302f883a 	mov	r23,r6
    c39c:	3a22703a 	and	r17,r7,r8
    c3a0:	1ac03fcc 	andi	r11,r3,255
    c3a4:	28006226 	beq	r5,zero,c530 <__muldf3+0x22c>
    c3a8:	0081ffc4 	movi	r2,2047
    c3ac:	28805a26 	beq	r5,r2,c518 <__muldf3+0x214>
    c3b0:	8a000434 	orhi	r8,r17,16
    c3b4:	3004d77a 	srli	r2,r6,29
    c3b8:	401090fa 	slli	r8,r8,3
    c3bc:	302e90fa 	slli	r23,r6,3
    c3c0:	297f0044 	addi	r5,r5,-1023
    c3c4:	40a2b03a 	or	r17,r8,r2
    c3c8:	0013883a 	mov	r9,zero
    c3cc:	4d4cb03a 	or	r6,r9,r21
    c3d0:	300c90ba 	slli	r6,r6,2
    c3d4:	02000074 	movhi	r8,1
    c3d8:	4230fd04 	addi	r8,r8,-15372
    c3dc:	320d883a 	add	r6,r6,r8
    c3e0:	31800017 	ldw	r6,0(r6)
    c3e4:	a14b883a 	add	r5,r20,r5
    c3e8:	1dacf03a 	xor	r22,r3,r22
    c3ec:	2b000044 	addi	r12,r5,1
    c3f0:	3000683a 	jmp	r6
    c3f4:	0000c630 	cmpltui	zero,zero,792
    c3f8:	0000c61c 	xori	zero,zero,792
    c3fc:	0000c61c 	xori	zero,zero,792
    c400:	0000c608 	cmpgei	zero,zero,792
    c404:	0000c450 	cmplti	zero,zero,785
    c408:	0000c450 	cmplti	zero,zero,785
    c40c:	0000c5f0 	cmpltui	zero,zero,791
    c410:	0000c608 	cmpgei	zero,zero,792
    c414:	0000c450 	cmplti	zero,zero,785
    c418:	0000c5f0 	cmpltui	zero,zero,791
    c41c:	0000c450 	cmplti	zero,zero,785
    c420:	0000c608 	cmpgei	zero,zero,792
    c424:	0000c454 	movui	zero,785
    c428:	0000c454 	movui	zero,785
    c42c:	0000c454 	movui	zero,785
    c430:	0000c82c 	andhi	zero,zero,800
    c434:	8104b03a 	or	r2,r16,r4
    c438:	10006a1e 	bne	r2,zero,c5e4 <__muldf3+0x2e0>
    c43c:	05400204 	movi	r21,8
    c440:	0021883a 	mov	r16,zero
    c444:	0025883a 	mov	r18,zero
    c448:	02800084 	movi	r10,2
    c44c:	003fcd06 	br	c384 <__muldf3+0x80>
    c450:	b039883a 	mov	fp,r22
    c454:	00800084 	movi	r2,2
    c458:	50804e1e 	bne	r10,r2,c594 <__muldf3+0x290>
    c45c:	e4c0004c 	andi	r19,fp,1
    c460:	0101ffc4 	movi	r4,2047
    c464:	0021883a 	mov	r16,zero
    c468:	0025883a 	mov	r18,zero
    c46c:	2008953a 	slli	r4,r4,20
    c470:	98c03fcc 	andi	r3,r19,255
    c474:	01400434 	movhi	r5,16
    c478:	297fffc4 	addi	r5,r5,-1
    c47c:	180697fa 	slli	r3,r3,31
    c480:	8160703a 	and	r16,r16,r5
    c484:	8120b03a 	or	r16,r16,r4
    c488:	80c6b03a 	or	r3,r16,r3
    c48c:	9005883a 	mov	r2,r18
    c490:	dfc00d17 	ldw	ra,52(sp)
    c494:	df000c17 	ldw	fp,48(sp)
    c498:	ddc00b17 	ldw	r23,44(sp)
    c49c:	dd800a17 	ldw	r22,40(sp)
    c4a0:	dd400917 	ldw	r21,36(sp)
    c4a4:	dd000817 	ldw	r20,32(sp)
    c4a8:	dcc00717 	ldw	r19,28(sp)
    c4ac:	dc800617 	ldw	r18,24(sp)
    c4b0:	dc400517 	ldw	r17,20(sp)
    c4b4:	dc000417 	ldw	r16,16(sp)
    c4b8:	dec00e04 	addi	sp,sp,56
    c4bc:	f800283a 	ret
    c4c0:	8104b03a 	or	r2,r16,r4
    c4c4:	10004226 	beq	r2,zero,c5d0 <__muldf3+0x2cc>
    c4c8:	8000f926 	beq	r16,zero,c8b0 <__muldf3+0x5ac>
    c4cc:	8009883a 	mov	r4,r16
    c4d0:	d9800315 	stw	r6,12(sp)
    c4d4:	d9c00015 	stw	r7,0(sp)
    c4d8:	000d4f40 	call	d4f4 <__clzsi2>
    c4dc:	d9800317 	ldw	r6,12(sp)
    c4e0:	d9c00017 	ldw	r7,0(sp)
    c4e4:	1007883a 	mov	r3,r2
    c4e8:	01000a04 	movi	r4,40
    c4ec:	18bffe04 	addi	r2,r3,-8
    c4f0:	20c9c83a 	sub	r4,r4,r3
    c4f4:	80a0983a 	sll	r16,r16,r2
    c4f8:	8908d83a 	srl	r4,r17,r4
    c4fc:	88a4983a 	sll	r18,r17,r2
    c500:	2420b03a 	or	r16,r4,r16
    c504:	017f0344 	movi	r5,-1011
    c508:	28e9c83a 	sub	r20,r5,r3
    c50c:	002b883a 	mov	r21,zero
    c510:	0015883a 	mov	r10,zero
    c514:	003f9b06 	br	c384 <__muldf3+0x80>
    c518:	8984b03a 	or	r2,r17,r6
    c51c:	10002a1e 	bne	r2,zero,c5c8 <__muldf3+0x2c4>
    c520:	0023883a 	mov	r17,zero
    c524:	002f883a 	mov	r23,zero
    c528:	02400084 	movi	r9,2
    c52c:	003fa706 	br	c3cc <__muldf3+0xc8>
    c530:	8984b03a 	or	r2,r17,r6
    c534:	10002026 	beq	r2,zero,c5b8 <__muldf3+0x2b4>
    c538:	8800cc26 	beq	r17,zero,c86c <__muldf3+0x568>
    c53c:	8809883a 	mov	r4,r17
    c540:	d8c00215 	stw	r3,8(sp)
    c544:	d9800315 	stw	r6,12(sp)
    c548:	da800015 	stw	r10,0(sp)
    c54c:	dac00115 	stw	r11,4(sp)
    c550:	000d4f40 	call	d4f4 <__clzsi2>
    c554:	d8c00217 	ldw	r3,8(sp)
    c558:	d9800317 	ldw	r6,12(sp)
    c55c:	da800017 	ldw	r10,0(sp)
    c560:	dac00117 	ldw	r11,4(sp)
    c564:	1009883a 	mov	r4,r2
    c568:	01400a04 	movi	r5,40
    c56c:	25fffe04 	addi	r23,r4,-8
    c570:	290bc83a 	sub	r5,r5,r4
    c574:	8dd0983a 	sll	r8,r17,r23
    c578:	314ad83a 	srl	r5,r6,r5
    c57c:	35ee983a 	sll	r23,r6,r23
    c580:	2a22b03a 	or	r17,r5,r8
    c584:	017f0344 	movi	r5,-1011
    c588:	290bc83a 	sub	r5,r5,r4
    c58c:	0013883a 	mov	r9,zero
    c590:	003f8e06 	br	c3cc <__muldf3+0xc8>
    c594:	008000c4 	movi	r2,3
    c598:	50811d26 	beq	r10,r2,ca10 <__muldf3+0x70c>
    c59c:	00800044 	movi	r2,1
    c5a0:	5080e01e 	bne	r10,r2,c924 <__muldf3+0x620>
    c5a4:	e0a6703a 	and	r19,fp,r2
    c5a8:	0009883a 	mov	r4,zero
    c5ac:	0021883a 	mov	r16,zero
    c5b0:	0025883a 	mov	r18,zero
    c5b4:	003fad06 	br	c46c <__muldf3+0x168>
    c5b8:	0023883a 	mov	r17,zero
    c5bc:	002f883a 	mov	r23,zero
    c5c0:	02400044 	movi	r9,1
    c5c4:	003f8106 	br	c3cc <__muldf3+0xc8>
    c5c8:	024000c4 	movi	r9,3
    c5cc:	003f7f06 	br	c3cc <__muldf3+0xc8>
    c5d0:	05400104 	movi	r21,4
    c5d4:	0021883a 	mov	r16,zero
    c5d8:	0025883a 	mov	r18,zero
    c5dc:	02800044 	movi	r10,1
    c5e0:	003f6806 	br	c384 <__muldf3+0x80>
    c5e4:	05400304 	movi	r21,12
    c5e8:	028000c4 	movi	r10,3
    c5ec:	003f6506 	br	c384 <__muldf3+0x80>
    c5f0:	04000434 	movhi	r16,16
    c5f4:	0027883a 	mov	r19,zero
    c5f8:	843fffc4 	addi	r16,r16,-1
    c5fc:	04bfffc4 	movi	r18,-1
    c600:	0101ffc4 	movi	r4,2047
    c604:	003f9906 	br	c46c <__muldf3+0x168>
    c608:	8821883a 	mov	r16,r17
    c60c:	b825883a 	mov	r18,r23
    c610:	5839883a 	mov	fp,r11
    c614:	4815883a 	mov	r10,r9
    c618:	003f8e06 	br	c454 <__muldf3+0x150>
    c61c:	8821883a 	mov	r16,r17
    c620:	b825883a 	mov	r18,r23
    c624:	b039883a 	mov	fp,r22
    c628:	4815883a 	mov	r10,r9
    c62c:	003f8906 	br	c454 <__muldf3+0x150>
    c630:	b80cd43a 	srli	r6,r23,16
    c634:	9006d43a 	srli	r3,r18,16
    c638:	90bfffcc 	andi	r2,r18,65535
    c63c:	bdffffcc 	andi	r23,r23,65535
    c640:	b891383a 	mul	r8,r23,r2
    c644:	b8c9383a 	mul	r4,r23,r3
    c648:	309b383a 	mul	r13,r6,r2
    c64c:	400ed43a 	srli	r7,r8,16
    c650:	30df383a 	mul	r15,r6,r3
    c654:	235b883a 	add	r13,r4,r13
    c658:	69db883a 	add	r13,r13,r7
    c65c:	6900022e 	bgeu	r13,r4,c668 <__muldf3+0x364>
    c660:	01000074 	movhi	r4,1
    c664:	791f883a 	add	r15,r15,r4
    c668:	8828d43a 	srli	r20,r17,16
    c66c:	8c7fffcc 	andi	r17,r17,65535
    c670:	888f383a 	mul	r7,r17,r2
    c674:	88d3383a 	mul	r9,r17,r3
    c678:	a0a5383a 	mul	r18,r20,r2
    c67c:	3816d43a 	srli	r11,r7,16
    c680:	6814943a 	slli	r10,r13,16
    c684:	4ca5883a 	add	r18,r9,r18
    c688:	423fffcc 	andi	r8,r8,65535
    c68c:	92e5883a 	add	r18,r18,r11
    c690:	6808d43a 	srli	r4,r13,16
    c694:	5215883a 	add	r10,r10,r8
    c698:	a0c7383a 	mul	r3,r20,r3
    c69c:	9240022e 	bgeu	r18,r9,c6a8 <__muldf3+0x3a4>
    c6a0:	00800074 	movhi	r2,1
    c6a4:	1887883a 	add	r3,r3,r2
    c6a8:	802ad43a 	srli	r21,r16,16
    c6ac:	80bfffcc 	andi	r2,r16,65535
    c6b0:	b893383a 	mul	r9,r23,r2
    c6b4:	3091383a 	mul	r8,r6,r2
    c6b8:	bd6f383a 	mul	r23,r23,r21
    c6bc:	9026943a 	slli	r19,r18,16
    c6c0:	481ad43a 	srli	r13,r9,16
    c6c4:	9024d43a 	srli	r18,r18,16
    c6c8:	39ffffcc 	andi	r7,r7,65535
    c6cc:	ba11883a 	add	r8,r23,r8
    c6d0:	99e7883a 	add	r19,r19,r7
    c6d4:	4351883a 	add	r8,r8,r13
    c6d8:	1c97883a 	add	r11,r3,r18
    c6dc:	354d383a 	mul	r6,r6,r21
    c6e0:	9925883a 	add	r18,r19,r4
    c6e4:	45c0022e 	bgeu	r8,r23,c6f0 <__muldf3+0x3ec>
    c6e8:	00c00074 	movhi	r3,1
    c6ec:	30cd883a 	add	r6,r6,r3
    c6f0:	8889383a 	mul	r4,r17,r2
    c6f4:	8d63383a 	mul	r17,r17,r21
    c6f8:	a085383a 	mul	r2,r20,r2
    c6fc:	200ed43a 	srli	r7,r4,16
    c700:	401cd43a 	srli	r14,r8,16
    c704:	401a943a 	slli	r13,r8,16
    c708:	8885883a 	add	r2,r17,r2
    c70c:	4a3fffcc 	andi	r8,r9,65535
    c710:	11c5883a 	add	r2,r2,r7
    c714:	339d883a 	add	r14,r6,r14
    c718:	6a11883a 	add	r8,r13,r8
    c71c:	a561383a 	mul	r16,r20,r21
    c720:	1440022e 	bgeu	r2,r17,c72c <__muldf3+0x428>
    c724:	00c00074 	movhi	r3,1
    c728:	80e1883a 	add	r16,r16,r3
    c72c:	1006943a 	slli	r3,r2,16
    c730:	213fffcc 	andi	r4,r4,65535
    c734:	93db883a 	add	r13,r18,r15
    c738:	1909883a 	add	r4,r3,r4
    c73c:	22c7883a 	add	r3,r4,r11
    c740:	6cd3803a 	cmpltu	r9,r13,r19
    c744:	6a09883a 	add	r4,r13,r8
    c748:	1a5b883a 	add	r13,r3,r9
    c74c:	2211803a 	cmpltu	r8,r4,r8
    c750:	734d883a 	add	r6,r14,r13
    c754:	100ed43a 	srli	r7,r2,16
    c758:	6a53803a 	cmpltu	r9,r13,r9
    c75c:	3205883a 	add	r2,r6,r8
    c760:	1ac7803a 	cmpltu	r3,r3,r11
    c764:	1211803a 	cmpltu	r8,r2,r8
    c768:	48c6b03a 	or	r3,r9,r3
    c76c:	338d803a 	cmpltu	r6,r6,r14
    c770:	19c7883a 	add	r3,r3,r7
    c774:	418cb03a 	or	r6,r8,r6
    c778:	1987883a 	add	r3,r3,r6
    c77c:	2024927a 	slli	r18,r4,9
    c780:	1c07883a 	add	r3,r3,r16
    c784:	1806927a 	slli	r3,r3,9
    c788:	1020d5fa 	srli	r16,r2,23
    c78c:	2008d5fa 	srli	r4,r4,23
    c790:	9294b03a 	or	r10,r18,r10
    c794:	1004927a 	slli	r2,r2,9
    c798:	5024c03a 	cmpne	r18,r10,zero
    c79c:	1c20b03a 	or	r16,r3,r16
    c7a0:	9108b03a 	or	r4,r18,r4
    c7a4:	80c0402c 	andhi	r3,r16,256
    c7a8:	20a4b03a 	or	r18,r4,r2
    c7ac:	18000726 	beq	r3,zero,c7cc <__muldf3+0x4c8>
    c7b0:	9006d07a 	srli	r3,r18,1
    c7b4:	800897fa 	slli	r4,r16,31
    c7b8:	9080004c 	andi	r2,r18,1
    c7bc:	8020d07a 	srli	r16,r16,1
    c7c0:	10c4b03a 	or	r2,r2,r3
    c7c4:	1124b03a 	or	r18,r2,r4
    c7c8:	600b883a 	mov	r5,r12
    c7cc:	2900ffc4 	addi	r4,r5,1023
    c7d0:	01004b0e 	bge	zero,r4,c900 <__muldf3+0x5fc>
    c7d4:	908001cc 	andi	r2,r18,7
    c7d8:	10000726 	beq	r2,zero,c7f8 <__muldf3+0x4f4>
    c7dc:	90c003cc 	andi	r3,r18,15
    c7e0:	00800104 	movi	r2,4
    c7e4:	18800426 	beq	r3,r2,c7f8 <__muldf3+0x4f4>
    c7e8:	9087883a 	add	r3,r18,r2
    c7ec:	1c85803a 	cmpltu	r2,r3,r18
    c7f0:	80a1883a 	add	r16,r16,r2
    c7f4:	1825883a 	mov	r18,r3
    c7f8:	8080402c 	andhi	r2,r16,256
    c7fc:	10000426 	beq	r2,zero,c810 <__muldf3+0x50c>
    c800:	00bfc034 	movhi	r2,65280
    c804:	10bfffc4 	addi	r2,r2,-1
    c808:	29010004 	addi	r4,r5,1024
    c80c:	80a0703a 	and	r16,r16,r2
    c810:	0081ff84 	movi	r2,2046
    c814:	1100320e 	bge	r2,r4,c8e0 <__muldf3+0x5dc>
    c818:	b4c0004c 	andi	r19,r22,1
    c81c:	0101ffc4 	movi	r4,2047
    c820:	0021883a 	mov	r16,zero
    c824:	0025883a 	mov	r18,zero
    c828:	003f1006 	br	c46c <__muldf3+0x168>
    c82c:	8080022c 	andhi	r2,r16,8
    c830:	10000926 	beq	r2,zero,c858 <__muldf3+0x554>
    c834:	8880022c 	andhi	r2,r17,8
    c838:	1000071e 	bne	r2,zero,c858 <__muldf3+0x554>
    c83c:	00800434 	movhi	r2,16
    c840:	8c000234 	orhi	r16,r17,8
    c844:	10bfffc4 	addi	r2,r2,-1
    c848:	1827883a 	mov	r19,r3
    c84c:	80a0703a 	and	r16,r16,r2
    c850:	b825883a 	mov	r18,r23
    c854:	003f6a06 	br	c600 <__muldf3+0x2fc>
    c858:	00800434 	movhi	r2,16
    c85c:	84000234 	orhi	r16,r16,8
    c860:	10bfffc4 	addi	r2,r2,-1
    c864:	80a0703a 	and	r16,r16,r2
    c868:	003f6506 	br	c600 <__muldf3+0x2fc>
    c86c:	3009883a 	mov	r4,r6
    c870:	d8c00215 	stw	r3,8(sp)
    c874:	d9800315 	stw	r6,12(sp)
    c878:	da800015 	stw	r10,0(sp)
    c87c:	dac00115 	stw	r11,4(sp)
    c880:	000d4f40 	call	d4f4 <__clzsi2>
    c884:	11000804 	addi	r4,r2,32
    c888:	014009c4 	movi	r5,39
    c88c:	d8c00217 	ldw	r3,8(sp)
    c890:	d9800317 	ldw	r6,12(sp)
    c894:	da800017 	ldw	r10,0(sp)
    c898:	dac00117 	ldw	r11,4(sp)
    c89c:	293f320e 	bge	r5,r4,c568 <__muldf3+0x264>
    c8a0:	10bffe04 	addi	r2,r2,-8
    c8a4:	b8a2983a 	sll	r17,r23,r2
    c8a8:	002f883a 	mov	r23,zero
    c8ac:	003f3506 	br	c584 <__muldf3+0x280>
    c8b0:	d9800315 	stw	r6,12(sp)
    c8b4:	d9c00015 	stw	r7,0(sp)
    c8b8:	000d4f40 	call	d4f4 <__clzsi2>
    c8bc:	10c00804 	addi	r3,r2,32
    c8c0:	010009c4 	movi	r4,39
    c8c4:	d9800317 	ldw	r6,12(sp)
    c8c8:	d9c00017 	ldw	r7,0(sp)
    c8cc:	20ff060e 	bge	r4,r3,c4e8 <__muldf3+0x1e4>
    c8d0:	10bffe04 	addi	r2,r2,-8
    c8d4:	88a0983a 	sll	r16,r17,r2
    c8d8:	0025883a 	mov	r18,zero
    c8dc:	003f0906 	br	c504 <__muldf3+0x200>
    c8e0:	9004d0fa 	srli	r2,r18,3
    c8e4:	8024977a 	slli	r18,r16,29
    c8e8:	8020927a 	slli	r16,r16,9
    c8ec:	2101ffcc 	andi	r4,r4,2047
    c8f0:	90a4b03a 	or	r18,r18,r2
    c8f4:	8020d33a 	srli	r16,r16,12
    c8f8:	b4c0004c 	andi	r19,r22,1
    c8fc:	003edb06 	br	c46c <__muldf3+0x168>
    c900:	00ff0084 	movi	r3,-1022
    c904:	1947c83a 	sub	r3,r3,r5
    c908:	00800e04 	movi	r2,56
    c90c:	10c0080e 	bge	r2,r3,c930 <__muldf3+0x62c>
    c910:	b4c0004c 	andi	r19,r22,1
    c914:	0009883a 	mov	r4,zero
    c918:	0021883a 	mov	r16,zero
    c91c:	0025883a 	mov	r18,zero
    c920:	003ed206 	br	c46c <__muldf3+0x168>
    c924:	600b883a 	mov	r5,r12
    c928:	e02d883a 	mov	r22,fp
    c92c:	003fa706 	br	c7cc <__muldf3+0x4c8>
    c930:	008007c4 	movi	r2,31
    c934:	10c01816 	blt	r2,r3,c998 <__muldf3+0x694>
    c938:	29410784 	addi	r5,r5,1054
    c93c:	8144983a 	sll	r2,r16,r5
    c940:	90c8d83a 	srl	r4,r18,r3
    c944:	914a983a 	sll	r5,r18,r5
    c948:	80c6d83a 	srl	r3,r16,r3
    c94c:	2088b03a 	or	r4,r4,r2
    c950:	2804c03a 	cmpne	r2,r5,zero
    c954:	2084b03a 	or	r2,r4,r2
    c958:	110001cc 	andi	r4,r2,7
    c95c:	20000726 	beq	r4,zero,c97c <__muldf3+0x678>
    c960:	114003cc 	andi	r5,r2,15
    c964:	01000104 	movi	r4,4
    c968:	29000426 	beq	r5,r4,c97c <__muldf3+0x678>
    c96c:	11000104 	addi	r4,r2,4
    c970:	2085803a 	cmpltu	r2,r4,r2
    c974:	1887883a 	add	r3,r3,r2
    c978:	2005883a 	mov	r2,r4
    c97c:	1900202c 	andhi	r4,r3,128
    c980:	20001826 	beq	r4,zero,c9e4 <__muldf3+0x6e0>
    c984:	b4c0004c 	andi	r19,r22,1
    c988:	01000044 	movi	r4,1
    c98c:	0021883a 	mov	r16,zero
    c990:	0025883a 	mov	r18,zero
    c994:	003eb506 	br	c46c <__muldf3+0x168>
    c998:	00bef884 	movi	r2,-1054
    c99c:	1145c83a 	sub	r2,r2,r5
    c9a0:	8088d83a 	srl	r4,r16,r2
    c9a4:	00800804 	movi	r2,32
    c9a8:	18801726 	beq	r3,r2,ca08 <__muldf3+0x704>
    c9ac:	28810f84 	addi	r2,r5,1086
    c9b0:	8084983a 	sll	r2,r16,r2
    c9b4:	1484b03a 	or	r2,r2,r18
    c9b8:	1004c03a 	cmpne	r2,r2,zero
    c9bc:	1104b03a 	or	r2,r2,r4
    c9c0:	10c001cc 	andi	r3,r2,7
    c9c4:	18000b1e 	bne	r3,zero,c9f4 <__muldf3+0x6f0>
    c9c8:	0021883a 	mov	r16,zero
    c9cc:	1004d0fa 	srli	r2,r2,3
    c9d0:	b4c0004c 	andi	r19,r22,1
    c9d4:	0009883a 	mov	r4,zero
    c9d8:	10e4b03a 	or	r18,r2,r3
    c9dc:	003ea306 	br	c46c <__muldf3+0x168>
    c9e0:	0007883a 	mov	r3,zero
    c9e4:	1820927a 	slli	r16,r3,9
    c9e8:	1806977a 	slli	r3,r3,29
    c9ec:	8020d33a 	srli	r16,r16,12
    c9f0:	003ff606 	br	c9cc <__muldf3+0x6c8>
    c9f4:	110003cc 	andi	r4,r2,15
    c9f8:	00c00104 	movi	r3,4
    c9fc:	20fff826 	beq	r4,r3,c9e0 <__muldf3+0x6dc>
    ca00:	0007883a 	mov	r3,zero
    ca04:	003fd906 	br	c96c <__muldf3+0x668>
    ca08:	0005883a 	mov	r2,zero
    ca0c:	003fe906 	br	c9b4 <__muldf3+0x6b0>
    ca10:	00800434 	movhi	r2,16
    ca14:	84000234 	orhi	r16,r16,8
    ca18:	10bfffc4 	addi	r2,r2,-1
    ca1c:	e4c0004c 	andi	r19,fp,1
    ca20:	80a0703a 	and	r16,r16,r2
    ca24:	003ef606 	br	c600 <__muldf3+0x2fc>

0000ca28 <__subdf3>:
    ca28:	00c00434 	movhi	r3,16
    ca2c:	18ffffc4 	addi	r3,r3,-1
    ca30:	defffb04 	addi	sp,sp,-20
    ca34:	28d2703a 	and	r9,r5,r3
    ca38:	3814d53a 	srli	r10,r7,20
    ca3c:	38c6703a 	and	r3,r7,r3
    ca40:	3004d77a 	srli	r2,r6,29
    ca44:	dc800215 	stw	r18,8(sp)
    ca48:	dc000015 	stw	r16,0(sp)
    ca4c:	2824d7fa 	srli	r18,r5,31
    ca50:	2820d53a 	srli	r16,r5,20
    ca54:	481290fa 	slli	r9,r9,3
    ca58:	200ad77a 	srli	r5,r4,29
    ca5c:	180690fa 	slli	r3,r3,3
    ca60:	dc400115 	stw	r17,4(sp)
    ca64:	dfc00415 	stw	ra,16(sp)
    ca68:	202290fa 	slli	r17,r4,3
    ca6c:	dcc00315 	stw	r19,12(sp)
    ca70:	5281ffcc 	andi	r10,r10,2047
    ca74:	0101ffc4 	movi	r4,2047
    ca78:	9011883a 	mov	r8,r18
    ca7c:	8401ffcc 	andi	r16,r16,2047
    ca80:	94803fcc 	andi	r18,r18,255
    ca84:	494ab03a 	or	r5,r9,r5
    ca88:	380ed7fa 	srli	r7,r7,31
    ca8c:	1886b03a 	or	r3,r3,r2
    ca90:	300c90fa 	slli	r6,r6,3
    ca94:	51009026 	beq	r10,r4,ccd8 <__subdf3+0x2b0>
    ca98:	39c0005c 	xori	r7,r7,1
    ca9c:	8285c83a 	sub	r2,r16,r10
    caa0:	91c06f26 	beq	r18,r7,cc60 <__subdf3+0x238>
    caa4:	0080b10e 	bge	zero,r2,cd6c <__subdf3+0x344>
    caa8:	50002a1e 	bne	r10,zero,cb54 <__subdf3+0x12c>
    caac:	1988b03a 	or	r4,r3,r6
    cab0:	2000941e 	bne	r4,zero,cd04 <__subdf3+0x2dc>
    cab4:	888001cc 	andi	r2,r17,7
    cab8:	10005b26 	beq	r2,zero,cc28 <__subdf3+0x200>
    cabc:	88c003cc 	andi	r3,r17,15
    cac0:	00800104 	movi	r2,4
    cac4:	18805826 	beq	r3,r2,cc28 <__subdf3+0x200>
    cac8:	88c00104 	addi	r3,r17,4
    cacc:	1c63803a 	cmpltu	r17,r3,r17
    cad0:	2c4b883a 	add	r5,r5,r17
    cad4:	2880202c 	andhi	r2,r5,128
    cad8:	9200004c 	andi	r8,r18,1
    cadc:	1823883a 	mov	r17,r3
    cae0:	10005426 	beq	r2,zero,cc34 <__subdf3+0x20c>
    cae4:	84000044 	addi	r16,r16,1
    cae8:	0081ffc4 	movi	r2,2047
    caec:	8080bf26 	beq	r16,r2,cdec <__subdf3+0x3c4>
    caf0:	013fe034 	movhi	r4,65408
    caf4:	213fffc4 	addi	r4,r4,-1
    caf8:	290a703a 	and	r5,r5,r4
    cafc:	2804977a 	slli	r2,r5,29
    cb00:	280a927a 	slli	r5,r5,9
    cb04:	8822d0fa 	srli	r17,r17,3
    cb08:	8401ffcc 	andi	r16,r16,2047
    cb0c:	2808d33a 	srli	r4,r5,12
    cb10:	1444b03a 	or	r2,r2,r17
    cb14:	8401ffcc 	andi	r16,r16,2047
    cb18:	800a953a 	slli	r5,r16,20
    cb1c:	40c03fcc 	andi	r3,r8,255
    cb20:	04000434 	movhi	r16,16
    cb24:	180697fa 	slli	r3,r3,31
    cb28:	843fffc4 	addi	r16,r16,-1
    cb2c:	2420703a 	and	r16,r4,r16
    cb30:	8160b03a 	or	r16,r16,r5
    cb34:	80c6b03a 	or	r3,r16,r3
    cb38:	dfc00417 	ldw	ra,16(sp)
    cb3c:	dcc00317 	ldw	r19,12(sp)
    cb40:	dc800217 	ldw	r18,8(sp)
    cb44:	dc400117 	ldw	r17,4(sp)
    cb48:	dc000017 	ldw	r16,0(sp)
    cb4c:	dec00504 	addi	sp,sp,20
    cb50:	f800283a 	ret
    cb54:	0101ffc4 	movi	r4,2047
    cb58:	813fd626 	beq	r16,r4,cab4 <__subdf3+0x8c>
    cb5c:	18c02034 	orhi	r3,r3,128
    cb60:	01000e04 	movi	r4,56
    cb64:	2080a416 	blt	r4,r2,cdf8 <__subdf3+0x3d0>
    cb68:	010007c4 	movi	r4,31
    cb6c:	2080c716 	blt	r4,r2,ce8c <__subdf3+0x464>
    cb70:	01000804 	movi	r4,32
    cb74:	2089c83a 	sub	r4,r4,r2
    cb78:	1910983a 	sll	r8,r3,r4
    cb7c:	308ed83a 	srl	r7,r6,r2
    cb80:	3108983a 	sll	r4,r6,r4
    cb84:	1884d83a 	srl	r2,r3,r2
    cb88:	41ccb03a 	or	r6,r8,r7
    cb8c:	2008c03a 	cmpne	r4,r4,zero
    cb90:	310cb03a 	or	r6,r6,r4
    cb94:	898dc83a 	sub	r6,r17,r6
    cb98:	89a3803a 	cmpltu	r17,r17,r6
    cb9c:	288bc83a 	sub	r5,r5,r2
    cba0:	2c4bc83a 	sub	r5,r5,r17
    cba4:	3023883a 	mov	r17,r6
    cba8:	2880202c 	andhi	r2,r5,128
    cbac:	10006b26 	beq	r2,zero,cd5c <__subdf3+0x334>
    cbb0:	04c02034 	movhi	r19,128
    cbb4:	9cffffc4 	addi	r19,r19,-1
    cbb8:	2ce6703a 	and	r19,r5,r19
    cbbc:	98007c26 	beq	r19,zero,cdb0 <__subdf3+0x388>
    cbc0:	9809883a 	mov	r4,r19
    cbc4:	000d4f40 	call	d4f4 <__clzsi2>
    cbc8:	10fffe04 	addi	r3,r2,-8
    cbcc:	010007c4 	movi	r4,31
    cbd0:	20c07d16 	blt	r4,r3,cdc8 <__subdf3+0x3a0>
    cbd4:	01400a04 	movi	r5,40
    cbd8:	2885c83a 	sub	r2,r5,r2
    cbdc:	888ad83a 	srl	r5,r17,r2
    cbe0:	98e6983a 	sll	r19,r19,r3
    cbe4:	88e2983a 	sll	r17,r17,r3
    cbe8:	2ce6b03a 	or	r19,r5,r19
    cbec:	1c007a16 	blt	r3,r16,cdd8 <__subdf3+0x3b0>
    cbf0:	1c21c83a 	sub	r16,r3,r16
    cbf4:	81400044 	addi	r5,r16,1
    cbf8:	00c007c4 	movi	r3,31
    cbfc:	19409616 	blt	r3,r5,ce58 <__subdf3+0x430>
    cc00:	1c21c83a 	sub	r16,r3,r16
    cc04:	8c08983a 	sll	r4,r17,r16
    cc08:	8946d83a 	srl	r3,r17,r5
    cc0c:	9c20983a 	sll	r16,r19,r16
    cc10:	2008c03a 	cmpne	r4,r4,zero
    cc14:	994ad83a 	srl	r5,r19,r5
    cc18:	1c06b03a 	or	r3,r3,r16
    cc1c:	1922b03a 	or	r17,r3,r4
    cc20:	0021883a 	mov	r16,zero
    cc24:	003fa306 	br	cab4 <__subdf3+0x8c>
    cc28:	2880202c 	andhi	r2,r5,128
    cc2c:	9200004c 	andi	r8,r18,1
    cc30:	103fac1e 	bne	r2,zero,cae4 <__subdf3+0xbc>
    cc34:	2804977a 	slli	r2,r5,29
    cc38:	8822d0fa 	srli	r17,r17,3
    cc3c:	00c1ffc4 	movi	r3,2047
    cc40:	280ad0fa 	srli	r5,r5,3
    cc44:	1444b03a 	or	r2,r2,r17
    cc48:	80c02726 	beq	r16,r3,cce8 <__subdf3+0x2c0>
    cc4c:	01000434 	movhi	r4,16
    cc50:	213fffc4 	addi	r4,r4,-1
    cc54:	80e0703a 	and	r16,r16,r3
    cc58:	2908703a 	and	r4,r5,r4
    cc5c:	003fad06 	br	cb14 <__subdf3+0xec>
    cc60:	0080690e 	bge	zero,r2,ce08 <__subdf3+0x3e0>
    cc64:	50002f26 	beq	r10,zero,cd24 <__subdf3+0x2fc>
    cc68:	0101ffc4 	movi	r4,2047
    cc6c:	813f9126 	beq	r16,r4,cab4 <__subdf3+0x8c>
    cc70:	18c02034 	orhi	r3,r3,128
    cc74:	01000e04 	movi	r4,56
    cc78:	2080b00e 	bge	r4,r2,cf3c <__subdf3+0x514>
    cc7c:	198cb03a 	or	r6,r3,r6
    cc80:	300ec03a 	cmpne	r7,r6,zero
    cc84:	0005883a 	mov	r2,zero
    cc88:	3c4f883a 	add	r7,r7,r17
    cc8c:	3c63803a 	cmpltu	r17,r7,r17
    cc90:	114b883a 	add	r5,r2,r5
    cc94:	2c4b883a 	add	r5,r5,r17
    cc98:	3823883a 	mov	r17,r7
    cc9c:	2880202c 	andhi	r2,r5,128
    cca0:	10002e26 	beq	r2,zero,cd5c <__subdf3+0x334>
    cca4:	84000044 	addi	r16,r16,1
    cca8:	0081ffc4 	movi	r2,2047
    ccac:	8080de26 	beq	r16,r2,d028 <__subdf3+0x600>
    ccb0:	00bfe034 	movhi	r2,65408
    ccb4:	10bfffc4 	addi	r2,r2,-1
    ccb8:	288a703a 	and	r5,r5,r2
    ccbc:	880cd07a 	srli	r6,r17,1
    ccc0:	280897fa 	slli	r4,r5,31
    ccc4:	88c0004c 	andi	r3,r17,1
    ccc8:	30e2b03a 	or	r17,r6,r3
    cccc:	280ad07a 	srli	r5,r5,1
    ccd0:	8922b03a 	or	r17,r17,r4
    ccd4:	003f7706 	br	cab4 <__subdf3+0x8c>
    ccd8:	1984b03a 	or	r2,r3,r6
    ccdc:	103f6e26 	beq	r2,zero,ca98 <__subdf3+0x70>
    cce0:	39c03fcc 	andi	r7,r7,255
    cce4:	003f6d06 	br	ca9c <__subdf3+0x74>
    cce8:	1146b03a 	or	r3,r2,r5
    ccec:	18003f26 	beq	r3,zero,cdec <__subdf3+0x3c4>
    ccf0:	00c00434 	movhi	r3,16
    ccf4:	29000234 	orhi	r4,r5,8
    ccf8:	18ffffc4 	addi	r3,r3,-1
    ccfc:	20c8703a 	and	r4,r4,r3
    cd00:	003f8406 	br	cb14 <__subdf3+0xec>
    cd04:	10bfffc4 	addi	r2,r2,-1
    cd08:	1000501e 	bne	r2,zero,ce4c <__subdf3+0x424>
    cd0c:	898fc83a 	sub	r7,r17,r6
    cd10:	89e3803a 	cmpltu	r17,r17,r7
    cd14:	28cbc83a 	sub	r5,r5,r3
    cd18:	2c4bc83a 	sub	r5,r5,r17
    cd1c:	3823883a 	mov	r17,r7
    cd20:	003fa106 	br	cba8 <__subdf3+0x180>
    cd24:	1988b03a 	or	r4,r3,r6
    cd28:	203f6226 	beq	r4,zero,cab4 <__subdf3+0x8c>
    cd2c:	10bfffc4 	addi	r2,r2,-1
    cd30:	10009b1e 	bne	r2,zero,cfa0 <__subdf3+0x578>
    cd34:	344d883a 	add	r6,r6,r17
    cd38:	3463803a 	cmpltu	r17,r6,r17
    cd3c:	194b883a 	add	r5,r3,r5
    cd40:	2c4b883a 	add	r5,r5,r17
    cd44:	3023883a 	mov	r17,r6
    cd48:	003fd406 	br	cc9c <__subdf3+0x274>
    cd4c:	1106b03a 	or	r3,r2,r4
    cd50:	1800b426 	beq	r3,zero,d024 <__subdf3+0x5fc>
    cd54:	100b883a 	mov	r5,r2
    cd58:	2023883a 	mov	r17,r4
    cd5c:	888001cc 	andi	r2,r17,7
    cd60:	103f561e 	bne	r2,zero,cabc <__subdf3+0x94>
    cd64:	9200004c 	andi	r8,r18,1
    cd68:	003fb206 	br	cc34 <__subdf3+0x20c>
    cd6c:	1000531e 	bne	r2,zero,cebc <__subdf3+0x494>
    cd70:	80800044 	addi	r2,r16,1
    cd74:	1081ffcc 	andi	r2,r2,2047
    cd78:	01000044 	movi	r4,1
    cd7c:	2080a00e 	bge	r4,r2,d000 <__subdf3+0x5d8>
    cd80:	8985c83a 	sub	r2,r17,r6
    cd84:	8889803a 	cmpltu	r4,r17,r2
    cd88:	28e7c83a 	sub	r19,r5,r3
    cd8c:	9927c83a 	sub	r19,r19,r4
    cd90:	9900202c 	andhi	r4,r19,128
    cd94:	20006226 	beq	r4,zero,cf20 <__subdf3+0x4f8>
    cd98:	3463c83a 	sub	r17,r6,r17
    cd9c:	194bc83a 	sub	r5,r3,r5
    cda0:	344d803a 	cmpltu	r6,r6,r17
    cda4:	29a7c83a 	sub	r19,r5,r6
    cda8:	3825883a 	mov	r18,r7
    cdac:	983f841e 	bne	r19,zero,cbc0 <__subdf3+0x198>
    cdb0:	8809883a 	mov	r4,r17
    cdb4:	000d4f40 	call	d4f4 <__clzsi2>
    cdb8:	10800804 	addi	r2,r2,32
    cdbc:	10fffe04 	addi	r3,r2,-8
    cdc0:	010007c4 	movi	r4,31
    cdc4:	20ff830e 	bge	r4,r3,cbd4 <__subdf3+0x1ac>
    cdc8:	14fff604 	addi	r19,r2,-40
    cdcc:	8ce6983a 	sll	r19,r17,r19
    cdd0:	0023883a 	mov	r17,zero
    cdd4:	1c3f860e 	bge	r3,r16,cbf0 <__subdf3+0x1c8>
    cdd8:	017fe034 	movhi	r5,65408
    cddc:	297fffc4 	addi	r5,r5,-1
    cde0:	80e1c83a 	sub	r16,r16,r3
    cde4:	994a703a 	and	r5,r19,r5
    cde8:	003f3206 	br	cab4 <__subdf3+0x8c>
    cdec:	0009883a 	mov	r4,zero
    cdf0:	0005883a 	mov	r2,zero
    cdf4:	003f4706 	br	cb14 <__subdf3+0xec>
    cdf8:	198cb03a 	or	r6,r3,r6
    cdfc:	300cc03a 	cmpne	r6,r6,zero
    ce00:	0005883a 	mov	r2,zero
    ce04:	003f6306 	br	cb94 <__subdf3+0x16c>
    ce08:	10009d1e 	bne	r2,zero,d080 <__subdf3+0x658>
    ce0c:	81c00044 	addi	r7,r16,1
    ce10:	3881ffcc 	andi	r2,r7,2047
    ce14:	02400044 	movi	r9,1
    ce18:	4880680e 	bge	r9,r2,cfbc <__subdf3+0x594>
    ce1c:	0081ffc4 	movi	r2,2047
    ce20:	3880ae26 	beq	r7,r2,d0dc <__subdf3+0x6b4>
    ce24:	344d883a 	add	r6,r6,r17
    ce28:	3463803a 	cmpltu	r17,r6,r17
    ce2c:	194b883a 	add	r5,r3,r5
    ce30:	2c4b883a 	add	r5,r5,r17
    ce34:	282297fa 	slli	r17,r5,31
    ce38:	300cd07a 	srli	r6,r6,1
    ce3c:	280ad07a 	srli	r5,r5,1
    ce40:	3821883a 	mov	r16,r7
    ce44:	89a2b03a 	or	r17,r17,r6
    ce48:	003f1a06 	br	cab4 <__subdf3+0x8c>
    ce4c:	0101ffc4 	movi	r4,2047
    ce50:	813f431e 	bne	r16,r4,cb60 <__subdf3+0x138>
    ce54:	003f1706 	br	cab4 <__subdf3+0x8c>
    ce58:	80bff844 	addi	r2,r16,-31
    ce5c:	00c00804 	movi	r3,32
    ce60:	9884d83a 	srl	r2,r19,r2
    ce64:	28c05126 	beq	r5,r3,cfac <__subdf3+0x584>
    ce68:	00c00fc4 	movi	r3,63
    ce6c:	1c21c83a 	sub	r16,r3,r16
    ce70:	9c26983a 	sll	r19,r19,r16
    ce74:	9c62b03a 	or	r17,r19,r17
    ce78:	8822c03a 	cmpne	r17,r17,zero
    ce7c:	88a2b03a 	or	r17,r17,r2
    ce80:	000b883a 	mov	r5,zero
    ce84:	0021883a 	mov	r16,zero
    ce88:	003fb406 	br	cd5c <__subdf3+0x334>
    ce8c:	113ff804 	addi	r4,r2,-32
    ce90:	01c00804 	movi	r7,32
    ce94:	1908d83a 	srl	r4,r3,r4
    ce98:	11c04626 	beq	r2,r7,cfb4 <__subdf3+0x58c>
    ce9c:	01c01004 	movi	r7,64
    cea0:	3885c83a 	sub	r2,r7,r2
    cea4:	1884983a 	sll	r2,r3,r2
    cea8:	118cb03a 	or	r6,r2,r6
    ceac:	300cc03a 	cmpne	r6,r6,zero
    ceb0:	310cb03a 	or	r6,r6,r4
    ceb4:	0005883a 	mov	r2,zero
    ceb8:	003f3606 	br	cb94 <__subdf3+0x16c>
    cebc:	80002b26 	beq	r16,zero,cf6c <__subdf3+0x544>
    cec0:	0101ffc4 	movi	r4,2047
    cec4:	51006926 	beq	r10,r4,d06c <__subdf3+0x644>
    cec8:	0085c83a 	sub	r2,zero,r2
    cecc:	29402034 	orhi	r5,r5,128
    ced0:	01000e04 	movi	r4,56
    ced4:	20807d16 	blt	r4,r2,d0cc <__subdf3+0x6a4>
    ced8:	010007c4 	movi	r4,31
    cedc:	2080d916 	blt	r4,r2,d244 <__subdf3+0x81c>
    cee0:	01000804 	movi	r4,32
    cee4:	2089c83a 	sub	r4,r4,r2
    cee8:	2912983a 	sll	r9,r5,r4
    ceec:	8890d83a 	srl	r8,r17,r2
    cef0:	8908983a 	sll	r4,r17,r4
    cef4:	2884d83a 	srl	r2,r5,r2
    cef8:	4a22b03a 	or	r17,r9,r8
    cefc:	2008c03a 	cmpne	r4,r4,zero
    cf00:	8922b03a 	or	r17,r17,r4
    cf04:	3463c83a 	sub	r17,r6,r17
    cf08:	1885c83a 	sub	r2,r3,r2
    cf0c:	344d803a 	cmpltu	r6,r6,r17
    cf10:	118bc83a 	sub	r5,r2,r6
    cf14:	5021883a 	mov	r16,r10
    cf18:	3825883a 	mov	r18,r7
    cf1c:	003f2206 	br	cba8 <__subdf3+0x180>
    cf20:	9886b03a 	or	r3,r19,r2
    cf24:	18001c1e 	bne	r3,zero,cf98 <__subdf3+0x570>
    cf28:	0011883a 	mov	r8,zero
    cf2c:	000b883a 	mov	r5,zero
    cf30:	0023883a 	mov	r17,zero
    cf34:	0021883a 	mov	r16,zero
    cf38:	003f3e06 	br	cc34 <__subdf3+0x20c>
    cf3c:	010007c4 	movi	r4,31
    cf40:	20803c16 	blt	r4,r2,d034 <__subdf3+0x60c>
    cf44:	01000804 	movi	r4,32
    cf48:	2089c83a 	sub	r4,r4,r2
    cf4c:	1912983a 	sll	r9,r3,r4
    cf50:	308ed83a 	srl	r7,r6,r2
    cf54:	3108983a 	sll	r4,r6,r4
    cf58:	1884d83a 	srl	r2,r3,r2
    cf5c:	49ceb03a 	or	r7,r9,r7
    cf60:	2008c03a 	cmpne	r4,r4,zero
    cf64:	390eb03a 	or	r7,r7,r4
    cf68:	003f4706 	br	cc88 <__subdf3+0x260>
    cf6c:	2c48b03a 	or	r4,r5,r17
    cf70:	20003e26 	beq	r4,zero,d06c <__subdf3+0x644>
    cf74:	0084303a 	nor	r2,zero,r2
    cf78:	10003a1e 	bne	r2,zero,d064 <__subdf3+0x63c>
    cf7c:	3463c83a 	sub	r17,r6,r17
    cf80:	194bc83a 	sub	r5,r3,r5
    cf84:	344d803a 	cmpltu	r6,r6,r17
    cf88:	298bc83a 	sub	r5,r5,r6
    cf8c:	5021883a 	mov	r16,r10
    cf90:	3825883a 	mov	r18,r7
    cf94:	003f0406 	br	cba8 <__subdf3+0x180>
    cf98:	1023883a 	mov	r17,r2
    cf9c:	003f0706 	br	cbbc <__subdf3+0x194>
    cfa0:	0101ffc4 	movi	r4,2047
    cfa4:	813f331e 	bne	r16,r4,cc74 <__subdf3+0x24c>
    cfa8:	003ec206 	br	cab4 <__subdf3+0x8c>
    cfac:	0027883a 	mov	r19,zero
    cfb0:	003fb006 	br	ce74 <__subdf3+0x44c>
    cfb4:	0005883a 	mov	r2,zero
    cfb8:	003fbb06 	br	cea8 <__subdf3+0x480>
    cfbc:	2c44b03a 	or	r2,r5,r17
    cfc0:	80008b1e 	bne	r16,zero,d1f0 <__subdf3+0x7c8>
    cfc4:	1000b526 	beq	r2,zero,d29c <__subdf3+0x874>
    cfc8:	1984b03a 	or	r2,r3,r6
    cfcc:	103eb926 	beq	r2,zero,cab4 <__subdf3+0x8c>
    cfd0:	3449883a 	add	r4,r6,r17
    cfd4:	2463803a 	cmpltu	r17,r4,r17
    cfd8:	194b883a 	add	r5,r3,r5
    cfdc:	2c4b883a 	add	r5,r5,r17
    cfe0:	2880202c 	andhi	r2,r5,128
    cfe4:	2023883a 	mov	r17,r4
    cfe8:	103f5c26 	beq	r2,zero,cd5c <__subdf3+0x334>
    cfec:	00bfe034 	movhi	r2,65408
    cff0:	10bfffc4 	addi	r2,r2,-1
    cff4:	4821883a 	mov	r16,r9
    cff8:	288a703a 	and	r5,r5,r2
    cffc:	003ead06 	br	cab4 <__subdf3+0x8c>
    d000:	2c44b03a 	or	r2,r5,r17
    d004:	8000291e 	bne	r16,zero,d0ac <__subdf3+0x684>
    d008:	10004f1e 	bne	r2,zero,d148 <__subdf3+0x720>
    d00c:	1984b03a 	or	r2,r3,r6
    d010:	10000426 	beq	r2,zero,d024 <__subdf3+0x5fc>
    d014:	180b883a 	mov	r5,r3
    d018:	3023883a 	mov	r17,r6
    d01c:	3825883a 	mov	r18,r7
    d020:	003ea406 	br	cab4 <__subdf3+0x8c>
    d024:	0011883a 	mov	r8,zero
    d028:	000b883a 	mov	r5,zero
    d02c:	0023883a 	mov	r17,zero
    d030:	003f0006 	br	cc34 <__subdf3+0x20c>
    d034:	11fff804 	addi	r7,r2,-32
    d038:	19c8d83a 	srl	r4,r3,r7
    d03c:	01c00804 	movi	r7,32
    d040:	11c07e26 	beq	r2,r7,d23c <__subdf3+0x814>
    d044:	01c01004 	movi	r7,64
    d048:	3885c83a 	sub	r2,r7,r2
    d04c:	1884983a 	sll	r2,r3,r2
    d050:	118cb03a 	or	r6,r2,r6
    d054:	300ec03a 	cmpne	r7,r6,zero
    d058:	390eb03a 	or	r7,r7,r4
    d05c:	0005883a 	mov	r2,zero
    d060:	003f0906 	br	cc88 <__subdf3+0x260>
    d064:	0101ffc4 	movi	r4,2047
    d068:	513f991e 	bne	r10,r4,ced0 <__subdf3+0x4a8>
    d06c:	180b883a 	mov	r5,r3
    d070:	3023883a 	mov	r17,r6
    d074:	5021883a 	mov	r16,r10
    d078:	3825883a 	mov	r18,r7
    d07c:	003e8d06 	br	cab4 <__subdf3+0x8c>
    d080:	80001a1e 	bne	r16,zero,d0ec <__subdf3+0x6c4>
    d084:	2c48b03a 	or	r4,r5,r17
    d088:	20005526 	beq	r4,zero,d1e0 <__subdf3+0x7b8>
    d08c:	0084303a 	nor	r2,zero,r2
    d090:	1000511e 	bne	r2,zero,d1d8 <__subdf3+0x7b0>
    d094:	89a3883a 	add	r17,r17,r6
    d098:	194b883a 	add	r5,r3,r5
    d09c:	898d803a 	cmpltu	r6,r17,r6
    d0a0:	298b883a 	add	r5,r5,r6
    d0a4:	5021883a 	mov	r16,r10
    d0a8:	003efc06 	br	cc9c <__subdf3+0x274>
    d0ac:	1000341e 	bne	r2,zero,d180 <__subdf3+0x758>
    d0b0:	1984b03a 	or	r2,r3,r6
    d0b4:	10006f26 	beq	r2,zero,d274 <__subdf3+0x84c>
    d0b8:	180b883a 	mov	r5,r3
    d0bc:	3023883a 	mov	r17,r6
    d0c0:	3825883a 	mov	r18,r7
    d0c4:	0401ffc4 	movi	r16,2047
    d0c8:	003e7a06 	br	cab4 <__subdf3+0x8c>
    d0cc:	2c62b03a 	or	r17,r5,r17
    d0d0:	8822c03a 	cmpne	r17,r17,zero
    d0d4:	0005883a 	mov	r2,zero
    d0d8:	003f8a06 	br	cf04 <__subdf3+0x4dc>
    d0dc:	3821883a 	mov	r16,r7
    d0e0:	000b883a 	mov	r5,zero
    d0e4:	0023883a 	mov	r17,zero
    d0e8:	003ed206 	br	cc34 <__subdf3+0x20c>
    d0ec:	0101ffc4 	movi	r4,2047
    d0f0:	51003b26 	beq	r10,r4,d1e0 <__subdf3+0x7b8>
    d0f4:	0085c83a 	sub	r2,zero,r2
    d0f8:	29402034 	orhi	r5,r5,128
    d0fc:	01000e04 	movi	r4,56
    d100:	20806216 	blt	r4,r2,d28c <__subdf3+0x864>
    d104:	010007c4 	movi	r4,31
    d108:	20806b16 	blt	r4,r2,d2b8 <__subdf3+0x890>
    d10c:	01000804 	movi	r4,32
    d110:	2089c83a 	sub	r4,r4,r2
    d114:	2912983a 	sll	r9,r5,r4
    d118:	888ed83a 	srl	r7,r17,r2
    d11c:	8908983a 	sll	r4,r17,r4
    d120:	2884d83a 	srl	r2,r5,r2
    d124:	49e2b03a 	or	r17,r9,r7
    d128:	2008c03a 	cmpne	r4,r4,zero
    d12c:	8922b03a 	or	r17,r17,r4
    d130:	89a3883a 	add	r17,r17,r6
    d134:	10c5883a 	add	r2,r2,r3
    d138:	898d803a 	cmpltu	r6,r17,r6
    d13c:	118b883a 	add	r5,r2,r6
    d140:	5021883a 	mov	r16,r10
    d144:	003ed506 	br	cc9c <__subdf3+0x274>
    d148:	1984b03a 	or	r2,r3,r6
    d14c:	103e5926 	beq	r2,zero,cab4 <__subdf3+0x8c>
    d150:	8989c83a 	sub	r4,r17,r6
    d154:	8911803a 	cmpltu	r8,r17,r4
    d158:	28c5c83a 	sub	r2,r5,r3
    d15c:	1205c83a 	sub	r2,r2,r8
    d160:	1200202c 	andhi	r8,r2,128
    d164:	403ef926 	beq	r8,zero,cd4c <__subdf3+0x324>
    d168:	3463c83a 	sub	r17,r6,r17
    d16c:	194bc83a 	sub	r5,r3,r5
    d170:	344d803a 	cmpltu	r6,r6,r17
    d174:	298bc83a 	sub	r5,r5,r6
    d178:	3825883a 	mov	r18,r7
    d17c:	003e4d06 	br	cab4 <__subdf3+0x8c>
    d180:	1984b03a 	or	r2,r3,r6
    d184:	10002b26 	beq	r2,zero,d234 <__subdf3+0x80c>
    d188:	2808d0fa 	srli	r4,r5,3
    d18c:	8822d0fa 	srli	r17,r17,3
    d190:	280a977a 	slli	r5,r5,29
    d194:	2080022c 	andhi	r2,r4,8
    d198:	2c62b03a 	or	r17,r5,r17
    d19c:	10000826 	beq	r2,zero,d1c0 <__subdf3+0x798>
    d1a0:	1810d0fa 	srli	r8,r3,3
    d1a4:	4080022c 	andhi	r2,r8,8
    d1a8:	1000051e 	bne	r2,zero,d1c0 <__subdf3+0x798>
    d1ac:	300cd0fa 	srli	r6,r6,3
    d1b0:	1804977a 	slli	r2,r3,29
    d1b4:	4009883a 	mov	r4,r8
    d1b8:	3825883a 	mov	r18,r7
    d1bc:	11a2b03a 	or	r17,r2,r6
    d1c0:	880ad77a 	srli	r5,r17,29
    d1c4:	200890fa 	slli	r4,r4,3
    d1c8:	882290fa 	slli	r17,r17,3
    d1cc:	0401ffc4 	movi	r16,2047
    d1d0:	290ab03a 	or	r5,r5,r4
    d1d4:	003e3706 	br	cab4 <__subdf3+0x8c>
    d1d8:	0101ffc4 	movi	r4,2047
    d1dc:	513fc71e 	bne	r10,r4,d0fc <__subdf3+0x6d4>
    d1e0:	180b883a 	mov	r5,r3
    d1e4:	3023883a 	mov	r17,r6
    d1e8:	5021883a 	mov	r16,r10
    d1ec:	003e3106 	br	cab4 <__subdf3+0x8c>
    d1f0:	10002d26 	beq	r2,zero,d2a8 <__subdf3+0x880>
    d1f4:	1984b03a 	or	r2,r3,r6
    d1f8:	10000e26 	beq	r2,zero,d234 <__subdf3+0x80c>
    d1fc:	2808d0fa 	srli	r4,r5,3
    d200:	8822d0fa 	srli	r17,r17,3
    d204:	280a977a 	slli	r5,r5,29
    d208:	2080022c 	andhi	r2,r4,8
    d20c:	2c62b03a 	or	r17,r5,r17
    d210:	103feb26 	beq	r2,zero,d1c0 <__subdf3+0x798>
    d214:	180ed0fa 	srli	r7,r3,3
    d218:	3880022c 	andhi	r2,r7,8
    d21c:	103fe81e 	bne	r2,zero,d1c0 <__subdf3+0x798>
    d220:	300cd0fa 	srli	r6,r6,3
    d224:	1804977a 	slli	r2,r3,29
    d228:	3809883a 	mov	r4,r7
    d22c:	11a2b03a 	or	r17,r2,r6
    d230:	003fe306 	br	d1c0 <__subdf3+0x798>
    d234:	0401ffc4 	movi	r16,2047
    d238:	003e1e06 	br	cab4 <__subdf3+0x8c>
    d23c:	0005883a 	mov	r2,zero
    d240:	003f8306 	br	d050 <__subdf3+0x628>
    d244:	113ff804 	addi	r4,r2,-32
    d248:	02000804 	movi	r8,32
    d24c:	2908d83a 	srl	r4,r5,r4
    d250:	12002526 	beq	r2,r8,d2e8 <__subdf3+0x8c0>
    d254:	02001004 	movi	r8,64
    d258:	4085c83a 	sub	r2,r8,r2
    d25c:	288a983a 	sll	r5,r5,r2
    d260:	2c62b03a 	or	r17,r5,r17
    d264:	8822c03a 	cmpne	r17,r17,zero
    d268:	8922b03a 	or	r17,r17,r4
    d26c:	0005883a 	mov	r2,zero
    d270:	003f2406 	br	cf04 <__subdf3+0x4dc>
    d274:	01402034 	movhi	r5,128
    d278:	0011883a 	mov	r8,zero
    d27c:	297fffc4 	addi	r5,r5,-1
    d280:	047ffe04 	movi	r17,-8
    d284:	0401ffc4 	movi	r16,2047
    d288:	003e6a06 	br	cc34 <__subdf3+0x20c>
    d28c:	2c62b03a 	or	r17,r5,r17
    d290:	8822c03a 	cmpne	r17,r17,zero
    d294:	0005883a 	mov	r2,zero
    d298:	003fa506 	br	d130 <__subdf3+0x708>
    d29c:	180b883a 	mov	r5,r3
    d2a0:	3023883a 	mov	r17,r6
    d2a4:	003e0306 	br	cab4 <__subdf3+0x8c>
    d2a8:	180b883a 	mov	r5,r3
    d2ac:	3023883a 	mov	r17,r6
    d2b0:	0401ffc4 	movi	r16,2047
    d2b4:	003dff06 	br	cab4 <__subdf3+0x8c>
    d2b8:	113ff804 	addi	r4,r2,-32
    d2bc:	01c00804 	movi	r7,32
    d2c0:	2908d83a 	srl	r4,r5,r4
    d2c4:	11c00a26 	beq	r2,r7,d2f0 <__subdf3+0x8c8>
    d2c8:	01c01004 	movi	r7,64
    d2cc:	3885c83a 	sub	r2,r7,r2
    d2d0:	288a983a 	sll	r5,r5,r2
    d2d4:	2c62b03a 	or	r17,r5,r17
    d2d8:	8822c03a 	cmpne	r17,r17,zero
    d2dc:	8922b03a 	or	r17,r17,r4
    d2e0:	0005883a 	mov	r2,zero
    d2e4:	003f9206 	br	d130 <__subdf3+0x708>
    d2e8:	000b883a 	mov	r5,zero
    d2ec:	003fdc06 	br	d260 <__subdf3+0x838>
    d2f0:	000b883a 	mov	r5,zero
    d2f4:	003ff706 	br	d2d4 <__subdf3+0x8ac>

0000d2f8 <__fixdfsi>:
    d2f8:	2806d53a 	srli	r3,r5,20
    d2fc:	00800434 	movhi	r2,16
    d300:	10bfffc4 	addi	r2,r2,-1
    d304:	18c1ffcc 	andi	r3,r3,2047
    d308:	0180ff84 	movi	r6,1022
    d30c:	2884703a 	and	r2,r5,r2
    d310:	280ad7fa 	srli	r5,r5,31
    d314:	30c0130e 	bge	r6,r3,d364 <__fixdfsi+0x6c>
    d318:	01810744 	movi	r6,1053
    d31c:	30c00d16 	blt	r6,r3,d354 <__fixdfsi+0x5c>
    d320:	01810cc4 	movi	r6,1075
    d324:	30cdc83a 	sub	r6,r6,r3
    d328:	01c007c4 	movi	r7,31
    d32c:	10800434 	orhi	r2,r2,16
    d330:	39800e0e 	bge	r7,r6,d36c <__fixdfsi+0x74>
    d334:	010104c4 	movi	r4,1043
    d338:	20c7c83a 	sub	r3,r4,r3
    d33c:	10c6d83a 	srl	r3,r2,r3
    d340:	29403fcc 	andi	r5,r5,255
    d344:	0145c83a 	sub	r2,zero,r5
    d348:	1884f03a 	xor	r2,r3,r2
    d34c:	1145883a 	add	r2,r2,r5
    d350:	f800283a 	ret
    d354:	00a00034 	movhi	r2,32768
    d358:	10bfffc4 	addi	r2,r2,-1
    d35c:	2885883a 	add	r2,r5,r2
    d360:	f800283a 	ret
    d364:	0005883a 	mov	r2,zero
    d368:	f800283a 	ret
    d36c:	18fefb44 	addi	r3,r3,-1043
    d370:	2188d83a 	srl	r4,r4,r6
    d374:	10c6983a 	sll	r3,r2,r3
    d378:	20c6b03a 	or	r3,r4,r3
    d37c:	003ff006 	br	d340 <__fixdfsi+0x48>

0000d380 <__floatsidf>:
    d380:	defffd04 	addi	sp,sp,-12
    d384:	dc400115 	stw	r17,4(sp)
    d388:	dfc00215 	stw	ra,8(sp)
    d38c:	dc000015 	stw	r16,0(sp)
    d390:	2023883a 	mov	r17,r4
    d394:	20001426 	beq	r4,zero,d3e8 <__floatsidf+0x68>
    d398:	2020d7fa 	srli	r16,r4,31
    d39c:	80000126 	beq	r16,zero,d3a4 <__floatsidf+0x24>
    d3a0:	0123c83a 	sub	r17,zero,r4
    d3a4:	8809883a 	mov	r4,r17
    d3a8:	000d4f40 	call	d4f4 <__clzsi2>
    d3ac:	01410784 	movi	r5,1054
    d3b0:	00c00284 	movi	r3,10
    d3b4:	288bc83a 	sub	r5,r5,r2
    d3b8:	18801c16 	blt	r3,r2,d42c <__floatsidf+0xac>
    d3bc:	00c002c4 	movi	r3,11
    d3c0:	1887c83a 	sub	r3,r3,r2
    d3c4:	88c8d83a 	srl	r4,r17,r3
    d3c8:	00c00434 	movhi	r3,16
    d3cc:	18ffffc4 	addi	r3,r3,-1
    d3d0:	10800544 	addi	r2,r2,21
    d3d4:	20c8703a 	and	r4,r4,r3
    d3d8:	8884983a 	sll	r2,r17,r2
    d3dc:	28c1ffcc 	andi	r3,r5,2047
    d3e0:	800d883a 	mov	r6,r16
    d3e4:	00000406 	br	d3f8 <__floatsidf+0x78>
    d3e8:	000d883a 	mov	r6,zero
    d3ec:	0007883a 	mov	r3,zero
    d3f0:	0009883a 	mov	r4,zero
    d3f4:	0005883a 	mov	r2,zero
    d3f8:	180a953a 	slli	r5,r3,20
    d3fc:	31803fcc 	andi	r6,r6,255
    d400:	00c00434 	movhi	r3,16
    d404:	300c97fa 	slli	r6,r6,31
    d408:	18ffffc4 	addi	r3,r3,-1
    d40c:	20c6703a 	and	r3,r4,r3
    d410:	1946b03a 	or	r3,r3,r5
    d414:	1986b03a 	or	r3,r3,r6
    d418:	dfc00217 	ldw	ra,8(sp)
    d41c:	dc400117 	ldw	r17,4(sp)
    d420:	dc000017 	ldw	r16,0(sp)
    d424:	dec00304 	addi	sp,sp,12
    d428:	f800283a 	ret
    d42c:	10fffd44 	addi	r3,r2,-11
    d430:	88c8983a 	sll	r4,r17,r3
    d434:	00800434 	movhi	r2,16
    d438:	10bfffc4 	addi	r2,r2,-1
    d43c:	2088703a 	and	r4,r4,r2
    d440:	28c1ffcc 	andi	r3,r5,2047
    d444:	800d883a 	mov	r6,r16
    d448:	0005883a 	mov	r2,zero
    d44c:	003fea06 	br	d3f8 <__floatsidf+0x78>

0000d450 <__floatunsidf>:
    d450:	defffe04 	addi	sp,sp,-8
    d454:	dc000015 	stw	r16,0(sp)
    d458:	dfc00115 	stw	ra,4(sp)
    d45c:	2021883a 	mov	r16,r4
    d460:	20001026 	beq	r4,zero,d4a4 <__floatunsidf+0x54>
    d464:	000d4f40 	call	d4f4 <__clzsi2>
    d468:	01410784 	movi	r5,1054
    d46c:	100d883a 	mov	r6,r2
    d470:	288bc83a 	sub	r5,r5,r2
    d474:	00800284 	movi	r2,10
    d478:	11801616 	blt	r2,r6,d4d4 <__floatunsidf+0x84>
    d47c:	008002c4 	movi	r2,11
    d480:	1185c83a 	sub	r2,r2,r6
    d484:	8084d83a 	srl	r2,r16,r2
    d488:	00c00434 	movhi	r3,16
    d48c:	31c00544 	addi	r7,r6,21
    d490:	18ffffc4 	addi	r3,r3,-1
    d494:	81e0983a 	sll	r16,r16,r7
    d498:	10cc703a 	and	r6,r2,r3
    d49c:	2941ffcc 	andi	r5,r5,2047
    d4a0:	00000206 	br	d4ac <__floatunsidf+0x5c>
    d4a4:	000b883a 	mov	r5,zero
    d4a8:	000d883a 	mov	r6,zero
    d4ac:	280a953a 	slli	r5,r5,20
    d4b0:	00c00434 	movhi	r3,16
    d4b4:	18ffffc4 	addi	r3,r3,-1
    d4b8:	30c6703a 	and	r3,r6,r3
    d4bc:	8005883a 	mov	r2,r16
    d4c0:	1946b03a 	or	r3,r3,r5
    d4c4:	dfc00117 	ldw	ra,4(sp)
    d4c8:	dc000017 	ldw	r16,0(sp)
    d4cc:	dec00204 	addi	sp,sp,8
    d4d0:	f800283a 	ret
    d4d4:	31bffd44 	addi	r6,r6,-11
    d4d8:	818c983a 	sll	r6,r16,r6
    d4dc:	00800434 	movhi	r2,16
    d4e0:	10bfffc4 	addi	r2,r2,-1
    d4e4:	2941ffcc 	andi	r5,r5,2047
    d4e8:	0021883a 	mov	r16,zero
    d4ec:	308c703a 	and	r6,r6,r2
    d4f0:	003fee06 	br	d4ac <__floatunsidf+0x5c>

0000d4f4 <__clzsi2>:
    d4f4:	00bfffd4 	movui	r2,65535
    d4f8:	11000b36 	bltu	r2,r4,d528 <__clzsi2+0x34>
    d4fc:	00803fc4 	movi	r2,255
    d500:	1100122e 	bgeu	r2,r4,d54c <__clzsi2+0x58>
    d504:	00c00204 	movi	r3,8
    d508:	01400604 	movi	r5,24
    d50c:	20c8d83a 	srl	r4,r4,r3
    d510:	00800074 	movhi	r2,1
    d514:	10800c04 	addi	r2,r2,48
    d518:	1109883a 	add	r4,r2,r4
    d51c:	20800003 	ldbu	r2,0(r4)
    d520:	2885c83a 	sub	r2,r5,r2
    d524:	f800283a 	ret
    d528:	00804034 	movhi	r2,256
    d52c:	10bfffc4 	addi	r2,r2,-1
    d530:	11000336 	bltu	r2,r4,d540 <__clzsi2+0x4c>
    d534:	00c00404 	movi	r3,16
    d538:	180b883a 	mov	r5,r3
    d53c:	003ff306 	br	d50c <__clzsi2+0x18>
    d540:	00c00604 	movi	r3,24
    d544:	01400204 	movi	r5,8
    d548:	003ff006 	br	d50c <__clzsi2+0x18>
    d54c:	0007883a 	mov	r3,zero
    d550:	01400804 	movi	r5,32
    d554:	003fed06 	br	d50c <__clzsi2+0x18>

0000d558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d558:	defffe04 	addi	sp,sp,-8
    d55c:	dfc00115 	stw	ra,4(sp)
    d560:	df000015 	stw	fp,0(sp)
    d564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d568:	00800074 	movhi	r2,1
    d56c:	10870d04 	addi	r2,r2,7220
    d570:	10800017 	ldw	r2,0(r2)
    d574:	10000526 	beq	r2,zero,d58c <alt_get_errno+0x34>
    d578:	00800074 	movhi	r2,1
    d57c:	10870d04 	addi	r2,r2,7220
    d580:	10800017 	ldw	r2,0(r2)
    d584:	103ee83a 	callr	r2
    d588:	00000206 	br	d594 <alt_get_errno+0x3c>
    d58c:	00800074 	movhi	r2,1
    d590:	108dd004 	addi	r2,r2,14144
}
    d594:	e037883a 	mov	sp,fp
    d598:	dfc00117 	ldw	ra,4(sp)
    d59c:	df000017 	ldw	fp,0(sp)
    d5a0:	dec00204 	addi	sp,sp,8
    d5a4:	f800283a 	ret

0000d5a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d5a8:	defffb04 	addi	sp,sp,-20
    d5ac:	dfc00415 	stw	ra,16(sp)
    d5b0:	df000315 	stw	fp,12(sp)
    d5b4:	df000304 	addi	fp,sp,12
    d5b8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d5bc:	e0bfff17 	ldw	r2,-4(fp)
    d5c0:	10000616 	blt	r2,zero,d5dc <close+0x34>
    d5c4:	e0bfff17 	ldw	r2,-4(fp)
    d5c8:	10c00324 	muli	r3,r2,12
    d5cc:	00800074 	movhi	r2,1
    d5d0:	10828a04 	addi	r2,r2,2600
    d5d4:	1885883a 	add	r2,r3,r2
    d5d8:	00000106 	br	d5e0 <close+0x38>
    d5dc:	0005883a 	mov	r2,zero
    d5e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d5e4:	e0bffd17 	ldw	r2,-12(fp)
    d5e8:	10001926 	beq	r2,zero,d650 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d5ec:	e0bffd17 	ldw	r2,-12(fp)
    d5f0:	10800017 	ldw	r2,0(r2)
    d5f4:	10800417 	ldw	r2,16(r2)
    d5f8:	10000626 	beq	r2,zero,d614 <close+0x6c>
    d5fc:	e0bffd17 	ldw	r2,-12(fp)
    d600:	10800017 	ldw	r2,0(r2)
    d604:	10800417 	ldw	r2,16(r2)
    d608:	e13ffd17 	ldw	r4,-12(fp)
    d60c:	103ee83a 	callr	r2
    d610:	00000106 	br	d618 <close+0x70>
    d614:	0005883a 	mov	r2,zero
    d618:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d61c:	e13fff17 	ldw	r4,-4(fp)
    d620:	000dca40 	call	dca4 <alt_release_fd>
    if (rval < 0)
    d624:	e0bffe17 	ldw	r2,-8(fp)
    d628:	1000070e 	bge	r2,zero,d648 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d62c:	000d5580 	call	d558 <alt_get_errno>
    d630:	1007883a 	mov	r3,r2
    d634:	e0bffe17 	ldw	r2,-8(fp)
    d638:	0085c83a 	sub	r2,zero,r2
    d63c:	18800015 	stw	r2,0(r3)
      return -1;
    d640:	00bfffc4 	movi	r2,-1
    d644:	00000706 	br	d664 <close+0xbc>
    }
    return 0;
    d648:	0005883a 	mov	r2,zero
    d64c:	00000506 	br	d664 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d650:	000d5580 	call	d558 <alt_get_errno>
    d654:	1007883a 	mov	r3,r2
    d658:	00801444 	movi	r2,81
    d65c:	18800015 	stw	r2,0(r3)
    return -1;
    d660:	00bfffc4 	movi	r2,-1
  }
}
    d664:	e037883a 	mov	sp,fp
    d668:	dfc00117 	ldw	ra,4(sp)
    d66c:	df000017 	ldw	fp,0(sp)
    d670:	dec00204 	addi	sp,sp,8
    d674:	f800283a 	ret

0000d678 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d678:	defffc04 	addi	sp,sp,-16
    d67c:	df000315 	stw	fp,12(sp)
    d680:	df000304 	addi	fp,sp,12
    d684:	e13ffd15 	stw	r4,-12(fp)
    d688:	e17ffe15 	stw	r5,-8(fp)
    d68c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d690:	e0bfff17 	ldw	r2,-4(fp)
}
    d694:	e037883a 	mov	sp,fp
    d698:	df000017 	ldw	fp,0(sp)
    d69c:	dec00104 	addi	sp,sp,4
    d6a0:	f800283a 	ret

0000d6a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6a4:	defffe04 	addi	sp,sp,-8
    d6a8:	dfc00115 	stw	ra,4(sp)
    d6ac:	df000015 	stw	fp,0(sp)
    d6b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6b4:	00800074 	movhi	r2,1
    d6b8:	10870d04 	addi	r2,r2,7220
    d6bc:	10800017 	ldw	r2,0(r2)
    d6c0:	10000526 	beq	r2,zero,d6d8 <alt_get_errno+0x34>
    d6c4:	00800074 	movhi	r2,1
    d6c8:	10870d04 	addi	r2,r2,7220
    d6cc:	10800017 	ldw	r2,0(r2)
    d6d0:	103ee83a 	callr	r2
    d6d4:	00000206 	br	d6e0 <alt_get_errno+0x3c>
    d6d8:	00800074 	movhi	r2,1
    d6dc:	108dd004 	addi	r2,r2,14144
}
    d6e0:	e037883a 	mov	sp,fp
    d6e4:	dfc00117 	ldw	ra,4(sp)
    d6e8:	df000017 	ldw	fp,0(sp)
    d6ec:	dec00204 	addi	sp,sp,8
    d6f0:	f800283a 	ret

0000d6f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d6f4:	defffb04 	addi	sp,sp,-20
    d6f8:	dfc00415 	stw	ra,16(sp)
    d6fc:	df000315 	stw	fp,12(sp)
    d700:	df000304 	addi	fp,sp,12
    d704:	e13ffe15 	stw	r4,-8(fp)
    d708:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d70c:	e0bffe17 	ldw	r2,-8(fp)
    d710:	10000616 	blt	r2,zero,d72c <fstat+0x38>
    d714:	e0bffe17 	ldw	r2,-8(fp)
    d718:	10c00324 	muli	r3,r2,12
    d71c:	00800074 	movhi	r2,1
    d720:	10828a04 	addi	r2,r2,2600
    d724:	1885883a 	add	r2,r3,r2
    d728:	00000106 	br	d730 <fstat+0x3c>
    d72c:	0005883a 	mov	r2,zero
    d730:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d734:	e0bffd17 	ldw	r2,-12(fp)
    d738:	10001026 	beq	r2,zero,d77c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d73c:	e0bffd17 	ldw	r2,-12(fp)
    d740:	10800017 	ldw	r2,0(r2)
    d744:	10800817 	ldw	r2,32(r2)
    d748:	10000726 	beq	r2,zero,d768 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d74c:	e0bffd17 	ldw	r2,-12(fp)
    d750:	10800017 	ldw	r2,0(r2)
    d754:	10800817 	ldw	r2,32(r2)
    d758:	e13ffd17 	ldw	r4,-12(fp)
    d75c:	e17fff17 	ldw	r5,-4(fp)
    d760:	103ee83a 	callr	r2
    d764:	00000a06 	br	d790 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d768:	e0bfff17 	ldw	r2,-4(fp)
    d76c:	00c80004 	movi	r3,8192
    d770:	10c00115 	stw	r3,4(r2)
      return 0;
    d774:	0005883a 	mov	r2,zero
    d778:	00000506 	br	d790 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d77c:	000d6a40 	call	d6a4 <alt_get_errno>
    d780:	1007883a 	mov	r3,r2
    d784:	00801444 	movi	r2,81
    d788:	18800015 	stw	r2,0(r3)
    return -1;
    d78c:	00bfffc4 	movi	r2,-1
  }
}
    d790:	e037883a 	mov	sp,fp
    d794:	dfc00117 	ldw	ra,4(sp)
    d798:	df000017 	ldw	fp,0(sp)
    d79c:	dec00204 	addi	sp,sp,8
    d7a0:	f800283a 	ret

0000d7a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7a4:	defffe04 	addi	sp,sp,-8
    d7a8:	dfc00115 	stw	ra,4(sp)
    d7ac:	df000015 	stw	fp,0(sp)
    d7b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d7b4:	00800074 	movhi	r2,1
    d7b8:	10870d04 	addi	r2,r2,7220
    d7bc:	10800017 	ldw	r2,0(r2)
    d7c0:	10000526 	beq	r2,zero,d7d8 <alt_get_errno+0x34>
    d7c4:	00800074 	movhi	r2,1
    d7c8:	10870d04 	addi	r2,r2,7220
    d7cc:	10800017 	ldw	r2,0(r2)
    d7d0:	103ee83a 	callr	r2
    d7d4:	00000206 	br	d7e0 <alt_get_errno+0x3c>
    d7d8:	00800074 	movhi	r2,1
    d7dc:	108dd004 	addi	r2,r2,14144
}
    d7e0:	e037883a 	mov	sp,fp
    d7e4:	dfc00117 	ldw	ra,4(sp)
    d7e8:	df000017 	ldw	fp,0(sp)
    d7ec:	dec00204 	addi	sp,sp,8
    d7f0:	f800283a 	ret

0000d7f4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d7f4:	deffed04 	addi	sp,sp,-76
    d7f8:	dfc01215 	stw	ra,72(sp)
    d7fc:	df001115 	stw	fp,68(sp)
    d800:	df001104 	addi	fp,sp,68
    d804:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d808:	e0bfff17 	ldw	r2,-4(fp)
    d80c:	10000616 	blt	r2,zero,d828 <isatty+0x34>
    d810:	e0bfff17 	ldw	r2,-4(fp)
    d814:	10c00324 	muli	r3,r2,12
    d818:	00800074 	movhi	r2,1
    d81c:	10828a04 	addi	r2,r2,2600
    d820:	1885883a 	add	r2,r3,r2
    d824:	00000106 	br	d82c <isatty+0x38>
    d828:	0005883a 	mov	r2,zero
    d82c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d830:	e0bfef17 	ldw	r2,-68(fp)
    d834:	10000e26 	beq	r2,zero,d870 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d838:	e0bfef17 	ldw	r2,-68(fp)
    d83c:	10800017 	ldw	r2,0(r2)
    d840:	10800817 	ldw	r2,32(r2)
    d844:	1000021e 	bne	r2,zero,d850 <isatty+0x5c>
    {
      return 1;
    d848:	00800044 	movi	r2,1
    d84c:	00000d06 	br	d884 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d850:	e0bff004 	addi	r2,fp,-64
    d854:	e13fff17 	ldw	r4,-4(fp)
    d858:	100b883a 	mov	r5,r2
    d85c:	000d6f40 	call	d6f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d860:	e0bff117 	ldw	r2,-60(fp)
    d864:	10880020 	cmpeqi	r2,r2,8192
    d868:	10803fcc 	andi	r2,r2,255
    d86c:	00000506 	br	d884 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d870:	000d7a40 	call	d7a4 <alt_get_errno>
    d874:	1007883a 	mov	r3,r2
    d878:	00801444 	movi	r2,81
    d87c:	18800015 	stw	r2,0(r3)
    return 0;
    d880:	0005883a 	mov	r2,zero
  }
}
    d884:	e037883a 	mov	sp,fp
    d888:	dfc00117 	ldw	ra,4(sp)
    d88c:	df000017 	ldw	fp,0(sp)
    d890:	dec00204 	addi	sp,sp,8
    d894:	f800283a 	ret

0000d898 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d898:	defffc04 	addi	sp,sp,-16
    d89c:	df000315 	stw	fp,12(sp)
    d8a0:	df000304 	addi	fp,sp,12
    d8a4:	e13ffd15 	stw	r4,-12(fp)
    d8a8:	e17ffe15 	stw	r5,-8(fp)
    d8ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d8b0:	e0fffe17 	ldw	r3,-8(fp)
    d8b4:	e0bffd17 	ldw	r2,-12(fp)
    d8b8:	18800c26 	beq	r3,r2,d8ec <alt_load_section+0x54>
  {
    while( to != end )
    d8bc:	00000806 	br	d8e0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d8c0:	e0bffe17 	ldw	r2,-8(fp)
    d8c4:	10c00104 	addi	r3,r2,4
    d8c8:	e0fffe15 	stw	r3,-8(fp)
    d8cc:	e0fffd17 	ldw	r3,-12(fp)
    d8d0:	19000104 	addi	r4,r3,4
    d8d4:	e13ffd15 	stw	r4,-12(fp)
    d8d8:	18c00017 	ldw	r3,0(r3)
    d8dc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d8e0:	e0fffe17 	ldw	r3,-8(fp)
    d8e4:	e0bfff17 	ldw	r2,-4(fp)
    d8e8:	18bff51e 	bne	r3,r2,d8c0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d8ec:	e037883a 	mov	sp,fp
    d8f0:	df000017 	ldw	fp,0(sp)
    d8f4:	dec00104 	addi	sp,sp,4
    d8f8:	f800283a 	ret

0000d8fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d8fc:	defffe04 	addi	sp,sp,-8
    d900:	dfc00115 	stw	ra,4(sp)
    d904:	df000015 	stw	fp,0(sp)
    d908:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d90c:	01000074 	movhi	r4,1
    d910:	21071204 	addi	r4,r4,7240
    d914:	01400074 	movhi	r5,1
    d918:	29405704 	addi	r5,r5,348
    d91c:	01800074 	movhi	r6,1
    d920:	31871204 	addi	r6,r6,7240
    d924:	000d8980 	call	d898 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d928:	01000034 	movhi	r4,0
    d92c:	21000804 	addi	r4,r4,32
    d930:	01400034 	movhi	r5,0
    d934:	29400804 	addi	r5,r5,32
    d938:	01800034 	movhi	r6,0
    d93c:	31806f04 	addi	r6,r6,444
    d940:	000d8980 	call	d898 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d944:	01000074 	movhi	r4,1
    d948:	213f5e04 	addi	r4,r4,-648
    d94c:	01400074 	movhi	r5,1
    d950:	297f5e04 	addi	r5,r5,-648
    d954:	01800074 	movhi	r6,1
    d958:	31805704 	addi	r6,r6,348
    d95c:	000d8980 	call	d898 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d960:	000ecc00 	call	ecc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d964:	000ee880 	call	ee88 <alt_icache_flush_all>
}
    d968:	e037883a 	mov	sp,fp
    d96c:	dfc00117 	ldw	ra,4(sp)
    d970:	df000017 	ldw	fp,0(sp)
    d974:	dec00204 	addi	sp,sp,8
    d978:	f800283a 	ret

0000d97c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d97c:	defffe04 	addi	sp,sp,-8
    d980:	dfc00115 	stw	ra,4(sp)
    d984:	df000015 	stw	fp,0(sp)
    d988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d98c:	00800074 	movhi	r2,1
    d990:	10870d04 	addi	r2,r2,7220
    d994:	10800017 	ldw	r2,0(r2)
    d998:	10000526 	beq	r2,zero,d9b0 <alt_get_errno+0x34>
    d99c:	00800074 	movhi	r2,1
    d9a0:	10870d04 	addi	r2,r2,7220
    d9a4:	10800017 	ldw	r2,0(r2)
    d9a8:	103ee83a 	callr	r2
    d9ac:	00000206 	br	d9b8 <alt_get_errno+0x3c>
    d9b0:	00800074 	movhi	r2,1
    d9b4:	108dd004 	addi	r2,r2,14144
}
    d9b8:	e037883a 	mov	sp,fp
    d9bc:	dfc00117 	ldw	ra,4(sp)
    d9c0:	df000017 	ldw	fp,0(sp)
    d9c4:	dec00204 	addi	sp,sp,8
    d9c8:	f800283a 	ret

0000d9cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d9cc:	defff904 	addi	sp,sp,-28
    d9d0:	dfc00615 	stw	ra,24(sp)
    d9d4:	df000515 	stw	fp,20(sp)
    d9d8:	df000504 	addi	fp,sp,20
    d9dc:	e13ffd15 	stw	r4,-12(fp)
    d9e0:	e17ffe15 	stw	r5,-8(fp)
    d9e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d9e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d9ec:	e0bffd17 	ldw	r2,-12(fp)
    d9f0:	10000616 	blt	r2,zero,da0c <lseek+0x40>
    d9f4:	e0bffd17 	ldw	r2,-12(fp)
    d9f8:	10c00324 	muli	r3,r2,12
    d9fc:	00800074 	movhi	r2,1
    da00:	10828a04 	addi	r2,r2,2600
    da04:	1885883a 	add	r2,r3,r2
    da08:	00000106 	br	da10 <lseek+0x44>
    da0c:	0005883a 	mov	r2,zero
    da10:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    da14:	e0bffc17 	ldw	r2,-16(fp)
    da18:	10001026 	beq	r2,zero,da5c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    da1c:	e0bffc17 	ldw	r2,-16(fp)
    da20:	10800017 	ldw	r2,0(r2)
    da24:	10800717 	ldw	r2,28(r2)
    da28:	10000926 	beq	r2,zero,da50 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    da2c:	e0bffc17 	ldw	r2,-16(fp)
    da30:	10800017 	ldw	r2,0(r2)
    da34:	10800717 	ldw	r2,28(r2)
    da38:	e13ffc17 	ldw	r4,-16(fp)
    da3c:	e17ffe17 	ldw	r5,-8(fp)
    da40:	e1bfff17 	ldw	r6,-4(fp)
    da44:	103ee83a 	callr	r2
    da48:	e0bffb15 	stw	r2,-20(fp)
    da4c:	00000506 	br	da64 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    da50:	00bfde84 	movi	r2,-134
    da54:	e0bffb15 	stw	r2,-20(fp)
    da58:	00000206 	br	da64 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    da5c:	00bfebc4 	movi	r2,-81
    da60:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    da64:	e0bffb17 	ldw	r2,-20(fp)
    da68:	1000070e 	bge	r2,zero,da88 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    da6c:	000d97c0 	call	d97c <alt_get_errno>
    da70:	1007883a 	mov	r3,r2
    da74:	e0bffb17 	ldw	r2,-20(fp)
    da78:	0085c83a 	sub	r2,zero,r2
    da7c:	18800015 	stw	r2,0(r3)
    rc = -1;
    da80:	00bfffc4 	movi	r2,-1
    da84:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    da88:	e0bffb17 	ldw	r2,-20(fp)
}
    da8c:	e037883a 	mov	sp,fp
    da90:	dfc00117 	ldw	ra,4(sp)
    da94:	df000017 	ldw	fp,0(sp)
    da98:	dec00204 	addi	sp,sp,8
    da9c:	f800283a 	ret

0000daa0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    daa0:	defffd04 	addi	sp,sp,-12
    daa4:	dfc00215 	stw	ra,8(sp)
    daa8:	df000115 	stw	fp,4(sp)
    daac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    dab0:	0009883a 	mov	r4,zero
    dab4:	000df640 	call	df64 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    dab8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    dabc:	000df980 	call	df98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    dac0:	01000074 	movhi	r4,1
    dac4:	21004f04 	addi	r4,r4,316
    dac8:	01400074 	movhi	r5,1
    dacc:	29404f04 	addi	r5,r5,316
    dad0:	01800074 	movhi	r6,1
    dad4:	31804f04 	addi	r6,r6,316
    dad8:	000f2480 	call	f248 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    dadc:	000edd00 	call	edd0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    dae0:	01000074 	movhi	r4,1
    dae4:	213b8b04 	addi	r4,r4,-4564
    dae8:	000f9d40 	call	f9d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    daec:	d126d217 	ldw	r4,-25784(gp)
    daf0:	d0e6d317 	ldw	r3,-25780(gp)
    daf4:	d0a6d417 	ldw	r2,-25776(gp)
    daf8:	180b883a 	mov	r5,r3
    dafc:	100d883a 	mov	r6,r2
    db00:	00005ec0 	call	5ec <main>
    db04:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    db08:	01000044 	movi	r4,1
    db0c:	000d5a80 	call	d5a8 <close>
  exit (result);
    db10:	e13fff17 	ldw	r4,-4(fp)
    db14:	000f9e80 	call	f9e8 <exit>

0000db18 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    db18:	defffe04 	addi	sp,sp,-8
    db1c:	df000115 	stw	fp,4(sp)
    db20:	df000104 	addi	fp,sp,4
    db24:	e13fff15 	stw	r4,-4(fp)
}
    db28:	e037883a 	mov	sp,fp
    db2c:	df000017 	ldw	fp,0(sp)
    db30:	dec00104 	addi	sp,sp,4
    db34:	f800283a 	ret

0000db38 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    db38:	defffe04 	addi	sp,sp,-8
    db3c:	df000115 	stw	fp,4(sp)
    db40:	df000104 	addi	fp,sp,4
    db44:	e13fff15 	stw	r4,-4(fp)
}
    db48:	e037883a 	mov	sp,fp
    db4c:	df000017 	ldw	fp,0(sp)
    db50:	dec00104 	addi	sp,sp,4
    db54:	f800283a 	ret

0000db58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db58:	defffe04 	addi	sp,sp,-8
    db5c:	dfc00115 	stw	ra,4(sp)
    db60:	df000015 	stw	fp,0(sp)
    db64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db68:	00800074 	movhi	r2,1
    db6c:	10870d04 	addi	r2,r2,7220
    db70:	10800017 	ldw	r2,0(r2)
    db74:	10000526 	beq	r2,zero,db8c <alt_get_errno+0x34>
    db78:	00800074 	movhi	r2,1
    db7c:	10870d04 	addi	r2,r2,7220
    db80:	10800017 	ldw	r2,0(r2)
    db84:	103ee83a 	callr	r2
    db88:	00000206 	br	db94 <alt_get_errno+0x3c>
    db8c:	00800074 	movhi	r2,1
    db90:	108dd004 	addi	r2,r2,14144
}
    db94:	e037883a 	mov	sp,fp
    db98:	dfc00117 	ldw	ra,4(sp)
    db9c:	df000017 	ldw	fp,0(sp)
    dba0:	dec00204 	addi	sp,sp,8
    dba4:	f800283a 	ret

0000dba8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    dba8:	defff904 	addi	sp,sp,-28
    dbac:	dfc00615 	stw	ra,24(sp)
    dbb0:	df000515 	stw	fp,20(sp)
    dbb4:	df000504 	addi	fp,sp,20
    dbb8:	e13ffd15 	stw	r4,-12(fp)
    dbbc:	e17ffe15 	stw	r5,-8(fp)
    dbc0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dbc4:	e0bffd17 	ldw	r2,-12(fp)
    dbc8:	10000616 	blt	r2,zero,dbe4 <read+0x3c>
    dbcc:	e0bffd17 	ldw	r2,-12(fp)
    dbd0:	10c00324 	muli	r3,r2,12
    dbd4:	00800074 	movhi	r2,1
    dbd8:	10828a04 	addi	r2,r2,2600
    dbdc:	1885883a 	add	r2,r3,r2
    dbe0:	00000106 	br	dbe8 <read+0x40>
    dbe4:	0005883a 	mov	r2,zero
    dbe8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dbec:	e0bffb17 	ldw	r2,-20(fp)
    dbf0:	10002226 	beq	r2,zero,dc7c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dbf4:	e0bffb17 	ldw	r2,-20(fp)
    dbf8:	10800217 	ldw	r2,8(r2)
    dbfc:	108000cc 	andi	r2,r2,3
    dc00:	10800060 	cmpeqi	r2,r2,1
    dc04:	1000181e 	bne	r2,zero,dc68 <read+0xc0>
        (fd->dev->read))
    dc08:	e0bffb17 	ldw	r2,-20(fp)
    dc0c:	10800017 	ldw	r2,0(r2)
    dc10:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dc14:	10001426 	beq	r2,zero,dc68 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    dc18:	e0bffb17 	ldw	r2,-20(fp)
    dc1c:	10800017 	ldw	r2,0(r2)
    dc20:	10800517 	ldw	r2,20(r2)
    dc24:	e0ffff17 	ldw	r3,-4(fp)
    dc28:	e13ffb17 	ldw	r4,-20(fp)
    dc2c:	e17ffe17 	ldw	r5,-8(fp)
    dc30:	180d883a 	mov	r6,r3
    dc34:	103ee83a 	callr	r2
    dc38:	e0bffc15 	stw	r2,-16(fp)
    dc3c:	e0bffc17 	ldw	r2,-16(fp)
    dc40:	1000070e 	bge	r2,zero,dc60 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    dc44:	000db580 	call	db58 <alt_get_errno>
    dc48:	1007883a 	mov	r3,r2
    dc4c:	e0bffc17 	ldw	r2,-16(fp)
    dc50:	0085c83a 	sub	r2,zero,r2
    dc54:	18800015 	stw	r2,0(r3)
          return -1;
    dc58:	00bfffc4 	movi	r2,-1
    dc5c:	00000c06 	br	dc90 <read+0xe8>
        }
        return rval;
    dc60:	e0bffc17 	ldw	r2,-16(fp)
    dc64:	00000a06 	br	dc90 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    dc68:	000db580 	call	db58 <alt_get_errno>
    dc6c:	1007883a 	mov	r3,r2
    dc70:	00800344 	movi	r2,13
    dc74:	18800015 	stw	r2,0(r3)
    dc78:	00000406 	br	dc8c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    dc7c:	000db580 	call	db58 <alt_get_errno>
    dc80:	1007883a 	mov	r3,r2
    dc84:	00801444 	movi	r2,81
    dc88:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dc8c:	00bfffc4 	movi	r2,-1
}
    dc90:	e037883a 	mov	sp,fp
    dc94:	dfc00117 	ldw	ra,4(sp)
    dc98:	df000017 	ldw	fp,0(sp)
    dc9c:	dec00204 	addi	sp,sp,8
    dca0:	f800283a 	ret

0000dca4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    dca4:	defffe04 	addi	sp,sp,-8
    dca8:	df000115 	stw	fp,4(sp)
    dcac:	df000104 	addi	fp,sp,4
    dcb0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    dcb4:	e0bfff17 	ldw	r2,-4(fp)
    dcb8:	108000d0 	cmplti	r2,r2,3
    dcbc:	10000d1e 	bne	r2,zero,dcf4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    dcc0:	00800074 	movhi	r2,1
    dcc4:	10828a04 	addi	r2,r2,2600
    dcc8:	e0ffff17 	ldw	r3,-4(fp)
    dccc:	18c00324 	muli	r3,r3,12
    dcd0:	10c5883a 	add	r2,r2,r3
    dcd4:	10800204 	addi	r2,r2,8
    dcd8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dcdc:	00800074 	movhi	r2,1
    dce0:	10828a04 	addi	r2,r2,2600
    dce4:	e0ffff17 	ldw	r3,-4(fp)
    dce8:	18c00324 	muli	r3,r3,12
    dcec:	10c5883a 	add	r2,r2,r3
    dcf0:	10000015 	stw	zero,0(r2)
  }
}
    dcf4:	e037883a 	mov	sp,fp
    dcf8:	df000017 	ldw	fp,0(sp)
    dcfc:	dec00104 	addi	sp,sp,4
    dd00:	f800283a 	ret

0000dd04 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    dd04:	defff904 	addi	sp,sp,-28
    dd08:	df000615 	stw	fp,24(sp)
    dd0c:	df000604 	addi	fp,sp,24
    dd10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd14:	0005303a 	rdctl	r2,status
    dd18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd1c:	e0fffc17 	ldw	r3,-16(fp)
    dd20:	00bfff84 	movi	r2,-2
    dd24:	1884703a 	and	r2,r3,r2
    dd28:	1001703a 	wrctl	status,r2
  
  return context;
    dd2c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dd30:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dd34:	d0a00c17 	ldw	r2,-32720(gp)
    dd38:	10c000c4 	addi	r3,r2,3
    dd3c:	00bfff04 	movi	r2,-4
    dd40:	1884703a 	and	r2,r3,r2
    dd44:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    dd48:	d0e00c17 	ldw	r3,-32720(gp)
    dd4c:	e0bfff17 	ldw	r2,-4(fp)
    dd50:	1887883a 	add	r3,r3,r2
    dd54:	00808034 	movhi	r2,512
    dd58:	10800004 	addi	r2,r2,0
    dd5c:	10c0062e 	bgeu	r2,r3,dd78 <sbrk+0x74>
    dd60:	e0bffa17 	ldw	r2,-24(fp)
    dd64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd68:	e0bffd17 	ldw	r2,-12(fp)
    dd6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    dd70:	00bfffc4 	movi	r2,-1
    dd74:	00000b06 	br	dda4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    dd78:	d0a00c17 	ldw	r2,-32720(gp)
    dd7c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    dd80:	d0e00c17 	ldw	r3,-32720(gp)
    dd84:	e0bfff17 	ldw	r2,-4(fp)
    dd88:	1885883a 	add	r2,r3,r2
    dd8c:	d0a00c15 	stw	r2,-32720(gp)
    dd90:	e0bffa17 	ldw	r2,-24(fp)
    dd94:	e0bffe15 	stw	r2,-8(fp)
    dd98:	e0bffe17 	ldw	r2,-8(fp)
    dd9c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    dda0:	e0bffb17 	ldw	r2,-20(fp)
} 
    dda4:	e037883a 	mov	sp,fp
    dda8:	df000017 	ldw	fp,0(sp)
    ddac:	dec00104 	addi	sp,sp,4
    ddb0:	f800283a 	ret

0000ddb4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ddb4:	defffd04 	addi	sp,sp,-12
    ddb8:	dfc00215 	stw	ra,8(sp)
    ddbc:	df000115 	stw	fp,4(sp)
    ddc0:	df000104 	addi	fp,sp,4
    ddc4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ddc8:	e13fff17 	ldw	r4,-4(fp)
    ddcc:	000eb680 	call	eb68 <alt_busy_sleep>
}
    ddd0:	e037883a 	mov	sp,fp
    ddd4:	dfc00117 	ldw	ra,4(sp)
    ddd8:	df000017 	ldw	fp,0(sp)
    dddc:	dec00204 	addi	sp,sp,8
    dde0:	f800283a 	ret

0000dde4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dde4:	defffe04 	addi	sp,sp,-8
    dde8:	dfc00115 	stw	ra,4(sp)
    ddec:	df000015 	stw	fp,0(sp)
    ddf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ddf4:	00800074 	movhi	r2,1
    ddf8:	10870d04 	addi	r2,r2,7220
    ddfc:	10800017 	ldw	r2,0(r2)
    de00:	10000526 	beq	r2,zero,de18 <alt_get_errno+0x34>
    de04:	00800074 	movhi	r2,1
    de08:	10870d04 	addi	r2,r2,7220
    de0c:	10800017 	ldw	r2,0(r2)
    de10:	103ee83a 	callr	r2
    de14:	00000206 	br	de20 <alt_get_errno+0x3c>
    de18:	00800074 	movhi	r2,1
    de1c:	108dd004 	addi	r2,r2,14144
}
    de20:	e037883a 	mov	sp,fp
    de24:	dfc00117 	ldw	ra,4(sp)
    de28:	df000017 	ldw	fp,0(sp)
    de2c:	dec00204 	addi	sp,sp,8
    de30:	f800283a 	ret

0000de34 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    de34:	defff904 	addi	sp,sp,-28
    de38:	dfc00615 	stw	ra,24(sp)
    de3c:	df000515 	stw	fp,20(sp)
    de40:	df000504 	addi	fp,sp,20
    de44:	e13ffd15 	stw	r4,-12(fp)
    de48:	e17ffe15 	stw	r5,-8(fp)
    de4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de50:	e0bffd17 	ldw	r2,-12(fp)
    de54:	10000616 	blt	r2,zero,de70 <write+0x3c>
    de58:	e0bffd17 	ldw	r2,-12(fp)
    de5c:	10c00324 	muli	r3,r2,12
    de60:	00800074 	movhi	r2,1
    de64:	10828a04 	addi	r2,r2,2600
    de68:	1885883a 	add	r2,r3,r2
    de6c:	00000106 	br	de74 <write+0x40>
    de70:	0005883a 	mov	r2,zero
    de74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    de78:	e0bffb17 	ldw	r2,-20(fp)
    de7c:	10002126 	beq	r2,zero,df04 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    de80:	e0bffb17 	ldw	r2,-20(fp)
    de84:	10800217 	ldw	r2,8(r2)
    de88:	108000cc 	andi	r2,r2,3
    de8c:	10001826 	beq	r2,zero,def0 <write+0xbc>
    de90:	e0bffb17 	ldw	r2,-20(fp)
    de94:	10800017 	ldw	r2,0(r2)
    de98:	10800617 	ldw	r2,24(r2)
    de9c:	10001426 	beq	r2,zero,def0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    dea0:	e0bffb17 	ldw	r2,-20(fp)
    dea4:	10800017 	ldw	r2,0(r2)
    dea8:	10800617 	ldw	r2,24(r2)
    deac:	e0ffff17 	ldw	r3,-4(fp)
    deb0:	e13ffb17 	ldw	r4,-20(fp)
    deb4:	e17ffe17 	ldw	r5,-8(fp)
    deb8:	180d883a 	mov	r6,r3
    debc:	103ee83a 	callr	r2
    dec0:	e0bffc15 	stw	r2,-16(fp)
    dec4:	e0bffc17 	ldw	r2,-16(fp)
    dec8:	1000070e 	bge	r2,zero,dee8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    decc:	000dde40 	call	dde4 <alt_get_errno>
    ded0:	1007883a 	mov	r3,r2
    ded4:	e0bffc17 	ldw	r2,-16(fp)
    ded8:	0085c83a 	sub	r2,zero,r2
    dedc:	18800015 	stw	r2,0(r3)
        return -1;
    dee0:	00bfffc4 	movi	r2,-1
    dee4:	00000c06 	br	df18 <write+0xe4>
      }
      return rval;
    dee8:	e0bffc17 	ldw	r2,-16(fp)
    deec:	00000a06 	br	df18 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    def0:	000dde40 	call	dde4 <alt_get_errno>
    def4:	1007883a 	mov	r3,r2
    def8:	00800344 	movi	r2,13
    defc:	18800015 	stw	r2,0(r3)
    df00:	00000406 	br	df14 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    df04:	000dde40 	call	dde4 <alt_get_errno>
    df08:	1007883a 	mov	r3,r2
    df0c:	00801444 	movi	r2,81
    df10:	18800015 	stw	r2,0(r3)
  }
  return -1;
    df14:	00bfffc4 	movi	r2,-1
}
    df18:	e037883a 	mov	sp,fp
    df1c:	dfc00117 	ldw	ra,4(sp)
    df20:	df000017 	ldw	fp,0(sp)
    df24:	dec00204 	addi	sp,sp,8
    df28:	f800283a 	ret

0000df2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    df2c:	defffd04 	addi	sp,sp,-12
    df30:	dfc00215 	stw	ra,8(sp)
    df34:	df000115 	stw	fp,4(sp)
    df38:	df000104 	addi	fp,sp,4
    df3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    df40:	e13fff17 	ldw	r4,-4(fp)
    df44:	01400074 	movhi	r5,1
    df48:	29470a04 	addi	r5,r5,7208
    df4c:	000ed2c0 	call	ed2c <alt_dev_llist_insert>
}
    df50:	e037883a 	mov	sp,fp
    df54:	dfc00117 	ldw	ra,4(sp)
    df58:	df000017 	ldw	fp,0(sp)
    df5c:	dec00204 	addi	sp,sp,8
    df60:	f800283a 	ret

0000df64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    df64:	defffd04 	addi	sp,sp,-12
    df68:	dfc00215 	stw	ra,8(sp)
    df6c:	df000115 	stw	fp,4(sp)
    df70:	df000104 	addi	fp,sp,4
    df74:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    df78:	000f6d00 	call	f6d0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    df7c:	00800044 	movi	r2,1
    df80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    df84:	e037883a 	mov	sp,fp
    df88:	dfc00117 	ldw	ra,4(sp)
    df8c:	df000017 	ldw	fp,0(sp)
    df90:	dec00204 	addi	sp,sp,8
    df94:	f800283a 	ret

0000df98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    df98:	defffe04 	addi	sp,sp,-8
    df9c:	dfc00115 	stw	ra,4(sp)
    dfa0:	df000015 	stw	fp,0(sp)
    dfa4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    dfa8:	01000074 	movhi	r4,1
    dfac:	2102f404 	addi	r4,r4,3024
    dfb0:	000b883a 	mov	r5,zero
    dfb4:	000d883a 	mov	r6,zero
    dfb8:	000e1400 	call	e140 <altera_avalon_jtag_uart_init>
    dfbc:	01000074 	movhi	r4,1
    dfc0:	2102ea04 	addi	r4,r4,2984
    dfc4:	000df2c0 	call	df2c <alt_dev_reg>
}
    dfc8:	e037883a 	mov	sp,fp
    dfcc:	dfc00117 	ldw	ra,4(sp)
    dfd0:	df000017 	ldw	fp,0(sp)
    dfd4:	dec00204 	addi	sp,sp,8
    dfd8:	f800283a 	ret

0000dfdc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    dfdc:	defffa04 	addi	sp,sp,-24
    dfe0:	dfc00515 	stw	ra,20(sp)
    dfe4:	df000415 	stw	fp,16(sp)
    dfe8:	df000404 	addi	fp,sp,16
    dfec:	e13ffd15 	stw	r4,-12(fp)
    dff0:	e17ffe15 	stw	r5,-8(fp)
    dff4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dff8:	e0bffd17 	ldw	r2,-12(fp)
    dffc:	10800017 	ldw	r2,0(r2)
    e000:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e004:	e0bffc17 	ldw	r2,-16(fp)
    e008:	10c00a04 	addi	r3,r2,40
    e00c:	e0bffd17 	ldw	r2,-12(fp)
    e010:	10800217 	ldw	r2,8(r2)
    e014:	1809883a 	mov	r4,r3
    e018:	e17ffe17 	ldw	r5,-8(fp)
    e01c:	e1bfff17 	ldw	r6,-4(fp)
    e020:	100f883a 	mov	r7,r2
    e024:	000e6040 	call	e604 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e028:	e037883a 	mov	sp,fp
    e02c:	dfc00117 	ldw	ra,4(sp)
    e030:	df000017 	ldw	fp,0(sp)
    e034:	dec00204 	addi	sp,sp,8
    e038:	f800283a 	ret

0000e03c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e03c:	defffa04 	addi	sp,sp,-24
    e040:	dfc00515 	stw	ra,20(sp)
    e044:	df000415 	stw	fp,16(sp)
    e048:	df000404 	addi	fp,sp,16
    e04c:	e13ffd15 	stw	r4,-12(fp)
    e050:	e17ffe15 	stw	r5,-8(fp)
    e054:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e058:	e0bffd17 	ldw	r2,-12(fp)
    e05c:	10800017 	ldw	r2,0(r2)
    e060:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e064:	e0bffc17 	ldw	r2,-16(fp)
    e068:	10c00a04 	addi	r3,r2,40
    e06c:	e0bffd17 	ldw	r2,-12(fp)
    e070:	10800217 	ldw	r2,8(r2)
    e074:	1809883a 	mov	r4,r3
    e078:	e17ffe17 	ldw	r5,-8(fp)
    e07c:	e1bfff17 	ldw	r6,-4(fp)
    e080:	100f883a 	mov	r7,r2
    e084:	000e8100 	call	e810 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e088:	e037883a 	mov	sp,fp
    e08c:	dfc00117 	ldw	ra,4(sp)
    e090:	df000017 	ldw	fp,0(sp)
    e094:	dec00204 	addi	sp,sp,8
    e098:	f800283a 	ret

0000e09c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e09c:	defffc04 	addi	sp,sp,-16
    e0a0:	dfc00315 	stw	ra,12(sp)
    e0a4:	df000215 	stw	fp,8(sp)
    e0a8:	df000204 	addi	fp,sp,8
    e0ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e0b0:	e0bfff17 	ldw	r2,-4(fp)
    e0b4:	10800017 	ldw	r2,0(r2)
    e0b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e0bc:	e0bffe17 	ldw	r2,-8(fp)
    e0c0:	10c00a04 	addi	r3,r2,40
    e0c4:	e0bfff17 	ldw	r2,-4(fp)
    e0c8:	10800217 	ldw	r2,8(r2)
    e0cc:	1809883a 	mov	r4,r3
    e0d0:	100b883a 	mov	r5,r2
    e0d4:	000e4b00 	call	e4b0 <altera_avalon_jtag_uart_close>
}
    e0d8:	e037883a 	mov	sp,fp
    e0dc:	dfc00117 	ldw	ra,4(sp)
    e0e0:	df000017 	ldw	fp,0(sp)
    e0e4:	dec00204 	addi	sp,sp,8
    e0e8:	f800283a 	ret

0000e0ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e0ec:	defffa04 	addi	sp,sp,-24
    e0f0:	dfc00515 	stw	ra,20(sp)
    e0f4:	df000415 	stw	fp,16(sp)
    e0f8:	df000404 	addi	fp,sp,16
    e0fc:	e13ffd15 	stw	r4,-12(fp)
    e100:	e17ffe15 	stw	r5,-8(fp)
    e104:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e108:	e0bffd17 	ldw	r2,-12(fp)
    e10c:	10800017 	ldw	r2,0(r2)
    e110:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e114:	e0bffc17 	ldw	r2,-16(fp)
    e118:	10800a04 	addi	r2,r2,40
    e11c:	1009883a 	mov	r4,r2
    e120:	e17ffe17 	ldw	r5,-8(fp)
    e124:	e1bfff17 	ldw	r6,-4(fp)
    e128:	000e5180 	call	e518 <altera_avalon_jtag_uart_ioctl>
}
    e12c:	e037883a 	mov	sp,fp
    e130:	dfc00117 	ldw	ra,4(sp)
    e134:	df000017 	ldw	fp,0(sp)
    e138:	dec00204 	addi	sp,sp,8
    e13c:	f800283a 	ret

0000e140 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e140:	defffa04 	addi	sp,sp,-24
    e144:	dfc00515 	stw	ra,20(sp)
    e148:	df000415 	stw	fp,16(sp)
    e14c:	df000404 	addi	fp,sp,16
    e150:	e13ffd15 	stw	r4,-12(fp)
    e154:	e17ffe15 	stw	r5,-8(fp)
    e158:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e15c:	e0bffd17 	ldw	r2,-12(fp)
    e160:	00c00044 	movi	r3,1
    e164:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e168:	e0bffd17 	ldw	r2,-12(fp)
    e16c:	10800017 	ldw	r2,0(r2)
    e170:	10800104 	addi	r2,r2,4
    e174:	1007883a 	mov	r3,r2
    e178:	e0bffd17 	ldw	r2,-12(fp)
    e17c:	10800817 	ldw	r2,32(r2)
    e180:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e184:	e0fffe17 	ldw	r3,-8(fp)
    e188:	e0bfff17 	ldw	r2,-4(fp)
    e18c:	d8000015 	stw	zero,0(sp)
    e190:	1809883a 	mov	r4,r3
    e194:	100b883a 	mov	r5,r2
    e198:	01800074 	movhi	r6,1
    e19c:	31b88104 	addi	r6,r6,-7676
    e1a0:	e1fffd17 	ldw	r7,-12(fp)
    e1a4:	000eeb80 	call	eeb8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e1a8:	e0bffd17 	ldw	r2,-12(fp)
    e1ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e1b0:	e0bffd17 	ldw	r2,-12(fp)
    e1b4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e1b8:	00800074 	movhi	r2,1
    e1bc:	108dd804 	addi	r2,r2,14176
    e1c0:	10800017 	ldw	r2,0(r2)
    e1c4:	1809883a 	mov	r4,r3
    e1c8:	100b883a 	mov	r5,r2
    e1cc:	01800074 	movhi	r6,1
    e1d0:	31b90204 	addi	r6,r6,-7160
    e1d4:	e1fffd17 	ldw	r7,-12(fp)
    e1d8:	000ea280 	call	ea28 <alt_alarm_start>
    e1dc:	1000040e 	bge	r2,zero,e1f0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e1e0:	e0fffd17 	ldw	r3,-12(fp)
    e1e4:	00a00034 	movhi	r2,32768
    e1e8:	10bfffc4 	addi	r2,r2,-1
    e1ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e1f0:	e037883a 	mov	sp,fp
    e1f4:	dfc00117 	ldw	ra,4(sp)
    e1f8:	df000017 	ldw	fp,0(sp)
    e1fc:	dec00204 	addi	sp,sp,8
    e200:	f800283a 	ret

0000e204 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e204:	defff804 	addi	sp,sp,-32
    e208:	df000715 	stw	fp,28(sp)
    e20c:	df000704 	addi	fp,sp,28
    e210:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e214:	e0bfff17 	ldw	r2,-4(fp)
    e218:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e21c:	e0bffb17 	ldw	r2,-20(fp)
    e220:	10800017 	ldw	r2,0(r2)
    e224:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e228:	e0bffc17 	ldw	r2,-16(fp)
    e22c:	10800104 	addi	r2,r2,4
    e230:	10800037 	ldwio	r2,0(r2)
    e234:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e238:	e0bffd17 	ldw	r2,-12(fp)
    e23c:	1080c00c 	andi	r2,r2,768
    e240:	1000011e 	bne	r2,zero,e248 <altera_avalon_jtag_uart_irq+0x44>
      break;
    e244:	00006c06 	br	e3f8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e248:	e0bffd17 	ldw	r2,-12(fp)
    e24c:	1080400c 	andi	r2,r2,256
    e250:	10003426 	beq	r2,zero,e324 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e254:	00800074 	movhi	r2,1
    e258:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e25c:	e0bffb17 	ldw	r2,-20(fp)
    e260:	10800a17 	ldw	r2,40(r2)
    e264:	10800044 	addi	r2,r2,1
    e268:	1081ffcc 	andi	r2,r2,2047
    e26c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e270:	e0bffb17 	ldw	r2,-20(fp)
    e274:	10c00b17 	ldw	r3,44(r2)
    e278:	e0bffe17 	ldw	r2,-8(fp)
    e27c:	1880011e 	bne	r3,r2,e284 <altera_avalon_jtag_uart_irq+0x80>
          break;
    e280:	00001606 	br	e2dc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e284:	e0bffc17 	ldw	r2,-16(fp)
    e288:	10800037 	ldwio	r2,0(r2)
    e28c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e290:	e0bff917 	ldw	r2,-28(fp)
    e294:	10a0000c 	andi	r2,r2,32768
    e298:	1000011e 	bne	r2,zero,e2a0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    e29c:	00000f06 	br	e2dc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e2a0:	e0bffb17 	ldw	r2,-20(fp)
    e2a4:	10800a17 	ldw	r2,40(r2)
    e2a8:	e0fff917 	ldw	r3,-28(fp)
    e2ac:	1809883a 	mov	r4,r3
    e2b0:	e0fffb17 	ldw	r3,-20(fp)
    e2b4:	1885883a 	add	r2,r3,r2
    e2b8:	10800e04 	addi	r2,r2,56
    e2bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e2c0:	e0bffb17 	ldw	r2,-20(fp)
    e2c4:	10800a17 	ldw	r2,40(r2)
    e2c8:	10800044 	addi	r2,r2,1
    e2cc:	10c1ffcc 	andi	r3,r2,2047
    e2d0:	e0bffb17 	ldw	r2,-20(fp)
    e2d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e2d8:	003fe006 	br	e25c <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e2dc:	e0bff917 	ldw	r2,-28(fp)
    e2e0:	10bfffec 	andhi	r2,r2,65535
    e2e4:	10000f26 	beq	r2,zero,e324 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e2e8:	e0bffb17 	ldw	r2,-20(fp)
    e2ec:	10c00817 	ldw	r3,32(r2)
    e2f0:	00bfff84 	movi	r2,-2
    e2f4:	1886703a 	and	r3,r3,r2
    e2f8:	e0bffb17 	ldw	r2,-20(fp)
    e2fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e300:	e0bffc17 	ldw	r2,-16(fp)
    e304:	10800104 	addi	r2,r2,4
    e308:	1007883a 	mov	r3,r2
    e30c:	e0bffb17 	ldw	r2,-20(fp)
    e310:	10800817 	ldw	r2,32(r2)
    e314:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e318:	e0bffc17 	ldw	r2,-16(fp)
    e31c:	10800104 	addi	r2,r2,4
    e320:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e324:	e0bffd17 	ldw	r2,-12(fp)
    e328:	1080800c 	andi	r2,r2,512
    e32c:	10003126 	beq	r2,zero,e3f4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e330:	e0bffd17 	ldw	r2,-12(fp)
    e334:	1004d43a 	srli	r2,r2,16
    e338:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e33c:	00001406 	br	e390 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e340:	e0bffc17 	ldw	r2,-16(fp)
    e344:	e0fffb17 	ldw	r3,-20(fp)
    e348:	18c00d17 	ldw	r3,52(r3)
    e34c:	e13ffb17 	ldw	r4,-20(fp)
    e350:	20c7883a 	add	r3,r4,r3
    e354:	18c20e04 	addi	r3,r3,2104
    e358:	18c00003 	ldbu	r3,0(r3)
    e35c:	18c03fcc 	andi	r3,r3,255
    e360:	18c0201c 	xori	r3,r3,128
    e364:	18ffe004 	addi	r3,r3,-128
    e368:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e36c:	e0bffb17 	ldw	r2,-20(fp)
    e370:	10800d17 	ldw	r2,52(r2)
    e374:	10800044 	addi	r2,r2,1
    e378:	10c1ffcc 	andi	r3,r2,2047
    e37c:	e0bffb17 	ldw	r2,-20(fp)
    e380:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e384:	e0bffa17 	ldw	r2,-24(fp)
    e388:	10bfffc4 	addi	r2,r2,-1
    e38c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e390:	e0bffa17 	ldw	r2,-24(fp)
    e394:	10000526 	beq	r2,zero,e3ac <altera_avalon_jtag_uart_irq+0x1a8>
    e398:	e0bffb17 	ldw	r2,-20(fp)
    e39c:	10c00d17 	ldw	r3,52(r2)
    e3a0:	e0bffb17 	ldw	r2,-20(fp)
    e3a4:	10800c17 	ldw	r2,48(r2)
    e3a8:	18bfe51e 	bne	r3,r2,e340 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e3ac:	e0bffa17 	ldw	r2,-24(fp)
    e3b0:	10001026 	beq	r2,zero,e3f4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e3b4:	e0bffb17 	ldw	r2,-20(fp)
    e3b8:	10c00817 	ldw	r3,32(r2)
    e3bc:	00bfff44 	movi	r2,-3
    e3c0:	1886703a 	and	r3,r3,r2
    e3c4:	e0bffb17 	ldw	r2,-20(fp)
    e3c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e3cc:	e0bffb17 	ldw	r2,-20(fp)
    e3d0:	10800017 	ldw	r2,0(r2)
    e3d4:	10800104 	addi	r2,r2,4
    e3d8:	1007883a 	mov	r3,r2
    e3dc:	e0bffb17 	ldw	r2,-20(fp)
    e3e0:	10800817 	ldw	r2,32(r2)
    e3e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e3e8:	e0bffc17 	ldw	r2,-16(fp)
    e3ec:	10800104 	addi	r2,r2,4
    e3f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e3f4:	003f8c06 	br	e228 <altera_avalon_jtag_uart_irq+0x24>
}
    e3f8:	e037883a 	mov	sp,fp
    e3fc:	df000017 	ldw	fp,0(sp)
    e400:	dec00104 	addi	sp,sp,4
    e404:	f800283a 	ret

0000e408 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e408:	defff804 	addi	sp,sp,-32
    e40c:	df000715 	stw	fp,28(sp)
    e410:	df000704 	addi	fp,sp,28
    e414:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e418:	e0bffb17 	ldw	r2,-20(fp)
    e41c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e420:	e0bff917 	ldw	r2,-28(fp)
    e424:	10800017 	ldw	r2,0(r2)
    e428:	10800104 	addi	r2,r2,4
    e42c:	10800037 	ldwio	r2,0(r2)
    e430:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e434:	e0bffa17 	ldw	r2,-24(fp)
    e438:	1081000c 	andi	r2,r2,1024
    e43c:	10000b26 	beq	r2,zero,e46c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e440:	e0bff917 	ldw	r2,-28(fp)
    e444:	10800017 	ldw	r2,0(r2)
    e448:	10800104 	addi	r2,r2,4
    e44c:	1007883a 	mov	r3,r2
    e450:	e0bff917 	ldw	r2,-28(fp)
    e454:	10800817 	ldw	r2,32(r2)
    e458:	10810014 	ori	r2,r2,1024
    e45c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e460:	e0bff917 	ldw	r2,-28(fp)
    e464:	10000915 	stw	zero,36(r2)
    e468:	00000a06 	br	e494 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e46c:	e0bff917 	ldw	r2,-28(fp)
    e470:	10c00917 	ldw	r3,36(r2)
    e474:	00a00034 	movhi	r2,32768
    e478:	10bfff04 	addi	r2,r2,-4
    e47c:	10c00536 	bltu	r2,r3,e494 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e480:	e0bff917 	ldw	r2,-28(fp)
    e484:	10800917 	ldw	r2,36(r2)
    e488:	10c00044 	addi	r3,r2,1
    e48c:	e0bff917 	ldw	r2,-28(fp)
    e490:	10c00915 	stw	r3,36(r2)
    e494:	00800074 	movhi	r2,1
    e498:	108dd804 	addi	r2,r2,14176
    e49c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e4a0:	e037883a 	mov	sp,fp
    e4a4:	df000017 	ldw	fp,0(sp)
    e4a8:	dec00104 	addi	sp,sp,4
    e4ac:	f800283a 	ret

0000e4b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e4b0:	defffd04 	addi	sp,sp,-12
    e4b4:	df000215 	stw	fp,8(sp)
    e4b8:	df000204 	addi	fp,sp,8
    e4bc:	e13ffe15 	stw	r4,-8(fp)
    e4c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e4c4:	00000506 	br	e4dc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e4c8:	e0bfff17 	ldw	r2,-4(fp)
    e4cc:	1090000c 	andi	r2,r2,16384
    e4d0:	10000226 	beq	r2,zero,e4dc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e4d4:	00bffd44 	movi	r2,-11
    e4d8:	00000b06 	br	e508 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e4dc:	e0bffe17 	ldw	r2,-8(fp)
    e4e0:	10c00d17 	ldw	r3,52(r2)
    e4e4:	e0bffe17 	ldw	r2,-8(fp)
    e4e8:	10800c17 	ldw	r2,48(r2)
    e4ec:	18800526 	beq	r3,r2,e504 <altera_avalon_jtag_uart_close+0x54>
    e4f0:	e0bffe17 	ldw	r2,-8(fp)
    e4f4:	10c00917 	ldw	r3,36(r2)
    e4f8:	e0bffe17 	ldw	r2,-8(fp)
    e4fc:	10800117 	ldw	r2,4(r2)
    e500:	18bff136 	bltu	r3,r2,e4c8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e504:	0005883a 	mov	r2,zero
}
    e508:	e037883a 	mov	sp,fp
    e50c:	df000017 	ldw	fp,0(sp)
    e510:	dec00104 	addi	sp,sp,4
    e514:	f800283a 	ret

0000e518 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e518:	defffa04 	addi	sp,sp,-24
    e51c:	df000515 	stw	fp,20(sp)
    e520:	df000504 	addi	fp,sp,20
    e524:	e13ffd15 	stw	r4,-12(fp)
    e528:	e17ffe15 	stw	r5,-8(fp)
    e52c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e530:	00bff9c4 	movi	r2,-25
    e534:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e538:	e0bffe17 	ldw	r2,-8(fp)
    e53c:	10da8060 	cmpeqi	r3,r2,27137
    e540:	1800031e 	bne	r3,zero,e550 <altera_avalon_jtag_uart_ioctl+0x38>
    e544:	109a80a0 	cmpeqi	r2,r2,27138
    e548:	1000191e 	bne	r2,zero,e5b0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    e54c:	00002806 	br	e5f0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e550:	e0bffd17 	ldw	r2,-12(fp)
    e554:	10c00117 	ldw	r3,4(r2)
    e558:	00a00034 	movhi	r2,32768
    e55c:	10bfffc4 	addi	r2,r2,-1
    e560:	18801226 	beq	r3,r2,e5ac <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    e564:	e0bfff17 	ldw	r2,-4(fp)
    e568:	10800017 	ldw	r2,0(r2)
    e56c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e570:	e0bffc17 	ldw	r2,-16(fp)
    e574:	10800090 	cmplti	r2,r2,2
    e578:	1000061e 	bne	r2,zero,e594 <altera_avalon_jtag_uart_ioctl+0x7c>
    e57c:	e0fffc17 	ldw	r3,-16(fp)
    e580:	00a00034 	movhi	r2,32768
    e584:	10bfffc4 	addi	r2,r2,-1
    e588:	18800226 	beq	r3,r2,e594 <altera_avalon_jtag_uart_ioctl+0x7c>
    e58c:	e0bffc17 	ldw	r2,-16(fp)
    e590:	00000206 	br	e59c <altera_avalon_jtag_uart_ioctl+0x84>
    e594:	00a00034 	movhi	r2,32768
    e598:	10bfff84 	addi	r2,r2,-2
    e59c:	e0fffd17 	ldw	r3,-12(fp)
    e5a0:	18800115 	stw	r2,4(r3)
      rc = 0;
    e5a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e5a8:	00001106 	br	e5f0 <altera_avalon_jtag_uart_ioctl+0xd8>
    e5ac:	00001006 	br	e5f0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e5b0:	e0bffd17 	ldw	r2,-12(fp)
    e5b4:	10c00117 	ldw	r3,4(r2)
    e5b8:	00a00034 	movhi	r2,32768
    e5bc:	10bfffc4 	addi	r2,r2,-1
    e5c0:	18800a26 	beq	r3,r2,e5ec <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e5c4:	e0bffd17 	ldw	r2,-12(fp)
    e5c8:	10c00917 	ldw	r3,36(r2)
    e5cc:	e0bffd17 	ldw	r2,-12(fp)
    e5d0:	10800117 	ldw	r2,4(r2)
    e5d4:	1885803a 	cmpltu	r2,r3,r2
    e5d8:	10c03fcc 	andi	r3,r2,255
    e5dc:	e0bfff17 	ldw	r2,-4(fp)
    e5e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e5e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e5e8:	00000006 	br	e5ec <altera_avalon_jtag_uart_ioctl+0xd4>
    e5ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e5f0:	e0bffb17 	ldw	r2,-20(fp)
}
    e5f4:	e037883a 	mov	sp,fp
    e5f8:	df000017 	ldw	fp,0(sp)
    e5fc:	dec00104 	addi	sp,sp,4
    e600:	f800283a 	ret

0000e604 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e604:	defff304 	addi	sp,sp,-52
    e608:	dfc00c15 	stw	ra,48(sp)
    e60c:	df000b15 	stw	fp,44(sp)
    e610:	df000b04 	addi	fp,sp,44
    e614:	e13ffc15 	stw	r4,-16(fp)
    e618:	e17ffd15 	stw	r5,-12(fp)
    e61c:	e1bffe15 	stw	r6,-8(fp)
    e620:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e624:	e0bffd17 	ldw	r2,-12(fp)
    e628:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e62c:	00004906 	br	e754 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e630:	e0bffc17 	ldw	r2,-16(fp)
    e634:	10800a17 	ldw	r2,40(r2)
    e638:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e63c:	e0bffc17 	ldw	r2,-16(fp)
    e640:	10800b17 	ldw	r2,44(r2)
    e644:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e648:	e0fff717 	ldw	r3,-36(fp)
    e64c:	e0bff817 	ldw	r2,-32(fp)
    e650:	18800536 	bltu	r3,r2,e668 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e654:	e0fff717 	ldw	r3,-36(fp)
    e658:	e0bff817 	ldw	r2,-32(fp)
    e65c:	1885c83a 	sub	r2,r3,r2
    e660:	e0bff615 	stw	r2,-40(fp)
    e664:	00000406 	br	e678 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e668:	00c20004 	movi	r3,2048
    e66c:	e0bff817 	ldw	r2,-32(fp)
    e670:	1885c83a 	sub	r2,r3,r2
    e674:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e678:	e0bff617 	ldw	r2,-40(fp)
    e67c:	1000011e 	bne	r2,zero,e684 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    e680:	00001d06 	br	e6f8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    e684:	e0fffe17 	ldw	r3,-8(fp)
    e688:	e0bff617 	ldw	r2,-40(fp)
    e68c:	1880022e 	bgeu	r3,r2,e698 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    e690:	e0bffe17 	ldw	r2,-8(fp)
    e694:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e698:	e0bff817 	ldw	r2,-32(fp)
    e69c:	10800e04 	addi	r2,r2,56
    e6a0:	e0fffc17 	ldw	r3,-16(fp)
    e6a4:	1885883a 	add	r2,r3,r2
    e6a8:	e13ff517 	ldw	r4,-44(fp)
    e6ac:	100b883a 	mov	r5,r2
    e6b0:	e1bff617 	ldw	r6,-40(fp)
    e6b4:	0006e5c0 	call	6e5c <memcpy>
      ptr   += n;
    e6b8:	e0fff517 	ldw	r3,-44(fp)
    e6bc:	e0bff617 	ldw	r2,-40(fp)
    e6c0:	1885883a 	add	r2,r3,r2
    e6c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e6c8:	e0fffe17 	ldw	r3,-8(fp)
    e6cc:	e0bff617 	ldw	r2,-40(fp)
    e6d0:	1885c83a 	sub	r2,r3,r2
    e6d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e6d8:	e0fff817 	ldw	r3,-32(fp)
    e6dc:	e0bff617 	ldw	r2,-40(fp)
    e6e0:	1885883a 	add	r2,r3,r2
    e6e4:	10c1ffcc 	andi	r3,r2,2047
    e6e8:	e0bffc17 	ldw	r2,-16(fp)
    e6ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e6f0:	e0bffe17 	ldw	r2,-8(fp)
    e6f4:	00bfce16 	blt	zero,r2,e630 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    e6f8:	e0fff517 	ldw	r3,-44(fp)
    e6fc:	e0bffd17 	ldw	r2,-12(fp)
    e700:	18800126 	beq	r3,r2,e708 <altera_avalon_jtag_uart_read+0x104>
      break;
    e704:	00001506 	br	e75c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e708:	e0bfff17 	ldw	r2,-4(fp)
    e70c:	1090000c 	andi	r2,r2,16384
    e710:	10000126 	beq	r2,zero,e718 <altera_avalon_jtag_uart_read+0x114>
      break;
    e714:	00001106 	br	e75c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e718:	0001883a 	nop
    e71c:	e0bffc17 	ldw	r2,-16(fp)
    e720:	10c00a17 	ldw	r3,40(r2)
    e724:	e0bff717 	ldw	r2,-36(fp)
    e728:	1880051e 	bne	r3,r2,e740 <altera_avalon_jtag_uart_read+0x13c>
    e72c:	e0bffc17 	ldw	r2,-16(fp)
    e730:	10c00917 	ldw	r3,36(r2)
    e734:	e0bffc17 	ldw	r2,-16(fp)
    e738:	10800117 	ldw	r2,4(r2)
    e73c:	18bff736 	bltu	r3,r2,e71c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e740:	e0bffc17 	ldw	r2,-16(fp)
    e744:	10c00a17 	ldw	r3,40(r2)
    e748:	e0bff717 	ldw	r2,-36(fp)
    e74c:	1880011e 	bne	r3,r2,e754 <altera_avalon_jtag_uart_read+0x150>
      break;
    e750:	00000206 	br	e75c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e754:	e0bffe17 	ldw	r2,-8(fp)
    e758:	00bfb516 	blt	zero,r2,e630 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e75c:	e0fff517 	ldw	r3,-44(fp)
    e760:	e0bffd17 	ldw	r2,-12(fp)
    e764:	18801826 	beq	r3,r2,e7c8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e768:	0005303a 	rdctl	r2,status
    e76c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e770:	e0fffa17 	ldw	r3,-24(fp)
    e774:	00bfff84 	movi	r2,-2
    e778:	1884703a 	and	r2,r3,r2
    e77c:	1001703a 	wrctl	status,r2
  
  return context;
    e780:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e784:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e788:	e0bffc17 	ldw	r2,-16(fp)
    e78c:	10800817 	ldw	r2,32(r2)
    e790:	10c00054 	ori	r3,r2,1
    e794:	e0bffc17 	ldw	r2,-16(fp)
    e798:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e79c:	e0bffc17 	ldw	r2,-16(fp)
    e7a0:	10800017 	ldw	r2,0(r2)
    e7a4:	10800104 	addi	r2,r2,4
    e7a8:	1007883a 	mov	r3,r2
    e7ac:	e0bffc17 	ldw	r2,-16(fp)
    e7b0:	10800817 	ldw	r2,32(r2)
    e7b4:	18800035 	stwio	r2,0(r3)
    e7b8:	e0bff917 	ldw	r2,-28(fp)
    e7bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7c0:	e0bffb17 	ldw	r2,-20(fp)
    e7c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e7c8:	e0fff517 	ldw	r3,-44(fp)
    e7cc:	e0bffd17 	ldw	r2,-12(fp)
    e7d0:	18800426 	beq	r3,r2,e7e4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    e7d4:	e0fff517 	ldw	r3,-44(fp)
    e7d8:	e0bffd17 	ldw	r2,-12(fp)
    e7dc:	1885c83a 	sub	r2,r3,r2
    e7e0:	00000606 	br	e7fc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    e7e4:	e0bfff17 	ldw	r2,-4(fp)
    e7e8:	1090000c 	andi	r2,r2,16384
    e7ec:	10000226 	beq	r2,zero,e7f8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    e7f0:	00bffd44 	movi	r2,-11
    e7f4:	00000106 	br	e7fc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    e7f8:	00bffec4 	movi	r2,-5
}
    e7fc:	e037883a 	mov	sp,fp
    e800:	dfc00117 	ldw	ra,4(sp)
    e804:	df000017 	ldw	fp,0(sp)
    e808:	dec00204 	addi	sp,sp,8
    e80c:	f800283a 	ret

0000e810 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e810:	defff304 	addi	sp,sp,-52
    e814:	dfc00c15 	stw	ra,48(sp)
    e818:	df000b15 	stw	fp,44(sp)
    e81c:	df000b04 	addi	fp,sp,44
    e820:	e13ffc15 	stw	r4,-16(fp)
    e824:	e17ffd15 	stw	r5,-12(fp)
    e828:	e1bffe15 	stw	r6,-8(fp)
    e82c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e830:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e834:	e0bffd17 	ldw	r2,-12(fp)
    e838:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e83c:	00003806 	br	e920 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e840:	e0bffc17 	ldw	r2,-16(fp)
    e844:	10800c17 	ldw	r2,48(r2)
    e848:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    e84c:	e0bffc17 	ldw	r2,-16(fp)
    e850:	10800d17 	ldw	r2,52(r2)
    e854:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e858:	e0fff817 	ldw	r3,-32(fp)
    e85c:	e0bff517 	ldw	r2,-44(fp)
    e860:	1880062e 	bgeu	r3,r2,e87c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e864:	e0fff517 	ldw	r3,-44(fp)
    e868:	e0bff817 	ldw	r2,-32(fp)
    e86c:	1885c83a 	sub	r2,r3,r2
    e870:	10bfffc4 	addi	r2,r2,-1
    e874:	e0bff615 	stw	r2,-40(fp)
    e878:	00000b06 	br	e8a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e87c:	e0bff517 	ldw	r2,-44(fp)
    e880:	10000526 	beq	r2,zero,e898 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e884:	00c20004 	movi	r3,2048
    e888:	e0bff817 	ldw	r2,-32(fp)
    e88c:	1885c83a 	sub	r2,r3,r2
    e890:	e0bff615 	stw	r2,-40(fp)
    e894:	00000406 	br	e8a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e898:	00c1ffc4 	movi	r3,2047
    e89c:	e0bff817 	ldw	r2,-32(fp)
    e8a0:	1885c83a 	sub	r2,r3,r2
    e8a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e8a8:	e0bff617 	ldw	r2,-40(fp)
    e8ac:	1000011e 	bne	r2,zero,e8b4 <altera_avalon_jtag_uart_write+0xa4>
        break;
    e8b0:	00001d06 	br	e928 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    e8b4:	e0fffe17 	ldw	r3,-8(fp)
    e8b8:	e0bff617 	ldw	r2,-40(fp)
    e8bc:	1880022e 	bgeu	r3,r2,e8c8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    e8c0:	e0bffe17 	ldw	r2,-8(fp)
    e8c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e8c8:	e0bff817 	ldw	r2,-32(fp)
    e8cc:	10820e04 	addi	r2,r2,2104
    e8d0:	e0fffc17 	ldw	r3,-16(fp)
    e8d4:	1885883a 	add	r2,r3,r2
    e8d8:	1009883a 	mov	r4,r2
    e8dc:	e17ffd17 	ldw	r5,-12(fp)
    e8e0:	e1bff617 	ldw	r6,-40(fp)
    e8e4:	0006e5c0 	call	6e5c <memcpy>
      ptr   += n;
    e8e8:	e0fffd17 	ldw	r3,-12(fp)
    e8ec:	e0bff617 	ldw	r2,-40(fp)
    e8f0:	1885883a 	add	r2,r3,r2
    e8f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e8f8:	e0fffe17 	ldw	r3,-8(fp)
    e8fc:	e0bff617 	ldw	r2,-40(fp)
    e900:	1885c83a 	sub	r2,r3,r2
    e904:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e908:	e0fff817 	ldw	r3,-32(fp)
    e90c:	e0bff617 	ldw	r2,-40(fp)
    e910:	1885883a 	add	r2,r3,r2
    e914:	10c1ffcc 	andi	r3,r2,2047
    e918:	e0bffc17 	ldw	r2,-16(fp)
    e91c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e920:	e0bffe17 	ldw	r2,-8(fp)
    e924:	00bfc616 	blt	zero,r2,e840 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e928:	0005303a 	rdctl	r2,status
    e92c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e930:	e0fffa17 	ldw	r3,-24(fp)
    e934:	00bfff84 	movi	r2,-2
    e938:	1884703a 	and	r2,r3,r2
    e93c:	1001703a 	wrctl	status,r2
  
  return context;
    e940:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e944:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e948:	e0bffc17 	ldw	r2,-16(fp)
    e94c:	10800817 	ldw	r2,32(r2)
    e950:	10c00094 	ori	r3,r2,2
    e954:	e0bffc17 	ldw	r2,-16(fp)
    e958:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e95c:	e0bffc17 	ldw	r2,-16(fp)
    e960:	10800017 	ldw	r2,0(r2)
    e964:	10800104 	addi	r2,r2,4
    e968:	1007883a 	mov	r3,r2
    e96c:	e0bffc17 	ldw	r2,-16(fp)
    e970:	10800817 	ldw	r2,32(r2)
    e974:	18800035 	stwio	r2,0(r3)
    e978:	e0bff917 	ldw	r2,-28(fp)
    e97c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e980:	e0bffb17 	ldw	r2,-20(fp)
    e984:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e988:	e0bffe17 	ldw	r2,-8(fp)
    e98c:	0080120e 	bge	zero,r2,e9d8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    e990:	e0bfff17 	ldw	r2,-4(fp)
    e994:	1090000c 	andi	r2,r2,16384
    e998:	10000126 	beq	r2,zero,e9a0 <altera_avalon_jtag_uart_write+0x190>
        break;
    e99c:	00001006 	br	e9e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e9a0:	0001883a 	nop
    e9a4:	e0bffc17 	ldw	r2,-16(fp)
    e9a8:	10c00d17 	ldw	r3,52(r2)
    e9ac:	e0bff517 	ldw	r2,-44(fp)
    e9b0:	1880051e 	bne	r3,r2,e9c8 <altera_avalon_jtag_uart_write+0x1b8>
    e9b4:	e0bffc17 	ldw	r2,-16(fp)
    e9b8:	10c00917 	ldw	r3,36(r2)
    e9bc:	e0bffc17 	ldw	r2,-16(fp)
    e9c0:	10800117 	ldw	r2,4(r2)
    e9c4:	18bff736 	bltu	r3,r2,e9a4 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e9c8:	e0bffc17 	ldw	r2,-16(fp)
    e9cc:	10800917 	ldw	r2,36(r2)
    e9d0:	10000126 	beq	r2,zero,e9d8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    e9d4:	00000206 	br	e9e0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    e9d8:	e0bffe17 	ldw	r2,-8(fp)
    e9dc:	00bf9716 	blt	zero,r2,e83c <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e9e0:	e0fffd17 	ldw	r3,-12(fp)
    e9e4:	e0bff717 	ldw	r2,-36(fp)
    e9e8:	18800426 	beq	r3,r2,e9fc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    e9ec:	e0fffd17 	ldw	r3,-12(fp)
    e9f0:	e0bff717 	ldw	r2,-36(fp)
    e9f4:	1885c83a 	sub	r2,r3,r2
    e9f8:	00000606 	br	ea14 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    e9fc:	e0bfff17 	ldw	r2,-4(fp)
    ea00:	1090000c 	andi	r2,r2,16384
    ea04:	10000226 	beq	r2,zero,ea10 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    ea08:	00bffd44 	movi	r2,-11
    ea0c:	00000106 	br	ea14 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ea10:	00bffec4 	movi	r2,-5
}
    ea14:	e037883a 	mov	sp,fp
    ea18:	dfc00117 	ldw	ra,4(sp)
    ea1c:	df000017 	ldw	fp,0(sp)
    ea20:	dec00204 	addi	sp,sp,8
    ea24:	f800283a 	ret

0000ea28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ea28:	defff504 	addi	sp,sp,-44
    ea2c:	df000a15 	stw	fp,40(sp)
    ea30:	df000a04 	addi	fp,sp,40
    ea34:	e13ffc15 	stw	r4,-16(fp)
    ea38:	e17ffd15 	stw	r5,-12(fp)
    ea3c:	e1bffe15 	stw	r6,-8(fp)
    ea40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ea44:	e03ff615 	stw	zero,-40(fp)
    ea48:	00800074 	movhi	r2,1
    ea4c:	108dd804 	addi	r2,r2,14176
    ea50:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    ea54:	10003f26 	beq	r2,zero,eb54 <alt_alarm_start+0x12c>
  {
    if (alarm)
    ea58:	e0bffc17 	ldw	r2,-16(fp)
    ea5c:	10003b26 	beq	r2,zero,eb4c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    ea60:	e0bffc17 	ldw	r2,-16(fp)
    ea64:	e0fffe17 	ldw	r3,-8(fp)
    ea68:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ea6c:	e0bffc17 	ldw	r2,-16(fp)
    ea70:	e0ffff17 	ldw	r3,-4(fp)
    ea74:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea78:	0005303a 	rdctl	r2,status
    ea7c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea80:	e0fff817 	ldw	r3,-32(fp)
    ea84:	00bfff84 	movi	r2,-2
    ea88:	1884703a 	and	r2,r3,r2
    ea8c:	1001703a 	wrctl	status,r2
  
  return context;
    ea90:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    ea94:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ea98:	00800074 	movhi	r2,1
    ea9c:	108dd904 	addi	r2,r2,14180
    eaa0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    eaa4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    eaa8:	e0fffd17 	ldw	r3,-12(fp)
    eaac:	e0bff617 	ldw	r2,-40(fp)
    eab0:	1885883a 	add	r2,r3,r2
    eab4:	10c00044 	addi	r3,r2,1
    eab8:	e0bffc17 	ldw	r2,-16(fp)
    eabc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    eac0:	e0bffc17 	ldw	r2,-16(fp)
    eac4:	10c00217 	ldw	r3,8(r2)
    eac8:	e0bff617 	ldw	r2,-40(fp)
    eacc:	1880042e 	bgeu	r3,r2,eae0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    ead0:	e0bffc17 	ldw	r2,-16(fp)
    ead4:	00c00044 	movi	r3,1
    ead8:	10c00405 	stb	r3,16(r2)
    eadc:	00000206 	br	eae8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    eae0:	e0bffc17 	ldw	r2,-16(fp)
    eae4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    eae8:	e0fffc17 	ldw	r3,-16(fp)
    eaec:	00800074 	movhi	r2,1
    eaf0:	10871004 	addi	r2,r2,7232
    eaf4:	e0bff915 	stw	r2,-28(fp)
    eaf8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    eafc:	e0bffa17 	ldw	r2,-24(fp)
    eb00:	e0fff917 	ldw	r3,-28(fp)
    eb04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    eb08:	e0bff917 	ldw	r2,-28(fp)
    eb0c:	10c00017 	ldw	r3,0(r2)
    eb10:	e0bffa17 	ldw	r2,-24(fp)
    eb14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eb18:	e0bff917 	ldw	r2,-28(fp)
    eb1c:	10800017 	ldw	r2,0(r2)
    eb20:	e0fffa17 	ldw	r3,-24(fp)
    eb24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eb28:	e0bff917 	ldw	r2,-28(fp)
    eb2c:	e0fffa17 	ldw	r3,-24(fp)
    eb30:	10c00015 	stw	r3,0(r2)
    eb34:	e0bff717 	ldw	r2,-36(fp)
    eb38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb3c:	e0bffb17 	ldw	r2,-20(fp)
    eb40:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    eb44:	0005883a 	mov	r2,zero
    eb48:	00000306 	br	eb58 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    eb4c:	00bffa84 	movi	r2,-22
    eb50:	00000106 	br	eb58 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    eb54:	00bfde84 	movi	r2,-134
  }
}
    eb58:	e037883a 	mov	sp,fp
    eb5c:	df000017 	ldw	fp,0(sp)
    eb60:	dec00104 	addi	sp,sp,4
    eb64:	f800283a 	ret

0000eb68 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    eb68:	defffa04 	addi	sp,sp,-24
    eb6c:	dfc00515 	stw	ra,20(sp)
    eb70:	df000415 	stw	fp,16(sp)
    eb74:	df000404 	addi	fp,sp,16
    eb78:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    eb7c:	008000c4 	movi	r2,3
    eb80:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    eb84:	e0fffd17 	ldw	r3,-12(fp)
    eb88:	008003f4 	movhi	r2,15
    eb8c:	10909004 	addi	r2,r2,16960
    eb90:	1885383a 	mul	r2,r3,r2
    eb94:	0100bef4 	movhi	r4,763
    eb98:	213c2004 	addi	r4,r4,-3968
    eb9c:	100b883a 	mov	r5,r2
    eba0:	00011900 	call	1190 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    eba4:	01200034 	movhi	r4,32768
    eba8:	213fffc4 	addi	r4,r4,-1
    ebac:	100b883a 	mov	r5,r2
    ebb0:	00011900 	call	1190 <__udivsi3>
    ebb4:	e13fff17 	ldw	r4,-4(fp)
    ebb8:	100b883a 	mov	r5,r2
    ebbc:	00011900 	call	1190 <__udivsi3>
    ebc0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    ebc4:	e0bffe17 	ldw	r2,-8(fp)
    ebc8:	10002a26 	beq	r2,zero,ec74 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    ebcc:	e03ffc15 	stw	zero,-16(fp)
    ebd0:	00001706 	br	ec30 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    ebd4:	00a00034 	movhi	r2,32768
    ebd8:	10bfffc4 	addi	r2,r2,-1
    ebdc:	10bfffc4 	addi	r2,r2,-1
    ebe0:	103ffe1e 	bne	r2,zero,ebdc <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    ebe4:	e0fffd17 	ldw	r3,-12(fp)
    ebe8:	008003f4 	movhi	r2,15
    ebec:	10909004 	addi	r2,r2,16960
    ebf0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    ebf4:	0100bef4 	movhi	r4,763
    ebf8:	213c2004 	addi	r4,r4,-3968
    ebfc:	100b883a 	mov	r5,r2
    ec00:	00011900 	call	1190 <__udivsi3>
    ec04:	01200034 	movhi	r4,32768
    ec08:	213fffc4 	addi	r4,r4,-1
    ec0c:	100b883a 	mov	r5,r2
    ec10:	00011900 	call	1190 <__udivsi3>
    ec14:	1007883a 	mov	r3,r2
    ec18:	e0bfff17 	ldw	r2,-4(fp)
    ec1c:	10c5c83a 	sub	r2,r2,r3
    ec20:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    ec24:	e0bffc17 	ldw	r2,-16(fp)
    ec28:	10800044 	addi	r2,r2,1
    ec2c:	e0bffc15 	stw	r2,-16(fp)
    ec30:	e0fffc17 	ldw	r3,-16(fp)
    ec34:	e0bffe17 	ldw	r2,-8(fp)
    ec38:	18bfe616 	blt	r3,r2,ebd4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    ec3c:	e0fffd17 	ldw	r3,-12(fp)
    ec40:	008003f4 	movhi	r2,15
    ec44:	10909004 	addi	r2,r2,16960
    ec48:	1885383a 	mul	r2,r3,r2
    ec4c:	0100bef4 	movhi	r4,763
    ec50:	213c2004 	addi	r4,r4,-3968
    ec54:	100b883a 	mov	r5,r2
    ec58:	00011900 	call	1190 <__udivsi3>
    ec5c:	1007883a 	mov	r3,r2
    ec60:	e0bfff17 	ldw	r2,-4(fp)
    ec64:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    ec68:	10bfffc4 	addi	r2,r2,-1
    ec6c:	103ffe1e 	bne	r2,zero,ec68 <alt_busy_sleep+0x100>
    ec70:	00000d06 	br	eca8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    ec74:	e0fffd17 	ldw	r3,-12(fp)
    ec78:	008003f4 	movhi	r2,15
    ec7c:	10909004 	addi	r2,r2,16960
    ec80:	1885383a 	mul	r2,r3,r2
    ec84:	0100bef4 	movhi	r4,763
    ec88:	213c2004 	addi	r4,r4,-3968
    ec8c:	100b883a 	mov	r5,r2
    ec90:	00011900 	call	1190 <__udivsi3>
    ec94:	1007883a 	mov	r3,r2
    ec98:	e0bfff17 	ldw	r2,-4(fp)
    ec9c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    eca0:	10bfffc4 	addi	r2,r2,-1
    eca4:	00bffe16 	blt	zero,r2,eca0 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    eca8:	0005883a 	mov	r2,zero
}
    ecac:	e037883a 	mov	sp,fp
    ecb0:	dfc00117 	ldw	ra,4(sp)
    ecb4:	df000017 	ldw	fp,0(sp)
    ecb8:	dec00204 	addi	sp,sp,8
    ecbc:	f800283a 	ret

0000ecc0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ecc0:	deffff04 	addi	sp,sp,-4
    ecc4:	df000015 	stw	fp,0(sp)
    ecc8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    eccc:	e037883a 	mov	sp,fp
    ecd0:	df000017 	ldw	fp,0(sp)
    ecd4:	dec00104 	addi	sp,sp,4
    ecd8:	f800283a 	ret

0000ecdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ecdc:	defffe04 	addi	sp,sp,-8
    ece0:	dfc00115 	stw	ra,4(sp)
    ece4:	df000015 	stw	fp,0(sp)
    ece8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ecec:	00800074 	movhi	r2,1
    ecf0:	10870d04 	addi	r2,r2,7220
    ecf4:	10800017 	ldw	r2,0(r2)
    ecf8:	10000526 	beq	r2,zero,ed10 <alt_get_errno+0x34>
    ecfc:	00800074 	movhi	r2,1
    ed00:	10870d04 	addi	r2,r2,7220
    ed04:	10800017 	ldw	r2,0(r2)
    ed08:	103ee83a 	callr	r2
    ed0c:	00000206 	br	ed18 <alt_get_errno+0x3c>
    ed10:	00800074 	movhi	r2,1
    ed14:	108dd004 	addi	r2,r2,14144
}
    ed18:	e037883a 	mov	sp,fp
    ed1c:	dfc00117 	ldw	ra,4(sp)
    ed20:	df000017 	ldw	fp,0(sp)
    ed24:	dec00204 	addi	sp,sp,8
    ed28:	f800283a 	ret

0000ed2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ed2c:	defffa04 	addi	sp,sp,-24
    ed30:	dfc00515 	stw	ra,20(sp)
    ed34:	df000415 	stw	fp,16(sp)
    ed38:	df000404 	addi	fp,sp,16
    ed3c:	e13ffe15 	stw	r4,-8(fp)
    ed40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ed44:	e0bffe17 	ldw	r2,-8(fp)
    ed48:	10000326 	beq	r2,zero,ed58 <alt_dev_llist_insert+0x2c>
    ed4c:	e0bffe17 	ldw	r2,-8(fp)
    ed50:	10800217 	ldw	r2,8(r2)
    ed54:	1000061e 	bne	r2,zero,ed70 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ed58:	000ecdc0 	call	ecdc <alt_get_errno>
    ed5c:	1007883a 	mov	r3,r2
    ed60:	00800584 	movi	r2,22
    ed64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ed68:	00bffa84 	movi	r2,-22
    ed6c:	00001306 	br	edbc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ed70:	e0bffe17 	ldw	r2,-8(fp)
    ed74:	e0ffff17 	ldw	r3,-4(fp)
    ed78:	e0fffc15 	stw	r3,-16(fp)
    ed7c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ed80:	e0bffd17 	ldw	r2,-12(fp)
    ed84:	e0fffc17 	ldw	r3,-16(fp)
    ed88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ed8c:	e0bffc17 	ldw	r2,-16(fp)
    ed90:	10c00017 	ldw	r3,0(r2)
    ed94:	e0bffd17 	ldw	r2,-12(fp)
    ed98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ed9c:	e0bffc17 	ldw	r2,-16(fp)
    eda0:	10800017 	ldw	r2,0(r2)
    eda4:	e0fffd17 	ldw	r3,-12(fp)
    eda8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    edac:	e0bffc17 	ldw	r2,-16(fp)
    edb0:	e0fffd17 	ldw	r3,-12(fp)
    edb4:	10c00015 	stw	r3,0(r2)

  return 0;  
    edb8:	0005883a 	mov	r2,zero
}
    edbc:	e037883a 	mov	sp,fp
    edc0:	dfc00117 	ldw	ra,4(sp)
    edc4:	df000017 	ldw	fp,0(sp)
    edc8:	dec00204 	addi	sp,sp,8
    edcc:	f800283a 	ret

0000edd0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    edd0:	defffd04 	addi	sp,sp,-12
    edd4:	dfc00215 	stw	ra,8(sp)
    edd8:	df000115 	stw	fp,4(sp)
    eddc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ede0:	00800074 	movhi	r2,1
    ede4:	10bf5d04 	addi	r2,r2,-652
    ede8:	e0bfff15 	stw	r2,-4(fp)
    edec:	00000606 	br	ee08 <_do_ctors+0x38>
        (*ctor) (); 
    edf0:	e0bfff17 	ldw	r2,-4(fp)
    edf4:	10800017 	ldw	r2,0(r2)
    edf8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    edfc:	e0bfff17 	ldw	r2,-4(fp)
    ee00:	10bfff04 	addi	r2,r2,-4
    ee04:	e0bfff15 	stw	r2,-4(fp)
    ee08:	e0ffff17 	ldw	r3,-4(fp)
    ee0c:	00800074 	movhi	r2,1
    ee10:	10bf5e04 	addi	r2,r2,-648
    ee14:	18bff62e 	bgeu	r3,r2,edf0 <_do_ctors+0x20>
        (*ctor) (); 
}
    ee18:	e037883a 	mov	sp,fp
    ee1c:	dfc00117 	ldw	ra,4(sp)
    ee20:	df000017 	ldw	fp,0(sp)
    ee24:	dec00204 	addi	sp,sp,8
    ee28:	f800283a 	ret

0000ee2c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ee2c:	defffd04 	addi	sp,sp,-12
    ee30:	dfc00215 	stw	ra,8(sp)
    ee34:	df000115 	stw	fp,4(sp)
    ee38:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ee3c:	00800074 	movhi	r2,1
    ee40:	10bf5d04 	addi	r2,r2,-652
    ee44:	e0bfff15 	stw	r2,-4(fp)
    ee48:	00000606 	br	ee64 <_do_dtors+0x38>
        (*dtor) (); 
    ee4c:	e0bfff17 	ldw	r2,-4(fp)
    ee50:	10800017 	ldw	r2,0(r2)
    ee54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ee58:	e0bfff17 	ldw	r2,-4(fp)
    ee5c:	10bfff04 	addi	r2,r2,-4
    ee60:	e0bfff15 	stw	r2,-4(fp)
    ee64:	e0ffff17 	ldw	r3,-4(fp)
    ee68:	00800074 	movhi	r2,1
    ee6c:	10bf5e04 	addi	r2,r2,-648
    ee70:	18bff62e 	bgeu	r3,r2,ee4c <_do_dtors+0x20>
        (*dtor) (); 
}
    ee74:	e037883a 	mov	sp,fp
    ee78:	dfc00117 	ldw	ra,4(sp)
    ee7c:	df000017 	ldw	fp,0(sp)
    ee80:	dec00204 	addi	sp,sp,8
    ee84:	f800283a 	ret

0000ee88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ee88:	defffe04 	addi	sp,sp,-8
    ee8c:	dfc00115 	stw	ra,4(sp)
    ee90:	df000015 	stw	fp,0(sp)
    ee94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ee98:	0009883a 	mov	r4,zero
    ee9c:	01440004 	movi	r5,4096
    eea0:	000f9480 	call	f948 <alt_icache_flush>
#endif
}
    eea4:	e037883a 	mov	sp,fp
    eea8:	dfc00117 	ldw	ra,4(sp)
    eeac:	df000017 	ldw	fp,0(sp)
    eeb0:	dec00204 	addi	sp,sp,8
    eeb4:	f800283a 	ret

0000eeb8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    eeb8:	defff904 	addi	sp,sp,-28
    eebc:	dfc00615 	stw	ra,24(sp)
    eec0:	df000515 	stw	fp,20(sp)
    eec4:	df000504 	addi	fp,sp,20
    eec8:	e13ffc15 	stw	r4,-16(fp)
    eecc:	e17ffd15 	stw	r5,-12(fp)
    eed0:	e1bffe15 	stw	r6,-8(fp)
    eed4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    eed8:	e0800217 	ldw	r2,8(fp)
    eedc:	d8800015 	stw	r2,0(sp)
    eee0:	e13ffc17 	ldw	r4,-16(fp)
    eee4:	e17ffd17 	ldw	r5,-12(fp)
    eee8:	e1bffe17 	ldw	r6,-8(fp)
    eeec:	e1ffff17 	ldw	r7,-4(fp)
    eef0:	000f0980 	call	f098 <alt_iic_isr_register>
}  
    eef4:	e037883a 	mov	sp,fp
    eef8:	dfc00117 	ldw	ra,4(sp)
    eefc:	df000017 	ldw	fp,0(sp)
    ef00:	dec00204 	addi	sp,sp,8
    ef04:	f800283a 	ret

0000ef08 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ef08:	defff904 	addi	sp,sp,-28
    ef0c:	df000615 	stw	fp,24(sp)
    ef10:	df000604 	addi	fp,sp,24
    ef14:	e13ffe15 	stw	r4,-8(fp)
    ef18:	e17fff15 	stw	r5,-4(fp)
    ef1c:	e0bfff17 	ldw	r2,-4(fp)
    ef20:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef24:	0005303a 	rdctl	r2,status
    ef28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef2c:	e0fffb17 	ldw	r3,-20(fp)
    ef30:	00bfff84 	movi	r2,-2
    ef34:	1884703a 	and	r2,r3,r2
    ef38:	1001703a 	wrctl	status,r2
  
  return context;
    ef3c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ef40:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    ef44:	e0bffa17 	ldw	r2,-24(fp)
    ef48:	00c00044 	movi	r3,1
    ef4c:	1884983a 	sll	r2,r3,r2
    ef50:	1007883a 	mov	r3,r2
    ef54:	00800074 	movhi	r2,1
    ef58:	108dd704 	addi	r2,r2,14172
    ef5c:	10800017 	ldw	r2,0(r2)
    ef60:	1886b03a 	or	r3,r3,r2
    ef64:	00800074 	movhi	r2,1
    ef68:	108dd704 	addi	r2,r2,14172
    ef6c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ef70:	00800074 	movhi	r2,1
    ef74:	108dd704 	addi	r2,r2,14172
    ef78:	10800017 	ldw	r2,0(r2)
    ef7c:	100170fa 	wrctl	ienable,r2
    ef80:	e0bffc17 	ldw	r2,-16(fp)
    ef84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef88:	e0bffd17 	ldw	r2,-12(fp)
    ef8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ef90:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    ef94:	0001883a 	nop
}
    ef98:	e037883a 	mov	sp,fp
    ef9c:	df000017 	ldw	fp,0(sp)
    efa0:	dec00104 	addi	sp,sp,4
    efa4:	f800283a 	ret

0000efa8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    efa8:	defff904 	addi	sp,sp,-28
    efac:	df000615 	stw	fp,24(sp)
    efb0:	df000604 	addi	fp,sp,24
    efb4:	e13ffe15 	stw	r4,-8(fp)
    efb8:	e17fff15 	stw	r5,-4(fp)
    efbc:	e0bfff17 	ldw	r2,-4(fp)
    efc0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efc4:	0005303a 	rdctl	r2,status
    efc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efcc:	e0fffb17 	ldw	r3,-20(fp)
    efd0:	00bfff84 	movi	r2,-2
    efd4:	1884703a 	and	r2,r3,r2
    efd8:	1001703a 	wrctl	status,r2
  
  return context;
    efdc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    efe0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    efe4:	e0bffa17 	ldw	r2,-24(fp)
    efe8:	00c00044 	movi	r3,1
    efec:	1884983a 	sll	r2,r3,r2
    eff0:	0084303a 	nor	r2,zero,r2
    eff4:	1007883a 	mov	r3,r2
    eff8:	00800074 	movhi	r2,1
    effc:	108dd704 	addi	r2,r2,14172
    f000:	10800017 	ldw	r2,0(r2)
    f004:	1886703a 	and	r3,r3,r2
    f008:	00800074 	movhi	r2,1
    f00c:	108dd704 	addi	r2,r2,14172
    f010:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f014:	00800074 	movhi	r2,1
    f018:	108dd704 	addi	r2,r2,14172
    f01c:	10800017 	ldw	r2,0(r2)
    f020:	100170fa 	wrctl	ienable,r2
    f024:	e0bffc17 	ldw	r2,-16(fp)
    f028:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f02c:	e0bffd17 	ldw	r2,-12(fp)
    f030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f034:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    f038:	0001883a 	nop
}
    f03c:	e037883a 	mov	sp,fp
    f040:	df000017 	ldw	fp,0(sp)
    f044:	dec00104 	addi	sp,sp,4
    f048:	f800283a 	ret

0000f04c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    f04c:	defffc04 	addi	sp,sp,-16
    f050:	df000315 	stw	fp,12(sp)
    f054:	df000304 	addi	fp,sp,12
    f058:	e13ffe15 	stw	r4,-8(fp)
    f05c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f060:	000530fa 	rdctl	r2,ienable
    f064:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f068:	e0bfff17 	ldw	r2,-4(fp)
    f06c:	00c00044 	movi	r3,1
    f070:	1884983a 	sll	r2,r3,r2
    f074:	1007883a 	mov	r3,r2
    f078:	e0bffd17 	ldw	r2,-12(fp)
    f07c:	1884703a 	and	r2,r3,r2
    f080:	1004c03a 	cmpne	r2,r2,zero
    f084:	10803fcc 	andi	r2,r2,255
}
    f088:	e037883a 	mov	sp,fp
    f08c:	df000017 	ldw	fp,0(sp)
    f090:	dec00104 	addi	sp,sp,4
    f094:	f800283a 	ret

0000f098 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f098:	defff504 	addi	sp,sp,-44
    f09c:	dfc00a15 	stw	ra,40(sp)
    f0a0:	df000915 	stw	fp,36(sp)
    f0a4:	df000904 	addi	fp,sp,36
    f0a8:	e13ffc15 	stw	r4,-16(fp)
    f0ac:	e17ffd15 	stw	r5,-12(fp)
    f0b0:	e1bffe15 	stw	r6,-8(fp)
    f0b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    f0b8:	00bffa84 	movi	r2,-22
    f0bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    f0c0:	e0bffd17 	ldw	r2,-12(fp)
    f0c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f0c8:	e0bff817 	ldw	r2,-32(fp)
    f0cc:	10800808 	cmpgei	r2,r2,32
    f0d0:	1000271e 	bne	r2,zero,f170 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0d4:	0005303a 	rdctl	r2,status
    f0d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0dc:	e0fffa17 	ldw	r3,-24(fp)
    f0e0:	00bfff84 	movi	r2,-2
    f0e4:	1884703a 	and	r2,r3,r2
    f0e8:	1001703a 	wrctl	status,r2
  
  return context;
    f0ec:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    f0f0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    f0f4:	00800074 	movhi	r2,1
    f0f8:	108de404 	addi	r2,r2,14224
    f0fc:	e0fff817 	ldw	r3,-32(fp)
    f100:	180690fa 	slli	r3,r3,3
    f104:	10c5883a 	add	r2,r2,r3
    f108:	e0fffe17 	ldw	r3,-8(fp)
    f10c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    f110:	00800074 	movhi	r2,1
    f114:	108de404 	addi	r2,r2,14224
    f118:	e0fff817 	ldw	r3,-32(fp)
    f11c:	180690fa 	slli	r3,r3,3
    f120:	10c5883a 	add	r2,r2,r3
    f124:	10800104 	addi	r2,r2,4
    f128:	e0ffff17 	ldw	r3,-4(fp)
    f12c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f130:	e0bffe17 	ldw	r2,-8(fp)
    f134:	10000526 	beq	r2,zero,f14c <alt_iic_isr_register+0xb4>
    f138:	e0bff817 	ldw	r2,-32(fp)
    f13c:	e13ffc17 	ldw	r4,-16(fp)
    f140:	100b883a 	mov	r5,r2
    f144:	000ef080 	call	ef08 <alt_ic_irq_enable>
    f148:	00000406 	br	f15c <alt_iic_isr_register+0xc4>
    f14c:	e0bff817 	ldw	r2,-32(fp)
    f150:	e13ffc17 	ldw	r4,-16(fp)
    f154:	100b883a 	mov	r5,r2
    f158:	000efa80 	call	efa8 <alt_ic_irq_disable>
    f15c:	e0bff715 	stw	r2,-36(fp)
    f160:	e0bff917 	ldw	r2,-28(fp)
    f164:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f168:	e0bffb17 	ldw	r2,-20(fp)
    f16c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    f170:	e0bff717 	ldw	r2,-36(fp)
}
    f174:	e037883a 	mov	sp,fp
    f178:	dfc00117 	ldw	ra,4(sp)
    f17c:	df000017 	ldw	fp,0(sp)
    f180:	dec00204 	addi	sp,sp,8
    f184:	f800283a 	ret

0000f188 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f188:	defff904 	addi	sp,sp,-28
    f18c:	dfc00615 	stw	ra,24(sp)
    f190:	df000515 	stw	fp,20(sp)
    f194:	df000504 	addi	fp,sp,20
    f198:	e13ffc15 	stw	r4,-16(fp)
    f19c:	e17ffd15 	stw	r5,-12(fp)
    f1a0:	e1bffe15 	stw	r6,-8(fp)
    f1a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    f1a8:	e13ffd17 	ldw	r4,-12(fp)
    f1ac:	e17ffe17 	ldw	r5,-8(fp)
    f1b0:	e1bfff17 	ldw	r6,-4(fp)
    f1b4:	000f3dc0 	call	f3dc <open>
    f1b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    f1bc:	e0bffb17 	ldw	r2,-20(fp)
    f1c0:	10001c16 	blt	r2,zero,f234 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    f1c4:	00800074 	movhi	r2,1
    f1c8:	10828a04 	addi	r2,r2,2600
    f1cc:	e0fffb17 	ldw	r3,-20(fp)
    f1d0:	18c00324 	muli	r3,r3,12
    f1d4:	10c5883a 	add	r2,r2,r3
    f1d8:	10c00017 	ldw	r3,0(r2)
    f1dc:	e0bffc17 	ldw	r2,-16(fp)
    f1e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f1e4:	00800074 	movhi	r2,1
    f1e8:	10828a04 	addi	r2,r2,2600
    f1ec:	e0fffb17 	ldw	r3,-20(fp)
    f1f0:	18c00324 	muli	r3,r3,12
    f1f4:	10c5883a 	add	r2,r2,r3
    f1f8:	10800104 	addi	r2,r2,4
    f1fc:	10c00017 	ldw	r3,0(r2)
    f200:	e0bffc17 	ldw	r2,-16(fp)
    f204:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f208:	00800074 	movhi	r2,1
    f20c:	10828a04 	addi	r2,r2,2600
    f210:	e0fffb17 	ldw	r3,-20(fp)
    f214:	18c00324 	muli	r3,r3,12
    f218:	10c5883a 	add	r2,r2,r3
    f21c:	10800204 	addi	r2,r2,8
    f220:	10c00017 	ldw	r3,0(r2)
    f224:	e0bffc17 	ldw	r2,-16(fp)
    f228:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f22c:	e13ffb17 	ldw	r4,-20(fp)
    f230:	000dca40 	call	dca4 <alt_release_fd>
  }
} 
    f234:	e037883a 	mov	sp,fp
    f238:	dfc00117 	ldw	ra,4(sp)
    f23c:	df000017 	ldw	fp,0(sp)
    f240:	dec00204 	addi	sp,sp,8
    f244:	f800283a 	ret

0000f248 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f248:	defffb04 	addi	sp,sp,-20
    f24c:	dfc00415 	stw	ra,16(sp)
    f250:	df000315 	stw	fp,12(sp)
    f254:	df000304 	addi	fp,sp,12
    f258:	e13ffd15 	stw	r4,-12(fp)
    f25c:	e17ffe15 	stw	r5,-8(fp)
    f260:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f264:	01000074 	movhi	r4,1
    f268:	21028d04 	addi	r4,r4,2612
    f26c:	e17ffd17 	ldw	r5,-12(fp)
    f270:	01800044 	movi	r6,1
    f274:	01c07fc4 	movi	r7,511
    f278:	000f1880 	call	f188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f27c:	01000074 	movhi	r4,1
    f280:	21028a04 	addi	r4,r4,2600
    f284:	e17ffe17 	ldw	r5,-8(fp)
    f288:	000d883a 	mov	r6,zero
    f28c:	01c07fc4 	movi	r7,511
    f290:	000f1880 	call	f188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f294:	01000074 	movhi	r4,1
    f298:	21029004 	addi	r4,r4,2624
    f29c:	e17fff17 	ldw	r5,-4(fp)
    f2a0:	01800044 	movi	r6,1
    f2a4:	01c07fc4 	movi	r7,511
    f2a8:	000f1880 	call	f188 <alt_open_fd>
}  
    f2ac:	e037883a 	mov	sp,fp
    f2b0:	dfc00117 	ldw	ra,4(sp)
    f2b4:	df000017 	ldw	fp,0(sp)
    f2b8:	dec00204 	addi	sp,sp,8
    f2bc:	f800283a 	ret

0000f2c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2c0:	defffe04 	addi	sp,sp,-8
    f2c4:	dfc00115 	stw	ra,4(sp)
    f2c8:	df000015 	stw	fp,0(sp)
    f2cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2d0:	00800074 	movhi	r2,1
    f2d4:	10870d04 	addi	r2,r2,7220
    f2d8:	10800017 	ldw	r2,0(r2)
    f2dc:	10000526 	beq	r2,zero,f2f4 <alt_get_errno+0x34>
    f2e0:	00800074 	movhi	r2,1
    f2e4:	10870d04 	addi	r2,r2,7220
    f2e8:	10800017 	ldw	r2,0(r2)
    f2ec:	103ee83a 	callr	r2
    f2f0:	00000206 	br	f2fc <alt_get_errno+0x3c>
    f2f4:	00800074 	movhi	r2,1
    f2f8:	108dd004 	addi	r2,r2,14144
}
    f2fc:	e037883a 	mov	sp,fp
    f300:	dfc00117 	ldw	ra,4(sp)
    f304:	df000017 	ldw	fp,0(sp)
    f308:	dec00204 	addi	sp,sp,8
    f30c:	f800283a 	ret

0000f310 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f310:	defffd04 	addi	sp,sp,-12
    f314:	df000215 	stw	fp,8(sp)
    f318:	df000204 	addi	fp,sp,8
    f31c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f320:	e0bfff17 	ldw	r2,-4(fp)
    f324:	10800217 	ldw	r2,8(r2)
    f328:	10d00034 	orhi	r3,r2,16384
    f32c:	e0bfff17 	ldw	r2,-4(fp)
    f330:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f334:	e03ffe15 	stw	zero,-8(fp)
    f338:	00001d06 	br	f3b0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f33c:	00800074 	movhi	r2,1
    f340:	10828a04 	addi	r2,r2,2600
    f344:	e0fffe17 	ldw	r3,-8(fp)
    f348:	18c00324 	muli	r3,r3,12
    f34c:	10c5883a 	add	r2,r2,r3
    f350:	10c00017 	ldw	r3,0(r2)
    f354:	e0bfff17 	ldw	r2,-4(fp)
    f358:	10800017 	ldw	r2,0(r2)
    f35c:	1880111e 	bne	r3,r2,f3a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f360:	00800074 	movhi	r2,1
    f364:	10828a04 	addi	r2,r2,2600
    f368:	e0fffe17 	ldw	r3,-8(fp)
    f36c:	18c00324 	muli	r3,r3,12
    f370:	10c5883a 	add	r2,r2,r3
    f374:	10800204 	addi	r2,r2,8
    f378:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f37c:	1000090e 	bge	r2,zero,f3a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f380:	e0bffe17 	ldw	r2,-8(fp)
    f384:	10c00324 	muli	r3,r2,12
    f388:	00800074 	movhi	r2,1
    f38c:	10828a04 	addi	r2,r2,2600
    f390:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f394:	e0bfff17 	ldw	r2,-4(fp)
    f398:	18800226 	beq	r3,r2,f3a4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f39c:	00bffcc4 	movi	r2,-13
    f3a0:	00000a06 	br	f3cc <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f3a4:	e0bffe17 	ldw	r2,-8(fp)
    f3a8:	10800044 	addi	r2,r2,1
    f3ac:	e0bffe15 	stw	r2,-8(fp)
    f3b0:	00800074 	movhi	r2,1
    f3b4:	10870c04 	addi	r2,r2,7216
    f3b8:	10800017 	ldw	r2,0(r2)
    f3bc:	1007883a 	mov	r3,r2
    f3c0:	e0bffe17 	ldw	r2,-8(fp)
    f3c4:	18bfdd2e 	bgeu	r3,r2,f33c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f3c8:	0005883a 	mov	r2,zero
}
    f3cc:	e037883a 	mov	sp,fp
    f3d0:	df000017 	ldw	fp,0(sp)
    f3d4:	dec00104 	addi	sp,sp,4
    f3d8:	f800283a 	ret

0000f3dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f3dc:	defff604 	addi	sp,sp,-40
    f3e0:	dfc00915 	stw	ra,36(sp)
    f3e4:	df000815 	stw	fp,32(sp)
    f3e8:	df000804 	addi	fp,sp,32
    f3ec:	e13ffd15 	stw	r4,-12(fp)
    f3f0:	e17ffe15 	stw	r5,-8(fp)
    f3f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f3f8:	00bfffc4 	movi	r2,-1
    f3fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f400:	00bffb44 	movi	r2,-19
    f404:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f408:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f40c:	e13ffd17 	ldw	r4,-12(fp)
    f410:	01400074 	movhi	r5,1
    f414:	29470a04 	addi	r5,r5,7208
    f418:	000f6f00 	call	f6f0 <alt_find_dev>
    f41c:	e0bff815 	stw	r2,-32(fp)
    f420:	e0bff817 	ldw	r2,-32(fp)
    f424:	1000051e 	bne	r2,zero,f43c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f428:	e13ffd17 	ldw	r4,-12(fp)
    f42c:	000f7800 	call	f780 <alt_find_file>
    f430:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f434:	00800044 	movi	r2,1
    f438:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f43c:	e0bff817 	ldw	r2,-32(fp)
    f440:	10002926 	beq	r2,zero,f4e8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f444:	e13ff817 	ldw	r4,-32(fp)
    f448:	000f8940 	call	f894 <alt_get_fd>
    f44c:	e0bff915 	stw	r2,-28(fp)
    f450:	e0bff917 	ldw	r2,-28(fp)
    f454:	1000030e 	bge	r2,zero,f464 <open+0x88>
    {
      status = index;
    f458:	e0bff917 	ldw	r2,-28(fp)
    f45c:	e0bffa15 	stw	r2,-24(fp)
    f460:	00002306 	br	f4f0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    f464:	e0bff917 	ldw	r2,-28(fp)
    f468:	10c00324 	muli	r3,r2,12
    f46c:	00800074 	movhi	r2,1
    f470:	10828a04 	addi	r2,r2,2600
    f474:	1885883a 	add	r2,r3,r2
    f478:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f47c:	e0fffe17 	ldw	r3,-8(fp)
    f480:	00900034 	movhi	r2,16384
    f484:	10bfffc4 	addi	r2,r2,-1
    f488:	1886703a 	and	r3,r3,r2
    f48c:	e0bffc17 	ldw	r2,-16(fp)
    f490:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f494:	e0bffb17 	ldw	r2,-20(fp)
    f498:	1000051e 	bne	r2,zero,f4b0 <open+0xd4>
    f49c:	e13ffc17 	ldw	r4,-16(fp)
    f4a0:	000f3100 	call	f310 <alt_file_locked>
    f4a4:	e0bffa15 	stw	r2,-24(fp)
    f4a8:	e0bffa17 	ldw	r2,-24(fp)
    f4ac:	10001016 	blt	r2,zero,f4f0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f4b0:	e0bff817 	ldw	r2,-32(fp)
    f4b4:	10800317 	ldw	r2,12(r2)
    f4b8:	10000826 	beq	r2,zero,f4dc <open+0x100>
    f4bc:	e0bff817 	ldw	r2,-32(fp)
    f4c0:	10800317 	ldw	r2,12(r2)
    f4c4:	e13ffc17 	ldw	r4,-16(fp)
    f4c8:	e17ffd17 	ldw	r5,-12(fp)
    f4cc:	e1bffe17 	ldw	r6,-8(fp)
    f4d0:	e1ffff17 	ldw	r7,-4(fp)
    f4d4:	103ee83a 	callr	r2
    f4d8:	00000106 	br	f4e0 <open+0x104>
    f4dc:	0005883a 	mov	r2,zero
    f4e0:	e0bffa15 	stw	r2,-24(fp)
    f4e4:	00000206 	br	f4f0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f4e8:	00bffb44 	movi	r2,-19
    f4ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f4f0:	e0bffa17 	ldw	r2,-24(fp)
    f4f4:	1000090e 	bge	r2,zero,f51c <open+0x140>
  {
    alt_release_fd (index);  
    f4f8:	e13ff917 	ldw	r4,-28(fp)
    f4fc:	000dca40 	call	dca4 <alt_release_fd>
    ALT_ERRNO = -status;
    f500:	000f2c00 	call	f2c0 <alt_get_errno>
    f504:	1007883a 	mov	r3,r2
    f508:	e0bffa17 	ldw	r2,-24(fp)
    f50c:	0085c83a 	sub	r2,zero,r2
    f510:	18800015 	stw	r2,0(r3)
    return -1;
    f514:	00bfffc4 	movi	r2,-1
    f518:	00000106 	br	f520 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    f51c:	e0bff917 	ldw	r2,-28(fp)
}
    f520:	e037883a 	mov	sp,fp
    f524:	dfc00117 	ldw	ra,4(sp)
    f528:	df000017 	ldw	fp,0(sp)
    f52c:	dec00204 	addi	sp,sp,8
    f530:	f800283a 	ret

0000f534 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f534:	defffa04 	addi	sp,sp,-24
    f538:	df000515 	stw	fp,20(sp)
    f53c:	df000504 	addi	fp,sp,20
    f540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f544:	0005303a 	rdctl	r2,status
    f548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f54c:	e0fffc17 	ldw	r3,-16(fp)
    f550:	00bfff84 	movi	r2,-2
    f554:	1884703a 	and	r2,r3,r2
    f558:	1001703a 	wrctl	status,r2
  
  return context;
    f55c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f560:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f564:	e0bfff17 	ldw	r2,-4(fp)
    f568:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f56c:	e0bffd17 	ldw	r2,-12(fp)
    f570:	10800017 	ldw	r2,0(r2)
    f574:	e0fffd17 	ldw	r3,-12(fp)
    f578:	18c00117 	ldw	r3,4(r3)
    f57c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f580:	e0bffd17 	ldw	r2,-12(fp)
    f584:	10800117 	ldw	r2,4(r2)
    f588:	e0fffd17 	ldw	r3,-12(fp)
    f58c:	18c00017 	ldw	r3,0(r3)
    f590:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f594:	e0bffd17 	ldw	r2,-12(fp)
    f598:	e0fffd17 	ldw	r3,-12(fp)
    f59c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f5a0:	e0bffd17 	ldw	r2,-12(fp)
    f5a4:	e0fffd17 	ldw	r3,-12(fp)
    f5a8:	10c00015 	stw	r3,0(r2)
    f5ac:	e0bffb17 	ldw	r2,-20(fp)
    f5b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5b4:	e0bffe17 	ldw	r2,-8(fp)
    f5b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f5bc:	e037883a 	mov	sp,fp
    f5c0:	df000017 	ldw	fp,0(sp)
    f5c4:	dec00104 	addi	sp,sp,4
    f5c8:	f800283a 	ret

0000f5cc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f5cc:	defffb04 	addi	sp,sp,-20
    f5d0:	dfc00415 	stw	ra,16(sp)
    f5d4:	df000315 	stw	fp,12(sp)
    f5d8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f5dc:	d0a00e17 	ldw	r2,-32712(gp)
    f5e0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f5e4:	d0a6d717 	ldw	r2,-25764(gp)
    f5e8:	10800044 	addi	r2,r2,1
    f5ec:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f5f0:	00002e06 	br	f6ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f5f4:	e0bffd17 	ldw	r2,-12(fp)
    f5f8:	10800017 	ldw	r2,0(r2)
    f5fc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f600:	e0bffd17 	ldw	r2,-12(fp)
    f604:	10800403 	ldbu	r2,16(r2)
    f608:	10803fcc 	andi	r2,r2,255
    f60c:	10000426 	beq	r2,zero,f620 <alt_tick+0x54>
    f610:	d0a6d717 	ldw	r2,-25764(gp)
    f614:	1000021e 	bne	r2,zero,f620 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f618:	e0bffd17 	ldw	r2,-12(fp)
    f61c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f620:	e0bffd17 	ldw	r2,-12(fp)
    f624:	10800217 	ldw	r2,8(r2)
    f628:	d0e6d717 	ldw	r3,-25764(gp)
    f62c:	18801d36 	bltu	r3,r2,f6a4 <alt_tick+0xd8>
    f630:	e0bffd17 	ldw	r2,-12(fp)
    f634:	10800403 	ldbu	r2,16(r2)
    f638:	10803fcc 	andi	r2,r2,255
    f63c:	1000191e 	bne	r2,zero,f6a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f640:	e0bffd17 	ldw	r2,-12(fp)
    f644:	10800317 	ldw	r2,12(r2)
    f648:	e0fffd17 	ldw	r3,-12(fp)
    f64c:	18c00517 	ldw	r3,20(r3)
    f650:	1809883a 	mov	r4,r3
    f654:	103ee83a 	callr	r2
    f658:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f65c:	e0bfff17 	ldw	r2,-4(fp)
    f660:	1000031e 	bne	r2,zero,f670 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f664:	e13ffd17 	ldw	r4,-12(fp)
    f668:	000f5340 	call	f534 <alt_alarm_stop>
    f66c:	00000d06 	br	f6a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f670:	e0bffd17 	ldw	r2,-12(fp)
    f674:	10c00217 	ldw	r3,8(r2)
    f678:	e0bfff17 	ldw	r2,-4(fp)
    f67c:	1887883a 	add	r3,r3,r2
    f680:	e0bffd17 	ldw	r2,-12(fp)
    f684:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f688:	e0bffd17 	ldw	r2,-12(fp)
    f68c:	10c00217 	ldw	r3,8(r2)
    f690:	d0a6d717 	ldw	r2,-25764(gp)
    f694:	1880032e 	bgeu	r3,r2,f6a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f698:	e0bffd17 	ldw	r2,-12(fp)
    f69c:	00c00044 	movi	r3,1
    f6a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f6a4:	e0bffe17 	ldw	r2,-8(fp)
    f6a8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f6ac:	e0fffd17 	ldw	r3,-12(fp)
    f6b0:	d0a00e04 	addi	r2,gp,-32712
    f6b4:	18bfcf1e 	bne	r3,r2,f5f4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f6b8:	0001883a 	nop
}
    f6bc:	e037883a 	mov	sp,fp
    f6c0:	dfc00117 	ldw	ra,4(sp)
    f6c4:	df000017 	ldw	fp,0(sp)
    f6c8:	dec00204 	addi	sp,sp,8
    f6cc:	f800283a 	ret

0000f6d0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    f6d0:	deffff04 	addi	sp,sp,-4
    f6d4:	df000015 	stw	fp,0(sp)
    f6d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f6dc:	000170fa 	wrctl	ienable,zero
}
    f6e0:	e037883a 	mov	sp,fp
    f6e4:	df000017 	ldw	fp,0(sp)
    f6e8:	dec00104 	addi	sp,sp,4
    f6ec:	f800283a 	ret

0000f6f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f6f0:	defffa04 	addi	sp,sp,-24
    f6f4:	dfc00515 	stw	ra,20(sp)
    f6f8:	df000415 	stw	fp,16(sp)
    f6fc:	df000404 	addi	fp,sp,16
    f700:	e13ffe15 	stw	r4,-8(fp)
    f704:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f708:	e0bfff17 	ldw	r2,-4(fp)
    f70c:	10800017 	ldw	r2,0(r2)
    f710:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f714:	e13ffe17 	ldw	r4,-8(fp)
    f718:	0001e3c0 	call	1e3c <strlen>
    f71c:	10800044 	addi	r2,r2,1
    f720:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f724:	00000d06 	br	f75c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f728:	e0bffc17 	ldw	r2,-16(fp)
    f72c:	10c00217 	ldw	r3,8(r2)
    f730:	e0bffd17 	ldw	r2,-12(fp)
    f734:	1809883a 	mov	r4,r3
    f738:	e17ffe17 	ldw	r5,-8(fp)
    f73c:	100d883a 	mov	r6,r2
    f740:	000fa200 	call	fa20 <memcmp>
    f744:	1000021e 	bne	r2,zero,f750 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f748:	e0bffc17 	ldw	r2,-16(fp)
    f74c:	00000706 	br	f76c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f750:	e0bffc17 	ldw	r2,-16(fp)
    f754:	10800017 	ldw	r2,0(r2)
    f758:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f75c:	e0fffc17 	ldw	r3,-16(fp)
    f760:	e0bfff17 	ldw	r2,-4(fp)
    f764:	18bff01e 	bne	r3,r2,f728 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f768:	0005883a 	mov	r2,zero
}
    f76c:	e037883a 	mov	sp,fp
    f770:	dfc00117 	ldw	ra,4(sp)
    f774:	df000017 	ldw	fp,0(sp)
    f778:	dec00204 	addi	sp,sp,8
    f77c:	f800283a 	ret

0000f780 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f780:	defffb04 	addi	sp,sp,-20
    f784:	dfc00415 	stw	ra,16(sp)
    f788:	df000315 	stw	fp,12(sp)
    f78c:	df000304 	addi	fp,sp,12
    f790:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f794:	00800074 	movhi	r2,1
    f798:	10870804 	addi	r2,r2,7200
    f79c:	10800017 	ldw	r2,0(r2)
    f7a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f7a4:	00003106 	br	f86c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    f7a8:	e0bffd17 	ldw	r2,-12(fp)
    f7ac:	10800217 	ldw	r2,8(r2)
    f7b0:	1009883a 	mov	r4,r2
    f7b4:	0001e3c0 	call	1e3c <strlen>
    f7b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f7bc:	e0bffd17 	ldw	r2,-12(fp)
    f7c0:	10c00217 	ldw	r3,8(r2)
    f7c4:	e0bffe17 	ldw	r2,-8(fp)
    f7c8:	10bfffc4 	addi	r2,r2,-1
    f7cc:	1885883a 	add	r2,r3,r2
    f7d0:	10800003 	ldbu	r2,0(r2)
    f7d4:	10803fcc 	andi	r2,r2,255
    f7d8:	1080201c 	xori	r2,r2,128
    f7dc:	10bfe004 	addi	r2,r2,-128
    f7e0:	10800bd8 	cmpnei	r2,r2,47
    f7e4:	1000031e 	bne	r2,zero,f7f4 <alt_find_file+0x74>
    {
      len -= 1;
    f7e8:	e0bffe17 	ldw	r2,-8(fp)
    f7ec:	10bfffc4 	addi	r2,r2,-1
    f7f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f7f4:	e0bffe17 	ldw	r2,-8(fp)
    f7f8:	e0ffff17 	ldw	r3,-4(fp)
    f7fc:	1885883a 	add	r2,r3,r2
    f800:	10800003 	ldbu	r2,0(r2)
    f804:	10803fcc 	andi	r2,r2,255
    f808:	1080201c 	xori	r2,r2,128
    f80c:	10bfe004 	addi	r2,r2,-128
    f810:	10800be0 	cmpeqi	r2,r2,47
    f814:	1000081e 	bne	r2,zero,f838 <alt_find_file+0xb8>
    f818:	e0bffe17 	ldw	r2,-8(fp)
    f81c:	e0ffff17 	ldw	r3,-4(fp)
    f820:	1885883a 	add	r2,r3,r2
    f824:	10800003 	ldbu	r2,0(r2)
    f828:	10803fcc 	andi	r2,r2,255
    f82c:	1080201c 	xori	r2,r2,128
    f830:	10bfe004 	addi	r2,r2,-128
    f834:	10000a1e 	bne	r2,zero,f860 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    f838:	e0bffd17 	ldw	r2,-12(fp)
    f83c:	10c00217 	ldw	r3,8(r2)
    f840:	e0bffe17 	ldw	r2,-8(fp)
    f844:	1809883a 	mov	r4,r3
    f848:	e17fff17 	ldw	r5,-4(fp)
    f84c:	100d883a 	mov	r6,r2
    f850:	000fa200 	call	fa20 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f854:	1000021e 	bne	r2,zero,f860 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f858:	e0bffd17 	ldw	r2,-12(fp)
    f85c:	00000806 	br	f880 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    f860:	e0bffd17 	ldw	r2,-12(fp)
    f864:	10800017 	ldw	r2,0(r2)
    f868:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f86c:	e0fffd17 	ldw	r3,-12(fp)
    f870:	00800074 	movhi	r2,1
    f874:	10870804 	addi	r2,r2,7200
    f878:	18bfcb1e 	bne	r3,r2,f7a8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f87c:	0005883a 	mov	r2,zero
}
    f880:	e037883a 	mov	sp,fp
    f884:	dfc00117 	ldw	ra,4(sp)
    f888:	df000017 	ldw	fp,0(sp)
    f88c:	dec00204 	addi	sp,sp,8
    f890:	f800283a 	ret

0000f894 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f894:	defffc04 	addi	sp,sp,-16
    f898:	df000315 	stw	fp,12(sp)
    f89c:	df000304 	addi	fp,sp,12
    f8a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f8a4:	00bffa04 	movi	r2,-24
    f8a8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f8ac:	e03ffd15 	stw	zero,-12(fp)
    f8b0:	00001d06 	br	f928 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    f8b4:	00800074 	movhi	r2,1
    f8b8:	10828a04 	addi	r2,r2,2600
    f8bc:	e0fffd17 	ldw	r3,-12(fp)
    f8c0:	18c00324 	muli	r3,r3,12
    f8c4:	10c5883a 	add	r2,r2,r3
    f8c8:	10800017 	ldw	r2,0(r2)
    f8cc:	1000131e 	bne	r2,zero,f91c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    f8d0:	00800074 	movhi	r2,1
    f8d4:	10828a04 	addi	r2,r2,2600
    f8d8:	e0fffd17 	ldw	r3,-12(fp)
    f8dc:	18c00324 	muli	r3,r3,12
    f8e0:	10c5883a 	add	r2,r2,r3
    f8e4:	e0ffff17 	ldw	r3,-4(fp)
    f8e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f8ec:	00800074 	movhi	r2,1
    f8f0:	10870c04 	addi	r2,r2,7216
    f8f4:	10c00017 	ldw	r3,0(r2)
    f8f8:	e0bffd17 	ldw	r2,-12(fp)
    f8fc:	1880040e 	bge	r3,r2,f910 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    f900:	00800074 	movhi	r2,1
    f904:	10870c04 	addi	r2,r2,7216
    f908:	e0fffd17 	ldw	r3,-12(fp)
    f90c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    f910:	e0bffd17 	ldw	r2,-12(fp)
    f914:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f918:	00000606 	br	f934 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f91c:	e0bffd17 	ldw	r2,-12(fp)
    f920:	10800044 	addi	r2,r2,1
    f924:	e0bffd15 	stw	r2,-12(fp)
    f928:	e0bffd17 	ldw	r2,-12(fp)
    f92c:	10800810 	cmplti	r2,r2,32
    f930:	103fe01e 	bne	r2,zero,f8b4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f934:	e0bffe17 	ldw	r2,-8(fp)
}
    f938:	e037883a 	mov	sp,fp
    f93c:	df000017 	ldw	fp,0(sp)
    f940:	dec00104 	addi	sp,sp,4
    f944:	f800283a 	ret

0000f948 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f948:	defffb04 	addi	sp,sp,-20
    f94c:	df000415 	stw	fp,16(sp)
    f950:	df000404 	addi	fp,sp,16
    f954:	e13ffe15 	stw	r4,-8(fp)
    f958:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f95c:	e0bfff17 	ldw	r2,-4(fp)
    f960:	10840070 	cmpltui	r2,r2,4097
    f964:	1000021e 	bne	r2,zero,f970 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f968:	00840004 	movi	r2,4096
    f96c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f970:	e0fffe17 	ldw	r3,-8(fp)
    f974:	e0bfff17 	ldw	r2,-4(fp)
    f978:	1885883a 	add	r2,r3,r2
    f97c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f980:	e0bffe17 	ldw	r2,-8(fp)
    f984:	e0bffc15 	stw	r2,-16(fp)
    f988:	00000506 	br	f9a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f98c:	e0bffc17 	ldw	r2,-16(fp)
    f990:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f994:	e0bffc17 	ldw	r2,-16(fp)
    f998:	10800804 	addi	r2,r2,32
    f99c:	e0bffc15 	stw	r2,-16(fp)
    f9a0:	e0fffc17 	ldw	r3,-16(fp)
    f9a4:	e0bffd17 	ldw	r2,-12(fp)
    f9a8:	18bff836 	bltu	r3,r2,f98c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f9ac:	e0bffe17 	ldw	r2,-8(fp)
    f9b0:	108007cc 	andi	r2,r2,31
    f9b4:	10000226 	beq	r2,zero,f9c0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f9b8:	e0bffc17 	ldw	r2,-16(fp)
    f9bc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f9c0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f9c4:	e037883a 	mov	sp,fp
    f9c8:	df000017 	ldw	fp,0(sp)
    f9cc:	dec00104 	addi	sp,sp,4
    f9d0:	f800283a 	ret

0000f9d4 <atexit>:
    f9d4:	200b883a 	mov	r5,r4
    f9d8:	000d883a 	mov	r6,zero
    f9dc:	0009883a 	mov	r4,zero
    f9e0:	000f883a 	mov	r7,zero
    f9e4:	000fa9c1 	jmpi	fa9c <__register_exitproc>

0000f9e8 <exit>:
    f9e8:	defffe04 	addi	sp,sp,-8
    f9ec:	000b883a 	mov	r5,zero
    f9f0:	dc000015 	stw	r16,0(sp)
    f9f4:	dfc00115 	stw	ra,4(sp)
    f9f8:	2021883a 	mov	r16,r4
    f9fc:	000fbb00 	call	fbb0 <__call_exitprocs>
    fa00:	00800074 	movhi	r2,1
    fa04:	10870204 	addi	r2,r2,7176
    fa08:	11000017 	ldw	r4,0(r2)
    fa0c:	20800f17 	ldw	r2,60(r4)
    fa10:	10000126 	beq	r2,zero,fa18 <exit+0x30>
    fa14:	103ee83a 	callr	r2
    fa18:	8009883a 	mov	r4,r16
    fa1c:	000fd440 	call	fd44 <_exit>

0000fa20 <memcmp>:
    fa20:	01c000c4 	movi	r7,3
    fa24:	3980192e 	bgeu	r7,r6,fa8c <memcmp+0x6c>
    fa28:	2144b03a 	or	r2,r4,r5
    fa2c:	11c4703a 	and	r2,r2,r7
    fa30:	10000f26 	beq	r2,zero,fa70 <memcmp+0x50>
    fa34:	20800003 	ldbu	r2,0(r4)
    fa38:	28c00003 	ldbu	r3,0(r5)
    fa3c:	10c0151e 	bne	r2,r3,fa94 <memcmp+0x74>
    fa40:	31bfff84 	addi	r6,r6,-2
    fa44:	01ffffc4 	movi	r7,-1
    fa48:	00000406 	br	fa5c <memcmp+0x3c>
    fa4c:	20800003 	ldbu	r2,0(r4)
    fa50:	28c00003 	ldbu	r3,0(r5)
    fa54:	31bfffc4 	addi	r6,r6,-1
    fa58:	10c00e1e 	bne	r2,r3,fa94 <memcmp+0x74>
    fa5c:	21000044 	addi	r4,r4,1
    fa60:	29400044 	addi	r5,r5,1
    fa64:	31fff91e 	bne	r6,r7,fa4c <memcmp+0x2c>
    fa68:	0005883a 	mov	r2,zero
    fa6c:	f800283a 	ret
    fa70:	20c00017 	ldw	r3,0(r4)
    fa74:	28800017 	ldw	r2,0(r5)
    fa78:	1880041e 	bne	r3,r2,fa8c <memcmp+0x6c>
    fa7c:	31bfff04 	addi	r6,r6,-4
    fa80:	21000104 	addi	r4,r4,4
    fa84:	29400104 	addi	r5,r5,4
    fa88:	39bff936 	bltu	r7,r6,fa70 <memcmp+0x50>
    fa8c:	303fe91e 	bne	r6,zero,fa34 <memcmp+0x14>
    fa90:	003ff506 	br	fa68 <memcmp+0x48>
    fa94:	10c5c83a 	sub	r2,r2,r3
    fa98:	f800283a 	ret

0000fa9c <__register_exitproc>:
    fa9c:	00800074 	movhi	r2,1
    faa0:	defffa04 	addi	sp,sp,-24
    faa4:	10870204 	addi	r2,r2,7176
    faa8:	dc000315 	stw	r16,12(sp)
    faac:	14000017 	ldw	r16,0(r2)
    fab0:	dc400415 	stw	r17,16(sp)
    fab4:	dfc00515 	stw	ra,20(sp)
    fab8:	80805217 	ldw	r2,328(r16)
    fabc:	2023883a 	mov	r17,r4
    fac0:	10003626 	beq	r2,zero,fb9c <__register_exitproc+0x100>
    fac4:	10c00117 	ldw	r3,4(r2)
    fac8:	010007c4 	movi	r4,31
    facc:	20c00e16 	blt	r4,r3,fb08 <__register_exitproc+0x6c>
    fad0:	1a400044 	addi	r9,r3,1
    fad4:	8800211e 	bne	r17,zero,fb5c <__register_exitproc+0xc0>
    fad8:	18c00084 	addi	r3,r3,2
    fadc:	18c7883a 	add	r3,r3,r3
    fae0:	18c7883a 	add	r3,r3,r3
    fae4:	12400115 	stw	r9,4(r2)
    fae8:	10c7883a 	add	r3,r2,r3
    faec:	19400015 	stw	r5,0(r3)
    faf0:	0005883a 	mov	r2,zero
    faf4:	dfc00517 	ldw	ra,20(sp)
    faf8:	dc400417 	ldw	r17,16(sp)
    fafc:	dc000317 	ldw	r16,12(sp)
    fb00:	dec00604 	addi	sp,sp,24
    fb04:	f800283a 	ret
    fb08:	00800034 	movhi	r2,0
    fb0c:	10800004 	addi	r2,r2,0
    fb10:	10002526 	beq	r2,zero,fba8 <__register_exitproc+0x10c>
    fb14:	01006404 	movi	r4,400
    fb18:	d9400015 	stw	r5,0(sp)
    fb1c:	d9800115 	stw	r6,4(sp)
    fb20:	d9c00215 	stw	r7,8(sp)
    fb24:	00000000 	call	0 <__alt_mem_sdram>
    fb28:	d9400017 	ldw	r5,0(sp)
    fb2c:	d9800117 	ldw	r6,4(sp)
    fb30:	d9c00217 	ldw	r7,8(sp)
    fb34:	10001c26 	beq	r2,zero,fba8 <__register_exitproc+0x10c>
    fb38:	80c05217 	ldw	r3,328(r16)
    fb3c:	10000115 	stw	zero,4(r2)
    fb40:	02400044 	movi	r9,1
    fb44:	10c00015 	stw	r3,0(r2)
    fb48:	80805215 	stw	r2,328(r16)
    fb4c:	10006215 	stw	zero,392(r2)
    fb50:	10006315 	stw	zero,396(r2)
    fb54:	0007883a 	mov	r3,zero
    fb58:	883fdf26 	beq	r17,zero,fad8 <__register_exitproc+0x3c>
    fb5c:	18d1883a 	add	r8,r3,r3
    fb60:	4211883a 	add	r8,r8,r8
    fb64:	1211883a 	add	r8,r2,r8
    fb68:	41802215 	stw	r6,136(r8)
    fb6c:	01000044 	movi	r4,1
    fb70:	11806217 	ldw	r6,392(r2)
    fb74:	20c8983a 	sll	r4,r4,r3
    fb78:	310cb03a 	or	r6,r6,r4
    fb7c:	11806215 	stw	r6,392(r2)
    fb80:	41c04215 	stw	r7,264(r8)
    fb84:	01800084 	movi	r6,2
    fb88:	89bfd31e 	bne	r17,r6,fad8 <__register_exitproc+0x3c>
    fb8c:	11806317 	ldw	r6,396(r2)
    fb90:	3108b03a 	or	r4,r6,r4
    fb94:	11006315 	stw	r4,396(r2)
    fb98:	003fcf06 	br	fad8 <__register_exitproc+0x3c>
    fb9c:	80805304 	addi	r2,r16,332
    fba0:	80805215 	stw	r2,328(r16)
    fba4:	003fc706 	br	fac4 <__register_exitproc+0x28>
    fba8:	00bfffc4 	movi	r2,-1
    fbac:	003fd106 	br	faf4 <__register_exitproc+0x58>

0000fbb0 <__call_exitprocs>:
    fbb0:	00800074 	movhi	r2,1
    fbb4:	10870204 	addi	r2,r2,7176
    fbb8:	10800017 	ldw	r2,0(r2)
    fbbc:	defff404 	addi	sp,sp,-48
    fbc0:	dd800815 	stw	r22,32(sp)
    fbc4:	d8800015 	stw	r2,0(sp)
    fbc8:	10805204 	addi	r2,r2,328
    fbcc:	dd000615 	stw	r20,24(sp)
    fbd0:	dc800415 	stw	r18,16(sp)
    fbd4:	dfc00b15 	stw	ra,44(sp)
    fbd8:	df000a15 	stw	fp,40(sp)
    fbdc:	ddc00915 	stw	r23,36(sp)
    fbe0:	dd400715 	stw	r21,28(sp)
    fbe4:	dcc00515 	stw	r19,20(sp)
    fbe8:	dc400315 	stw	r17,12(sp)
    fbec:	dc000215 	stw	r16,8(sp)
    fbf0:	2025883a 	mov	r18,r4
    fbf4:	2829883a 	mov	r20,r5
    fbf8:	d8800115 	stw	r2,4(sp)
    fbfc:	05bfffc4 	movi	r22,-1
    fc00:	d8800017 	ldw	r2,0(sp)
    fc04:	14c05217 	ldw	r19,328(r2)
    fc08:	98001d26 	beq	r19,zero,fc80 <__call_exitprocs+0xd0>
    fc0c:	dd400117 	ldw	r21,4(sp)
    fc10:	98800117 	ldw	r2,4(r19)
    fc14:	173fffc4 	addi	fp,r2,-1
    fc18:	e0000d16 	blt	fp,zero,fc50 <__call_exitprocs+0xa0>
    fc1c:	14000044 	addi	r16,r2,1
    fc20:	8421883a 	add	r16,r16,r16
    fc24:	8421883a 	add	r16,r16,r16
    fc28:	84402004 	addi	r17,r16,128
    fc2c:	9c63883a 	add	r17,r19,r17
    fc30:	9c21883a 	add	r16,r19,r16
    fc34:	a0001e26 	beq	r20,zero,fcb0 <__call_exitprocs+0x100>
    fc38:	80804017 	ldw	r2,256(r16)
    fc3c:	15001c26 	beq	r2,r20,fcb0 <__call_exitprocs+0x100>
    fc40:	e73fffc4 	addi	fp,fp,-1
    fc44:	843fff04 	addi	r16,r16,-4
    fc48:	8c7fff04 	addi	r17,r17,-4
    fc4c:	e5bff91e 	bne	fp,r22,fc34 <__call_exitprocs+0x84>
    fc50:	00800034 	movhi	r2,0
    fc54:	10800004 	addi	r2,r2,0
    fc58:	10000926 	beq	r2,zero,fc80 <__call_exitprocs+0xd0>
    fc5c:	98800117 	ldw	r2,4(r19)
    fc60:	1000311e 	bne	r2,zero,fd28 <__call_exitprocs+0x178>
    fc64:	98800017 	ldw	r2,0(r19)
    fc68:	10003426 	beq	r2,zero,fd3c <__call_exitprocs+0x18c>
    fc6c:	9809883a 	mov	r4,r19
    fc70:	a8800015 	stw	r2,0(r21)
    fc74:	00000000 	call	0 <__alt_mem_sdram>
    fc78:	acc00017 	ldw	r19,0(r21)
    fc7c:	983fe41e 	bne	r19,zero,fc10 <__call_exitprocs+0x60>
    fc80:	dfc00b17 	ldw	ra,44(sp)
    fc84:	df000a17 	ldw	fp,40(sp)
    fc88:	ddc00917 	ldw	r23,36(sp)
    fc8c:	dd800817 	ldw	r22,32(sp)
    fc90:	dd400717 	ldw	r21,28(sp)
    fc94:	dd000617 	ldw	r20,24(sp)
    fc98:	dcc00517 	ldw	r19,20(sp)
    fc9c:	dc800417 	ldw	r18,16(sp)
    fca0:	dc400317 	ldw	r17,12(sp)
    fca4:	dc000217 	ldw	r16,8(sp)
    fca8:	dec00c04 	addi	sp,sp,48
    fcac:	f800283a 	ret
    fcb0:	98800117 	ldw	r2,4(r19)
    fcb4:	80c00017 	ldw	r3,0(r16)
    fcb8:	10bfffc4 	addi	r2,r2,-1
    fcbc:	17001526 	beq	r2,fp,fd14 <__call_exitprocs+0x164>
    fcc0:	80000015 	stw	zero,0(r16)
    fcc4:	183fde26 	beq	r3,zero,fc40 <__call_exitprocs+0x90>
    fcc8:	00800044 	movi	r2,1
    fccc:	1708983a 	sll	r4,r2,fp
    fcd0:	98806217 	ldw	r2,392(r19)
    fcd4:	9dc00117 	ldw	r23,4(r19)
    fcd8:	2084703a 	and	r2,r4,r2
    fcdc:	1000061e 	bne	r2,zero,fcf8 <__call_exitprocs+0x148>
    fce0:	183ee83a 	callr	r3
    fce4:	98800117 	ldw	r2,4(r19)
    fce8:	15ffc51e 	bne	r2,r23,fc00 <__call_exitprocs+0x50>
    fcec:	a8800017 	ldw	r2,0(r21)
    fcf0:	14ffd326 	beq	r2,r19,fc40 <__call_exitprocs+0x90>
    fcf4:	003fc206 	br	fc00 <__call_exitprocs+0x50>
    fcf8:	98806317 	ldw	r2,396(r19)
    fcfc:	2084703a 	and	r2,r4,r2
    fd00:	1000061e 	bne	r2,zero,fd1c <__call_exitprocs+0x16c>
    fd04:	89400017 	ldw	r5,0(r17)
    fd08:	9009883a 	mov	r4,r18
    fd0c:	183ee83a 	callr	r3
    fd10:	003ff406 	br	fce4 <__call_exitprocs+0x134>
    fd14:	9f000115 	stw	fp,4(r19)
    fd18:	003fea06 	br	fcc4 <__call_exitprocs+0x114>
    fd1c:	89000017 	ldw	r4,0(r17)
    fd20:	183ee83a 	callr	r3
    fd24:	003fef06 	br	fce4 <__call_exitprocs+0x134>
    fd28:	98800017 	ldw	r2,0(r19)
    fd2c:	982b883a 	mov	r21,r19
    fd30:	1027883a 	mov	r19,r2
    fd34:	983fb61e 	bne	r19,zero,fc10 <__call_exitprocs+0x60>
    fd38:	003fd106 	br	fc80 <__call_exitprocs+0xd0>
    fd3c:	0005883a 	mov	r2,zero
    fd40:	003ffa06 	br	fd2c <__call_exitprocs+0x17c>

0000fd44 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    fd44:	defffd04 	addi	sp,sp,-12
    fd48:	df000215 	stw	fp,8(sp)
    fd4c:	df000204 	addi	fp,sp,8
    fd50:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fd54:	0001883a 	nop
    fd58:	e0bfff17 	ldw	r2,-4(fp)
    fd5c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    fd60:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fd64:	10000226 	beq	r2,zero,fd70 <_exit+0x2c>
    ALT_SIM_FAIL();
    fd68:	002af070 	cmpltui	zero,zero,43969
    fd6c:	00000106 	br	fd74 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fd70:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fd74:	003fff06 	br	fd74 <_exit+0x30>
