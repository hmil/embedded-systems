
camera_lcd.elf:     file format elf32-littlenios2
camera_lcd.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00006c3c memsz 0x00006c3c flags r-x
    LOAD off    0x00007c5c vaddr 0x00006c5c paddr 0x000086c8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x0000a134 vaddr 0x0000a134 paddr 0x0000a134 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006a1c  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000084  00006bd8  00006bd8  00007bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00006c5c  000086c8  00007c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0000a134  0000a134  0000a134  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0000a284  0000a284  000096c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000096c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009f0  00000000  00000000  000096f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017ad3  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000650f  00000000  00000000  00021bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006f80  00000000  00000000  000280c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001944  00000000  00000000  0002f044  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024ab  00000000  00000000  00030988  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004733  00000000  00000000  00032e33  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00037568  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  000375b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003a156  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003a159  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a15e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a15f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003a160  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003a169  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003a172  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0003a17b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  0003a181  2**0
                  CONTENTS, READONLY
 26 .jdi          000039ab  00000000  00000000  0003a1a1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004554d  00000000  00000000  0003db4c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
00006bd8 l    d  .rodata	00000000 .rodata
00006c5c l    d  .rwdata	00000000 .rwdata
0000a134 l    d  .bss	00000000 .bss
0000a284 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /data/workspace/ES/lab03/software/camera_lcd_bsp//obj/HAL/src/crt0.o
000001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 i2c.c
00000f44 l     F .text	00000030 i2c_usleep
00000f74 l     F .text	00000040 i2c_wait_end_of_transfer
00000fb4 l     F .text	0000006c i2c_set_data_control
00001020 l     F .text	00000064 i2c_get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000173c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00007064 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003768 l     F .text	00000008 __fp_lock
00003770 l     F .text	00000008 __fp_unlock
00003784 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
000043b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000044d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00004504 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00004604 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000046f8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000047dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000049b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000086b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00004c44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004d8c l     F .text	00000038 alt_dev_reg
00007630 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00005064 l     F .text	00000204 altera_avalon_jtag_uart_irq
00005268 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005b3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005fe8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00006120 l     F .text	00000050 alt_get_errno
00006170 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000042ac g     F .text	00000054 _isatty_r
00004900 g     F .text	00000078 alt_main
00002038 g     F .text	000000b8 _puts_r
0000a184 g     O .bss	00000100 alt_irq
00004300 g     F .text	0000005c _lseek_r
000086c8 g       *ABS*	00000000 __flash_rwdata_start
0000a284 g       *ABS*	00000000 __alt_heap_start
0000402c g     F .text	0000005c __sseek
00003ab8 g     F .text	00000010 __sinit
00003924 g     F .text	00000064 __sfmoreglue
00004998 g     F .text	00000020 __malloc_unlock
00003284 g     F .text	0000015c memmove
00003aa0 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
0000118c g     F .text	0000012c i2c_write
000005c0 g     F .text	00000034 camera_controller_read_done
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00004254 g     F .text	00000058 _fstat_r
0000a140 g     O .bss	00000004 errno
00003fa8 g     F .text	00000008 __seofread
0000a148 g     O .bss	00000004 alt_argv
00010690 g       *ABS*	00000000 _gp
00004c14 g     F .text	00000030 usleep
000074b0 g     O .rwdata	00000180 alt_fd_list
00006550 g     F .text	00000090 alt_find_dev
0000314c g     F .text	00000138 memcpy
00003778 g     F .text	0000000c _cleanup_r
00001400 g     F .text	00000194 i2c_write_array
000060a8 g     F .text	00000078 alt_io_redirect
00006bd8 g       *ABS*	00000000 __DTOR_END__
000020f0 g     F .text	00000014 puts
00005464 g     F .text	0000020c altera_avalon_jtag_uart_read
00001868 g     F .text	00000014 malloc
00001858 g     F .text	00000008 .hidden __udivsi3
00004654 g     F .text	000000a4 isatty
000067a8 g     F .text	0000008c alt_icache_flush
0000a13c g     O .bss	00000004 __malloc_top_pad
00002bc0 g     F .text	000004a4 __sfvwrite_r
000026c0 g     F .text	00000054 _sbrk_r
0000435c g     F .text	0000005c _read_r
000086b0 g     O .rwdata	00000004 alt_max_fd
00004140 g     F .text	00000100 _fclose_r
00003738 g     F .text	00000030 fflush
0000a138 g     O .bss	00000004 __malloc_max_sbrked_mem
0000482c g     F .text	000000d4 lseek
00008698 g     O .rwdata	00000004 _global_impure_ptr
00002120 g     F .text	000005a0 _realloc_r
0000a284 g       *ABS*	00000000 __bss_end
00005ef8 g     F .text	000000f0 alt_iic_isr_register
0000642c g     F .text	00000104 alt_tick
00003ad8 g     F .text	00000018 __fp_lock_all
00005eac g     F .text	0000004c alt_ic_irq_enabled
00006394 g     F .text	00000098 alt_alarm_stop
0000a150 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
00007488 g     O .rwdata	00000028 alt_dev_null
00005b20 g     F .text	0000001c alt_dcache_flush_all
000086c8 g       *ABS*	00000000 __ram_rwdata_end
000086a8 g     O .rwdata	00000008 alt_dev_list
00004c94 g     F .text	000000f8 write
00006c5c g       *ABS*	00000000 __ram_rodata_end
00004554 g     F .text	000000b0 fstat
00001084 g     F .text	0000002c i2c_inst
00001860 g     F .text	00000008 .hidden __umodsi3
0000a284 g       *ABS*	00000000 end
00004fa0 g     F .text	000000c4 altera_avalon_jtag_uart_init
00006bd8 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00005670 g     F .text	00000218 altera_avalon_jtag_uart_write
00003ac8 g     F .text	00000004 __sfp_lock_acquire
00003064 g     F .text	000000e8 memchr
00000394 g     F .text	00000040 camera_controller_destroy
000028d0 g     F .text	000002f0 _free_r
00006a10 g     F .text	00000194 __call_exitprocs
00008690 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000003c _start
0000a154 g     O .bss	00000004 _alt_tick_rate
0000a158 g     O .bss	00000004 _alt_nticks
00004a08 g     F .text	000000fc read
00004df8 g     F .text	00000044 alt_sys_init
00001110 g     F .text	0000007c i2c_configure
000068fc g     F .text	00000114 __register_exitproc
00000624 g     F .text	00000030 camera_controller_read_ctrl_1
00005310 g     F .text	00000068 altera_avalon_jtag_uart_close
00006c5c g       *ABS*	00000000 __ram_rwdata_start
00006bd8 g       *ABS*	00000000 __ram_rodata_start
0000a15c g     O .bss	00000028 __malloc_current_mallinfo
00002104 g     F .text	0000001c realloc
00004e3c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000066f4 g     F .text	000000b4 alt_get_fd
000059c8 g     F .text	00000158 alt_busy_sleep
000040ec g     F .text	00000054 _close_r
00006880 g     F .text	0000007c memcmp
00004efc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000a284 g       *ABS*	00000000 __alt_stack_base
00004f4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000033e0 g     F .text	00000130 __swsetup_r
00003988 g     F .text	00000118 __sfp
00006c5c g     O .rwdata	00000408 __malloc_av_
00003ad4 g     F .text	00000004 __sinit_lock_release
00003f54 g     F .text	00000054 __sread
000065e0 g     F .text	00000114 alt_find_file
00005b8c g     F .text	000000a4 alt_dev_llist_insert
000001f8 g     F .text	00000084 trdb_d5m_write
00004978 g     F .text	00000020 __malloc_lock
00004b64 g     F .text	000000b0 sbrk
00003510 g     F .text	00000228 _fflush_r
0000a134 g       *ABS*	00000000 __bss_start
000006a0 g     F .text	00000764 LCD_Init
00003e30 g     F .text	00000124 memset
00000e04 g     F .text	00000140 main
0000a14c g     O .bss	00000004 alt_envp
0000a134 g     O .bss	00000004 __malloc_max_total_mem
00004e9c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000012b8 g     F .text	00000148 i2c_read
00004088 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00004240 g     F .text	00000014 fclose
00001890 g     F .text	000007a8 _malloc_r
000086b4 g     O .rwdata	00000004 alt_errno
00003b08 g     F .text	000000b8 _fwalk
000017a8 g     F .text	00000054 .hidden __divsi3
00000654 g     F .text	0000004c Delay_Ms
000027ac g     F .text	00000124 _malloc_trim_r
00006bd8 g       *ABS*	00000000 __CTOR_END__
00006bd8 g       *ABS*	00000000 __flash_rodata_start
00006bd8 g       *ABS*	00000000 __DTOR_LIST__
00004dc4 g     F .text	00000034 alt_irq_init
00004b04 g     F .text	00000060 alt_release_fd
00006834 g     F .text	00000014 atexit
00004090 g     F .text	0000005c _write_r
0000869c g     O .rwdata	00000004 _impure_ptr
0000a144 g     O .bss	00000004 alt_argc
00005c8c g     F .text	0000005c _do_dtors
000005f4 g     F .text	00000030 camera_controller_read_current_frame
000010b0 g     F .text	00000060 i2c_init
00000020 g       .exceptions	00000000 alt_irq_entry
00003af0 g     F .text	00000018 __fp_unlock_all
000086a0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005d18 g     F .text	00000050 alt_ic_isr_register
00000318 g     F .text	0000007c camera_controller_create
000086c8 g       *ABS*	00000000 _edata
0000a284 g       *ABS*	00000000 _end
0000058c g     F .text	00000034 camera_controller_stop
000001bc g       *ABS*	00000000 __ram_exceptions_end
00005378 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00000558 g     F .text	00000034 camera_controller_start
0000027c g     F .text	0000009c trdb_d5m_read
00005e08 g     F .text	000000a4 alt_ic_irq_disable
00003fb0 g     F .text	0000007c __swrite
00008694 g     O .rwdata	00000004 __malloc_trim_threshold
00006530 g     F .text	00000020 altera_nios2_qsys_irq_init
00006848 g     F .text	00000038 exit
00003bc0 g     F .text	000000b8 _fwalk_reent
000017fc g     F .text	0000005c .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003acc g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000003d4 g     F .text	00000184 camera_controller_configure
00006ba4 g     F .text	00000034 _exit
00005888 g     F .text	00000140 alt_alarm_start
00003c78 g     F .text	000001b8 __smakebuf_r
00001594 g     F .text	000001a8 i2c_read_array
00002714 g     F .text	00000098 strlen
0000623c g     F .text	00000158 open
00005ce8 g     F .text	00000030 alt_icache_flush_all
000086bc g     O .rwdata	00000004 alt_priority_mask
00005d68 g     F .text	000000a0 alt_ic_irq_enable
000086c0 g     O .rwdata	00000008 alt_alarm_list
00005c30 g     F .text	0000005c _do_ctors
00004408 g     F .text	000000d0 close
0000475c g     F .text	00000080 alt_load
0000187c g     F .text	00000014 free
00003ad0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10a86104 	addi	r2,r2,-24188
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10a86104 	addi	r2,r2,-24188
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1bc:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c8:	d681a414 	ori	gp,gp,1680
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1cc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1d0:	10a84d14 	ori	r2,r2,41268

    movhi r3, %hi(__bss_end)
     1d4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d8:	18e8a114 	ori	r3,r3,41604

    beq r2, r3, 1f
     1dc:	10c00326 	beq	r2,r3,1ec <_start+0x30>

0:
    stw zero, (r2)
     1e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e8:	10fffd36 	bltu	r2,r3,1e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1ec:	000475c0 	call	475c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f0:	00049000 	call	4900 <alt_main>

000001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f4:	003fff06 	br	1f4 <alt_after_alt_main>

000001f8 <trdb_d5m_write>:
  // I2C stuff

  #define I2C_FREQ              (50000000) /* 50 MHz -- clock frequency driving the i2c core: 50 MHz */
  #define TRDB_D5M_I2C_ADDRESS  (0xba)

  bool trdb_d5m_write(i2c_dev *i2c, uint8_t register_offset, uint16_t data) {
     1f8:	defff804 	addi	sp,sp,-32
     1fc:	dfc00715 	stw	ra,28(sp)
     200:	df000615 	stw	fp,24(sp)
     204:	df000604 	addi	fp,sp,24
     208:	e13ffd15 	stw	r4,-12(fp)
     20c:	2807883a 	mov	r3,r5
     210:	3005883a 	mov	r2,r6
     214:	e0fffe05 	stb	r3,-8(fp)
     218:	e0bfff0d 	sth	r2,-4(fp)
      uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
     21c:	e0bfff0b 	ldhu	r2,-4(fp)
     220:	1004d23a 	srli	r2,r2,8
     224:	e0bffc05 	stb	r2,-16(fp)
     228:	e0bfff0b 	ldhu	r2,-4(fp)
     22c:	e0bffc45 	stb	r2,-15(fp)

      int success = i2c_write_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
     230:	e1bffe03 	ldbu	r6,-8(fp)
     234:	e0fffc04 	addi	r3,fp,-16
     238:	00800084 	movi	r2,2
     23c:	d8800015 	stw	r2,0(sp)
     240:	e13ffd17 	ldw	r4,-12(fp)
     244:	01402e84 	movi	r5,186
     248:	180f883a 	mov	r7,r3
     24c:	00014000 	call	1400 <i2c_write_array>
     250:	e0bffb15 	stw	r2,-20(fp)

      if (success != I2C_SUCCESS) {
     254:	e0bffb17 	ldw	r2,-20(fp)
     258:	10000226 	beq	r2,zero,264 <trdb_d5m_write+0x6c>
          return false;
     25c:	0005883a 	mov	r2,zero
     260:	00000106 	br	268 <trdb_d5m_write+0x70>
      } else {
          return true;
     264:	00800044 	movi	r2,1
      }
  }
     268:	e037883a 	mov	sp,fp
     26c:	dfc00117 	ldw	ra,4(sp)
     270:	df000017 	ldw	fp,0(sp)
     274:	dec00204 	addi	sp,sp,8
     278:	f800283a 	ret

0000027c <trdb_d5m_read>:

  bool trdb_d5m_read(i2c_dev *i2c, uint8_t register_offset, uint16_t *data) {
     27c:	defff804 	addi	sp,sp,-32
     280:	dfc00715 	stw	ra,28(sp)
     284:	df000615 	stw	fp,24(sp)
     288:	df000604 	addi	fp,sp,24
     28c:	e13ffd15 	stw	r4,-12(fp)
     290:	2805883a 	mov	r2,r5
     294:	e1bfff15 	stw	r6,-4(fp)
     298:	e0bffe05 	stb	r2,-8(fp)
      uint8_t byte_data[2] = {0, 0};
     29c:	e03ffc05 	stb	zero,-16(fp)
     2a0:	e03ffc45 	stb	zero,-15(fp)

      int success = i2c_read_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
     2a4:	e1bffe03 	ldbu	r6,-8(fp)
     2a8:	e0fffc04 	addi	r3,fp,-16
     2ac:	00800084 	movi	r2,2
     2b0:	d8800015 	stw	r2,0(sp)
     2b4:	e13ffd17 	ldw	r4,-12(fp)
     2b8:	01402e84 	movi	r5,186
     2bc:	180f883a 	mov	r7,r3
     2c0:	00015940 	call	1594 <i2c_read_array>
     2c4:	e0bffb15 	stw	r2,-20(fp)

      if (success != I2C_SUCCESS) {
     2c8:	e0bffb17 	ldw	r2,-20(fp)
     2cc:	10000226 	beq	r2,zero,2d8 <trdb_d5m_read+0x5c>
          return false;
     2d0:	0005883a 	mov	r2,zero
     2d4:	00000b06 	br	304 <trdb_d5m_read+0x88>
      } else {
          *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
     2d8:	e0bffc03 	ldbu	r2,-16(fp)
     2dc:	10803fcc 	andi	r2,r2,255
     2e0:	1004923a 	slli	r2,r2,8
     2e4:	1007883a 	mov	r3,r2
     2e8:	e0bffc43 	ldbu	r2,-15(fp)
     2ec:	10803fcc 	andi	r2,r2,255
     2f0:	1885883a 	add	r2,r3,r2
     2f4:	1007883a 	mov	r3,r2
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	10c0000d 	sth	r3,0(r2)
          return true;
     300:	00800044 	movi	r2,1
      }
  }
     304:	e037883a 	mov	sp,fp
     308:	dfc00117 	ldw	ra,4(sp)
     30c:	df000017 	ldw	fp,0(sp)
     310:	dec00204 	addi	sp,sp,8
     314:	f800283a 	ret

00000318 <camera_controller_create>:
    i2c_dev i2c;
    uint16_t* buffer;
    void* addr;
  };

  struct Camera *camera_controller_create(void* addr) {
     318:	defffb04 	addi	sp,sp,-20
     31c:	dfc00415 	stw	ra,16(sp)
     320:	df000315 	stw	fp,12(sp)
     324:	dc000215 	stw	r16,8(sp)
     328:	df000304 	addi	fp,sp,12
     32c:	e13ffe15 	stw	r4,-8(fp)
    struct Camera *cam = malloc(sizeof(struct Camera));
     330:	01000304 	movi	r4,12
     334:	00018680 	call	1868 <malloc>
     338:	e0bffd15 	stw	r2,-12(fp)
    cam->addr = addr;
     33c:	e0bffd17 	ldw	r2,-12(fp)
     340:	e0fffe17 	ldw	r3,-8(fp)
     344:	10c00215 	stw	r3,8(r2)
    cam->i2c = i2c_inst((void *) I2C_0_BASE);
     348:	e43ffd17 	ldw	r16,-12(fp)
     34c:	01008034 	movhi	r4,512
     350:	21001c04 	addi	r4,r4,112
     354:	00010840 	call	1084 <i2c_inst>
     358:	80800015 	stw	r2,0(r16)
    i2c_init(&cam->i2c, I2C_FREQ);
     35c:	e0bffd17 	ldw	r2,-12(fp)
     360:	1009883a 	mov	r4,r2
     364:	0140bef4 	movhi	r5,763
     368:	297c2004 	addi	r5,r5,-3968
     36c:	00010b00 	call	10b0 <i2c_init>
    cam->buffer = NULL;
     370:	e0bffd17 	ldw	r2,-12(fp)
     374:	10000115 	stw	zero,4(r2)
    return cam;
     378:	e0bffd17 	ldw	r2,-12(fp)
  }
     37c:	e6ffff04 	addi	sp,fp,-4
     380:	dfc00217 	ldw	ra,8(sp)
     384:	df000117 	ldw	fp,4(sp)
     388:	dc000017 	ldw	r16,0(sp)
     38c:	dec00304 	addi	sp,sp,12
     390:	f800283a 	ret

00000394 <camera_controller_destroy>:

  void camera_controller_destroy(struct Camera *cam) {
     394:	defffd04 	addi	sp,sp,-12
     398:	dfc00215 	stw	ra,8(sp)
     39c:	df000115 	stw	fp,4(sp)
     3a0:	df000104 	addi	fp,sp,4
     3a4:	e13fff15 	stw	r4,-4(fp)
    free(cam->buffer);
     3a8:	e0bfff17 	ldw	r2,-4(fp)
     3ac:	10800117 	ldw	r2,4(r2)
     3b0:	1009883a 	mov	r4,r2
     3b4:	000187c0 	call	187c <free>
    free(cam);
     3b8:	e13fff17 	ldw	r4,-4(fp)
     3bc:	000187c0 	call	187c <free>
  }
     3c0:	e037883a 	mov	sp,fp
     3c4:	dfc00117 	ldw	ra,4(sp)
     3c8:	df000017 	ldw	fp,0(sp)
     3cc:	dec00204 	addi	sp,sp,8
     3d0:	f800283a 	ret

000003d4 <camera_controller_configure>:

  int camera_controller_configure(struct Camera* cam, struct CameraConfig *conf) {
     3d4:	defffc04 	addi	sp,sp,-16
     3d8:	dfc00315 	stw	ra,12(sp)
     3dc:	df000215 	stw	fp,8(sp)
     3e0:	df000204 	addi	fp,sp,8
     3e4:	e13ffe15 	stw	r4,-8(fp)
     3e8:	e17fff15 	stw	r5,-4(fp)
    // Sample on rising edge
    trdb_d5m_write(&cam->i2c, 0x00a, 0x8000);
     3ec:	e0bffe17 	ldw	r2,-8(fp)
     3f0:	1009883a 	mov	r4,r2
     3f4:	01400284 	movi	r5,10
     3f8:	01a00014 	movui	r6,32768
     3fc:	00001f80 	call	1f8 <trdb_d5m_write>

    #ifdef TEST_PATTERN
      trdb_d5m_write(&cam->i2c, 0x0a0, (TEST_PATTERN << 3) | (0x1));
    #else
      trdb_d5m_write(&cam->i2c, 0x0a0, 0);
     400:	e0bffe17 	ldw	r2,-8(fp)
     404:	1009883a 	mov	r4,r2
     408:	01402804 	movi	r5,160
     40c:	000d883a 	mov	r6,zero
     410:	00001f80 	call	1f8 <trdb_d5m_write>
    #endif


    if ((cam->buffer = realloc(cam->buffer, sizeof(uint16_t)*CAM_NB_BUFFERS*conf->width*conf->height)) == NULL) {
     414:	e0bffe17 	ldw	r2,-8(fp)
     418:	10c00117 	ldw	r3,4(r2)
     41c:	e0bfff17 	ldw	r2,-4(fp)
     420:	10800017 	ldw	r2,0(r2)
     424:	1009883a 	mov	r4,r2
     428:	e0bfff17 	ldw	r2,-4(fp)
     42c:	10800117 	ldw	r2,4(r2)
     430:	2085383a 	mul	r2,r4,r2
     434:	100490fa 	slli	r2,r2,3
     438:	1809883a 	mov	r4,r3
     43c:	100b883a 	mov	r5,r2
     440:	00021040 	call	2104 <realloc>
     444:	1007883a 	mov	r3,r2
     448:	e0bffe17 	ldw	r2,-8(fp)
     44c:	10c00115 	stw	r3,4(r2)
     450:	e0bffe17 	ldw	r2,-8(fp)
     454:	10800117 	ldw	r2,4(r2)
     458:	1000051e 	bne	r2,zero,470 <camera_controller_configure+0x9c>
  		printf("# Cannot allocate image buffer\n");
     45c:	01000034 	movhi	r4,0
     460:	211af604 	addi	r4,r4,27608
     464:	00020f00 	call	20f0 <puts>
  		return 0;
     468:	0005883a 	mov	r2,zero
     46c:	00003506 	br	544 <camera_controller_configure+0x170>
  	}

    // trdb_d5m_write(&i2c, 0x00c, 8000); // Shutter delay (increases exposure)

    trdb_d5m_write(&cam->i2c, 0x003, (conf->height << 2) - 1);
     470:	e0fffe17 	ldw	r3,-8(fp)
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800117 	ldw	r2,4(r2)
     47c:	1085883a 	add	r2,r2,r2
     480:	1085883a 	add	r2,r2,r2
     484:	10bfffc4 	addi	r2,r2,-1
     488:	10bfffcc 	andi	r2,r2,65535
     48c:	1809883a 	mov	r4,r3
     490:	014000c4 	movi	r5,3
     494:	100d883a 	mov	r6,r2
     498:	00001f80 	call	1f8 <trdb_d5m_write>
    // Frame width
    trdb_d5m_write(&cam->i2c, 0x004, (conf->width << 2) - 1);
     49c:	e0fffe17 	ldw	r3,-8(fp)
     4a0:	e0bfff17 	ldw	r2,-4(fp)
     4a4:	10800017 	ldw	r2,0(r2)
     4a8:	1085883a 	add	r2,r2,r2
     4ac:	1085883a 	add	r2,r2,r2
     4b0:	10bfffc4 	addi	r2,r2,-1
     4b4:	10bfffcc 	andi	r2,r2,65535
     4b8:	1809883a 	mov	r4,r3
     4bc:	01400104 	movi	r5,4
     4c0:	100d883a 	mov	r6,r2
     4c4:	00001f80 	call	1f8 <trdb_d5m_write>
    // Row binning x4
    trdb_d5m_write(&cam->i2c, 0x022, 0x0011);
     4c8:	e0bffe17 	ldw	r2,-8(fp)
     4cc:	1009883a 	mov	r4,r2
     4d0:	01400884 	movi	r5,34
     4d4:	01800444 	movi	r6,17
     4d8:	00001f80 	call	1f8 <trdb_d5m_write>
    // Column binning x4
    trdb_d5m_write(&cam->i2c, 0x023, 0x0011);
     4dc:	e0bffe17 	ldw	r2,-8(fp)
     4e0:	1009883a 	mov	r4,r2
     4e4:	014008c4 	movi	r5,35
     4e8:	01800444 	movi	r6,17
     4ec:	00001f80 	call	1f8 <trdb_d5m_write>


    IOWR_32DIRECT(cam->addr, CAM_CTRL_1, CAM_RESET);
     4f0:	e0bffe17 	ldw	r2,-8(fp)
     4f4:	10800217 	ldw	r2,8(r2)
     4f8:	10800304 	addi	r2,r2,12
     4fc:	00c01004 	movi	r3,64
     500:	10c00035 	stwio	r3,0(r2)

  	// Set output buffer address
  	IOWR_32DIRECT(cam->addr, CAM_BUFFER_START, (int)cam->buffer);
     504:	e0bffe17 	ldw	r2,-8(fp)
     508:	10800217 	ldw	r2,8(r2)
     50c:	e0fffe17 	ldw	r3,-8(fp)
     510:	18c00117 	ldw	r3,4(r3)
     514:	10c00035 	stwio	r3,0(r2)
  	IOWR_32DIRECT(cam->addr, CAM_FRAME_LENGTH, conf->width * conf->height * 2);
     518:	e0bffe17 	ldw	r2,-8(fp)
     51c:	10800217 	ldw	r2,8(r2)
     520:	10c00104 	addi	r3,r2,4
     524:	e0bfff17 	ldw	r2,-4(fp)
     528:	11000017 	ldw	r4,0(r2)
     52c:	e0bfff17 	ldw	r2,-4(fp)
     530:	10800117 	ldw	r2,4(r2)
     534:	2085383a 	mul	r2,r4,r2
     538:	1085883a 	add	r2,r2,r2
     53c:	18800035 	stwio	r2,0(r3)

    return 1;
     540:	00800044 	movi	r2,1
  }
     544:	e037883a 	mov	sp,fp
     548:	dfc00117 	ldw	ra,4(sp)
     54c:	df000017 	ldw	fp,0(sp)
     550:	dec00204 	addi	sp,sp,8
     554:	f800283a 	ret

00000558 <camera_controller_start>:

  inline void camera_controller_start(struct Camera *cam) {
     558:	defffe04 	addi	sp,sp,-8
     55c:	df000115 	stw	fp,4(sp)
     560:	df000104 	addi	fp,sp,4
     564:	e13fff15 	stw	r4,-4(fp)
  	IOWR_32DIRECT(cam->addr, CAM_CTRL_1, CAM_START);
     568:	e0bfff17 	ldw	r2,-4(fp)
     56c:	10800217 	ldw	r2,8(r2)
     570:	10800304 	addi	r2,r2,12
     574:	00c00404 	movi	r3,16
     578:	10c00035 	stwio	r3,0(r2)
  }
     57c:	e037883a 	mov	sp,fp
     580:	df000017 	ldw	fp,0(sp)
     584:	dec00104 	addi	sp,sp,4
     588:	f800283a 	ret

0000058c <camera_controller_stop>:

  inline void camera_controller_stop(struct Camera *cam) {
     58c:	defffe04 	addi	sp,sp,-8
     590:	df000115 	stw	fp,4(sp)
     594:	df000104 	addi	fp,sp,4
     598:	e13fff15 	stw	r4,-4(fp)
  	IOWR_32DIRECT(cam->addr, CAM_CTRL_1, CAM_STOP);
     59c:	e0bfff17 	ldw	r2,-4(fp)
     5a0:	10800217 	ldw	r2,8(r2)
     5a4:	10800304 	addi	r2,r2,12
     5a8:	00c00804 	movi	r3,32
     5ac:	10c00035 	stwio	r3,0(r2)
  }
     5b0:	e037883a 	mov	sp,fp
     5b4:	df000017 	ldw	fp,0(sp)
     5b8:	dec00104 	addi	sp,sp,4
     5bc:	f800283a 	ret

000005c0 <camera_controller_read_done>:

  inline void camera_controller_read_done(struct Camera *cam) {
     5c0:	defffe04 	addi	sp,sp,-8
     5c4:	df000115 	stw	fp,4(sp)
     5c8:	df000104 	addi	fp,sp,4
     5cc:	e13fff15 	stw	r4,-4(fp)
    IOWR_32DIRECT(cam->addr, CAM_CTRL_1, CAM_READ_DONE);
     5d0:	e0bfff17 	ldw	r2,-4(fp)
     5d4:	10800217 	ldw	r2,8(r2)
     5d8:	10800304 	addi	r2,r2,12
     5dc:	00c02004 	movi	r3,128
     5e0:	10c00035 	stwio	r3,0(r2)
  }
     5e4:	e037883a 	mov	sp,fp
     5e8:	df000017 	ldw	fp,0(sp)
     5ec:	dec00104 	addi	sp,sp,4
     5f0:	f800283a 	ret

000005f4 <camera_controller_read_current_frame>:

  inline uint16_t* camera_controller_read_current_frame(struct Camera *cam) {
     5f4:	defffe04 	addi	sp,sp,-8
     5f8:	df000115 	stw	fp,4(sp)
     5fc:	df000104 	addi	fp,sp,4
     600:	e13fff15 	stw	r4,-4(fp)
    return (uint16_t*)IORD_32DIRECT(cam->addr, CAM_CURRENT_FRAME);
     604:	e0bfff17 	ldw	r2,-4(fp)
     608:	10800217 	ldw	r2,8(r2)
     60c:	10800204 	addi	r2,r2,8
     610:	10800037 	ldwio	r2,0(r2)
  }
     614:	e037883a 	mov	sp,fp
     618:	df000017 	ldw	fp,0(sp)
     61c:	dec00104 	addi	sp,sp,4
     620:	f800283a 	ret

00000624 <camera_controller_read_ctrl_1>:

  inline uint32_t camera_controller_read_ctrl_1(struct Camera *cam) {
     624:	defffe04 	addi	sp,sp,-8
     628:	df000115 	stw	fp,4(sp)
     62c:	df000104 	addi	fp,sp,4
     630:	e13fff15 	stw	r4,-4(fp)
    return IORD_32DIRECT(cam->addr, CAM_CTRL_1);
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	10800217 	ldw	r2,8(r2)
     63c:	10800304 	addi	r2,r2,12
     640:	10800037 	ldwio	r2,0(r2)
  }
     644:	e037883a 	mov	sp,fp
     648:	df000017 	ldw	fp,0(sp)
     64c:	dec00104 	addi	sp,sp,4
     650:	f800283a 	ret

00000654 <Delay_Ms>:

#define  Set_LCD_RST LCD_WR(6, 0)
#define  Clr_LCD_RST LCD_WR(6, 1)

void Delay_Ms(alt_u16 count_ms)
{
     654:	defffd04 	addi	sp,sp,-12
     658:	dfc00215 	stw	ra,8(sp)
     65c:	df000115 	stw	fp,4(sp)
     660:	df000104 	addi	fp,sp,4
     664:	2005883a 	mov	r2,r4
     668:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
     66c:	00000206 	br	678 <Delay_Ms+0x24>
    {
        usleep(1000);
     670:	0100fa04 	movi	r4,1000
     674:	0004c140 	call	4c14 <usleep>
#define  Set_LCD_RST LCD_WR(6, 0)
#define  Clr_LCD_RST LCD_WR(6, 1)

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
     678:	e0bfff0b 	ldhu	r2,-4(fp)
     67c:	10ffffc4 	addi	r3,r2,-1
     680:	e0ffff0d 	sth	r3,-4(fp)
     684:	10bfffcc 	andi	r2,r2,65535
     688:	103ff91e 	bne	r2,zero,670 <Delay_Ms+0x1c>
    {
        usleep(1000);
    }
}
     68c:	e037883a 	mov	sp,fp
     690:	dfc00117 	ldw	ra,4(sp)
     694:	df000017 	ldw	fp,0(sp)
     698:	dec00204 	addi	sp,sp,8
     69c:	f800283a 	ret

000006a0 <LCD_Init>:

void LCD_Init()
{
     6a0:	defffe04 	addi	sp,sp,-8
     6a4:	dfc00115 	stw	ra,4(sp)
     6a8:	df000015 	stw	fp,0(sp)
     6ac:	d839883a 	mov	fp,sp
	//alt_u16 data1,data2;
	//alt_u16 data3,data4;
	Set_LCD_RST;
     6b0:	0007883a 	mov	r3,zero
     6b4:	00808034 	movhi	r2,512
     6b8:	10800984 	addi	r2,r2,38
     6bc:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
     6c0:	01000044 	movi	r4,1
     6c4:	00006540 	call	654 <Delay_Ms>
	Clr_LCD_RST;
     6c8:	00c00044 	movi	r3,1
     6cc:	00808034 	movhi	r2,512
     6d0:	10800984 	addi	r2,r2,38
     6d4:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
     6d8:	01000284 	movi	r4,10
     6dc:	00006540 	call	654 <Delay_Ms>
	Set_LCD_RST;
     6e0:	0007883a 	mov	r3,zero
     6e4:	00808034 	movhi	r2,512
     6e8:	10800984 	addi	r2,r2,38
     6ec:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
     6f0:	01001e04 	movi	r4,120
     6f4:	00006540 	call	654 <Delay_Ms>
	Clr_LCD_RST;
     6f8:	00c00044 	movi	r3,1
     6fc:	00808034 	movhi	r2,512
     700:	10800984 	addi	r2,r2,38
     704:	10c00035 	stwio	r3,0(r2)



	LCD_WR_REG(0x0011); //Exit Sleep
     708:	00c00444 	movi	r3,17
     70c:	00808034 	movhi	r2,512
     710:	10800804 	addi	r2,r2,32
     714:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
     718:	00c033c4 	movi	r3,207
     71c:	00808034 	movhi	r2,512
     720:	10800804 	addi	r2,r2,32
     724:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     728:	00c00074 	movhi	r3,1
     72c:	00808034 	movhi	r2,512
     730:	10800804 	addi	r2,r2,32
     734:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
     738:	00c00074 	movhi	r3,1
     73c:	18c02044 	addi	r3,r3,129
     740:	00808034 	movhi	r2,512
     744:	10800804 	addi	r2,r2,32
     748:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
     74c:	00c00074 	movhi	r3,1
     750:	18c03004 	addi	r3,r3,192
     754:	00808034 	movhi	r2,512
     758:	10800804 	addi	r2,r2,32
     75c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
     760:	00c03b44 	movi	r3,237
     764:	00808034 	movhi	r2,512
     768:	10800804 	addi	r2,r2,32
     76c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
     770:	00c00074 	movhi	r3,1
     774:	18c01904 	addi	r3,r3,100
     778:	00808034 	movhi	r2,512
     77c:	10800804 	addi	r2,r2,32
     780:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
     784:	00c00074 	movhi	r3,1
     788:	18c000c4 	addi	r3,r3,3
     78c:	00808034 	movhi	r2,512
     790:	10800804 	addi	r2,r2,32
     794:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
     798:	00c00074 	movhi	r3,1
     79c:	18c00484 	addi	r3,r3,18
     7a0:	00808034 	movhi	r2,512
     7a4:	10800804 	addi	r2,r2,32
     7a8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
     7ac:	00c00074 	movhi	r3,1
     7b0:	18c02044 	addi	r3,r3,129
     7b4:	00808034 	movhi	r2,512
     7b8:	10800804 	addi	r2,r2,32
     7bc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
     7c0:	00c03a04 	movi	r3,232
     7c4:	00808034 	movhi	r2,512
     7c8:	10800804 	addi	r2,r2,32
     7cc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
     7d0:	00c00074 	movhi	r3,1
     7d4:	18c02144 	addi	r3,r3,133
     7d8:	00808034 	movhi	r2,512
     7dc:	10800804 	addi	r2,r2,32
     7e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
     7e4:	00c00074 	movhi	r3,1
     7e8:	18c00044 	addi	r3,r3,1
     7ec:	00808034 	movhi	r2,512
     7f0:	10800804 	addi	r2,r2,32
     7f4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
     7f8:	00c00074 	movhi	r3,1
     7fc:	18c1e604 	addi	r3,r3,1944
     800:	00808034 	movhi	r2,512
     804:	10800804 	addi	r2,r2,32
     808:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
     80c:	00c032c4 	movi	r3,203
     810:	00808034 	movhi	r2,512
     814:	10800804 	addi	r2,r2,32
     818:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
     81c:	00c00074 	movhi	r3,1
     820:	18c00e44 	addi	r3,r3,57
     824:	00808034 	movhi	r2,512
     828:	10800804 	addi	r2,r2,32
     82c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
     830:	00c00074 	movhi	r3,1
     834:	18c00b04 	addi	r3,r3,44
     838:	00808034 	movhi	r2,512
     83c:	10800804 	addi	r2,r2,32
     840:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     844:	00c00074 	movhi	r3,1
     848:	00808034 	movhi	r2,512
     84c:	10800804 	addi	r2,r2,32
     850:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
     854:	00c00074 	movhi	r3,1
     858:	18c00d04 	addi	r3,r3,52
     85c:	00808034 	movhi	r2,512
     860:	10800804 	addi	r2,r2,32
     864:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
     868:	00c00074 	movhi	r3,1
     86c:	18c00084 	addi	r3,r3,2
     870:	00808034 	movhi	r2,512
     874:	10800804 	addi	r2,r2,32
     878:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
     87c:	00c03dc4 	movi	r3,247
     880:	00808034 	movhi	r2,512
     884:	10800804 	addi	r2,r2,32
     888:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
     88c:	00c00074 	movhi	r3,1
     890:	18c00804 	addi	r3,r3,32
     894:	00808034 	movhi	r2,512
     898:	10800804 	addi	r2,r2,32
     89c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
     8a0:	00c03a84 	movi	r3,234
     8a4:	00808034 	movhi	r2,512
     8a8:	10800804 	addi	r2,r2,32
     8ac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     8b0:	00c00074 	movhi	r3,1
     8b4:	00808034 	movhi	r2,512
     8b8:	10800804 	addi	r2,r2,32
     8bc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     8c0:	00c00074 	movhi	r3,1
     8c4:	00808034 	movhi	r2,512
     8c8:	10800804 	addi	r2,r2,32
     8cc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
     8d0:	00c02c44 	movi	r3,177
     8d4:	00808034 	movhi	r2,512
     8d8:	10800804 	addi	r2,r2,32
     8dc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     8e0:	00c00074 	movhi	r3,1
     8e4:	00808034 	movhi	r2,512
     8e8:	10800804 	addi	r2,r2,32
     8ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
     8f0:	00c00074 	movhi	r3,1
     8f4:	18c006c4 	addi	r3,r3,27
     8f8:	00808034 	movhi	r2,512
     8fc:	10800804 	addi	r2,r2,32
     900:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
     904:	00c02d84 	movi	r3,182
     908:	00808034 	movhi	r2,512
     90c:	10800804 	addi	r2,r2,32
     910:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
     914:	00c00074 	movhi	r3,1
     918:	18c00284 	addi	r3,r3,10
     91c:	00808034 	movhi	r2,512
     920:	10800804 	addi	r2,r2,32
     924:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
     928:	00c00074 	movhi	r3,1
     92c:	18c02884 	addi	r3,r3,162
     930:	00808034 	movhi	r2,512
     934:	10800804 	addi	r2,r2,32
     938:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
     93c:	00c03004 	movi	r3,192
     940:	00808034 	movhi	r2,512
     944:	10800804 	addi	r2,r2,32
     948:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
     94c:	00c00074 	movhi	r3,1
     950:	18c00144 	addi	r3,r3,5
     954:	00808034 	movhi	r2,512
     958:	10800804 	addi	r2,r2,32
     95c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
     960:	00c03044 	movi	r3,193
     964:	00808034 	movhi	r2,512
     968:	10800804 	addi	r2,r2,32
     96c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
     970:	00c00074 	movhi	r3,1
     974:	18c00444 	addi	r3,r3,17
     978:	00808034 	movhi	r2,512
     97c:	10800804 	addi	r2,r2,32
     980:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
     984:	00c03144 	movi	r3,197
     988:	00808034 	movhi	r2,512
     98c:	10800804 	addi	r2,r2,32
     990:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
     994:	00c00074 	movhi	r3,1
     998:	18c01144 	addi	r3,r3,69
     99c:	00808034 	movhi	r2,512
     9a0:	10800804 	addi	r2,r2,32
     9a4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
     9a8:	00c00074 	movhi	r3,1
     9ac:	18c01144 	addi	r3,r3,69
     9b0:	00808034 	movhi	r2,512
     9b4:	10800804 	addi	r2,r2,32
     9b8:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
     9bc:	00c031c4 	movi	r3,199
     9c0:	00808034 	movhi	r2,512
     9c4:	10800804 	addi	r2,r2,32
     9c8:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
     9cc:	00c00074 	movhi	r3,1
     9d0:	18c02884 	addi	r3,r3,162
     9d4:	00808034 	movhi	r2,512
     9d8:	10800804 	addi	r2,r2,32
     9dc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
     9e0:	00c00d84 	movi	r3,54
     9e4:	00808034 	movhi	r2,512
     9e8:	10800804 	addi	r2,r2,32
     9ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
     9f0:	00c00074 	movhi	r3,1
     9f4:	18c00204 	addi	r3,r3,8
     9f8:	00808034 	movhi	r2,512
     9fc:	10800804 	addi	r2,r2,32
     a00:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
     a04:	00c03c84 	movi	r3,242
     a08:	00808034 	movhi	r2,512
     a0c:	10800804 	addi	r2,r2,32
     a10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     a14:	00c00074 	movhi	r3,1
     a18:	00808034 	movhi	r2,512
     a1c:	10800804 	addi	r2,r2,32
     a20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
     a24:	00c00984 	movi	r3,38
     a28:	00808034 	movhi	r2,512
     a2c:	10800804 	addi	r2,r2,32
     a30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
     a34:	00c00074 	movhi	r3,1
     a38:	18c00044 	addi	r3,r3,1
     a3c:	00808034 	movhi	r2,512
     a40:	10800804 	addi	r2,r2,32
     a44:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
     a48:	00c03804 	movi	r3,224
     a4c:	00808034 	movhi	r2,512
     a50:	10800804 	addi	r2,r2,32
     a54:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
     a58:	00c00074 	movhi	r3,1
     a5c:	18c003c4 	addi	r3,r3,15
     a60:	00808034 	movhi	r2,512
     a64:	10800804 	addi	r2,r2,32
     a68:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
     a6c:	00c00074 	movhi	r3,1
     a70:	18c00984 	addi	r3,r3,38
     a74:	00808034 	movhi	r2,512
     a78:	10800804 	addi	r2,r2,32
     a7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
     a80:	00c00074 	movhi	r3,1
     a84:	18c00904 	addi	r3,r3,36
     a88:	00808034 	movhi	r2,512
     a8c:	10800804 	addi	r2,r2,32
     a90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
     a94:	00c00074 	movhi	r3,1
     a98:	18c002c4 	addi	r3,r3,11
     a9c:	00808034 	movhi	r2,512
     aa0:	10800804 	addi	r2,r2,32
     aa4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
     aa8:	00c00074 	movhi	r3,1
     aac:	18c00384 	addi	r3,r3,14
     ab0:	00808034 	movhi	r2,512
     ab4:	10800804 	addi	r2,r2,32
     ab8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
     abc:	00c00074 	movhi	r3,1
     ac0:	18c00204 	addi	r3,r3,8
     ac4:	00808034 	movhi	r2,512
     ac8:	10800804 	addi	r2,r2,32
     acc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
     ad0:	00c00074 	movhi	r3,1
     ad4:	18c012c4 	addi	r3,r3,75
     ad8:	00808034 	movhi	r2,512
     adc:	10800804 	addi	r2,r2,32
     ae0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
     ae4:	00c00074 	movhi	r3,1
     ae8:	18c02a04 	addi	r3,r3,168
     aec:	00808034 	movhi	r2,512
     af0:	10800804 	addi	r2,r2,32
     af4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
     af8:	00c00074 	movhi	r3,1
     afc:	18c00ec4 	addi	r3,r3,59
     b00:	00808034 	movhi	r2,512
     b04:	10800804 	addi	r2,r2,32
     b08:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
     b0c:	00c00074 	movhi	r3,1
     b10:	18c00284 	addi	r3,r3,10
     b14:	00808034 	movhi	r2,512
     b18:	10800804 	addi	r2,r2,32
     b1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
     b20:	00c00074 	movhi	r3,1
     b24:	18c00504 	addi	r3,r3,20
     b28:	00808034 	movhi	r2,512
     b2c:	10800804 	addi	r2,r2,32
     b30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
     b34:	00c00074 	movhi	r3,1
     b38:	18c00184 	addi	r3,r3,6
     b3c:	00808034 	movhi	r2,512
     b40:	10800804 	addi	r2,r2,32
     b44:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
     b48:	00c00074 	movhi	r3,1
     b4c:	18c00404 	addi	r3,r3,16
     b50:	00808034 	movhi	r2,512
     b54:	10800804 	addi	r2,r2,32
     b58:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
     b5c:	00c00074 	movhi	r3,1
     b60:	18c00244 	addi	r3,r3,9
     b64:	00808034 	movhi	r2,512
     b68:	10800804 	addi	r2,r2,32
     b6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     b70:	00c00074 	movhi	r3,1
     b74:	00808034 	movhi	r2,512
     b78:	10800804 	addi	r2,r2,32
     b7c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
     b80:	00c03844 	movi	r3,225
     b84:	00808034 	movhi	r2,512
     b88:	10800804 	addi	r2,r2,32
     b8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     b90:	00c00074 	movhi	r3,1
     b94:	00808034 	movhi	r2,512
     b98:	10800804 	addi	r2,r2,32
     b9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
     ba0:	00c00074 	movhi	r3,1
     ba4:	18c00704 	addi	r3,r3,28
     ba8:	00808034 	movhi	r2,512
     bac:	10800804 	addi	r2,r2,32
     bb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
     bb4:	00c00074 	movhi	r3,1
     bb8:	18c00804 	addi	r3,r3,32
     bbc:	00808034 	movhi	r2,512
     bc0:	10800804 	addi	r2,r2,32
     bc4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
     bc8:	00c00074 	movhi	r3,1
     bcc:	18c00104 	addi	r3,r3,4
     bd0:	00808034 	movhi	r2,512
     bd4:	10800804 	addi	r2,r2,32
     bd8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
     bdc:	00c00074 	movhi	r3,1
     be0:	18c00404 	addi	r3,r3,16
     be4:	00808034 	movhi	r2,512
     be8:	10800804 	addi	r2,r2,32
     bec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
     bf0:	00c00074 	movhi	r3,1
     bf4:	18c00204 	addi	r3,r3,8
     bf8:	00808034 	movhi	r2,512
     bfc:	10800804 	addi	r2,r2,32
     c00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
     c04:	00c00074 	movhi	r3,1
     c08:	18c00d04 	addi	r3,r3,52
     c0c:	00808034 	movhi	r2,512
     c10:	10800804 	addi	r2,r2,32
     c14:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
     c18:	00c00074 	movhi	r3,1
     c1c:	18c011c4 	addi	r3,r3,71
     c20:	00808034 	movhi	r2,512
     c24:	10800804 	addi	r2,r2,32
     c28:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
     c2c:	00c00074 	movhi	r3,1
     c30:	18c01104 	addi	r3,r3,68
     c34:	00808034 	movhi	r2,512
     c38:	10800804 	addi	r2,r2,32
     c3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
     c40:	00c00074 	movhi	r3,1
     c44:	18c00144 	addi	r3,r3,5
     c48:	00808034 	movhi	r2,512
     c4c:	10800804 	addi	r2,r2,32
     c50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
     c54:	00c00074 	movhi	r3,1
     c58:	18c002c4 	addi	r3,r3,11
     c5c:	00808034 	movhi	r2,512
     c60:	10800804 	addi	r2,r2,32
     c64:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
     c68:	00c00074 	movhi	r3,1
     c6c:	18c00244 	addi	r3,r3,9
     c70:	00808034 	movhi	r2,512
     c74:	10800804 	addi	r2,r2,32
     c78:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
     c7c:	00c00074 	movhi	r3,1
     c80:	18c00bc4 	addi	r3,r3,47
     c84:	00808034 	movhi	r2,512
     c88:	10800804 	addi	r2,r2,32
     c8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
     c90:	00c00074 	movhi	r3,1
     c94:	18c00d84 	addi	r3,r3,54
     c98:	00808034 	movhi	r2,512
     c9c:	10800804 	addi	r2,r2,32
     ca0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
     ca4:	00c00074 	movhi	r3,1
     ca8:	18c003c4 	addi	r3,r3,15
     cac:	00808034 	movhi	r2,512
     cb0:	10800804 	addi	r2,r2,32
     cb4:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
     cb8:	00c00a84 	movi	r3,42
     cbc:	00808034 	movhi	r2,512
     cc0:	10800804 	addi	r2,r2,32
     cc4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     cc8:	00c00074 	movhi	r3,1
     ccc:	00808034 	movhi	r2,512
     cd0:	10800804 	addi	r2,r2,32
     cd4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     cd8:	00c00074 	movhi	r3,1
     cdc:	00808034 	movhi	r2,512
     ce0:	10800804 	addi	r2,r2,32
     ce4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     ce8:	00c00074 	movhi	r3,1
     cec:	00808034 	movhi	r2,512
     cf0:	10800804 	addi	r2,r2,32
     cf4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
     cf8:	00c00074 	movhi	r3,1
     cfc:	18c03bc4 	addi	r3,r3,239
     d00:	00808034 	movhi	r2,512
     d04:	10800804 	addi	r2,r2,32
     d08:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
     d0c:	00c00ac4 	movi	r3,43
     d10:	00808034 	movhi	r2,512
     d14:	10800804 	addi	r2,r2,32
     d18:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     d1c:	00c00074 	movhi	r3,1
     d20:	00808034 	movhi	r2,512
     d24:	10800804 	addi	r2,r2,32
     d28:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     d2c:	00c00074 	movhi	r3,1
     d30:	00808034 	movhi	r2,512
     d34:	10800804 	addi	r2,r2,32
     d38:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
     d3c:	00c00074 	movhi	r3,1
     d40:	18c00044 	addi	r3,r3,1
     d44:	00808034 	movhi	r2,512
     d48:	10800804 	addi	r2,r2,32
     d4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
     d50:	00c00074 	movhi	r3,1
     d54:	18c00fc4 	addi	r3,r3,63
     d58:	00808034 	movhi	r2,512
     d5c:	10800804 	addi	r2,r2,32
     d60:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
     d64:	00c00e84 	movi	r3,58
     d68:	00808034 	movhi	r2,512
     d6c:	10800804 	addi	r2,r2,32
     d70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
     d74:	00c00074 	movhi	r3,1
     d78:	18c01544 	addi	r3,r3,85
     d7c:	00808034 	movhi	r2,512
     d80:	10800804 	addi	r2,r2,32
     d84:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
     d88:	00c03d84 	movi	r3,246
     d8c:	00808034 	movhi	r2,512
     d90:	10800804 	addi	r2,r2,32
     d94:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
     d98:	00c00074 	movhi	r3,1
     d9c:	18c00044 	addi	r3,r3,1
     da0:	00808034 	movhi	r2,512
     da4:	10800804 	addi	r2,r2,32
     da8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
     dac:	00c00074 	movhi	r3,1
     db0:	18c00c04 	addi	r3,r3,48
     db4:	00808034 	movhi	r2,512
     db8:	10800804 	addi	r2,r2,32
     dbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
     dc0:	00c00074 	movhi	r3,1
     dc4:	00808034 	movhi	r2,512
     dc8:	10800804 	addi	r2,r2,32
     dcc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
     dd0:	00c00a44 	movi	r3,41
     dd4:	00808034 	movhi	r2,512
     dd8:	10800804 	addi	r2,r2,32
     ddc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
     de0:	00c00b04 	movi	r3,44
     de4:	00808034 	movhi	r2,512
     de8:	10800804 	addi	r2,r2,32
     dec:	10c00035 	stwio	r3,0(r2)

}
     df0:	e037883a 	mov	sp,fp
     df4:	dfc00117 	ldw	ra,4(sp)
     df8:	df000017 	ldw	fp,0(sp)
     dfc:	dec00204 	addi	sp,sp,8
     e00:	f800283a 	ret

00000e04 <main>:

// END OF LCD SHIT STUFF

int main()
{
     e04:	defff704 	addi	sp,sp,-36
     e08:	dfc00815 	stw	ra,32(sp)
     e0c:	df000715 	stw	fp,28(sp)
     e10:	df000704 	addi	fp,sp,28
	int width = 240, height = 320; // VGA
     e14:	00803c04 	movi	r2,240
     e18:	e0bff915 	stw	r2,-28(fp)
     e1c:	00805004 	movi	r2,320
     e20:	e0bffa15 	stw	r2,-24(fp)

	struct Camera *cam = camera_controller_create((void*)CAMERA_CONTROLLER_0_BASE);
     e24:	01008034 	movhi	r4,512
     e28:	21001004 	addi	r4,r4,64
     e2c:	00003180 	call	318 <camera_controller_create>
     e30:	e0bffb15 	stw	r2,-20(fp)

	struct CameraConfig conf;
	conf.width = width;
     e34:	e0bff917 	ldw	r2,-28(fp)
     e38:	e0bffd15 	stw	r2,-12(fp)
	conf.height = height;
     e3c:	e0bffa17 	ldw	r2,-24(fp)
     e40:	e0bffe15 	stw	r2,-8(fp)

	if(!camera_controller_configure(cam, &conf)) {
     e44:	e0bffd04 	addi	r2,fp,-12
     e48:	e13ffb17 	ldw	r4,-20(fp)
     e4c:	100b883a 	mov	r5,r2
     e50:	00003d40 	call	3d4 <camera_controller_configure>
     e54:	1000021e 	bne	r2,zero,e60 <main+0x5c>
		return 0;
     e58:	0005883a 	mov	r2,zero
     e5c:	00003406 	br	f30 <main+0x12c>
	}


	// LCD

	LCD_Init();
     e60:	00006a00 	call	6a0 <LCD_Init>

	LCD_WR(buff_0 << 2, &Delay_Ms);
     e64:	00c00034 	movhi	r3,0
     e68:	18c19504 	addi	r3,r3,1620
     e6c:	00808034 	movhi	r2,512
     e70:	10800904 	addi	r2,r2,36
     e74:	10c00035 	stwio	r3,0(r2)
	LCD_WR(buff_1 << 2, &Delay_Ms);
     e78:	00c00034 	movhi	r3,0
     e7c:	18c19504 	addi	r3,r3,1620
     e80:	00808034 	movhi	r2,512
     e84:	10800a04 	addi	r2,r2,40
     e88:	10c00035 	stwio	r3,0(r2)
	LCD_WR(buff_2 << 2, &Delay_Ms);
     e8c:	00c00034 	movhi	r3,0
     e90:	18c19504 	addi	r3,r3,1620
     e94:	00808034 	movhi	r2,512
     e98:	10800b04 	addi	r2,r2,44
     e9c:	10c00035 	stwio	r3,0(r2)

	LCD_WR(start_master << 2, 1);
     ea0:	00c00044 	movi	r3,1
     ea4:	00808034 	movhi	r2,512
     ea8:	10800f04 	addi	r2,r2,60
     eac:	10c00035 	stwio	r3,0(r2)

	// end LCD


	camera_controller_start(cam);
     eb0:	e13ffb17 	ldw	r4,-20(fp)
     eb4:	00005580 	call	558 <camera_controller_start>

	printf("Go!\n");
     eb8:	01000034 	movhi	r4,0
     ebc:	211afe04 	addi	r4,r4,27640
     ec0:	00020f00 	call	20f0 <puts>

	Delay_Ms(5000);
     ec4:	0104e204 	movi	r4,5000
     ec8:	00006540 	call	654 <Delay_Ms>
	printf("Swapping buffers\n");
     ecc:	01000034 	movhi	r4,0
     ed0:	211aff04 	addi	r4,r4,27644
     ed4:	00020f00 	call	20f0 <puts>
	struct Camera *cam2 = camera_controller_create((void*)CAMERA_CONTROLLER_0_BASE);
     ed8:	01008034 	movhi	r4,512
     edc:	21001004 	addi	r4,r4,64
     ee0:	00003180 	call	318 <camera_controller_create>
     ee4:	e0bffc15 	stw	r2,-16(fp)
	if(!camera_controller_configure(cam2, &conf)) {
     ee8:	e0bffd04 	addi	r2,fp,-12
     eec:	e13ffc17 	ldw	r4,-16(fp)
     ef0:	100b883a 	mov	r5,r2
     ef4:	00003d40 	call	3d4 <camera_controller_configure>
     ef8:	1000051e 	bne	r2,zero,f10 <main+0x10c>
		printf("Failure !\n");
     efc:	01000034 	movhi	r4,0
     f00:	211b0404 	addi	r4,r4,27664
     f04:	00020f00 	call	20f0 <puts>
		return 0;
     f08:	0005883a 	mov	r2,zero
     f0c:	00000806 	br	f30 <main+0x12c>
	}
	Delay_Ms(5000);
     f10:	0104e204 	movi	r4,5000
     f14:	00006540 	call	654 <Delay_Ms>
	printf("Restarting\n");
     f18:	01000034 	movhi	r4,0
     f1c:	211b0704 	addi	r4,r4,27676
     f20:	00020f00 	call	20f0 <puts>
	camera_controller_start(cam);
     f24:	e13ffb17 	ldw	r4,-20(fp)
     f28:	00005580 	call	558 <camera_controller_start>



  // camera_controller_destroy(cam);

  return 0;
     f2c:	0005883a 	mov	r2,zero
}
     f30:	e037883a 	mov	sp,fp
     f34:	dfc00117 	ldw	ra,4(sp)
     f38:	df000017 	ldw	fp,0(sp)
     f3c:	dec00204 	addi	sp,sp,8
     f40:	f800283a 	ret

00000f44 <i2c_usleep>:
static void i2c_wait_end_of_transfer(i2c_dev *dev);
static void i2c_set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t i2c_get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
     f44:	defffd04 	addi	sp,sp,-12
     f48:	dfc00215 	stw	ra,8(sp)
     f4c:	df000115 	stw	fp,4(sp)
     f50:	df000104 	addi	fp,sp,4
     f54:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
     f58:	e13fff17 	ldw	r4,-4(fp)
     f5c:	0004c140 	call	4c14 <usleep>
#endif
}
     f60:	e037883a 	mov	sp,fp
     f64:	dfc00117 	ldw	ra,4(sp)
     f68:	df000017 	ldw	fp,0(sp)
     f6c:	dec00204 	addi	sp,sp,8
     f70:	f800283a 	ret

00000f74 <i2c_wait_end_of_transfer>:

/*
 * Waits until the current i2c transfer is finished.
 */
static void i2c_wait_end_of_transfer(i2c_dev *dev) {
     f74:	defffe04 	addi	sp,sp,-8
     f78:	df000115 	stw	fp,4(sp)
     f7c:	df000104 	addi	fp,sp,4
     f80:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
     f84:	0001883a 	nop
     f88:	e0bfff17 	ldw	r2,-4(fp)
     f8c:	10800017 	ldw	r2,0(r2)
     f90:	10800084 	addi	r2,r2,2
     f94:	10800023 	ldbuio	r2,0(r2)
     f98:	10803fcc 	andi	r2,r2,255
     f9c:	1080020c 	andi	r2,r2,8
     fa0:	103ff91e 	bne	r2,zero,f88 <i2c_wait_end_of_transfer+0x14>
}
     fa4:	e037883a 	mov	sp,fp
     fa8:	df000017 	ldw	fp,0(sp)
     fac:	dec00104 	addi	sp,sp,4
     fb0:	f800283a 	ret

00000fb4 <i2c_set_data_control>:

/*
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void i2c_set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
     fb4:	defffb04 	addi	sp,sp,-20
     fb8:	dfc00415 	stw	ra,16(sp)
     fbc:	df000315 	stw	fp,12(sp)
     fc0:	df000304 	addi	fp,sp,12
     fc4:	e13ffd15 	stw	r4,-12(fp)
     fc8:	2807883a 	mov	r3,r5
     fcc:	3005883a 	mov	r2,r6
     fd0:	e0fffe05 	stb	r3,-8(fp)
     fd4:	e0bfff05 	stb	r2,-4(fp)
    i2c_wait_end_of_transfer(dev);
     fd8:	e13ffd17 	ldw	r4,-12(fp)
     fdc:	0000f740 	call	f74 <i2c_wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
     fe0:	e0bffd17 	ldw	r2,-12(fp)
     fe4:	10800017 	ldw	r2,0(r2)
     fe8:	e0fffe03 	ldbu	r3,-8(fp)
     fec:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
     ff0:	e0bffd17 	ldw	r2,-12(fp)
     ff4:	10800017 	ldw	r2,0(r2)
     ff8:	10800044 	addi	r2,r2,1
     ffc:	e0ffff03 	ldbu	r3,-4(fp)
    1000:	10c00025 	stbio	r3,0(r2)
    i2c_wait_end_of_transfer(dev);
    1004:	e13ffd17 	ldw	r4,-12(fp)
    1008:	0000f740 	call	f74 <i2c_wait_end_of_transfer>
}
    100c:	e037883a 	mov	sp,fp
    1010:	dfc00117 	ldw	ra,4(sp)
    1014:	df000017 	ldw	fp,0(sp)
    1018:	dec00204 	addi	sp,sp,8
    101c:	f800283a 	ret

00001020 <i2c_get_data_set_control>:

/*
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t i2c_get_data_set_control(i2c_dev *dev, uint8_t control) {
    1020:	defffc04 	addi	sp,sp,-16
    1024:	dfc00315 	stw	ra,12(sp)
    1028:	df000215 	stw	fp,8(sp)
    102c:	df000204 	addi	fp,sp,8
    1030:	e13ffe15 	stw	r4,-8(fp)
    1034:	2805883a 	mov	r2,r5
    1038:	e0bfff05 	stb	r2,-4(fp)
    i2c_wait_end_of_transfer(dev);
    103c:	e13ffe17 	ldw	r4,-8(fp)
    1040:	0000f740 	call	f74 <i2c_wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
    1044:	e0bffe17 	ldw	r2,-8(fp)
    1048:	10800017 	ldw	r2,0(r2)
    104c:	10800044 	addi	r2,r2,1
    1050:	e0ffff03 	ldbu	r3,-4(fp)
    1054:	10c00025 	stbio	r3,0(r2)
    i2c_wait_end_of_transfer(dev);
    1058:	e13ffe17 	ldw	r4,-8(fp)
    105c:	0000f740 	call	f74 <i2c_wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
    1060:	e0bffe17 	ldw	r2,-8(fp)
    1064:	10800017 	ldw	r2,0(r2)
    1068:	10800023 	ldbuio	r2,0(r2)
    106c:	10803fcc 	andi	r2,r2,255
}
    1070:	e037883a 	mov	sp,fp
    1074:	dfc00117 	ldw	ra,4(sp)
    1078:	df000017 	ldw	fp,0(sp)
    107c:	dec00204 	addi	sp,sp,8
    1080:	f800283a 	ret

00001084 <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
    1084:	defffd04 	addi	sp,sp,-12
    1088:	df000215 	stw	fp,8(sp)
    108c:	df000204 	addi	fp,sp,8
    1090:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
    1094:	e0bfff17 	ldw	r2,-4(fp)
    1098:	e0bffe15 	stw	r2,-8(fp)

    return dev;
    109c:	e0bffe17 	ldw	r2,-8(fp)
}
    10a0:	e037883a 	mov	sp,fp
    10a4:	df000017 	ldw	fp,0(sp)
    10a8:	dec00104 	addi	sp,sp,4
    10ac:	f800283a 	ret

000010b0 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
    10b0:	defffb04 	addi	sp,sp,-20
    10b4:	dfc00415 	stw	ra,16(sp)
    10b8:	df000315 	stw	fp,12(sp)
    10bc:	dc000215 	stw	r16,8(sp)
    10c0:	df000304 	addi	fp,sp,12
    10c4:	e13ffd15 	stw	r4,-12(fp)
    10c8:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
    10cc:	e0bffd17 	ldw	r2,-12(fp)
    10d0:	10800017 	ldw	r2,0(r2)
    10d4:	140000c4 	addi	r16,r2,3
    10d8:	e0bffe17 	ldw	r2,-8(fp)
    10dc:	1009883a 	mov	r4,r2
    10e0:	014001b4 	movhi	r5,6
    10e4:	2946a004 	addi	r5,r5,6784
    10e8:	00018580 	call	1858 <__udivsi3>
    10ec:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
    10f0:	0104e204 	movi	r4,5000
    10f4:	0000f440 	call	f44 <i2c_usleep>
}
    10f8:	e6ffff04 	addi	sp,fp,-4
    10fc:	dfc00217 	ldw	ra,8(sp)
    1100:	df000117 	ldw	fp,4(sp)
    1104:	dc000017 	ldw	r16,0(sp)
    1108:	dec00304 	addi	sp,sp,12
    110c:	f800283a 	ret

00001110 <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
    1110:	defffc04 	addi	sp,sp,-16
    1114:	df000315 	stw	fp,12(sp)
    1118:	df000304 	addi	fp,sp,12
    111c:	e13ffe15 	stw	r4,-8(fp)
    1120:	2805883a 	mov	r2,r5
    1124:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
    1128:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
    112c:	e0bfff03 	ldbu	r2,-4(fp)
    1130:	10000426 	beq	r2,zero,1144 <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
    1134:	e0bffd17 	ldw	r2,-12(fp)
    1138:	10800814 	ori	r2,r2,32
    113c:	e0bffd15 	stw	r2,-12(fp)
    1140:	00000406 	br	1154 <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
    1144:	e0fffd17 	ldw	r3,-12(fp)
    1148:	00bff7c4 	movi	r2,-33
    114c:	1884703a 	and	r2,r3,r2
    1150:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1154:	e0bffe17 	ldw	r2,-8(fp)
    1158:	10800017 	ldw	r2,0(r2)
    115c:	10800044 	addi	r2,r2,1
    1160:	00c00084 	movi	r3,2
    1164:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
    1168:	e0bffe17 	ldw	r2,-8(fp)
    116c:	10800017 	ldw	r2,0(r2)
    1170:	10800044 	addi	r2,r2,1
    1174:	e0fffd17 	ldw	r3,-12(fp)
    1178:	10c00025 	stbio	r3,0(r2)
}
    117c:	e037883a 	mov	sp,fp
    1180:	df000017 	ldw	fp,0(sp)
    1184:	dec00104 	addi	sp,sp,4
    1188:	f800283a 	ret

0000118c <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
    118c:	defffa04 	addi	sp,sp,-24
    1190:	dfc00515 	stw	ra,20(sp)
    1194:	df000415 	stw	fp,16(sp)
    1198:	df000404 	addi	fp,sp,16
    119c:	e13ffc15 	stw	r4,-16(fp)
    11a0:	2809883a 	mov	r4,r5
    11a4:	3007883a 	mov	r3,r6
    11a8:	3805883a 	mov	r2,r7
    11ac:	e13ffd05 	stb	r4,-12(fp)
    11b0:	e0fffe05 	stb	r3,-8(fp)
    11b4:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    11b8:	e0bffd03 	ldbu	r2,-12(fp)
    11bc:	10803f8c 	andi	r2,r2,254
    11c0:	e13ffc17 	ldw	r4,-16(fp)
    11c4:	100b883a 	mov	r5,r2
    11c8:	01800504 	movi	r6,20
    11cc:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    11d0:	e0bffc17 	ldw	r2,-16(fp)
    11d4:	10800017 	ldw	r2,0(r2)
    11d8:	10800084 	addi	r2,r2,2
    11dc:	10800023 	ldbuio	r2,0(r2)
    11e0:	10803fcc 	andi	r2,r2,255
    11e4:	1080004c 	andi	r2,r2,1
    11e8:	10000726 	beq	r2,zero,1208 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    11ec:	e0bffc17 	ldw	r2,-16(fp)
    11f0:	10800017 	ldw	r2,0(r2)
    11f4:	10800044 	addi	r2,r2,1
    11f8:	00c00084 	movi	r3,2
    11fc:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
    1200:	00800044 	movi	r2,1
    1204:	00002706 	br	12a4 <i2c_write+0x118>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
    1208:	e0bffe03 	ldbu	r2,-8(fp)
    120c:	e13ffc17 	ldw	r4,-16(fp)
    1210:	100b883a 	mov	r5,r2
    1214:	01800404 	movi	r6,16
    1218:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    121c:	e0bffc17 	ldw	r2,-16(fp)
    1220:	10800017 	ldw	r2,0(r2)
    1224:	10800084 	addi	r2,r2,2
    1228:	10800023 	ldbuio	r2,0(r2)
    122c:	10803fcc 	andi	r2,r2,255
    1230:	1080004c 	andi	r2,r2,1
    1234:	10000726 	beq	r2,zero,1254 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1238:	e0bffc17 	ldw	r2,-16(fp)
    123c:	10800017 	ldw	r2,0(r2)
    1240:	10800044 	addi	r2,r2,1
    1244:	00c00084 	movi	r3,2
    1248:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
    124c:	00800084 	movi	r2,2
    1250:	00001406 	br	12a4 <i2c_write+0x118>
    }

    /* write register data to device */
    i2c_set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    1254:	e0bfff03 	ldbu	r2,-4(fp)
    1258:	e13ffc17 	ldw	r4,-16(fp)
    125c:	100b883a 	mov	r5,r2
    1260:	01800484 	movi	r6,18
    1264:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    1268:	e0bffc17 	ldw	r2,-16(fp)
    126c:	10800017 	ldw	r2,0(r2)
    1270:	10800084 	addi	r2,r2,2
    1274:	10800023 	ldbuio	r2,0(r2)
    1278:	10803fcc 	andi	r2,r2,255
    127c:	1080004c 	andi	r2,r2,1
    1280:	10000726 	beq	r2,zero,12a0 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1284:	e0bffc17 	ldw	r2,-16(fp)
    1288:	10800017 	ldw	r2,0(r2)
    128c:	10800044 	addi	r2,r2,1
    1290:	00c00084 	movi	r3,2
    1294:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
    1298:	00800084 	movi	r2,2
    129c:	00000106 	br	12a4 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
    12a0:	0005883a 	mov	r2,zero
}
    12a4:	e037883a 	mov	sp,fp
    12a8:	dfc00117 	ldw	ra,4(sp)
    12ac:	df000017 	ldw	fp,0(sp)
    12b0:	dec00204 	addi	sp,sp,8
    12b4:	f800283a 	ret

000012b8 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
    12b8:	defffa04 	addi	sp,sp,-24
    12bc:	dfc00515 	stw	ra,20(sp)
    12c0:	df000415 	stw	fp,16(sp)
    12c4:	df000404 	addi	fp,sp,16
    12c8:	e13ffc15 	stw	r4,-16(fp)
    12cc:	2807883a 	mov	r3,r5
    12d0:	3005883a 	mov	r2,r6
    12d4:	e1ffff15 	stw	r7,-4(fp)
    12d8:	e0fffd05 	stb	r3,-12(fp)
    12dc:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    12e0:	e0bffd03 	ldbu	r2,-12(fp)
    12e4:	10803f8c 	andi	r2,r2,254
    12e8:	e13ffc17 	ldw	r4,-16(fp)
    12ec:	100b883a 	mov	r5,r2
    12f0:	01800504 	movi	r6,20
    12f4:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    12f8:	e0bffc17 	ldw	r2,-16(fp)
    12fc:	10800017 	ldw	r2,0(r2)
    1300:	10800084 	addi	r2,r2,2
    1304:	10800023 	ldbuio	r2,0(r2)
    1308:	10803fcc 	andi	r2,r2,255
    130c:	1080004c 	andi	r2,r2,1
    1310:	10000726 	beq	r2,zero,1330 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1314:	e0bffc17 	ldw	r2,-16(fp)
    1318:	10800017 	ldw	r2,0(r2)
    131c:	10800044 	addi	r2,r2,1
    1320:	00c00084 	movi	r3,2
    1324:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
    1328:	00800044 	movi	r2,1
    132c:	00002f06 	br	13ec <i2c_read+0x134>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
    1330:	e0bffe03 	ldbu	r2,-8(fp)
    1334:	e13ffc17 	ldw	r4,-16(fp)
    1338:	100b883a 	mov	r5,r2
    133c:	01800404 	movi	r6,16
    1340:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    1344:	e0bffc17 	ldw	r2,-16(fp)
    1348:	10800017 	ldw	r2,0(r2)
    134c:	10800084 	addi	r2,r2,2
    1350:	10800023 	ldbuio	r2,0(r2)
    1354:	10803fcc 	andi	r2,r2,255
    1358:	1080004c 	andi	r2,r2,1
    135c:	10000726 	beq	r2,zero,137c <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1360:	e0bffc17 	ldw	r2,-16(fp)
    1364:	10800017 	ldw	r2,0(r2)
    1368:	10800044 	addi	r2,r2,1
    136c:	00c00084 	movi	r3,2
    1370:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
    1374:	00800084 	movi	r2,2
    1378:	00001c06 	br	13ec <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    i2c_set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    137c:	e0bffd03 	ldbu	r2,-12(fp)
    1380:	10800054 	ori	r2,r2,1
    1384:	10803fcc 	andi	r2,r2,255
    1388:	e13ffc17 	ldw	r4,-16(fp)
    138c:	100b883a 	mov	r5,r2
    1390:	01800504 	movi	r6,20
    1394:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    1398:	e0bffc17 	ldw	r2,-16(fp)
    139c:	10800017 	ldw	r2,0(r2)
    13a0:	10800084 	addi	r2,r2,2
    13a4:	10800023 	ldbuio	r2,0(r2)
    13a8:	10803fcc 	andi	r2,r2,255
    13ac:	1080004c 	andi	r2,r2,1
    13b0:	10000726 	beq	r2,zero,13d0 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    13b4:	e0bffc17 	ldw	r2,-16(fp)
    13b8:	10800017 	ldw	r2,0(r2)
    13bc:	10800044 	addi	r2,r2,1
    13c0:	00c00084 	movi	r3,2
    13c4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
    13c8:	00800044 	movi	r2,1
    13cc:	00000706 	br	13ec <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
    13d0:	e13ffc17 	ldw	r4,-16(fp)
    13d4:	014002c4 	movi	r5,11
    13d8:	00010200 	call	1020 <i2c_get_data_set_control>
    13dc:	1007883a 	mov	r3,r2
    13e0:	e0bfff17 	ldw	r2,-4(fp)
    13e4:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
    13e8:	0005883a 	mov	r2,zero
}
    13ec:	e037883a 	mov	sp,fp
    13f0:	dfc00117 	ldw	ra,4(sp)
    13f4:	df000017 	ldw	fp,0(sp)
    13f8:	dec00204 	addi	sp,sp,8
    13fc:	f800283a 	ret

00001400 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
    1400:	defff904 	addi	sp,sp,-28
    1404:	dfc00615 	stw	ra,24(sp)
    1408:	df000515 	stw	fp,20(sp)
    140c:	df000504 	addi	fp,sp,20
    1410:	e13ffc15 	stw	r4,-16(fp)
    1414:	2807883a 	mov	r3,r5
    1418:	3005883a 	mov	r2,r6
    141c:	e1ffff15 	stw	r7,-4(fp)
    1420:	e0fffd05 	stb	r3,-12(fp)
    1424:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    1428:	e0bffd03 	ldbu	r2,-12(fp)
    142c:	10803f8c 	andi	r2,r2,254
    1430:	e13ffc17 	ldw	r4,-16(fp)
    1434:	100b883a 	mov	r5,r2
    1438:	01800504 	movi	r6,20
    143c:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    1440:	e0bffc17 	ldw	r2,-16(fp)
    1444:	10800017 	ldw	r2,0(r2)
    1448:	10800084 	addi	r2,r2,2
    144c:	10800023 	ldbuio	r2,0(r2)
    1450:	10803fcc 	andi	r2,r2,255
    1454:	1080004c 	andi	r2,r2,1
    1458:	10000726 	beq	r2,zero,1478 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    145c:	e0bffc17 	ldw	r2,-16(fp)
    1460:	10800017 	ldw	r2,0(r2)
    1464:	10800044 	addi	r2,r2,1
    1468:	00c00084 	movi	r3,2
    146c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
    1470:	00800044 	movi	r2,1
    1474:	00004206 	br	1580 <i2c_write_array+0x180>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
    1478:	e0bffe03 	ldbu	r2,-8(fp)
    147c:	e13ffc17 	ldw	r4,-16(fp)
    1480:	100b883a 	mov	r5,r2
    1484:	01800404 	movi	r6,16
    1488:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    148c:	e0bffc17 	ldw	r2,-16(fp)
    1490:	10800017 	ldw	r2,0(r2)
    1494:	10800084 	addi	r2,r2,2
    1498:	10800023 	ldbuio	r2,0(r2)
    149c:	10803fcc 	andi	r2,r2,255
    14a0:	1080004c 	andi	r2,r2,1
    14a4:	10000726 	beq	r2,zero,14c4 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    14a8:	e0bffc17 	ldw	r2,-16(fp)
    14ac:	10800017 	ldw	r2,0(r2)
    14b0:	10800044 	addi	r2,r2,1
    14b4:	00c00084 	movi	r3,2
    14b8:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
    14bc:	00800084 	movi	r2,2
    14c0:	00002f06 	br	1580 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
    14c4:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
    14c8:	e03ffb15 	stw	zero,-20(fp)
    14cc:	00002806 	br	1570 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
    14d0:	e0800217 	ldw	r2,8(fp)
    14d4:	10bfffc4 	addi	r2,r2,-1
    14d8:	e0fffb17 	ldw	r3,-20(fp)
    14dc:	18800a2e 	bgeu	r3,r2,1508 <i2c_write_array+0x108>
            i2c_set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
    14e0:	e0ffff17 	ldw	r3,-4(fp)
    14e4:	e0bffb17 	ldw	r2,-20(fp)
    14e8:	1885883a 	add	r2,r3,r2
    14ec:	10800003 	ldbu	r2,0(r2)
    14f0:	10803fcc 	andi	r2,r2,255
    14f4:	e13ffc17 	ldw	r4,-16(fp)
    14f8:	100b883a 	mov	r5,r2
    14fc:	01800404 	movi	r6,16
    1500:	0000fb40 	call	fb4 <i2c_set_data_control>
    1504:	00000906 	br	152c <i2c_write_array+0x12c>
        } else {
            i2c_set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    1508:	e0ffff17 	ldw	r3,-4(fp)
    150c:	e0bffb17 	ldw	r2,-20(fp)
    1510:	1885883a 	add	r2,r3,r2
    1514:	10800003 	ldbu	r2,0(r2)
    1518:	10803fcc 	andi	r2,r2,255
    151c:	e13ffc17 	ldw	r4,-16(fp)
    1520:	100b883a 	mov	r5,r2
    1524:	01800484 	movi	r6,18
    1528:	0000fb40 	call	fb4 <i2c_set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    152c:	e0bffc17 	ldw	r2,-16(fp)
    1530:	10800017 	ldw	r2,0(r2)
    1534:	10800084 	addi	r2,r2,2
    1538:	10800023 	ldbuio	r2,0(r2)
    153c:	10803fcc 	andi	r2,r2,255
    1540:	1080004c 	andi	r2,r2,1
    1544:	10000726 	beq	r2,zero,1564 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1548:	e0bffc17 	ldw	r2,-16(fp)
    154c:	10800017 	ldw	r2,0(r2)
    1550:	10800044 	addi	r2,r2,1
    1554:	00c00084 	movi	r3,2
    1558:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
    155c:	00800084 	movi	r2,2
    1560:	00000706 	br	1580 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
    1564:	e0bffb17 	ldw	r2,-20(fp)
    1568:	10800044 	addi	r2,r2,1
    156c:	e0bffb15 	stw	r2,-20(fp)
    1570:	e0fffb17 	ldw	r3,-20(fp)
    1574:	e0800217 	ldw	r2,8(fp)
    1578:	18bfd536 	bltu	r3,r2,14d0 <i2c_write_array+0xd0>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
    157c:	0005883a 	mov	r2,zero
}
    1580:	e037883a 	mov	sp,fp
    1584:	dfc00117 	ldw	ra,4(sp)
    1588:	df000017 	ldw	fp,0(sp)
    158c:	dec00204 	addi	sp,sp,8
    1590:	f800283a 	ret

00001594 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
    1594:	defff804 	addi	sp,sp,-32
    1598:	dfc00715 	stw	ra,28(sp)
    159c:	df000615 	stw	fp,24(sp)
    15a0:	dc000515 	stw	r16,20(sp)
    15a4:	df000604 	addi	fp,sp,24
    15a8:	e13ffb15 	stw	r4,-20(fp)
    15ac:	2807883a 	mov	r3,r5
    15b0:	3005883a 	mov	r2,r6
    15b4:	e1fffe15 	stw	r7,-8(fp)
    15b8:	e0fffc05 	stb	r3,-16(fp)
    15bc:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    i2c_set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    15c0:	e0bffc03 	ldbu	r2,-16(fp)
    15c4:	10803f8c 	andi	r2,r2,254
    15c8:	e13ffb17 	ldw	r4,-20(fp)
    15cc:	100b883a 	mov	r5,r2
    15d0:	01800504 	movi	r6,20
    15d4:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    15d8:	e0bffb17 	ldw	r2,-20(fp)
    15dc:	10800017 	ldw	r2,0(r2)
    15e0:	10800084 	addi	r2,r2,2
    15e4:	10800023 	ldbuio	r2,0(r2)
    15e8:	10803fcc 	andi	r2,r2,255
    15ec:	1080004c 	andi	r2,r2,1
    15f0:	10000726 	beq	r2,zero,1610 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    15f4:	e0bffb17 	ldw	r2,-20(fp)
    15f8:	10800017 	ldw	r2,0(r2)
    15fc:	10800044 	addi	r2,r2,1
    1600:	00c00084 	movi	r3,2
    1604:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
    1608:	00800044 	movi	r2,1
    160c:	00004506 	br	1724 <i2c_read_array+0x190>
    }

    /* write register index to device */
    i2c_set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
    1610:	e0bffd03 	ldbu	r2,-12(fp)
    1614:	e13ffb17 	ldw	r4,-20(fp)
    1618:	100b883a 	mov	r5,r2
    161c:	01800404 	movi	r6,16
    1620:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    1624:	e0bffb17 	ldw	r2,-20(fp)
    1628:	10800017 	ldw	r2,0(r2)
    162c:	10800084 	addi	r2,r2,2
    1630:	10800023 	ldbuio	r2,0(r2)
    1634:	10803fcc 	andi	r2,r2,255
    1638:	1080004c 	andi	r2,r2,1
    163c:	10000726 	beq	r2,zero,165c <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1640:	e0bffb17 	ldw	r2,-20(fp)
    1644:	10800017 	ldw	r2,0(r2)
    1648:	10800044 	addi	r2,r2,1
    164c:	00c00084 	movi	r3,2
    1650:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
    1654:	00800084 	movi	r2,2
    1658:	00003206 	br	1724 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    i2c_set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
    165c:	e0bffc03 	ldbu	r2,-16(fp)
    1660:	10800054 	ori	r2,r2,1
    1664:	10803fcc 	andi	r2,r2,255
    1668:	e13ffb17 	ldw	r4,-20(fp)
    166c:	100b883a 	mov	r5,r2
    1670:	01800504 	movi	r6,20
    1674:	0000fb40 	call	fb4 <i2c_set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
    1678:	e0bffb17 	ldw	r2,-20(fp)
    167c:	10800017 	ldw	r2,0(r2)
    1680:	10800084 	addi	r2,r2,2
    1684:	10800023 	ldbuio	r2,0(r2)
    1688:	10803fcc 	andi	r2,r2,255
    168c:	1080004c 	andi	r2,r2,1
    1690:	10000726 	beq	r2,zero,16b0 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
    1694:	e0bffb17 	ldw	r2,-20(fp)
    1698:	10800017 	ldw	r2,0(r2)
    169c:	10800044 	addi	r2,r2,1
    16a0:	00c00084 	movi	r3,2
    16a4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
    16a8:	00800044 	movi	r2,1
    16ac:	00001d06 	br	1724 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
    16b0:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
    16b4:	e03ffa15 	stw	zero,-24(fp)
    16b8:	00001606 	br	1714 <i2c_read_array+0x180>
        if (i < size - 1) {
    16bc:	e0800217 	ldw	r2,8(fp)
    16c0:	10bfffc4 	addi	r2,r2,-1
    16c4:	e0fffa17 	ldw	r3,-24(fp)
    16c8:	1880082e 	bgeu	r3,r2,16ec <i2c_read_array+0x158>
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
    16cc:	e0fffe17 	ldw	r3,-8(fp)
    16d0:	e0bffa17 	ldw	r2,-24(fp)
    16d4:	18a1883a 	add	r16,r3,r2
    16d8:	e13ffb17 	ldw	r4,-20(fp)
    16dc:	01400204 	movi	r5,8
    16e0:	00010200 	call	1020 <i2c_get_data_set_control>
    16e4:	80800005 	stb	r2,0(r16)
    16e8:	00000706 	br	1708 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
    16ec:	e0fffe17 	ldw	r3,-8(fp)
    16f0:	e0bffa17 	ldw	r2,-24(fp)
    16f4:	18a1883a 	add	r16,r3,r2
    16f8:	e13ffb17 	ldw	r4,-20(fp)
    16fc:	014002c4 	movi	r5,11
    1700:	00010200 	call	1020 <i2c_get_data_set_control>
    1704:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
    1708:	e0bffa17 	ldw	r2,-24(fp)
    170c:	10800044 	addi	r2,r2,1
    1710:	e0bffa15 	stw	r2,-24(fp)
    1714:	e0fffa17 	ldw	r3,-24(fp)
    1718:	e0800217 	ldw	r2,8(fp)
    171c:	18bfe736 	bltu	r3,r2,16bc <i2c_read_array+0x128>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = i2c_get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
    1720:	0005883a 	mov	r2,zero
}
    1724:	e6ffff04 	addi	sp,fp,-4
    1728:	dfc00217 	ldw	ra,8(sp)
    172c:	df000117 	ldw	fp,4(sp)
    1730:	dc000017 	ldw	r16,0(sp)
    1734:	dec00304 	addi	sp,sp,12
    1738:	f800283a 	ret

0000173c <udivmodsi4>:
    173c:	2900182e 	bgeu	r5,r4,17a0 <udivmodsi4+0x64>
    1740:	28001716 	blt	r5,zero,17a0 <udivmodsi4+0x64>
    1744:	00800804 	movi	r2,32
    1748:	00c00044 	movi	r3,1
    174c:	00000206 	br	1758 <udivmodsi4+0x1c>
    1750:	10001126 	beq	r2,zero,1798 <udivmodsi4+0x5c>
    1754:	28000516 	blt	r5,zero,176c <udivmodsi4+0x30>
    1758:	294b883a 	add	r5,r5,r5
    175c:	10bfffc4 	addi	r2,r2,-1
    1760:	18c7883a 	add	r3,r3,r3
    1764:	293ffa36 	bltu	r5,r4,1750 <udivmodsi4+0x14>
    1768:	18000b26 	beq	r3,zero,1798 <udivmodsi4+0x5c>
    176c:	0005883a 	mov	r2,zero
    1770:	21400236 	bltu	r4,r5,177c <udivmodsi4+0x40>
    1774:	2149c83a 	sub	r4,r4,r5
    1778:	10c4b03a 	or	r2,r2,r3
    177c:	1806d07a 	srli	r3,r3,1
    1780:	280ad07a 	srli	r5,r5,1
    1784:	183ffa1e 	bne	r3,zero,1770 <udivmodsi4+0x34>
    1788:	3000011e 	bne	r6,zero,1790 <udivmodsi4+0x54>
    178c:	f800283a 	ret
    1790:	2005883a 	mov	r2,r4
    1794:	f800283a 	ret
    1798:	0005883a 	mov	r2,zero
    179c:	003ffa06 	br	1788 <udivmodsi4+0x4c>
    17a0:	00c00044 	movi	r3,1
    17a4:	003ff106 	br	176c <udivmodsi4+0x30>

000017a8 <__divsi3>:
    17a8:	defffe04 	addi	sp,sp,-8
    17ac:	dfc00115 	stw	ra,4(sp)
    17b0:	dc000015 	stw	r16,0(sp)
    17b4:	20000b16 	blt	r4,zero,17e4 <__divsi3+0x3c>
    17b8:	0021883a 	mov	r16,zero
    17bc:	28000c16 	blt	r5,zero,17f0 <__divsi3+0x48>
    17c0:	000d883a 	mov	r6,zero
    17c4:	000173c0 	call	173c <udivmodsi4>
    17c8:	0407c83a 	sub	r3,zero,r16
    17cc:	1884f03a 	xor	r2,r3,r2
    17d0:	1405883a 	add	r2,r2,r16
    17d4:	dfc00117 	ldw	ra,4(sp)
    17d8:	dc000017 	ldw	r16,0(sp)
    17dc:	dec00204 	addi	sp,sp,8
    17e0:	f800283a 	ret
    17e4:	0109c83a 	sub	r4,zero,r4
    17e8:	04000044 	movi	r16,1
    17ec:	283ff40e 	bge	r5,zero,17c0 <__divsi3+0x18>
    17f0:	014bc83a 	sub	r5,zero,r5
    17f4:	8400005c 	xori	r16,r16,1
    17f8:	003ff106 	br	17c0 <__divsi3+0x18>

000017fc <__modsi3>:
    17fc:	defffd04 	addi	sp,sp,-12
    1800:	dfc00215 	stw	ra,8(sp)
    1804:	dc400115 	stw	r17,4(sp)
    1808:	dc000015 	stw	r16,0(sp)
    180c:	20000c16 	blt	r4,zero,1840 <__modsi3+0x44>
    1810:	0023883a 	mov	r17,zero
    1814:	0021883a 	mov	r16,zero
    1818:	28000d16 	blt	r5,zero,1850 <__modsi3+0x54>
    181c:	01800044 	movi	r6,1
    1820:	000173c0 	call	173c <udivmodsi4>
    1824:	1404f03a 	xor	r2,r2,r16
    1828:	8885883a 	add	r2,r17,r2
    182c:	dfc00217 	ldw	ra,8(sp)
    1830:	dc400117 	ldw	r17,4(sp)
    1834:	dc000017 	ldw	r16,0(sp)
    1838:	dec00304 	addi	sp,sp,12
    183c:	f800283a 	ret
    1840:	0109c83a 	sub	r4,zero,r4
    1844:	04400044 	movi	r17,1
    1848:	043fffc4 	movi	r16,-1
    184c:	283ff30e 	bge	r5,zero,181c <__modsi3+0x20>
    1850:	014bc83a 	sub	r5,zero,r5
    1854:	003ff106 	br	181c <__modsi3+0x20>

00001858 <__udivsi3>:
    1858:	000d883a 	mov	r6,zero
    185c:	000173c1 	jmpi	173c <udivmodsi4>

00001860 <__umodsi3>:
    1860:	01800044 	movi	r6,1
    1864:	000173c1 	jmpi	173c <udivmodsi4>

00001868 <malloc>:
    1868:	00800074 	movhi	r2,1
    186c:	10a1a704 	addi	r2,r2,-31076
    1870:	200b883a 	mov	r5,r4
    1874:	11000017 	ldw	r4,0(r2)
    1878:	00018901 	jmpi	1890 <_malloc_r>

0000187c <free>:
    187c:	00800074 	movhi	r2,1
    1880:	10a1a704 	addi	r2,r2,-31076
    1884:	200b883a 	mov	r5,r4
    1888:	11000017 	ldw	r4,0(r2)
    188c:	00028d01 	jmpi	28d0 <_free_r>

00001890 <_malloc_r>:
    1890:	defff504 	addi	sp,sp,-44
    1894:	dc800315 	stw	r18,12(sp)
    1898:	dfc00a15 	stw	ra,40(sp)
    189c:	df000915 	stw	fp,36(sp)
    18a0:	ddc00815 	stw	r23,32(sp)
    18a4:	dd800715 	stw	r22,28(sp)
    18a8:	dd400615 	stw	r21,24(sp)
    18ac:	dd000515 	stw	r20,20(sp)
    18b0:	dcc00415 	stw	r19,16(sp)
    18b4:	dc400215 	stw	r17,8(sp)
    18b8:	dc000115 	stw	r16,4(sp)
    18bc:	288002c4 	addi	r2,r5,11
    18c0:	00c00584 	movi	r3,22
    18c4:	2025883a 	mov	r18,r4
    18c8:	18802a2e 	bgeu	r3,r2,1974 <_malloc_r+0xe4>
    18cc:	047ffe04 	movi	r17,-8
    18d0:	1462703a 	and	r17,r2,r17
    18d4:	88009e16 	blt	r17,zero,1b50 <_malloc_r+0x2c0>
    18d8:	89409d36 	bltu	r17,r5,1b50 <_malloc_r+0x2c0>
    18dc:	00049780 	call	4978 <__malloc_lock>
    18e0:	00807dc4 	movi	r2,503
    18e4:	14402736 	bltu	r2,r17,1984 <_malloc_r+0xf4>
    18e8:	8806d0fa 	srli	r3,r17,3
    18ec:	04c00034 	movhi	r19,0
    18f0:	9cdb1704 	addi	r19,r19,27740
    18f4:	18c5883a 	add	r2,r3,r3
    18f8:	1085883a 	add	r2,r2,r2
    18fc:	1085883a 	add	r2,r2,r2
    1900:	9885883a 	add	r2,r19,r2
    1904:	14000317 	ldw	r16,12(r2)
    1908:	80814a26 	beq	r16,r2,1e34 <_malloc_r+0x5a4>
    190c:	80c00117 	ldw	r3,4(r16)
    1910:	81000317 	ldw	r4,12(r16)
    1914:	00bfff04 	movi	r2,-4
    1918:	1884703a 	and	r2,r3,r2
    191c:	81400217 	ldw	r5,8(r16)
    1920:	8085883a 	add	r2,r16,r2
    1924:	10c00117 	ldw	r3,4(r2)
    1928:	29000315 	stw	r4,12(r5)
    192c:	21400215 	stw	r5,8(r4)
    1930:	18c00054 	ori	r3,r3,1
    1934:	10c00115 	stw	r3,4(r2)
    1938:	9009883a 	mov	r4,r18
    193c:	00049980 	call	4998 <__malloc_unlock>
    1940:	80800204 	addi	r2,r16,8
    1944:	dfc00a17 	ldw	ra,40(sp)
    1948:	df000917 	ldw	fp,36(sp)
    194c:	ddc00817 	ldw	r23,32(sp)
    1950:	dd800717 	ldw	r22,28(sp)
    1954:	dd400617 	ldw	r21,24(sp)
    1958:	dd000517 	ldw	r20,20(sp)
    195c:	dcc00417 	ldw	r19,16(sp)
    1960:	dc800317 	ldw	r18,12(sp)
    1964:	dc400217 	ldw	r17,8(sp)
    1968:	dc000117 	ldw	r16,4(sp)
    196c:	dec00b04 	addi	sp,sp,44
    1970:	f800283a 	ret
    1974:	04400404 	movi	r17,16
    1978:	89407536 	bltu	r17,r5,1b50 <_malloc_r+0x2c0>
    197c:	00049780 	call	4978 <__malloc_lock>
    1980:	003fd906 	br	18e8 <_malloc_r+0x58>
    1984:	8806d27a 	srli	r3,r17,9
    1988:	18007526 	beq	r3,zero,1b60 <_malloc_r+0x2d0>
    198c:	00800104 	movi	r2,4
    1990:	10c0ef36 	bltu	r2,r3,1d50 <_malloc_r+0x4c0>
    1994:	8806d1ba 	srli	r3,r17,6
    1998:	19c00e04 	addi	r7,r3,56
    199c:	39cb883a 	add	r5,r7,r7
    19a0:	04c00034 	movhi	r19,0
    19a4:	294b883a 	add	r5,r5,r5
    19a8:	9cdb1704 	addi	r19,r19,27740
    19ac:	294b883a 	add	r5,r5,r5
    19b0:	994b883a 	add	r5,r19,r5
    19b4:	2c000317 	ldw	r16,12(r5)
    19b8:	2c000e26 	beq	r5,r16,19f4 <_malloc_r+0x164>
    19bc:	80800117 	ldw	r2,4(r16)
    19c0:	01bfff04 	movi	r6,-4
    19c4:	010003c4 	movi	r4,15
    19c8:	1184703a 	and	r2,r2,r6
    19cc:	1447c83a 	sub	r3,r2,r17
    19d0:	20c00716 	blt	r4,r3,19f0 <_malloc_r+0x160>
    19d4:	1800650e 	bge	r3,zero,1b6c <_malloc_r+0x2dc>
    19d8:	84000317 	ldw	r16,12(r16)
    19dc:	2c000526 	beq	r5,r16,19f4 <_malloc_r+0x164>
    19e0:	80800117 	ldw	r2,4(r16)
    19e4:	1184703a 	and	r2,r2,r6
    19e8:	1447c83a 	sub	r3,r2,r17
    19ec:	20fff90e 	bge	r4,r3,19d4 <_malloc_r+0x144>
    19f0:	39ffffc4 	addi	r7,r7,-1
    19f4:	38c00044 	addi	r3,r7,1
    19f8:	01800034 	movhi	r6,0
    19fc:	9c000417 	ldw	r16,16(r19)
    1a00:	319b1704 	addi	r6,r6,27740
    1a04:	32400204 	addi	r9,r6,8
    1a08:	82410326 	beq	r16,r9,1e18 <_malloc_r+0x588>
    1a0c:	81000117 	ldw	r4,4(r16)
    1a10:	00bfff04 	movi	r2,-4
    1a14:	208e703a 	and	r7,r4,r2
    1a18:	3c45c83a 	sub	r2,r7,r17
    1a1c:	010003c4 	movi	r4,15
    1a20:	2080ee16 	blt	r4,r2,1ddc <_malloc_r+0x54c>
    1a24:	32400515 	stw	r9,20(r6)
    1a28:	32400415 	stw	r9,16(r6)
    1a2c:	1000510e 	bge	r2,zero,1b74 <_malloc_r+0x2e4>
    1a30:	00807fc4 	movi	r2,511
    1a34:	11c0ce36 	bltu	r2,r7,1d70 <_malloc_r+0x4e0>
    1a38:	3808d0fa 	srli	r4,r7,3
    1a3c:	01c00044 	movi	r7,1
    1a40:	30800117 	ldw	r2,4(r6)
    1a44:	210b883a 	add	r5,r4,r4
    1a48:	294b883a 	add	r5,r5,r5
    1a4c:	2009d0ba 	srai	r4,r4,2
    1a50:	294b883a 	add	r5,r5,r5
    1a54:	298b883a 	add	r5,r5,r6
    1a58:	2a000217 	ldw	r8,8(r5)
    1a5c:	3908983a 	sll	r4,r7,r4
    1a60:	81400315 	stw	r5,12(r16)
    1a64:	82000215 	stw	r8,8(r16)
    1a68:	2088b03a 	or	r4,r4,r2
    1a6c:	2c000215 	stw	r16,8(r5)
    1a70:	31000115 	stw	r4,4(r6)
    1a74:	44000315 	stw	r16,12(r8)
    1a78:	1805d0ba 	srai	r2,r3,2
    1a7c:	01400044 	movi	r5,1
    1a80:	288a983a 	sll	r5,r5,r2
    1a84:	21404336 	bltu	r4,r5,1b94 <_malloc_r+0x304>
    1a88:	2144703a 	and	r2,r4,r5
    1a8c:	10000a1e 	bne	r2,zero,1ab8 <_malloc_r+0x228>
    1a90:	00bfff04 	movi	r2,-4
    1a94:	294b883a 	add	r5,r5,r5
    1a98:	1886703a 	and	r3,r3,r2
    1a9c:	2144703a 	and	r2,r4,r5
    1aa0:	18c00104 	addi	r3,r3,4
    1aa4:	1000041e 	bne	r2,zero,1ab8 <_malloc_r+0x228>
    1aa8:	294b883a 	add	r5,r5,r5
    1aac:	2144703a 	and	r2,r4,r5
    1ab0:	18c00104 	addi	r3,r3,4
    1ab4:	103ffc26 	beq	r2,zero,1aa8 <_malloc_r+0x218>
    1ab8:	023fff04 	movi	r8,-4
    1abc:	01c003c4 	movi	r7,15
    1ac0:	18c5883a 	add	r2,r3,r3
    1ac4:	1085883a 	add	r2,r2,r2
    1ac8:	1085883a 	add	r2,r2,r2
    1acc:	9895883a 	add	r10,r19,r2
    1ad0:	52c00304 	addi	r11,r10,12
    1ad4:	1819883a 	mov	r12,r3
    1ad8:	5c000017 	ldw	r16,0(r11)
    1adc:	59bffd04 	addi	r6,r11,-12
    1ae0:	8180041e 	bne	r16,r6,1af4 <_malloc_r+0x264>
    1ae4:	0000ce06 	br	1e20 <_malloc_r+0x590>
    1ae8:	2000d70e 	bge	r4,zero,1e48 <_malloc_r+0x5b8>
    1aec:	84000317 	ldw	r16,12(r16)
    1af0:	8180cb26 	beq	r16,r6,1e20 <_malloc_r+0x590>
    1af4:	80800117 	ldw	r2,4(r16)
    1af8:	1204703a 	and	r2,r2,r8
    1afc:	1449c83a 	sub	r4,r2,r17
    1b00:	393ff90e 	bge	r7,r4,1ae8 <_malloc_r+0x258>
    1b04:	80800317 	ldw	r2,12(r16)
    1b08:	80c00217 	ldw	r3,8(r16)
    1b0c:	89400054 	ori	r5,r17,1
    1b10:	81400115 	stw	r5,4(r16)
    1b14:	18800315 	stw	r2,12(r3)
    1b18:	10c00215 	stw	r3,8(r2)
    1b1c:	8463883a 	add	r17,r16,r17
    1b20:	9c400515 	stw	r17,20(r19)
    1b24:	9c400415 	stw	r17,16(r19)
    1b28:	20800054 	ori	r2,r4,1
    1b2c:	88800115 	stw	r2,4(r17)
    1b30:	8a400315 	stw	r9,12(r17)
    1b34:	8a400215 	stw	r9,8(r17)
    1b38:	8923883a 	add	r17,r17,r4
    1b3c:	89000015 	stw	r4,0(r17)
    1b40:	9009883a 	mov	r4,r18
    1b44:	00049980 	call	4998 <__malloc_unlock>
    1b48:	80800204 	addi	r2,r16,8
    1b4c:	003f7d06 	br	1944 <_malloc_r+0xb4>
    1b50:	00800304 	movi	r2,12
    1b54:	90800015 	stw	r2,0(r18)
    1b58:	0005883a 	mov	r2,zero
    1b5c:	003f7906 	br	1944 <_malloc_r+0xb4>
    1b60:	01401f84 	movi	r5,126
    1b64:	01c00fc4 	movi	r7,63
    1b68:	003f8d06 	br	19a0 <_malloc_r+0x110>
    1b6c:	81000317 	ldw	r4,12(r16)
    1b70:	003f6a06 	br	191c <_malloc_r+0x8c>
    1b74:	81c5883a 	add	r2,r16,r7
    1b78:	10c00117 	ldw	r3,4(r2)
    1b7c:	9009883a 	mov	r4,r18
    1b80:	18c00054 	ori	r3,r3,1
    1b84:	10c00115 	stw	r3,4(r2)
    1b88:	00049980 	call	4998 <__malloc_unlock>
    1b8c:	80800204 	addi	r2,r16,8
    1b90:	003f6c06 	br	1944 <_malloc_r+0xb4>
    1b94:	9c000217 	ldw	r16,8(r19)
    1b98:	00bfff04 	movi	r2,-4
    1b9c:	85800117 	ldw	r22,4(r16)
    1ba0:	b0ac703a 	and	r22,r22,r2
    1ba4:	b4400336 	bltu	r22,r17,1bb4 <_malloc_r+0x324>
    1ba8:	b445c83a 	sub	r2,r22,r17
    1bac:	00c003c4 	movi	r3,15
    1bb0:	18805d16 	blt	r3,r2,1d28 <_malloc_r+0x498>
    1bb4:	05c00074 	movhi	r23,1
    1bb8:	00800074 	movhi	r2,1
    1bbc:	bde1a404 	addi	r23,r23,-31088
    1bc0:	10a84f04 	addi	r2,r2,-24260
    1bc4:	15400017 	ldw	r21,0(r2)
    1bc8:	b9000017 	ldw	r4,0(r23)
    1bcc:	00ffffc4 	movi	r3,-1
    1bd0:	858d883a 	add	r6,r16,r22
    1bd4:	8d6b883a 	add	r21,r17,r21
    1bd8:	20c0e426 	beq	r4,r3,1f6c <_malloc_r+0x6dc>
    1bdc:	ad4403c4 	addi	r21,r21,4111
    1be0:	00fc0004 	movi	r3,-4096
    1be4:	a8ea703a 	and	r21,r21,r3
    1be8:	9009883a 	mov	r4,r18
    1bec:	a80b883a 	mov	r5,r21
    1bf0:	d9800015 	stw	r6,0(sp)
    1bf4:	00026c00 	call	26c0 <_sbrk_r>
    1bf8:	00ffffc4 	movi	r3,-1
    1bfc:	1029883a 	mov	r20,r2
    1c00:	d9800017 	ldw	r6,0(sp)
    1c04:	10c0a426 	beq	r2,r3,1e98 <_malloc_r+0x608>
    1c08:	1180a236 	bltu	r2,r6,1e94 <_malloc_r+0x604>
    1c0c:	07000074 	movhi	fp,1
    1c10:	e7285704 	addi	fp,fp,-24228
    1c14:	e0c00017 	ldw	r3,0(fp)
    1c18:	a8c7883a 	add	r3,r21,r3
    1c1c:	e0c00015 	stw	r3,0(fp)
    1c20:	3500da26 	beq	r6,r20,1f8c <_malloc_r+0x6fc>
    1c24:	b9000017 	ldw	r4,0(r23)
    1c28:	00bfffc4 	movi	r2,-1
    1c2c:	2080e426 	beq	r4,r2,1fc0 <_malloc_r+0x730>
    1c30:	a185c83a 	sub	r2,r20,r6
    1c34:	1885883a 	add	r2,r3,r2
    1c38:	e0800015 	stw	r2,0(fp)
    1c3c:	a0c001cc 	andi	r3,r20,7
    1c40:	1800b526 	beq	r3,zero,1f18 <_malloc_r+0x688>
    1c44:	a0e9c83a 	sub	r20,r20,r3
    1c48:	00840204 	movi	r2,4104
    1c4c:	a5000204 	addi	r20,r20,8
    1c50:	10c7c83a 	sub	r3,r2,r3
    1c54:	a545883a 	add	r2,r20,r21
    1c58:	1083ffcc 	andi	r2,r2,4095
    1c5c:	18abc83a 	sub	r21,r3,r2
    1c60:	9009883a 	mov	r4,r18
    1c64:	a80b883a 	mov	r5,r21
    1c68:	00026c00 	call	26c0 <_sbrk_r>
    1c6c:	00ffffc4 	movi	r3,-1
    1c70:	10c0d026 	beq	r2,r3,1fb4 <_malloc_r+0x724>
    1c74:	1507c83a 	sub	r3,r2,r20
    1c78:	a8c7883a 	add	r3,r21,r3
    1c7c:	18c00054 	ori	r3,r3,1
    1c80:	e0800017 	ldw	r2,0(fp)
    1c84:	9d000215 	stw	r20,8(r19)
    1c88:	a0c00115 	stw	r3,4(r20)
    1c8c:	a887883a 	add	r3,r21,r2
    1c90:	e0c00015 	stw	r3,0(fp)
    1c94:	84c00e26 	beq	r16,r19,1cd0 <_malloc_r+0x440>
    1c98:	018003c4 	movi	r6,15
    1c9c:	3580a02e 	bgeu	r6,r22,1f20 <_malloc_r+0x690>
    1ca0:	81400117 	ldw	r5,4(r16)
    1ca4:	013ffe04 	movi	r4,-8
    1ca8:	b0bffd04 	addi	r2,r22,-12
    1cac:	1104703a 	and	r2,r2,r4
    1cb0:	2900004c 	andi	r4,r5,1
    1cb4:	1108b03a 	or	r4,r2,r4
    1cb8:	81000115 	stw	r4,4(r16)
    1cbc:	01400144 	movi	r5,5
    1cc0:	8089883a 	add	r4,r16,r2
    1cc4:	21400115 	stw	r5,4(r4)
    1cc8:	21400215 	stw	r5,8(r4)
    1ccc:	3080c036 	bltu	r6,r2,1fd0 <_malloc_r+0x740>
    1cd0:	00800074 	movhi	r2,1
    1cd4:	10a84e04 	addi	r2,r2,-24264
    1cd8:	11000017 	ldw	r4,0(r2)
    1cdc:	20c0012e 	bgeu	r4,r3,1ce4 <_malloc_r+0x454>
    1ce0:	10c00015 	stw	r3,0(r2)
    1ce4:	00800074 	movhi	r2,1
    1ce8:	10a84d04 	addi	r2,r2,-24268
    1cec:	11000017 	ldw	r4,0(r2)
    1cf0:	9c000217 	ldw	r16,8(r19)
    1cf4:	20c0012e 	bgeu	r4,r3,1cfc <_malloc_r+0x46c>
    1cf8:	10c00015 	stw	r3,0(r2)
    1cfc:	80c00117 	ldw	r3,4(r16)
    1d00:	00bfff04 	movi	r2,-4
    1d04:	1886703a 	and	r3,r3,r2
    1d08:	1c45c83a 	sub	r2,r3,r17
    1d0c:	1c400236 	bltu	r3,r17,1d18 <_malloc_r+0x488>
    1d10:	00c003c4 	movi	r3,15
    1d14:	18800416 	blt	r3,r2,1d28 <_malloc_r+0x498>
    1d18:	9009883a 	mov	r4,r18
    1d1c:	00049980 	call	4998 <__malloc_unlock>
    1d20:	0005883a 	mov	r2,zero
    1d24:	003f0706 	br	1944 <_malloc_r+0xb4>
    1d28:	88c00054 	ori	r3,r17,1
    1d2c:	80c00115 	stw	r3,4(r16)
    1d30:	8463883a 	add	r17,r16,r17
    1d34:	10800054 	ori	r2,r2,1
    1d38:	9c400215 	stw	r17,8(r19)
    1d3c:	88800115 	stw	r2,4(r17)
    1d40:	9009883a 	mov	r4,r18
    1d44:	00049980 	call	4998 <__malloc_unlock>
    1d48:	80800204 	addi	r2,r16,8
    1d4c:	003efd06 	br	1944 <_malloc_r+0xb4>
    1d50:	00800504 	movi	r2,20
    1d54:	10c0482e 	bgeu	r2,r3,1e78 <_malloc_r+0x5e8>
    1d58:	00801504 	movi	r2,84
    1d5c:	10c06836 	bltu	r2,r3,1f00 <_malloc_r+0x670>
    1d60:	8806d33a 	srli	r3,r17,12
    1d64:	19c01b84 	addi	r7,r3,110
    1d68:	39cb883a 	add	r5,r7,r7
    1d6c:	003f0c06 	br	19a0 <_malloc_r+0x110>
    1d70:	3804d27a 	srli	r2,r7,9
    1d74:	01000104 	movi	r4,4
    1d78:	2080422e 	bgeu	r4,r2,1e84 <_malloc_r+0x5f4>
    1d7c:	01000504 	movi	r4,20
    1d80:	20807c36 	bltu	r4,r2,1f74 <_malloc_r+0x6e4>
    1d84:	110016c4 	addi	r4,r2,91
    1d88:	210b883a 	add	r5,r4,r4
    1d8c:	294b883a 	add	r5,r5,r5
    1d90:	294b883a 	add	r5,r5,r5
    1d94:	994b883a 	add	r5,r19,r5
    1d98:	28800217 	ldw	r2,8(r5)
    1d9c:	02000034 	movhi	r8,0
    1da0:	421b1704 	addi	r8,r8,27740
    1da4:	11406326 	beq	r2,r5,1f34 <_malloc_r+0x6a4>
    1da8:	01bfff04 	movi	r6,-4
    1dac:	11000117 	ldw	r4,4(r2)
    1db0:	2188703a 	and	r4,r4,r6
    1db4:	3900022e 	bgeu	r7,r4,1dc0 <_malloc_r+0x530>
    1db8:	10800217 	ldw	r2,8(r2)
    1dbc:	28bffb1e 	bne	r5,r2,1dac <_malloc_r+0x51c>
    1dc0:	11800317 	ldw	r6,12(r2)
    1dc4:	99000117 	ldw	r4,4(r19)
    1dc8:	81800315 	stw	r6,12(r16)
    1dcc:	80800215 	stw	r2,8(r16)
    1dd0:	34000215 	stw	r16,8(r6)
    1dd4:	14000315 	stw	r16,12(r2)
    1dd8:	003f2706 	br	1a78 <_malloc_r+0x1e8>
    1ddc:	88c00054 	ori	r3,r17,1
    1de0:	80c00115 	stw	r3,4(r16)
    1de4:	8463883a 	add	r17,r16,r17
    1de8:	34400515 	stw	r17,20(r6)
    1dec:	34400415 	stw	r17,16(r6)
    1df0:	10c00054 	ori	r3,r2,1
    1df4:	8a400315 	stw	r9,12(r17)
    1df8:	8a400215 	stw	r9,8(r17)
    1dfc:	88c00115 	stw	r3,4(r17)
    1e00:	88a3883a 	add	r17,r17,r2
    1e04:	88800015 	stw	r2,0(r17)
    1e08:	9009883a 	mov	r4,r18
    1e0c:	00049980 	call	4998 <__malloc_unlock>
    1e10:	80800204 	addi	r2,r16,8
    1e14:	003ecb06 	br	1944 <_malloc_r+0xb4>
    1e18:	31000117 	ldw	r4,4(r6)
    1e1c:	003f1606 	br	1a78 <_malloc_r+0x1e8>
    1e20:	63000044 	addi	r12,r12,1
    1e24:	608000cc 	andi	r2,r12,3
    1e28:	5ac00204 	addi	r11,r11,8
    1e2c:	103f2a1e 	bne	r2,zero,1ad8 <_malloc_r+0x248>
    1e30:	00002106 	br	1eb8 <_malloc_r+0x628>
    1e34:	80800204 	addi	r2,r16,8
    1e38:	84000517 	ldw	r16,20(r16)
    1e3c:	143eb31e 	bne	r2,r16,190c <_malloc_r+0x7c>
    1e40:	18c00084 	addi	r3,r3,2
    1e44:	003eec06 	br	19f8 <_malloc_r+0x168>
    1e48:	8085883a 	add	r2,r16,r2
    1e4c:	10c00117 	ldw	r3,4(r2)
    1e50:	81000317 	ldw	r4,12(r16)
    1e54:	81400217 	ldw	r5,8(r16)
    1e58:	18c00054 	ori	r3,r3,1
    1e5c:	10c00115 	stw	r3,4(r2)
    1e60:	29000315 	stw	r4,12(r5)
    1e64:	21400215 	stw	r5,8(r4)
    1e68:	9009883a 	mov	r4,r18
    1e6c:	00049980 	call	4998 <__malloc_unlock>
    1e70:	80800204 	addi	r2,r16,8
    1e74:	003eb306 	br	1944 <_malloc_r+0xb4>
    1e78:	19c016c4 	addi	r7,r3,91
    1e7c:	39cb883a 	add	r5,r7,r7
    1e80:	003ec706 	br	19a0 <_malloc_r+0x110>
    1e84:	3804d1ba 	srli	r2,r7,6
    1e88:	11000e04 	addi	r4,r2,56
    1e8c:	210b883a 	add	r5,r4,r4
    1e90:	003fbe06 	br	1d8c <_malloc_r+0x4fc>
    1e94:	84ff5d26 	beq	r16,r19,1c0c <_malloc_r+0x37c>
    1e98:	9c000217 	ldw	r16,8(r19)
    1e9c:	00bfff04 	movi	r2,-4
    1ea0:	80c00117 	ldw	r3,4(r16)
    1ea4:	1886703a 	and	r3,r3,r2
    1ea8:	003f9706 	br	1d08 <_malloc_r+0x478>
    1eac:	52800017 	ldw	r10,0(r10)
    1eb0:	18ffffc4 	addi	r3,r3,-1
    1eb4:	50805c1e 	bne	r10,r2,2028 <_malloc_r+0x798>
    1eb8:	190000cc 	andi	r4,r3,3
    1ebc:	50bffe04 	addi	r2,r10,-8
    1ec0:	203ffa1e 	bne	r4,zero,1eac <_malloc_r+0x61c>
    1ec4:	98800117 	ldw	r2,4(r19)
    1ec8:	0146303a 	nor	r3,zero,r5
    1ecc:	1884703a 	and	r2,r3,r2
    1ed0:	98800115 	stw	r2,4(r19)
    1ed4:	294b883a 	add	r5,r5,r5
    1ed8:	117f2e36 	bltu	r2,r5,1b94 <_malloc_r+0x304>
    1edc:	283f2d26 	beq	r5,zero,1b94 <_malloc_r+0x304>
    1ee0:	1146703a 	and	r3,r2,r5
    1ee4:	1800521e 	bne	r3,zero,2030 <_malloc_r+0x7a0>
    1ee8:	6007883a 	mov	r3,r12
    1eec:	294b883a 	add	r5,r5,r5
    1ef0:	1148703a 	and	r4,r2,r5
    1ef4:	18c00104 	addi	r3,r3,4
    1ef8:	203ffc26 	beq	r4,zero,1eec <_malloc_r+0x65c>
    1efc:	003ef006 	br	1ac0 <_malloc_r+0x230>
    1f00:	00805504 	movi	r2,340
    1f04:	10c01336 	bltu	r2,r3,1f54 <_malloc_r+0x6c4>
    1f08:	8806d3fa 	srli	r3,r17,15
    1f0c:	19c01dc4 	addi	r7,r3,119
    1f10:	39cb883a 	add	r5,r7,r7
    1f14:	003ea206 	br	19a0 <_malloc_r+0x110>
    1f18:	00c40004 	movi	r3,4096
    1f1c:	003f4d06 	br	1c54 <_malloc_r+0x3c4>
    1f20:	00800044 	movi	r2,1
    1f24:	a0800115 	stw	r2,4(r20)
    1f28:	a021883a 	mov	r16,r20
    1f2c:	0007883a 	mov	r3,zero
    1f30:	003f7506 	br	1d08 <_malloc_r+0x478>
    1f34:	200bd0ba 	srai	r5,r4,2
    1f38:	01800044 	movi	r6,1
    1f3c:	41000117 	ldw	r4,4(r8)
    1f40:	314a983a 	sll	r5,r6,r5
    1f44:	100d883a 	mov	r6,r2
    1f48:	2908b03a 	or	r4,r5,r4
    1f4c:	41000115 	stw	r4,4(r8)
    1f50:	003f9d06 	br	1dc8 <_malloc_r+0x538>
    1f54:	00815504 	movi	r2,1364
    1f58:	10c01336 	bltu	r2,r3,1fa8 <_malloc_r+0x718>
    1f5c:	8806d4ba 	srli	r3,r17,18
    1f60:	19c01f04 	addi	r7,r3,124
    1f64:	39cb883a 	add	r5,r7,r7
    1f68:	003e8d06 	br	19a0 <_malloc_r+0x110>
    1f6c:	ad400404 	addi	r21,r21,16
    1f70:	003f1d06 	br	1be8 <_malloc_r+0x358>
    1f74:	01001504 	movi	r4,84
    1f78:	20801c36 	bltu	r4,r2,1fec <_malloc_r+0x75c>
    1f7c:	3804d33a 	srli	r2,r7,12
    1f80:	11001b84 	addi	r4,r2,110
    1f84:	210b883a 	add	r5,r4,r4
    1f88:	003f8006 	br	1d8c <_malloc_r+0x4fc>
    1f8c:	3083ffcc 	andi	r2,r6,4095
    1f90:	103f241e 	bne	r2,zero,1c24 <_malloc_r+0x394>
    1f94:	99000217 	ldw	r4,8(r19)
    1f98:	ad85883a 	add	r2,r21,r22
    1f9c:	10800054 	ori	r2,r2,1
    1fa0:	20800115 	stw	r2,4(r4)
    1fa4:	003f4a06 	br	1cd0 <_malloc_r+0x440>
    1fa8:	01403f04 	movi	r5,252
    1fac:	01c01f84 	movi	r7,126
    1fb0:	003e7b06 	br	19a0 <_malloc_r+0x110>
    1fb4:	00c00044 	movi	r3,1
    1fb8:	002b883a 	mov	r21,zero
    1fbc:	003f3006 	br	1c80 <_malloc_r+0x3f0>
    1fc0:	00800074 	movhi	r2,1
    1fc4:	10a1a404 	addi	r2,r2,-31088
    1fc8:	15000015 	stw	r20,0(r2)
    1fcc:	003f1b06 	br	1c3c <_malloc_r+0x3ac>
    1fd0:	9009883a 	mov	r4,r18
    1fd4:	81400204 	addi	r5,r16,8
    1fd8:	00028d00 	call	28d0 <_free_r>
    1fdc:	00800074 	movhi	r2,1
    1fe0:	10a85704 	addi	r2,r2,-24228
    1fe4:	10c00017 	ldw	r3,0(r2)
    1fe8:	003f3906 	br	1cd0 <_malloc_r+0x440>
    1fec:	01005504 	movi	r4,340
    1ff0:	20800436 	bltu	r4,r2,2004 <_malloc_r+0x774>
    1ff4:	3804d3fa 	srli	r2,r7,15
    1ff8:	11001dc4 	addi	r4,r2,119
    1ffc:	210b883a 	add	r5,r4,r4
    2000:	003f6206 	br	1d8c <_malloc_r+0x4fc>
    2004:	01015504 	movi	r4,1364
    2008:	20800436 	bltu	r4,r2,201c <_malloc_r+0x78c>
    200c:	3804d4ba 	srli	r2,r7,18
    2010:	11001f04 	addi	r4,r2,124
    2014:	210b883a 	add	r5,r4,r4
    2018:	003f5c06 	br	1d8c <_malloc_r+0x4fc>
    201c:	01403f04 	movi	r5,252
    2020:	01001f84 	movi	r4,126
    2024:	003f5906 	br	1d8c <_malloc_r+0x4fc>
    2028:	98800117 	ldw	r2,4(r19)
    202c:	003fa906 	br	1ed4 <_malloc_r+0x644>
    2030:	6007883a 	mov	r3,r12
    2034:	003ea206 	br	1ac0 <_malloc_r+0x230>

00002038 <_puts_r>:
    2038:	defff604 	addi	sp,sp,-40
    203c:	dc000715 	stw	r16,28(sp)
    2040:	2021883a 	mov	r16,r4
    2044:	2809883a 	mov	r4,r5
    2048:	dc400815 	stw	r17,32(sp)
    204c:	dfc00915 	stw	ra,36(sp)
    2050:	2823883a 	mov	r17,r5
    2054:	00027140 	call	2714 <strlen>
    2058:	00c00074 	movhi	r3,1
    205c:	18e1a704 	addi	r3,r3,-31076
    2060:	18c00017 	ldw	r3,0(r3)
    2064:	11000044 	addi	r4,r2,1
    2068:	d8800115 	stw	r2,4(sp)
    206c:	18c00217 	ldw	r3,8(r3)
    2070:	01400034 	movhi	r5,0
    2074:	295b0a04 	addi	r5,r5,27688
    2078:	1880030b 	ldhu	r2,12(r3)
    207c:	d9400215 	stw	r5,8(sp)
    2080:	d9000615 	stw	r4,24(sp)
    2084:	01400044 	movi	r5,1
    2088:	01000084 	movi	r4,2
    208c:	d9000515 	stw	r4,20(sp)
    2090:	dc400015 	stw	r17,0(sp)
    2094:	d9400315 	stw	r5,12(sp)
    2098:	dec00415 	stw	sp,16(sp)
    209c:	1108000c 	andi	r4,r2,8192
    20a0:	2000061e 	bne	r4,zero,20bc <_puts_r+0x84>
    20a4:	19401917 	ldw	r5,100(r3)
    20a8:	0137ffc4 	movi	r4,-8193
    20ac:	10880014 	ori	r2,r2,8192
    20b0:	2908703a 	and	r4,r5,r4
    20b4:	1880030d 	sth	r2,12(r3)
    20b8:	19001915 	stw	r4,100(r3)
    20bc:	81400217 	ldw	r5,8(r16)
    20c0:	8009883a 	mov	r4,r16
    20c4:	d9800404 	addi	r6,sp,16
    20c8:	0002bc00 	call	2bc0 <__sfvwrite_r>
    20cc:	1000061e 	bne	r2,zero,20e8 <_puts_r+0xb0>
    20d0:	00800284 	movi	r2,10
    20d4:	dfc00917 	ldw	ra,36(sp)
    20d8:	dc400817 	ldw	r17,32(sp)
    20dc:	dc000717 	ldw	r16,28(sp)
    20e0:	dec00a04 	addi	sp,sp,40
    20e4:	f800283a 	ret
    20e8:	00bfffc4 	movi	r2,-1
    20ec:	003ff906 	br	20d4 <_puts_r+0x9c>

000020f0 <puts>:
    20f0:	00800074 	movhi	r2,1
    20f4:	10a1a704 	addi	r2,r2,-31076
    20f8:	200b883a 	mov	r5,r4
    20fc:	11000017 	ldw	r4,0(r2)
    2100:	00020381 	jmpi	2038 <_puts_r>

00002104 <realloc>:
    2104:	00c00074 	movhi	r3,1
    2108:	18e1a704 	addi	r3,r3,-31076
    210c:	2005883a 	mov	r2,r4
    2110:	19000017 	ldw	r4,0(r3)
    2114:	280d883a 	mov	r6,r5
    2118:	100b883a 	mov	r5,r2
    211c:	00021201 	jmpi	2120 <_realloc_r>

00002120 <_realloc_r>:
    2120:	defff604 	addi	sp,sp,-40
    2124:	dcc00315 	stw	r19,12(sp)
    2128:	dc400115 	stw	r17,4(sp)
    212c:	dfc00915 	stw	ra,36(sp)
    2130:	df000815 	stw	fp,32(sp)
    2134:	ddc00715 	stw	r23,28(sp)
    2138:	dd800615 	stw	r22,24(sp)
    213c:	dd400515 	stw	r21,20(sp)
    2140:	dd000415 	stw	r20,16(sp)
    2144:	dc800215 	stw	r18,8(sp)
    2148:	dc000015 	stw	r16,0(sp)
    214c:	2827883a 	mov	r19,r5
    2150:	3023883a 	mov	r17,r6
    2154:	2800bf26 	beq	r5,zero,2454 <_realloc_r+0x334>
    2158:	2025883a 	mov	r18,r4
    215c:	00049780 	call	4978 <__malloc_lock>
    2160:	98ffff17 	ldw	r3,-4(r19)
    2164:	01bfff04 	movi	r6,-4
    2168:	890002c4 	addi	r4,r17,11
    216c:	01c00584 	movi	r7,22
    2170:	9d7ffe04 	addi	r21,r19,-8
    2174:	19a0703a 	and	r16,r3,r6
    2178:	39003f2e 	bgeu	r7,r4,2278 <_realloc_r+0x158>
    217c:	053ffe04 	movi	r20,-8
    2180:	2528703a 	and	r20,r4,r20
    2184:	a00f883a 	mov	r7,r20
    2188:	a0008216 	blt	r20,zero,2394 <_realloc_r+0x274>
    218c:	a4408136 	bltu	r20,r17,2394 <_realloc_r+0x274>
    2190:	81c03c0e 	bge	r16,r7,2284 <_realloc_r+0x164>
    2194:	07000034 	movhi	fp,0
    2198:	e71b1704 	addi	fp,fp,27740
    219c:	e1000217 	ldw	r4,8(fp)
    21a0:	ac05883a 	add	r2,r21,r16
    21a4:	2080bf26 	beq	r4,r2,24a4 <_realloc_r+0x384>
    21a8:	11000117 	ldw	r4,4(r2)
    21ac:	023fff84 	movi	r8,-2
    21b0:	2210703a 	and	r8,r4,r8
    21b4:	1211883a 	add	r8,r2,r8
    21b8:	41400117 	ldw	r5,4(r8)
    21bc:	2940004c 	andi	r5,r5,1
    21c0:	28004a1e 	bne	r5,zero,22ec <_realloc_r+0x1cc>
    21c4:	017fff04 	movi	r5,-4
    21c8:	2148703a 	and	r4,r4,r5
    21cc:	2409883a 	add	r4,r4,r16
    21d0:	21c0ad0e 	bge	r4,r7,2488 <_realloc_r+0x368>
    21d4:	18c0004c 	andi	r3,r3,1
    21d8:	18007f1e 	bne	r3,zero,23d8 <_realloc_r+0x2b8>
    21dc:	9dfffe17 	ldw	r23,-8(r19)
    21e0:	adefc83a 	sub	r23,r21,r23
    21e4:	bd800117 	ldw	r22,4(r23)
    21e8:	b14a703a 	and	r5,r22,r5
    21ec:	216d883a 	add	r22,r4,r5
    21f0:	b1c04516 	blt	r22,r7,2308 <_realloc_r+0x1e8>
    21f4:	10c00317 	ldw	r3,12(r2)
    21f8:	10800217 	ldw	r2,8(r2)
    21fc:	81bfff04 	addi	r6,r16,-4
    2200:	bc400204 	addi	r17,r23,8
    2204:	10c00315 	stw	r3,12(r2)
    2208:	18800215 	stw	r2,8(r3)
    220c:	b9400217 	ldw	r5,8(r23)
    2210:	b8c00317 	ldw	r3,12(r23)
    2214:	00800904 	movi	r2,36
    2218:	28c00315 	stw	r3,12(r5)
    221c:	19400215 	stw	r5,8(r3)
    2220:	1180ef36 	bltu	r2,r6,25e0 <_realloc_r+0x4c0>
    2224:	008004c4 	movi	r2,19
    2228:	1180da2e 	bgeu	r2,r6,2594 <_realloc_r+0x474>
    222c:	98800017 	ldw	r2,0(r19)
    2230:	b8800215 	stw	r2,8(r23)
    2234:	98800117 	ldw	r2,4(r19)
    2238:	b8800315 	stw	r2,12(r23)
    223c:	008006c4 	movi	r2,27
    2240:	1180fc2e 	bgeu	r2,r6,2634 <_realloc_r+0x514>
    2244:	98800217 	ldw	r2,8(r19)
    2248:	b8800415 	stw	r2,16(r23)
    224c:	98800317 	ldw	r2,12(r19)
    2250:	b8800515 	stw	r2,20(r23)
    2254:	00800904 	movi	r2,36
    2258:	3080421e 	bne	r6,r2,2364 <_realloc_r+0x244>
    225c:	98800417 	ldw	r2,16(r19)
    2260:	9cc00604 	addi	r19,r19,24
    2264:	b8c00804 	addi	r3,r23,32
    2268:	b8800615 	stw	r2,24(r23)
    226c:	98bfff17 	ldw	r2,-4(r19)
    2270:	b8800715 	stw	r2,28(r23)
    2274:	00003d06 	br	236c <_realloc_r+0x24c>
    2278:	01c00404 	movi	r7,16
    227c:	3829883a 	mov	r20,r7
    2280:	003fc206 	br	218c <_realloc_r+0x6c>
    2284:	9823883a 	mov	r17,r19
    2288:	850fc83a 	sub	r7,r16,r20
    228c:	008003c4 	movi	r2,15
    2290:	18c0004c 	andi	r3,r3,1
    2294:	11c04336 	bltu	r2,r7,23a4 <_realloc_r+0x284>
    2298:	1c06b03a 	or	r3,r3,r16
    229c:	a8c00115 	stw	r3,4(r21)
    22a0:	ac21883a 	add	r16,r21,r16
    22a4:	80c00117 	ldw	r3,4(r16)
    22a8:	18c00054 	ori	r3,r3,1
    22ac:	80c00115 	stw	r3,4(r16)
    22b0:	9009883a 	mov	r4,r18
    22b4:	00049980 	call	4998 <__malloc_unlock>
    22b8:	8805883a 	mov	r2,r17
    22bc:	dfc00917 	ldw	ra,36(sp)
    22c0:	df000817 	ldw	fp,32(sp)
    22c4:	ddc00717 	ldw	r23,28(sp)
    22c8:	dd800617 	ldw	r22,24(sp)
    22cc:	dd400517 	ldw	r21,20(sp)
    22d0:	dd000417 	ldw	r20,16(sp)
    22d4:	dcc00317 	ldw	r19,12(sp)
    22d8:	dc800217 	ldw	r18,8(sp)
    22dc:	dc400117 	ldw	r17,4(sp)
    22e0:	dc000017 	ldw	r16,0(sp)
    22e4:	dec00a04 	addi	sp,sp,40
    22e8:	f800283a 	ret
    22ec:	18c0004c 	andi	r3,r3,1
    22f0:	1800391e 	bne	r3,zero,23d8 <_realloc_r+0x2b8>
    22f4:	9dfffe17 	ldw	r23,-8(r19)
    22f8:	00bfff04 	movi	r2,-4
    22fc:	adefc83a 	sub	r23,r21,r23
    2300:	b9400117 	ldw	r5,4(r23)
    2304:	288a703a 	and	r5,r5,r2
    2308:	2c2d883a 	add	r22,r5,r16
    230c:	b1c03216 	blt	r22,r7,23d8 <_realloc_r+0x2b8>
    2310:	b8800317 	ldw	r2,12(r23)
    2314:	b8c00217 	ldw	r3,8(r23)
    2318:	81bfff04 	addi	r6,r16,-4
    231c:	01000904 	movi	r4,36
    2320:	18800315 	stw	r2,12(r3)
    2324:	10c00215 	stw	r3,8(r2)
    2328:	bc400204 	addi	r17,r23,8
    232c:	2180ac36 	bltu	r4,r6,25e0 <_realloc_r+0x4c0>
    2330:	008004c4 	movi	r2,19
    2334:	1180972e 	bgeu	r2,r6,2594 <_realloc_r+0x474>
    2338:	98800017 	ldw	r2,0(r19)
    233c:	b8800215 	stw	r2,8(r23)
    2340:	98800117 	ldw	r2,4(r19)
    2344:	b8800315 	stw	r2,12(r23)
    2348:	008006c4 	movi	r2,27
    234c:	1180b92e 	bgeu	r2,r6,2634 <_realloc_r+0x514>
    2350:	98800217 	ldw	r2,8(r19)
    2354:	b8800415 	stw	r2,16(r23)
    2358:	98800317 	ldw	r2,12(r19)
    235c:	b8800515 	stw	r2,20(r23)
    2360:	313fbe26 	beq	r6,r4,225c <_realloc_r+0x13c>
    2364:	b8c00604 	addi	r3,r23,24
    2368:	9cc00404 	addi	r19,r19,16
    236c:	98800017 	ldw	r2,0(r19)
    2370:	b021883a 	mov	r16,r22
    2374:	b82b883a 	mov	r21,r23
    2378:	18800015 	stw	r2,0(r3)
    237c:	98800117 	ldw	r2,4(r19)
    2380:	18800115 	stw	r2,4(r3)
    2384:	98800217 	ldw	r2,8(r19)
    2388:	18800215 	stw	r2,8(r3)
    238c:	b8c00117 	ldw	r3,4(r23)
    2390:	003fbd06 	br	2288 <_realloc_r+0x168>
    2394:	00800304 	movi	r2,12
    2398:	90800015 	stw	r2,0(r18)
    239c:	0005883a 	mov	r2,zero
    23a0:	003fc606 	br	22bc <_realloc_r+0x19c>
    23a4:	1d06b03a 	or	r3,r3,r20
    23a8:	ad0b883a 	add	r5,r21,r20
    23ac:	a8c00115 	stw	r3,4(r21)
    23b0:	38800054 	ori	r2,r7,1
    23b4:	28800115 	stw	r2,4(r5)
    23b8:	29cf883a 	add	r7,r5,r7
    23bc:	38800117 	ldw	r2,4(r7)
    23c0:	9009883a 	mov	r4,r18
    23c4:	29400204 	addi	r5,r5,8
    23c8:	10800054 	ori	r2,r2,1
    23cc:	38800115 	stw	r2,4(r7)
    23d0:	00028d00 	call	28d0 <_free_r>
    23d4:	003fb606 	br	22b0 <_realloc_r+0x190>
    23d8:	880b883a 	mov	r5,r17
    23dc:	9009883a 	mov	r4,r18
    23e0:	00018900 	call	1890 <_malloc_r>
    23e4:	1023883a 	mov	r17,r2
    23e8:	1000aa26 	beq	r2,zero,2694 <_realloc_r+0x574>
    23ec:	98ffff17 	ldw	r3,-4(r19)
    23f0:	113ffe04 	addi	r4,r2,-8
    23f4:	00bfff84 	movi	r2,-2
    23f8:	1884703a 	and	r2,r3,r2
    23fc:	a885883a 	add	r2,r21,r2
    2400:	20808626 	beq	r4,r2,261c <_realloc_r+0x4fc>
    2404:	81bfff04 	addi	r6,r16,-4
    2408:	00800904 	movi	r2,36
    240c:	11807036 	bltu	r2,r6,25d0 <_realloc_r+0x4b0>
    2410:	00c004c4 	movi	r3,19
    2414:	19805636 	bltu	r3,r6,2570 <_realloc_r+0x450>
    2418:	8805883a 	mov	r2,r17
    241c:	9807883a 	mov	r3,r19
    2420:	19000017 	ldw	r4,0(r3)
    2424:	11000015 	stw	r4,0(r2)
    2428:	19000117 	ldw	r4,4(r3)
    242c:	11000115 	stw	r4,4(r2)
    2430:	18c00217 	ldw	r3,8(r3)
    2434:	10c00215 	stw	r3,8(r2)
    2438:	980b883a 	mov	r5,r19
    243c:	9009883a 	mov	r4,r18
    2440:	00028d00 	call	28d0 <_free_r>
    2444:	9009883a 	mov	r4,r18
    2448:	00049980 	call	4998 <__malloc_unlock>
    244c:	8805883a 	mov	r2,r17
    2450:	003f9a06 	br	22bc <_realloc_r+0x19c>
    2454:	300b883a 	mov	r5,r6
    2458:	dfc00917 	ldw	ra,36(sp)
    245c:	df000817 	ldw	fp,32(sp)
    2460:	ddc00717 	ldw	r23,28(sp)
    2464:	dd800617 	ldw	r22,24(sp)
    2468:	dd400517 	ldw	r21,20(sp)
    246c:	dd000417 	ldw	r20,16(sp)
    2470:	dcc00317 	ldw	r19,12(sp)
    2474:	dc800217 	ldw	r18,8(sp)
    2478:	dc400117 	ldw	r17,4(sp)
    247c:	dc000017 	ldw	r16,0(sp)
    2480:	dec00a04 	addi	sp,sp,40
    2484:	00018901 	jmpi	1890 <_malloc_r>
    2488:	11400317 	ldw	r5,12(r2)
    248c:	10800217 	ldw	r2,8(r2)
    2490:	9823883a 	mov	r17,r19
    2494:	2021883a 	mov	r16,r4
    2498:	11400315 	stw	r5,12(r2)
    249c:	28800215 	stw	r2,8(r5)
    24a0:	003f7906 	br	2288 <_realloc_r+0x168>
    24a4:	21000117 	ldw	r4,4(r4)
    24a8:	00bfff04 	movi	r2,-4
    24ac:	a1800404 	addi	r6,r20,16
    24b0:	2088703a 	and	r4,r4,r2
    24b4:	2409883a 	add	r4,r4,r16
    24b8:	2180380e 	bge	r4,r6,259c <_realloc_r+0x47c>
    24bc:	18c0004c 	andi	r3,r3,1
    24c0:	183fc51e 	bne	r3,zero,23d8 <_realloc_r+0x2b8>
    24c4:	9dfffe17 	ldw	r23,-8(r19)
    24c8:	adefc83a 	sub	r23,r21,r23
    24cc:	b9400117 	ldw	r5,4(r23)
    24d0:	288a703a 	and	r5,r5,r2
    24d4:	216d883a 	add	r22,r4,r5
    24d8:	b1bf8b16 	blt	r22,r6,2308 <_realloc_r+0x1e8>
    24dc:	b8800317 	ldw	r2,12(r23)
    24e0:	b8c00217 	ldw	r3,8(r23)
    24e4:	81bfff04 	addi	r6,r16,-4
    24e8:	01000904 	movi	r4,36
    24ec:	18800315 	stw	r2,12(r3)
    24f0:	10c00215 	stw	r3,8(r2)
    24f4:	bc400204 	addi	r17,r23,8
    24f8:	21805a36 	bltu	r4,r6,2664 <_realloc_r+0x544>
    24fc:	008004c4 	movi	r2,19
    2500:	1180562e 	bgeu	r2,r6,265c <_realloc_r+0x53c>
    2504:	98800017 	ldw	r2,0(r19)
    2508:	b8800215 	stw	r2,8(r23)
    250c:	98800117 	ldw	r2,4(r19)
    2510:	b8800315 	stw	r2,12(r23)
    2514:	008006c4 	movi	r2,27
    2518:	11805636 	bltu	r2,r6,2674 <_realloc_r+0x554>
    251c:	b8800404 	addi	r2,r23,16
    2520:	9cc00204 	addi	r19,r19,8
    2524:	98c00017 	ldw	r3,0(r19)
    2528:	10c00015 	stw	r3,0(r2)
    252c:	98c00117 	ldw	r3,4(r19)
    2530:	10c00115 	stw	r3,4(r2)
    2534:	98c00217 	ldw	r3,8(r19)
    2538:	10c00215 	stw	r3,8(r2)
    253c:	bd07883a 	add	r3,r23,r20
    2540:	b505c83a 	sub	r2,r22,r20
    2544:	e0c00215 	stw	r3,8(fp)
    2548:	10800054 	ori	r2,r2,1
    254c:	18800115 	stw	r2,4(r3)
    2550:	b8800117 	ldw	r2,4(r23)
    2554:	9009883a 	mov	r4,r18
    2558:	1080004c 	andi	r2,r2,1
    255c:	a0a8b03a 	or	r20,r20,r2
    2560:	bd000115 	stw	r20,4(r23)
    2564:	00049980 	call	4998 <__malloc_unlock>
    2568:	8805883a 	mov	r2,r17
    256c:	003f5306 	br	22bc <_realloc_r+0x19c>
    2570:	98c00017 	ldw	r3,0(r19)
    2574:	88c00015 	stw	r3,0(r17)
    2578:	98c00117 	ldw	r3,4(r19)
    257c:	88c00115 	stw	r3,4(r17)
    2580:	00c006c4 	movi	r3,27
    2584:	19801d36 	bltu	r3,r6,25fc <_realloc_r+0x4dc>
    2588:	88800204 	addi	r2,r17,8
    258c:	98c00204 	addi	r3,r19,8
    2590:	003fa306 	br	2420 <_realloc_r+0x300>
    2594:	8807883a 	mov	r3,r17
    2598:	003f7406 	br	236c <_realloc_r+0x24c>
    259c:	ad2b883a 	add	r21,r21,r20
    25a0:	2505c83a 	sub	r2,r4,r20
    25a4:	e5400215 	stw	r21,8(fp)
    25a8:	10800054 	ori	r2,r2,1
    25ac:	a8800115 	stw	r2,4(r21)
    25b0:	98bfff17 	ldw	r2,-4(r19)
    25b4:	9009883a 	mov	r4,r18
    25b8:	1080004c 	andi	r2,r2,1
    25bc:	a0a8b03a 	or	r20,r20,r2
    25c0:	9d3fff15 	stw	r20,-4(r19)
    25c4:	00049980 	call	4998 <__malloc_unlock>
    25c8:	9805883a 	mov	r2,r19
    25cc:	003f3b06 	br	22bc <_realloc_r+0x19c>
    25d0:	8809883a 	mov	r4,r17
    25d4:	980b883a 	mov	r5,r19
    25d8:	00032840 	call	3284 <memmove>
    25dc:	003f9606 	br	2438 <_realloc_r+0x318>
    25e0:	8809883a 	mov	r4,r17
    25e4:	980b883a 	mov	r5,r19
    25e8:	00032840 	call	3284 <memmove>
    25ec:	b8c00117 	ldw	r3,4(r23)
    25f0:	b021883a 	mov	r16,r22
    25f4:	b82b883a 	mov	r21,r23
    25f8:	003f2306 	br	2288 <_realloc_r+0x168>
    25fc:	98c00217 	ldw	r3,8(r19)
    2600:	88c00215 	stw	r3,8(r17)
    2604:	98c00317 	ldw	r3,12(r19)
    2608:	88c00315 	stw	r3,12(r17)
    260c:	30800c26 	beq	r6,r2,2640 <_realloc_r+0x520>
    2610:	88800404 	addi	r2,r17,16
    2614:	98c00404 	addi	r3,r19,16
    2618:	003f8106 	br	2420 <_realloc_r+0x300>
    261c:	893fff17 	ldw	r4,-4(r17)
    2620:	00bfff04 	movi	r2,-4
    2624:	9823883a 	mov	r17,r19
    2628:	2084703a 	and	r2,r4,r2
    262c:	80a1883a 	add	r16,r16,r2
    2630:	003f1506 	br	2288 <_realloc_r+0x168>
    2634:	b8c00404 	addi	r3,r23,16
    2638:	9cc00204 	addi	r19,r19,8
    263c:	003f4b06 	br	236c <_realloc_r+0x24c>
    2640:	99000417 	ldw	r4,16(r19)
    2644:	88800604 	addi	r2,r17,24
    2648:	98c00604 	addi	r3,r19,24
    264c:	89000415 	stw	r4,16(r17)
    2650:	99000517 	ldw	r4,20(r19)
    2654:	89000515 	stw	r4,20(r17)
    2658:	003f7106 	br	2420 <_realloc_r+0x300>
    265c:	8805883a 	mov	r2,r17
    2660:	003fb006 	br	2524 <_realloc_r+0x404>
    2664:	8809883a 	mov	r4,r17
    2668:	980b883a 	mov	r5,r19
    266c:	00032840 	call	3284 <memmove>
    2670:	003fb206 	br	253c <_realloc_r+0x41c>
    2674:	98800217 	ldw	r2,8(r19)
    2678:	b8800415 	stw	r2,16(r23)
    267c:	98800317 	ldw	r2,12(r19)
    2680:	b8800515 	stw	r2,20(r23)
    2684:	31000726 	beq	r6,r4,26a4 <_realloc_r+0x584>
    2688:	b8800604 	addi	r2,r23,24
    268c:	9cc00404 	addi	r19,r19,16
    2690:	003fa406 	br	2524 <_realloc_r+0x404>
    2694:	9009883a 	mov	r4,r18
    2698:	00049980 	call	4998 <__malloc_unlock>
    269c:	0005883a 	mov	r2,zero
    26a0:	003f0606 	br	22bc <_realloc_r+0x19c>
    26a4:	98c00417 	ldw	r3,16(r19)
    26a8:	9cc00604 	addi	r19,r19,24
    26ac:	b8800804 	addi	r2,r23,32
    26b0:	b8c00615 	stw	r3,24(r23)
    26b4:	98ffff17 	ldw	r3,-4(r19)
    26b8:	b8c00715 	stw	r3,28(r23)
    26bc:	003f9906 	br	2524 <_realloc_r+0x404>

000026c0 <_sbrk_r>:
    26c0:	defffd04 	addi	sp,sp,-12
    26c4:	dc000015 	stw	r16,0(sp)
    26c8:	04000074 	movhi	r16,1
    26cc:	dc400115 	stw	r17,4(sp)
    26d0:	84285004 	addi	r16,r16,-24256
    26d4:	2023883a 	mov	r17,r4
    26d8:	2809883a 	mov	r4,r5
    26dc:	dfc00215 	stw	ra,8(sp)
    26e0:	80000015 	stw	zero,0(r16)
    26e4:	0004b640 	call	4b64 <sbrk>
    26e8:	00ffffc4 	movi	r3,-1
    26ec:	10c00526 	beq	r2,r3,2704 <_sbrk_r+0x44>
    26f0:	dfc00217 	ldw	ra,8(sp)
    26f4:	dc400117 	ldw	r17,4(sp)
    26f8:	dc000017 	ldw	r16,0(sp)
    26fc:	dec00304 	addi	sp,sp,12
    2700:	f800283a 	ret
    2704:	80c00017 	ldw	r3,0(r16)
    2708:	183ff926 	beq	r3,zero,26f0 <_sbrk_r+0x30>
    270c:	88c00015 	stw	r3,0(r17)
    2710:	003ff706 	br	26f0 <_sbrk_r+0x30>

00002714 <strlen>:
    2714:	208000cc 	andi	r2,r4,3
    2718:	10002026 	beq	r2,zero,279c <strlen+0x88>
    271c:	20800007 	ldb	r2,0(r4)
    2720:	10002026 	beq	r2,zero,27a4 <strlen+0x90>
    2724:	2005883a 	mov	r2,r4
    2728:	00000206 	br	2734 <strlen+0x20>
    272c:	10c00007 	ldb	r3,0(r2)
    2730:	18001826 	beq	r3,zero,2794 <strlen+0x80>
    2734:	10800044 	addi	r2,r2,1
    2738:	10c000cc 	andi	r3,r2,3
    273c:	183ffb1e 	bne	r3,zero,272c <strlen+0x18>
    2740:	10c00017 	ldw	r3,0(r2)
    2744:	01ffbff4 	movhi	r7,65279
    2748:	39ffbfc4 	addi	r7,r7,-257
    274c:	00ca303a 	nor	r5,zero,r3
    2750:	01a02074 	movhi	r6,32897
    2754:	19c7883a 	add	r3,r3,r7
    2758:	31a02004 	addi	r6,r6,-32640
    275c:	1946703a 	and	r3,r3,r5
    2760:	1986703a 	and	r3,r3,r6
    2764:	1800091e 	bne	r3,zero,278c <strlen+0x78>
    2768:	10800104 	addi	r2,r2,4
    276c:	10c00017 	ldw	r3,0(r2)
    2770:	19cb883a 	add	r5,r3,r7
    2774:	00c6303a 	nor	r3,zero,r3
    2778:	28c6703a 	and	r3,r5,r3
    277c:	1986703a 	and	r3,r3,r6
    2780:	183ff926 	beq	r3,zero,2768 <strlen+0x54>
    2784:	00000106 	br	278c <strlen+0x78>
    2788:	10800044 	addi	r2,r2,1
    278c:	10c00007 	ldb	r3,0(r2)
    2790:	183ffd1e 	bne	r3,zero,2788 <strlen+0x74>
    2794:	1105c83a 	sub	r2,r2,r4
    2798:	f800283a 	ret
    279c:	2005883a 	mov	r2,r4
    27a0:	003fe706 	br	2740 <strlen+0x2c>
    27a4:	0005883a 	mov	r2,zero
    27a8:	f800283a 	ret

000027ac <_malloc_trim_r>:
    27ac:	defffb04 	addi	sp,sp,-20
    27b0:	dcc00315 	stw	r19,12(sp)
    27b4:	04c00034 	movhi	r19,0
    27b8:	dc800215 	stw	r18,8(sp)
    27bc:	dc400115 	stw	r17,4(sp)
    27c0:	dc000015 	stw	r16,0(sp)
    27c4:	dfc00415 	stw	ra,16(sp)
    27c8:	2821883a 	mov	r16,r5
    27cc:	9cdb1704 	addi	r19,r19,27740
    27d0:	2025883a 	mov	r18,r4
    27d4:	00049780 	call	4978 <__malloc_lock>
    27d8:	98800217 	ldw	r2,8(r19)
    27dc:	14400117 	ldw	r17,4(r2)
    27e0:	00bfff04 	movi	r2,-4
    27e4:	88a2703a 	and	r17,r17,r2
    27e8:	8c21c83a 	sub	r16,r17,r16
    27ec:	8403fbc4 	addi	r16,r16,4079
    27f0:	8020d33a 	srli	r16,r16,12
    27f4:	0083ffc4 	movi	r2,4095
    27f8:	843fffc4 	addi	r16,r16,-1
    27fc:	8020933a 	slli	r16,r16,12
    2800:	1400060e 	bge	r2,r16,281c <_malloc_trim_r+0x70>
    2804:	9009883a 	mov	r4,r18
    2808:	000b883a 	mov	r5,zero
    280c:	00026c00 	call	26c0 <_sbrk_r>
    2810:	98c00217 	ldw	r3,8(r19)
    2814:	1c47883a 	add	r3,r3,r17
    2818:	10c00a26 	beq	r2,r3,2844 <_malloc_trim_r+0x98>
    281c:	9009883a 	mov	r4,r18
    2820:	00049980 	call	4998 <__malloc_unlock>
    2824:	0005883a 	mov	r2,zero
    2828:	dfc00417 	ldw	ra,16(sp)
    282c:	dcc00317 	ldw	r19,12(sp)
    2830:	dc800217 	ldw	r18,8(sp)
    2834:	dc400117 	ldw	r17,4(sp)
    2838:	dc000017 	ldw	r16,0(sp)
    283c:	dec00504 	addi	sp,sp,20
    2840:	f800283a 	ret
    2844:	9009883a 	mov	r4,r18
    2848:	040bc83a 	sub	r5,zero,r16
    284c:	00026c00 	call	26c0 <_sbrk_r>
    2850:	00ffffc4 	movi	r3,-1
    2854:	10c00d26 	beq	r2,r3,288c <_malloc_trim_r+0xe0>
    2858:	00c00074 	movhi	r3,1
    285c:	18e85704 	addi	r3,r3,-24228
    2860:	18800017 	ldw	r2,0(r3)
    2864:	99000217 	ldw	r4,8(r19)
    2868:	8c23c83a 	sub	r17,r17,r16
    286c:	8c400054 	ori	r17,r17,1
    2870:	1421c83a 	sub	r16,r2,r16
    2874:	24400115 	stw	r17,4(r4)
    2878:	9009883a 	mov	r4,r18
    287c:	1c000015 	stw	r16,0(r3)
    2880:	00049980 	call	4998 <__malloc_unlock>
    2884:	00800044 	movi	r2,1
    2888:	003fe706 	br	2828 <_malloc_trim_r+0x7c>
    288c:	9009883a 	mov	r4,r18
    2890:	000b883a 	mov	r5,zero
    2894:	00026c00 	call	26c0 <_sbrk_r>
    2898:	99000217 	ldw	r4,8(r19)
    289c:	014003c4 	movi	r5,15
    28a0:	1107c83a 	sub	r3,r2,r4
    28a4:	28ffdd0e 	bge	r5,r3,281c <_malloc_trim_r+0x70>
    28a8:	01400074 	movhi	r5,1
    28ac:	2961a404 	addi	r5,r5,-31088
    28b0:	29400017 	ldw	r5,0(r5)
    28b4:	18c00054 	ori	r3,r3,1
    28b8:	20c00115 	stw	r3,4(r4)
    28bc:	00c00074 	movhi	r3,1
    28c0:	1145c83a 	sub	r2,r2,r5
    28c4:	18e85704 	addi	r3,r3,-24228
    28c8:	18800015 	stw	r2,0(r3)
    28cc:	003fd306 	br	281c <_malloc_trim_r+0x70>

000028d0 <_free_r>:
    28d0:	28004c26 	beq	r5,zero,2a04 <_free_r+0x134>
    28d4:	defffd04 	addi	sp,sp,-12
    28d8:	dc400115 	stw	r17,4(sp)
    28dc:	dc000015 	stw	r16,0(sp)
    28e0:	2023883a 	mov	r17,r4
    28e4:	2821883a 	mov	r16,r5
    28e8:	dfc00215 	stw	ra,8(sp)
    28ec:	00049780 	call	4978 <__malloc_lock>
    28f0:	813fff17 	ldw	r4,-4(r16)
    28f4:	00bfff84 	movi	r2,-2
    28f8:	02400034 	movhi	r9,0
    28fc:	81bffe04 	addi	r6,r16,-8
    2900:	2084703a 	and	r2,r4,r2
    2904:	4a5b1704 	addi	r9,r9,27740
    2908:	308b883a 	add	r5,r6,r2
    290c:	2a000117 	ldw	r8,4(r5)
    2910:	49c00217 	ldw	r7,8(r9)
    2914:	00ffff04 	movi	r3,-4
    2918:	40c6703a 	and	r3,r8,r3
    291c:	39405326 	beq	r7,r5,2a6c <_free_r+0x19c>
    2920:	28c00115 	stw	r3,4(r5)
    2924:	2100004c 	andi	r4,r4,1
    2928:	2000091e 	bne	r4,zero,2950 <_free_r+0x80>
    292c:	81fffe17 	ldw	r7,-8(r16)
    2930:	4a000204 	addi	r8,r9,8
    2934:	31cdc83a 	sub	r6,r6,r7
    2938:	31000217 	ldw	r4,8(r6)
    293c:	11c5883a 	add	r2,r2,r7
    2940:	22006126 	beq	r4,r8,2ac8 <_free_r+0x1f8>
    2944:	31c00317 	ldw	r7,12(r6)
    2948:	21c00315 	stw	r7,12(r4)
    294c:	39000215 	stw	r4,8(r7)
    2950:	28c9883a 	add	r4,r5,r3
    2954:	21c00117 	ldw	r7,4(r4)
    2958:	39c0004c 	andi	r7,r7,1
    295c:	38000d1e 	bne	r7,zero,2994 <_free_r+0xc4>
    2960:	29000217 	ldw	r4,8(r5)
    2964:	10c5883a 	add	r2,r2,r3
    2968:	00c00034 	movhi	r3,0
    296c:	18db1904 	addi	r3,r3,27748
    2970:	20c07526 	beq	r4,r3,2b48 <_free_r+0x278>
    2974:	29c00317 	ldw	r7,12(r5)
    2978:	11400054 	ori	r5,r2,1
    297c:	3087883a 	add	r3,r6,r2
    2980:	21c00315 	stw	r7,12(r4)
    2984:	39000215 	stw	r4,8(r7)
    2988:	31400115 	stw	r5,4(r6)
    298c:	18800015 	stw	r2,0(r3)
    2990:	00000406 	br	29a4 <_free_r+0xd4>
    2994:	10c00054 	ori	r3,r2,1
    2998:	30c00115 	stw	r3,4(r6)
    299c:	3087883a 	add	r3,r6,r2
    29a0:	18800015 	stw	r2,0(r3)
    29a4:	00c07fc4 	movi	r3,511
    29a8:	18801736 	bltu	r3,r2,2a08 <_free_r+0x138>
    29ac:	1004d0fa 	srli	r2,r2,3
    29b0:	01400044 	movi	r5,1
    29b4:	49000117 	ldw	r4,4(r9)
    29b8:	1087883a 	add	r3,r2,r2
    29bc:	18c7883a 	add	r3,r3,r3
    29c0:	1005d0ba 	srai	r2,r2,2
    29c4:	18c7883a 	add	r3,r3,r3
    29c8:	1a47883a 	add	r3,r3,r9
    29cc:	19c00217 	ldw	r7,8(r3)
    29d0:	2884983a 	sll	r2,r5,r2
    29d4:	30c00315 	stw	r3,12(r6)
    29d8:	31c00215 	stw	r7,8(r6)
    29dc:	1104b03a 	or	r2,r2,r4
    29e0:	19800215 	stw	r6,8(r3)
    29e4:	48800115 	stw	r2,4(r9)
    29e8:	39800315 	stw	r6,12(r7)
    29ec:	8809883a 	mov	r4,r17
    29f0:	dfc00217 	ldw	ra,8(sp)
    29f4:	dc400117 	ldw	r17,4(sp)
    29f8:	dc000017 	ldw	r16,0(sp)
    29fc:	dec00304 	addi	sp,sp,12
    2a00:	00049981 	jmpi	4998 <__malloc_unlock>
    2a04:	f800283a 	ret
    2a08:	1006d27a 	srli	r3,r2,9
    2a0c:	01000104 	movi	r4,4
    2a10:	20c04036 	bltu	r4,r3,2b14 <_free_r+0x244>
    2a14:	1006d1ba 	srli	r3,r2,6
    2a18:	19400e04 	addi	r5,r3,56
    2a1c:	2947883a 	add	r3,r5,r5
    2a20:	18c7883a 	add	r3,r3,r3
    2a24:	18c7883a 	add	r3,r3,r3
    2a28:	1a49883a 	add	r4,r3,r9
    2a2c:	20c00217 	ldw	r3,8(r4)
    2a30:	01c00034 	movhi	r7,0
    2a34:	39db1704 	addi	r7,r7,27740
    2a38:	19003b26 	beq	r3,r4,2b28 <_free_r+0x258>
    2a3c:	01ffff04 	movi	r7,-4
    2a40:	19400117 	ldw	r5,4(r3)
    2a44:	29ca703a 	and	r5,r5,r7
    2a48:	1140022e 	bgeu	r2,r5,2a54 <_free_r+0x184>
    2a4c:	18c00217 	ldw	r3,8(r3)
    2a50:	20fffb1e 	bne	r4,r3,2a40 <_free_r+0x170>
    2a54:	18800317 	ldw	r2,12(r3)
    2a58:	30800315 	stw	r2,12(r6)
    2a5c:	30c00215 	stw	r3,8(r6)
    2a60:	11800215 	stw	r6,8(r2)
    2a64:	19800315 	stw	r6,12(r3)
    2a68:	003fe006 	br	29ec <_free_r+0x11c>
    2a6c:	2100004c 	andi	r4,r4,1
    2a70:	1885883a 	add	r2,r3,r2
    2a74:	2000071e 	bne	r4,zero,2a94 <_free_r+0x1c4>
    2a78:	817ffe17 	ldw	r5,-8(r16)
    2a7c:	314dc83a 	sub	r6,r6,r5
    2a80:	30c00317 	ldw	r3,12(r6)
    2a84:	31000217 	ldw	r4,8(r6)
    2a88:	1145883a 	add	r2,r2,r5
    2a8c:	20c00315 	stw	r3,12(r4)
    2a90:	19000215 	stw	r4,8(r3)
    2a94:	10c00054 	ori	r3,r2,1
    2a98:	30c00115 	stw	r3,4(r6)
    2a9c:	00c00074 	movhi	r3,1
    2aa0:	18e1a504 	addi	r3,r3,-31084
    2aa4:	18c00017 	ldw	r3,0(r3)
    2aa8:	49800215 	stw	r6,8(r9)
    2aac:	10ffcf36 	bltu	r2,r3,29ec <_free_r+0x11c>
    2ab0:	00800074 	movhi	r2,1
    2ab4:	10a84f04 	addi	r2,r2,-24260
    2ab8:	11400017 	ldw	r5,0(r2)
    2abc:	8809883a 	mov	r4,r17
    2ac0:	00027ac0 	call	27ac <_malloc_trim_r>
    2ac4:	003fc906 	br	29ec <_free_r+0x11c>
    2ac8:	28c9883a 	add	r4,r5,r3
    2acc:	21000117 	ldw	r4,4(r4)
    2ad0:	2100004c 	andi	r4,r4,1
    2ad4:	20000a1e 	bne	r4,zero,2b00 <_free_r+0x230>
    2ad8:	29000317 	ldw	r4,12(r5)
    2adc:	29400217 	ldw	r5,8(r5)
    2ae0:	10c5883a 	add	r2,r2,r3
    2ae4:	10c00054 	ori	r3,r2,1
    2ae8:	29000315 	stw	r4,12(r5)
    2aec:	21400215 	stw	r5,8(r4)
    2af0:	30c00115 	stw	r3,4(r6)
    2af4:	308d883a 	add	r6,r6,r2
    2af8:	30800015 	stw	r2,0(r6)
    2afc:	003fbb06 	br	29ec <_free_r+0x11c>
    2b00:	10c00054 	ori	r3,r2,1
    2b04:	30c00115 	stw	r3,4(r6)
    2b08:	308d883a 	add	r6,r6,r2
    2b0c:	30800015 	stw	r2,0(r6)
    2b10:	003fb606 	br	29ec <_free_r+0x11c>
    2b14:	01000504 	movi	r4,20
    2b18:	20c01436 	bltu	r4,r3,2b6c <_free_r+0x29c>
    2b1c:	194016c4 	addi	r5,r3,91
    2b20:	2947883a 	add	r3,r5,r5
    2b24:	003fbe06 	br	2a20 <_free_r+0x150>
    2b28:	280bd0ba 	srai	r5,r5,2
    2b2c:	00800044 	movi	r2,1
    2b30:	39000117 	ldw	r4,4(r7)
    2b34:	114a983a 	sll	r5,r2,r5
    2b38:	1805883a 	mov	r2,r3
    2b3c:	2908b03a 	or	r4,r5,r4
    2b40:	39000115 	stw	r4,4(r7)
    2b44:	003fc406 	br	2a58 <_free_r+0x188>
    2b48:	49800515 	stw	r6,20(r9)
    2b4c:	49800415 	stw	r6,16(r9)
    2b50:	10c00054 	ori	r3,r2,1
    2b54:	31000315 	stw	r4,12(r6)
    2b58:	31000215 	stw	r4,8(r6)
    2b5c:	30c00115 	stw	r3,4(r6)
    2b60:	308d883a 	add	r6,r6,r2
    2b64:	30800015 	stw	r2,0(r6)
    2b68:	003fa006 	br	29ec <_free_r+0x11c>
    2b6c:	01001504 	movi	r4,84
    2b70:	20c00436 	bltu	r4,r3,2b84 <_free_r+0x2b4>
    2b74:	1006d33a 	srli	r3,r2,12
    2b78:	19401b84 	addi	r5,r3,110
    2b7c:	2947883a 	add	r3,r5,r5
    2b80:	003fa706 	br	2a20 <_free_r+0x150>
    2b84:	01005504 	movi	r4,340
    2b88:	20c00436 	bltu	r4,r3,2b9c <_free_r+0x2cc>
    2b8c:	1006d3fa 	srli	r3,r2,15
    2b90:	19401dc4 	addi	r5,r3,119
    2b94:	2947883a 	add	r3,r5,r5
    2b98:	003fa106 	br	2a20 <_free_r+0x150>
    2b9c:	01015504 	movi	r4,1364
    2ba0:	20c00436 	bltu	r4,r3,2bb4 <_free_r+0x2e4>
    2ba4:	1006d4ba 	srli	r3,r2,18
    2ba8:	19401f04 	addi	r5,r3,124
    2bac:	2947883a 	add	r3,r5,r5
    2bb0:	003f9b06 	br	2a20 <_free_r+0x150>
    2bb4:	00c03f04 	movi	r3,252
    2bb8:	01401f84 	movi	r5,126
    2bbc:	003f9806 	br	2a20 <_free_r+0x150>

00002bc0 <__sfvwrite_r>:
    2bc0:	30800217 	ldw	r2,8(r6)
    2bc4:	10004526 	beq	r2,zero,2cdc <__sfvwrite_r+0x11c>
    2bc8:	28c0030b 	ldhu	r3,12(r5)
    2bcc:	defff404 	addi	sp,sp,-48
    2bd0:	dd400715 	stw	r21,28(sp)
    2bd4:	dcc00515 	stw	r19,20(sp)
    2bd8:	dc000215 	stw	r16,8(sp)
    2bdc:	dfc00b15 	stw	ra,44(sp)
    2be0:	df000a15 	stw	fp,40(sp)
    2be4:	ddc00915 	stw	r23,36(sp)
    2be8:	dd800815 	stw	r22,32(sp)
    2bec:	dd000615 	stw	r20,24(sp)
    2bf0:	dc800415 	stw	r18,16(sp)
    2bf4:	dc400315 	stw	r17,12(sp)
    2bf8:	1880020c 	andi	r2,r3,8
    2bfc:	2821883a 	mov	r16,r5
    2c00:	202b883a 	mov	r21,r4
    2c04:	3027883a 	mov	r19,r6
    2c08:	10002526 	beq	r2,zero,2ca0 <__sfvwrite_r+0xe0>
    2c0c:	28800417 	ldw	r2,16(r5)
    2c10:	10002326 	beq	r2,zero,2ca0 <__sfvwrite_r+0xe0>
    2c14:	1880008c 	andi	r2,r3,2
    2c18:	9c400017 	ldw	r17,0(r19)
    2c1c:	10003126 	beq	r2,zero,2ce4 <__sfvwrite_r+0x124>
    2c20:	0029883a 	mov	r20,zero
    2c24:	0025883a 	mov	r18,zero
    2c28:	05810004 	movi	r22,1024
    2c2c:	a00d883a 	mov	r6,r20
    2c30:	a809883a 	mov	r4,r21
    2c34:	90002526 	beq	r18,zero,2ccc <__sfvwrite_r+0x10c>
    2c38:	900f883a 	mov	r7,r18
    2c3c:	81400717 	ldw	r5,28(r16)
    2c40:	b480012e 	bgeu	r22,r18,2c48 <__sfvwrite_r+0x88>
    2c44:	01c10004 	movi	r7,1024
    2c48:	80800917 	ldw	r2,36(r16)
    2c4c:	103ee83a 	callr	r2
    2c50:	0080510e 	bge	zero,r2,2d98 <__sfvwrite_r+0x1d8>
    2c54:	98c00217 	ldw	r3,8(r19)
    2c58:	a0a9883a 	add	r20,r20,r2
    2c5c:	90a5c83a 	sub	r18,r18,r2
    2c60:	1885c83a 	sub	r2,r3,r2
    2c64:	98800215 	stw	r2,8(r19)
    2c68:	103ff01e 	bne	r2,zero,2c2c <__sfvwrite_r+0x6c>
    2c6c:	0005883a 	mov	r2,zero
    2c70:	dfc00b17 	ldw	ra,44(sp)
    2c74:	df000a17 	ldw	fp,40(sp)
    2c78:	ddc00917 	ldw	r23,36(sp)
    2c7c:	dd800817 	ldw	r22,32(sp)
    2c80:	dd400717 	ldw	r21,28(sp)
    2c84:	dd000617 	ldw	r20,24(sp)
    2c88:	dcc00517 	ldw	r19,20(sp)
    2c8c:	dc800417 	ldw	r18,16(sp)
    2c90:	dc400317 	ldw	r17,12(sp)
    2c94:	dc000217 	ldw	r16,8(sp)
    2c98:	dec00c04 	addi	sp,sp,48
    2c9c:	f800283a 	ret
    2ca0:	a809883a 	mov	r4,r21
    2ca4:	800b883a 	mov	r5,r16
    2ca8:	00033e00 	call	33e0 <__swsetup_r>
    2cac:	80c0030b 	ldhu	r3,12(r16)
    2cb0:	103fd826 	beq	r2,zero,2c14 <__sfvwrite_r+0x54>
    2cb4:	18c01014 	ori	r3,r3,64
    2cb8:	80c0030d 	sth	r3,12(r16)
    2cbc:	00c00244 	movi	r3,9
    2cc0:	00bfffc4 	movi	r2,-1
    2cc4:	a8c00015 	stw	r3,0(r21)
    2cc8:	003fe906 	br	2c70 <__sfvwrite_r+0xb0>
    2ccc:	8d000017 	ldw	r20,0(r17)
    2cd0:	8c800117 	ldw	r18,4(r17)
    2cd4:	8c400204 	addi	r17,r17,8
    2cd8:	003fd406 	br	2c2c <__sfvwrite_r+0x6c>
    2cdc:	0005883a 	mov	r2,zero
    2ce0:	f800283a 	ret
    2ce4:	1880004c 	andi	r2,r3,1
    2ce8:	1000301e 	bne	r2,zero,2dac <__sfvwrite_r+0x1ec>
    2cec:	002f883a 	mov	r23,zero
    2cf0:	0025883a 	mov	r18,zero
    2cf4:	90001c26 	beq	r18,zero,2d68 <__sfvwrite_r+0x1a8>
    2cf8:	1880800c 	andi	r2,r3,512
    2cfc:	85000217 	ldw	r20,8(r16)
    2d00:	10006c26 	beq	r2,zero,2eb4 <__sfvwrite_r+0x2f4>
    2d04:	a02d883a 	mov	r22,r20
    2d08:	95008536 	bltu	r18,r20,2f20 <__sfvwrite_r+0x360>
    2d0c:	1881200c 	andi	r2,r3,1152
    2d10:	10009d1e 	bne	r2,zero,2f88 <__sfvwrite_r+0x3c8>
    2d14:	81000017 	ldw	r4,0(r16)
    2d18:	a039883a 	mov	fp,r20
    2d1c:	9029883a 	mov	r20,r18
    2d20:	b80b883a 	mov	r5,r23
    2d24:	b00d883a 	mov	r6,r22
    2d28:	00032840 	call	3284 <memmove>
    2d2c:	80c00217 	ldw	r3,8(r16)
    2d30:	81000017 	ldw	r4,0(r16)
    2d34:	9005883a 	mov	r2,r18
    2d38:	1f39c83a 	sub	fp,r3,fp
    2d3c:	258f883a 	add	r7,r4,r22
    2d40:	87000215 	stw	fp,8(r16)
    2d44:	81c00015 	stw	r7,0(r16)
    2d48:	98c00217 	ldw	r3,8(r19)
    2d4c:	b8af883a 	add	r23,r23,r2
    2d50:	90a5c83a 	sub	r18,r18,r2
    2d54:	1d05c83a 	sub	r2,r3,r20
    2d58:	98800215 	stw	r2,8(r19)
    2d5c:	103fc326 	beq	r2,zero,2c6c <__sfvwrite_r+0xac>
    2d60:	80c0030b 	ldhu	r3,12(r16)
    2d64:	903fe41e 	bne	r18,zero,2cf8 <__sfvwrite_r+0x138>
    2d68:	8dc00017 	ldw	r23,0(r17)
    2d6c:	8c800117 	ldw	r18,4(r17)
    2d70:	8c400204 	addi	r17,r17,8
    2d74:	003fdf06 	br	2cf4 <__sfvwrite_r+0x134>
    2d78:	00021200 	call	2120 <_realloc_r>
    2d7c:	102d883a 	mov	r22,r2
    2d80:	1000a01e 	bne	r2,zero,3004 <__sfvwrite_r+0x444>
    2d84:	81400417 	ldw	r5,16(r16)
    2d88:	a809883a 	mov	r4,r21
    2d8c:	00028d00 	call	28d0 <_free_r>
    2d90:	00800304 	movi	r2,12
    2d94:	a8800015 	stw	r2,0(r21)
    2d98:	80c0030b 	ldhu	r3,12(r16)
    2d9c:	00bfffc4 	movi	r2,-1
    2da0:	18c01014 	ori	r3,r3,64
    2da4:	80c0030d 	sth	r3,12(r16)
    2da8:	003fb106 	br	2c70 <__sfvwrite_r+0xb0>
    2dac:	0029883a 	mov	r20,zero
    2db0:	0011883a 	mov	r8,zero
    2db4:	0039883a 	mov	fp,zero
    2db8:	0025883a 	mov	r18,zero
    2dbc:	90001f26 	beq	r18,zero,2e3c <__sfvwrite_r+0x27c>
    2dc0:	40006826 	beq	r8,zero,2f64 <__sfvwrite_r+0x3a4>
    2dc4:	a02f883a 	mov	r23,r20
    2dc8:	9500012e 	bgeu	r18,r20,2dd0 <__sfvwrite_r+0x210>
    2dcc:	902f883a 	mov	r23,r18
    2dd0:	81000017 	ldw	r4,0(r16)
    2dd4:	80800417 	ldw	r2,16(r16)
    2dd8:	b82d883a 	mov	r22,r23
    2ddc:	81800217 	ldw	r6,8(r16)
    2de0:	81c00517 	ldw	r7,20(r16)
    2de4:	1100022e 	bgeu	r2,r4,2df0 <__sfvwrite_r+0x230>
    2de8:	31c7883a 	add	r3,r6,r7
    2dec:	1dc01816 	blt	r3,r23,2e50 <__sfvwrite_r+0x290>
    2df0:	b9c03f16 	blt	r23,r7,2ef0 <__sfvwrite_r+0x330>
    2df4:	80800917 	ldw	r2,36(r16)
    2df8:	81400717 	ldw	r5,28(r16)
    2dfc:	a809883a 	mov	r4,r21
    2e00:	da000115 	stw	r8,4(sp)
    2e04:	e00d883a 	mov	r6,fp
    2e08:	103ee83a 	callr	r2
    2e0c:	102d883a 	mov	r22,r2
    2e10:	da000117 	ldw	r8,4(sp)
    2e14:	00bfe00e 	bge	zero,r2,2d98 <__sfvwrite_r+0x1d8>
    2e18:	a5a9c83a 	sub	r20,r20,r22
    2e1c:	a0001f26 	beq	r20,zero,2e9c <__sfvwrite_r+0x2dc>
    2e20:	98800217 	ldw	r2,8(r19)
    2e24:	e5b9883a 	add	fp,fp,r22
    2e28:	95a5c83a 	sub	r18,r18,r22
    2e2c:	15adc83a 	sub	r22,r2,r22
    2e30:	9d800215 	stw	r22,8(r19)
    2e34:	b03f8d26 	beq	r22,zero,2c6c <__sfvwrite_r+0xac>
    2e38:	903fe11e 	bne	r18,zero,2dc0 <__sfvwrite_r+0x200>
    2e3c:	8f000017 	ldw	fp,0(r17)
    2e40:	8c800117 	ldw	r18,4(r17)
    2e44:	0011883a 	mov	r8,zero
    2e48:	8c400204 	addi	r17,r17,8
    2e4c:	003fdb06 	br	2dbc <__sfvwrite_r+0x1fc>
    2e50:	180d883a 	mov	r6,r3
    2e54:	e00b883a 	mov	r5,fp
    2e58:	da000115 	stw	r8,4(sp)
    2e5c:	d8c00015 	stw	r3,0(sp)
    2e60:	00032840 	call	3284 <memmove>
    2e64:	d8c00017 	ldw	r3,0(sp)
    2e68:	80800017 	ldw	r2,0(r16)
    2e6c:	a809883a 	mov	r4,r21
    2e70:	800b883a 	mov	r5,r16
    2e74:	10c5883a 	add	r2,r2,r3
    2e78:	80800015 	stw	r2,0(r16)
    2e7c:	d8c00015 	stw	r3,0(sp)
    2e80:	00035100 	call	3510 <_fflush_r>
    2e84:	d8c00017 	ldw	r3,0(sp)
    2e88:	da000117 	ldw	r8,4(sp)
    2e8c:	103fc21e 	bne	r2,zero,2d98 <__sfvwrite_r+0x1d8>
    2e90:	182d883a 	mov	r22,r3
    2e94:	a5a9c83a 	sub	r20,r20,r22
    2e98:	a03fe11e 	bne	r20,zero,2e20 <__sfvwrite_r+0x260>
    2e9c:	a809883a 	mov	r4,r21
    2ea0:	800b883a 	mov	r5,r16
    2ea4:	00035100 	call	3510 <_fflush_r>
    2ea8:	103fbb1e 	bne	r2,zero,2d98 <__sfvwrite_r+0x1d8>
    2eac:	0011883a 	mov	r8,zero
    2eb0:	003fdb06 	br	2e20 <__sfvwrite_r+0x260>
    2eb4:	81000017 	ldw	r4,0(r16)
    2eb8:	80800417 	ldw	r2,16(r16)
    2ebc:	1100012e 	bgeu	r2,r4,2ec4 <__sfvwrite_r+0x304>
    2ec0:	a4805a36 	bltu	r20,r18,302c <__sfvwrite_r+0x46c>
    2ec4:	81c00517 	ldw	r7,20(r16)
    2ec8:	91c01a36 	bltu	r18,r7,2f34 <__sfvwrite_r+0x374>
    2ecc:	80800917 	ldw	r2,36(r16)
    2ed0:	81400717 	ldw	r5,28(r16)
    2ed4:	a809883a 	mov	r4,r21
    2ed8:	b80d883a 	mov	r6,r23
    2edc:	103ee83a 	callr	r2
    2ee0:	1029883a 	mov	r20,r2
    2ee4:	00bfac0e 	bge	zero,r2,2d98 <__sfvwrite_r+0x1d8>
    2ee8:	a005883a 	mov	r2,r20
    2eec:	003f9606 	br	2d48 <__sfvwrite_r+0x188>
    2ef0:	b80d883a 	mov	r6,r23
    2ef4:	e00b883a 	mov	r5,fp
    2ef8:	da000115 	stw	r8,4(sp)
    2efc:	00032840 	call	3284 <memmove>
    2f00:	80800217 	ldw	r2,8(r16)
    2f04:	80c00017 	ldw	r3,0(r16)
    2f08:	da000117 	ldw	r8,4(sp)
    2f0c:	15c5c83a 	sub	r2,r2,r23
    2f10:	1def883a 	add	r23,r3,r23
    2f14:	80800215 	stw	r2,8(r16)
    2f18:	85c00015 	stw	r23,0(r16)
    2f1c:	003fbe06 	br	2e18 <__sfvwrite_r+0x258>
    2f20:	81000017 	ldw	r4,0(r16)
    2f24:	9039883a 	mov	fp,r18
    2f28:	9029883a 	mov	r20,r18
    2f2c:	902d883a 	mov	r22,r18
    2f30:	003f7b06 	br	2d20 <__sfvwrite_r+0x160>
    2f34:	b80b883a 	mov	r5,r23
    2f38:	900d883a 	mov	r6,r18
    2f3c:	00032840 	call	3284 <memmove>
    2f40:	80c00217 	ldw	r3,8(r16)
    2f44:	80800017 	ldw	r2,0(r16)
    2f48:	9029883a 	mov	r20,r18
    2f4c:	1c87c83a 	sub	r3,r3,r18
    2f50:	1485883a 	add	r2,r2,r18
    2f54:	80800015 	stw	r2,0(r16)
    2f58:	80c00215 	stw	r3,8(r16)
    2f5c:	9005883a 	mov	r2,r18
    2f60:	003f7906 	br	2d48 <__sfvwrite_r+0x188>
    2f64:	e009883a 	mov	r4,fp
    2f68:	01400284 	movi	r5,10
    2f6c:	900d883a 	mov	r6,r18
    2f70:	00030640 	call	3064 <memchr>
    2f74:	10003826 	beq	r2,zero,3058 <__sfvwrite_r+0x498>
    2f78:	10800044 	addi	r2,r2,1
    2f7c:	1729c83a 	sub	r20,r2,fp
    2f80:	02000044 	movi	r8,1
    2f84:	003f8f06 	br	2dc4 <__sfvwrite_r+0x204>
    2f88:	80800517 	ldw	r2,20(r16)
    2f8c:	81400417 	ldw	r5,16(r16)
    2f90:	87000017 	ldw	fp,0(r16)
    2f94:	10a9883a 	add	r20,r2,r2
    2f98:	a085883a 	add	r2,r20,r2
    2f9c:	1028d7fa 	srli	r20,r2,31
    2fa0:	e179c83a 	sub	fp,fp,r5
    2fa4:	e1000044 	addi	r4,fp,1
    2fa8:	a085883a 	add	r2,r20,r2
    2fac:	1029d07a 	srai	r20,r2,1
    2fb0:	2485883a 	add	r2,r4,r18
    2fb4:	a00d883a 	mov	r6,r20
    2fb8:	a080022e 	bgeu	r20,r2,2fc4 <__sfvwrite_r+0x404>
    2fbc:	1029883a 	mov	r20,r2
    2fc0:	100d883a 	mov	r6,r2
    2fc4:	18c1000c 	andi	r3,r3,1024
    2fc8:	a809883a 	mov	r4,r21
    2fcc:	183f6a26 	beq	r3,zero,2d78 <__sfvwrite_r+0x1b8>
    2fd0:	300b883a 	mov	r5,r6
    2fd4:	00018900 	call	1890 <_malloc_r>
    2fd8:	102d883a 	mov	r22,r2
    2fdc:	103f6c26 	beq	r2,zero,2d90 <__sfvwrite_r+0x1d0>
    2fe0:	81400417 	ldw	r5,16(r16)
    2fe4:	1009883a 	mov	r4,r2
    2fe8:	e00d883a 	mov	r6,fp
    2fec:	000314c0 	call	314c <memcpy>
    2ff0:	8080030b 	ldhu	r2,12(r16)
    2ff4:	00fedfc4 	movi	r3,-1153
    2ff8:	10c4703a 	and	r2,r2,r3
    2ffc:	10802014 	ori	r2,r2,128
    3000:	8080030d 	sth	r2,12(r16)
    3004:	b709883a 	add	r4,r22,fp
    3008:	a707c83a 	sub	r3,r20,fp
    300c:	85800415 	stw	r22,16(r16)
    3010:	85000515 	stw	r20,20(r16)
    3014:	81000015 	stw	r4,0(r16)
    3018:	9039883a 	mov	fp,r18
    301c:	80c00215 	stw	r3,8(r16)
    3020:	9029883a 	mov	r20,r18
    3024:	902d883a 	mov	r22,r18
    3028:	003f3d06 	br	2d20 <__sfvwrite_r+0x160>
    302c:	b80b883a 	mov	r5,r23
    3030:	a00d883a 	mov	r6,r20
    3034:	00032840 	call	3284 <memmove>
    3038:	80800017 	ldw	r2,0(r16)
    303c:	a809883a 	mov	r4,r21
    3040:	800b883a 	mov	r5,r16
    3044:	1505883a 	add	r2,r2,r20
    3048:	80800015 	stw	r2,0(r16)
    304c:	00035100 	call	3510 <_fflush_r>
    3050:	103fa526 	beq	r2,zero,2ee8 <__sfvwrite_r+0x328>
    3054:	003f5006 	br	2d98 <__sfvwrite_r+0x1d8>
    3058:	95000044 	addi	r20,r18,1
    305c:	02000044 	movi	r8,1
    3060:	003f5806 	br	2dc4 <__sfvwrite_r+0x204>

00003064 <memchr>:
    3064:	208000cc 	andi	r2,r4,3
    3068:	280f883a 	mov	r7,r5
    306c:	10003526 	beq	r2,zero,3144 <memchr+0xe0>
    3070:	30bfffc4 	addi	r2,r6,-1
    3074:	30001b26 	beq	r6,zero,30e4 <memchr+0x80>
    3078:	21800003 	ldbu	r6,0(r4)
    307c:	28c03fcc 	andi	r3,r5,255
    3080:	30c01a26 	beq	r6,r3,30ec <memchr+0x88>
    3084:	180d883a 	mov	r6,r3
    3088:	00000406 	br	309c <memchr+0x38>
    308c:	10001526 	beq	r2,zero,30e4 <memchr+0x80>
    3090:	20c00003 	ldbu	r3,0(r4)
    3094:	10bfffc4 	addi	r2,r2,-1
    3098:	19801426 	beq	r3,r6,30ec <memchr+0x88>
    309c:	21000044 	addi	r4,r4,1
    30a0:	20c000cc 	andi	r3,r4,3
    30a4:	183ff91e 	bne	r3,zero,308c <memchr+0x28>
    30a8:	024000c4 	movi	r9,3
    30ac:	48801136 	bltu	r9,r2,30f4 <memchr+0x90>
    30b0:	10000c26 	beq	r2,zero,30e4 <memchr+0x80>
    30b4:	20c00003 	ldbu	r3,0(r4)
    30b8:	29403fcc 	andi	r5,r5,255
    30bc:	19400b26 	beq	r3,r5,30ec <memchr+0x88>
    30c0:	20c00044 	addi	r3,r4,1
    30c4:	2085883a 	add	r2,r4,r2
    30c8:	39803fcc 	andi	r6,r7,255
    30cc:	00000306 	br	30dc <memchr+0x78>
    30d0:	18c00044 	addi	r3,r3,1
    30d4:	197fffc3 	ldbu	r5,-1(r3)
    30d8:	29800426 	beq	r5,r6,30ec <memchr+0x88>
    30dc:	1809883a 	mov	r4,r3
    30e0:	18bffb1e 	bne	r3,r2,30d0 <memchr+0x6c>
    30e4:	0005883a 	mov	r2,zero
    30e8:	f800283a 	ret
    30ec:	2005883a 	mov	r2,r4
    30f0:	f800283a 	ret
    30f4:	28c03fcc 	andi	r3,r5,255
    30f8:	1810923a 	slli	r8,r3,8
    30fc:	02ffbff4 	movhi	r11,65279
    3100:	02a02074 	movhi	r10,32897
    3104:	40c6b03a 	or	r3,r8,r3
    3108:	1810943a 	slli	r8,r3,16
    310c:	5affbfc4 	addi	r11,r11,-257
    3110:	52a02004 	addi	r10,r10,-32640
    3114:	40d0b03a 	or	r8,r8,r3
    3118:	20c00017 	ldw	r3,0(r4)
    311c:	40c6f03a 	xor	r3,r8,r3
    3120:	1acd883a 	add	r6,r3,r11
    3124:	00c6303a 	nor	r3,zero,r3
    3128:	30c6703a 	and	r3,r6,r3
    312c:	1a86703a 	and	r3,r3,r10
    3130:	183fdf1e 	bne	r3,zero,30b0 <memchr+0x4c>
    3134:	10bfff04 	addi	r2,r2,-4
    3138:	21000104 	addi	r4,r4,4
    313c:	48bff636 	bltu	r9,r2,3118 <memchr+0xb4>
    3140:	003fdb06 	br	30b0 <memchr+0x4c>
    3144:	3005883a 	mov	r2,r6
    3148:	003fd706 	br	30a8 <memchr+0x44>

0000314c <memcpy>:
    314c:	deffff04 	addi	sp,sp,-4
    3150:	dc000015 	stw	r16,0(sp)
    3154:	00c003c4 	movi	r3,15
    3158:	2005883a 	mov	r2,r4
    315c:	1980432e 	bgeu	r3,r6,326c <memcpy+0x120>
    3160:	2146b03a 	or	r3,r4,r5
    3164:	18c000cc 	andi	r3,r3,3
    3168:	1800421e 	bne	r3,zero,3274 <memcpy+0x128>
    316c:	343ffc04 	addi	r16,r6,-16
    3170:	8020d13a 	srli	r16,r16,4
    3174:	28c00104 	addi	r3,r5,4
    3178:	23400104 	addi	r13,r4,4
    317c:	801e913a 	slli	r15,r16,4
    3180:	2b000204 	addi	r12,r5,8
    3184:	22c00204 	addi	r11,r4,8
    3188:	7bc00504 	addi	r15,r15,20
    318c:	2a800304 	addi	r10,r5,12
    3190:	22400304 	addi	r9,r4,12
    3194:	2bdf883a 	add	r15,r5,r15
    3198:	2811883a 	mov	r8,r5
    319c:	200f883a 	mov	r7,r4
    31a0:	41000017 	ldw	r4,0(r8)
    31a4:	39c00404 	addi	r7,r7,16
    31a8:	18c00404 	addi	r3,r3,16
    31ac:	393ffc15 	stw	r4,-16(r7)
    31b0:	1bbffc17 	ldw	r14,-16(r3)
    31b4:	6b400404 	addi	r13,r13,16
    31b8:	5ac00404 	addi	r11,r11,16
    31bc:	6bbffc15 	stw	r14,-16(r13)
    31c0:	63800017 	ldw	r14,0(r12)
    31c4:	4a400404 	addi	r9,r9,16
    31c8:	42000404 	addi	r8,r8,16
    31cc:	5bbffc15 	stw	r14,-16(r11)
    31d0:	53800017 	ldw	r14,0(r10)
    31d4:	63000404 	addi	r12,r12,16
    31d8:	52800404 	addi	r10,r10,16
    31dc:	4bbffc15 	stw	r14,-16(r9)
    31e0:	1bffef1e 	bne	r3,r15,31a0 <memcpy+0x54>
    31e4:	81c00044 	addi	r7,r16,1
    31e8:	380e913a 	slli	r7,r7,4
    31ec:	310003cc 	andi	r4,r6,15
    31f0:	02c000c4 	movi	r11,3
    31f4:	11c7883a 	add	r3,r2,r7
    31f8:	29cb883a 	add	r5,r5,r7
    31fc:	59001f2e 	bgeu	r11,r4,327c <memcpy+0x130>
    3200:	1813883a 	mov	r9,r3
    3204:	2811883a 	mov	r8,r5
    3208:	200f883a 	mov	r7,r4
    320c:	42800017 	ldw	r10,0(r8)
    3210:	4a400104 	addi	r9,r9,4
    3214:	39ffff04 	addi	r7,r7,-4
    3218:	4abfff15 	stw	r10,-4(r9)
    321c:	42000104 	addi	r8,r8,4
    3220:	59fffa36 	bltu	r11,r7,320c <memcpy+0xc0>
    3224:	213fff04 	addi	r4,r4,-4
    3228:	2008d0ba 	srli	r4,r4,2
    322c:	318000cc 	andi	r6,r6,3
    3230:	21000044 	addi	r4,r4,1
    3234:	2109883a 	add	r4,r4,r4
    3238:	2109883a 	add	r4,r4,r4
    323c:	1907883a 	add	r3,r3,r4
    3240:	290b883a 	add	r5,r5,r4
    3244:	30000626 	beq	r6,zero,3260 <memcpy+0x114>
    3248:	198d883a 	add	r6,r3,r6
    324c:	29c00003 	ldbu	r7,0(r5)
    3250:	18c00044 	addi	r3,r3,1
    3254:	29400044 	addi	r5,r5,1
    3258:	19ffffc5 	stb	r7,-1(r3)
    325c:	19bffb1e 	bne	r3,r6,324c <memcpy+0x100>
    3260:	dc000017 	ldw	r16,0(sp)
    3264:	dec00104 	addi	sp,sp,4
    3268:	f800283a 	ret
    326c:	2007883a 	mov	r3,r4
    3270:	003ff406 	br	3244 <memcpy+0xf8>
    3274:	2007883a 	mov	r3,r4
    3278:	003ff306 	br	3248 <memcpy+0xfc>
    327c:	200d883a 	mov	r6,r4
    3280:	003ff006 	br	3244 <memcpy+0xf8>

00003284 <memmove>:
    3284:	2005883a 	mov	r2,r4
    3288:	29000b2e 	bgeu	r5,r4,32b8 <memmove+0x34>
    328c:	298f883a 	add	r7,r5,r6
    3290:	21c0092e 	bgeu	r4,r7,32b8 <memmove+0x34>
    3294:	2187883a 	add	r3,r4,r6
    3298:	198bc83a 	sub	r5,r3,r6
    329c:	30004b26 	beq	r6,zero,33cc <memmove+0x148>
    32a0:	39ffffc4 	addi	r7,r7,-1
    32a4:	39000003 	ldbu	r4,0(r7)
    32a8:	18ffffc4 	addi	r3,r3,-1
    32ac:	19000005 	stb	r4,0(r3)
    32b0:	197ffb1e 	bne	r3,r5,32a0 <memmove+0x1c>
    32b4:	f800283a 	ret
    32b8:	00c003c4 	movi	r3,15
    32bc:	1980412e 	bgeu	r3,r6,33c4 <memmove+0x140>
    32c0:	1146b03a 	or	r3,r2,r5
    32c4:	18c000cc 	andi	r3,r3,3
    32c8:	1800411e 	bne	r3,zero,33d0 <memmove+0x14c>
    32cc:	33fffc04 	addi	r15,r6,-16
    32d0:	781ed13a 	srli	r15,r15,4
    32d4:	28c00104 	addi	r3,r5,4
    32d8:	13400104 	addi	r13,r2,4
    32dc:	781c913a 	slli	r14,r15,4
    32e0:	2b000204 	addi	r12,r5,8
    32e4:	12c00204 	addi	r11,r2,8
    32e8:	73800504 	addi	r14,r14,20
    32ec:	2a800304 	addi	r10,r5,12
    32f0:	12400304 	addi	r9,r2,12
    32f4:	2b9d883a 	add	r14,r5,r14
    32f8:	2811883a 	mov	r8,r5
    32fc:	100f883a 	mov	r7,r2
    3300:	41000017 	ldw	r4,0(r8)
    3304:	39c00404 	addi	r7,r7,16
    3308:	18c00404 	addi	r3,r3,16
    330c:	393ffc15 	stw	r4,-16(r7)
    3310:	193ffc17 	ldw	r4,-16(r3)
    3314:	6b400404 	addi	r13,r13,16
    3318:	5ac00404 	addi	r11,r11,16
    331c:	693ffc15 	stw	r4,-16(r13)
    3320:	61000017 	ldw	r4,0(r12)
    3324:	4a400404 	addi	r9,r9,16
    3328:	42000404 	addi	r8,r8,16
    332c:	593ffc15 	stw	r4,-16(r11)
    3330:	51000017 	ldw	r4,0(r10)
    3334:	63000404 	addi	r12,r12,16
    3338:	52800404 	addi	r10,r10,16
    333c:	493ffc15 	stw	r4,-16(r9)
    3340:	1bbfef1e 	bne	r3,r14,3300 <memmove+0x7c>
    3344:	79000044 	addi	r4,r15,1
    3348:	2008913a 	slli	r4,r4,4
    334c:	328003cc 	andi	r10,r6,15
    3350:	02c000c4 	movi	r11,3
    3354:	1107883a 	add	r3,r2,r4
    3358:	290b883a 	add	r5,r5,r4
    335c:	5a801e2e 	bgeu	r11,r10,33d8 <memmove+0x154>
    3360:	1813883a 	mov	r9,r3
    3364:	2811883a 	mov	r8,r5
    3368:	500f883a 	mov	r7,r10
    336c:	41000017 	ldw	r4,0(r8)
    3370:	4a400104 	addi	r9,r9,4
    3374:	39ffff04 	addi	r7,r7,-4
    3378:	493fff15 	stw	r4,-4(r9)
    337c:	42000104 	addi	r8,r8,4
    3380:	59fffa36 	bltu	r11,r7,336c <memmove+0xe8>
    3384:	513fff04 	addi	r4,r10,-4
    3388:	2008d0ba 	srli	r4,r4,2
    338c:	318000cc 	andi	r6,r6,3
    3390:	21000044 	addi	r4,r4,1
    3394:	2109883a 	add	r4,r4,r4
    3398:	2109883a 	add	r4,r4,r4
    339c:	1907883a 	add	r3,r3,r4
    33a0:	290b883a 	add	r5,r5,r4
    33a4:	30000926 	beq	r6,zero,33cc <memmove+0x148>
    33a8:	198d883a 	add	r6,r3,r6
    33ac:	29c00003 	ldbu	r7,0(r5)
    33b0:	18c00044 	addi	r3,r3,1
    33b4:	29400044 	addi	r5,r5,1
    33b8:	19ffffc5 	stb	r7,-1(r3)
    33bc:	19bffb1e 	bne	r3,r6,33ac <memmove+0x128>
    33c0:	f800283a 	ret
    33c4:	1007883a 	mov	r3,r2
    33c8:	003ff606 	br	33a4 <memmove+0x120>
    33cc:	f800283a 	ret
    33d0:	1007883a 	mov	r3,r2
    33d4:	003ff406 	br	33a8 <memmove+0x124>
    33d8:	500d883a 	mov	r6,r10
    33dc:	003ff106 	br	33a4 <memmove+0x120>

000033e0 <__swsetup_r>:
    33e0:	00800074 	movhi	r2,1
    33e4:	defffd04 	addi	sp,sp,-12
    33e8:	10a1a704 	addi	r2,r2,-31076
    33ec:	dc400115 	stw	r17,4(sp)
    33f0:	2023883a 	mov	r17,r4
    33f4:	11000017 	ldw	r4,0(r2)
    33f8:	dc000015 	stw	r16,0(sp)
    33fc:	dfc00215 	stw	ra,8(sp)
    3400:	2821883a 	mov	r16,r5
    3404:	20000226 	beq	r4,zero,3410 <__swsetup_r+0x30>
    3408:	20c00e17 	ldw	r3,56(r4)
    340c:	18002e26 	beq	r3,zero,34c8 <__swsetup_r+0xe8>
    3410:	8080030b 	ldhu	r2,12(r16)
    3414:	10c0020c 	andi	r3,r2,8
    3418:	100d883a 	mov	r6,r2
    341c:	18000f26 	beq	r3,zero,345c <__swsetup_r+0x7c>
    3420:	80c00417 	ldw	r3,16(r16)
    3424:	18001526 	beq	r3,zero,347c <__swsetup_r+0x9c>
    3428:	1100004c 	andi	r4,r2,1
    342c:	20001c1e 	bne	r4,zero,34a0 <__swsetup_r+0xc0>
    3430:	1080008c 	andi	r2,r2,2
    3434:	1000261e 	bne	r2,zero,34d0 <__swsetup_r+0xf0>
    3438:	80800517 	ldw	r2,20(r16)
    343c:	80800215 	stw	r2,8(r16)
    3440:	18001c26 	beq	r3,zero,34b4 <__swsetup_r+0xd4>
    3444:	0005883a 	mov	r2,zero
    3448:	dfc00217 	ldw	ra,8(sp)
    344c:	dc400117 	ldw	r17,4(sp)
    3450:	dc000017 	ldw	r16,0(sp)
    3454:	dec00304 	addi	sp,sp,12
    3458:	f800283a 	ret
    345c:	3080040c 	andi	r2,r6,16
    3460:	10001726 	beq	r2,zero,34c0 <__swsetup_r+0xe0>
    3464:	3080010c 	andi	r2,r6,4
    3468:	10001b1e 	bne	r2,zero,34d8 <__swsetup_r+0xf8>
    346c:	80c00417 	ldw	r3,16(r16)
    3470:	30800214 	ori	r2,r6,8
    3474:	8080030d 	sth	r2,12(r16)
    3478:	183feb1e 	bne	r3,zero,3428 <__swsetup_r+0x48>
    347c:	1140a00c 	andi	r5,r2,640
    3480:	01008004 	movi	r4,512
    3484:	293fe826 	beq	r5,r4,3428 <__swsetup_r+0x48>
    3488:	8809883a 	mov	r4,r17
    348c:	800b883a 	mov	r5,r16
    3490:	0003c780 	call	3c78 <__smakebuf_r>
    3494:	8080030b 	ldhu	r2,12(r16)
    3498:	80c00417 	ldw	r3,16(r16)
    349c:	003fe206 	br	3428 <__swsetup_r+0x48>
    34a0:	80800517 	ldw	r2,20(r16)
    34a4:	80000215 	stw	zero,8(r16)
    34a8:	0085c83a 	sub	r2,zero,r2
    34ac:	80800615 	stw	r2,24(r16)
    34b0:	183fe41e 	bne	r3,zero,3444 <__swsetup_r+0x64>
    34b4:	8080030b 	ldhu	r2,12(r16)
    34b8:	1080200c 	andi	r2,r2,128
    34bc:	103fe226 	beq	r2,zero,3448 <__swsetup_r+0x68>
    34c0:	00bfffc4 	movi	r2,-1
    34c4:	003fe006 	br	3448 <__swsetup_r+0x68>
    34c8:	0003ab80 	call	3ab8 <__sinit>
    34cc:	003fd006 	br	3410 <__swsetup_r+0x30>
    34d0:	0005883a 	mov	r2,zero
    34d4:	003fd906 	br	343c <__swsetup_r+0x5c>
    34d8:	81400c17 	ldw	r5,48(r16)
    34dc:	28000626 	beq	r5,zero,34f8 <__swsetup_r+0x118>
    34e0:	80801004 	addi	r2,r16,64
    34e4:	28800326 	beq	r5,r2,34f4 <__swsetup_r+0x114>
    34e8:	8809883a 	mov	r4,r17
    34ec:	00028d00 	call	28d0 <_free_r>
    34f0:	8180030b 	ldhu	r6,12(r16)
    34f4:	80000c15 	stw	zero,48(r16)
    34f8:	80c00417 	ldw	r3,16(r16)
    34fc:	00bff6c4 	movi	r2,-37
    3500:	118c703a 	and	r6,r2,r6
    3504:	80000115 	stw	zero,4(r16)
    3508:	80c00015 	stw	r3,0(r16)
    350c:	003fd806 	br	3470 <__swsetup_r+0x90>

00003510 <_fflush_r>:
    3510:	defffb04 	addi	sp,sp,-20
    3514:	dcc00315 	stw	r19,12(sp)
    3518:	dc000015 	stw	r16,0(sp)
    351c:	dfc00415 	stw	ra,16(sp)
    3520:	dc800215 	stw	r18,8(sp)
    3524:	dc400115 	stw	r17,4(sp)
    3528:	2027883a 	mov	r19,r4
    352c:	2821883a 	mov	r16,r5
    3530:	20000226 	beq	r4,zero,353c <_fflush_r+0x2c>
    3534:	20800e17 	ldw	r2,56(r4)
    3538:	10005326 	beq	r2,zero,3688 <_fflush_r+0x178>
    353c:	8080030b 	ldhu	r2,12(r16)
    3540:	10ffffcc 	andi	r3,r2,65535
    3544:	18e0001c 	xori	r3,r3,32768
    3548:	18e00004 	addi	r3,r3,-32768
    354c:	18002c26 	beq	r3,zero,3600 <_fflush_r+0xf0>
    3550:	10c0020c 	andi	r3,r2,8
    3554:	1800321e 	bne	r3,zero,3620 <_fflush_r+0x110>
    3558:	80c00117 	ldw	r3,4(r16)
    355c:	10820014 	ori	r2,r2,2048
    3560:	8080030d 	sth	r2,12(r16)
    3564:	00c0570e 	bge	zero,r3,36c4 <_fflush_r+0x1b4>
    3568:	82000a17 	ldw	r8,40(r16)
    356c:	40002426 	beq	r8,zero,3600 <_fflush_r+0xf0>
    3570:	9c400017 	ldw	r17,0(r19)
    3574:	10c4000c 	andi	r3,r2,4096
    3578:	98000015 	stw	zero,0(r19)
    357c:	18004626 	beq	r3,zero,3698 <_fflush_r+0x188>
    3580:	81801417 	ldw	r6,80(r16)
    3584:	10c0010c 	andi	r3,r2,4
    3588:	18000626 	beq	r3,zero,35a4 <_fflush_r+0x94>
    358c:	80c00117 	ldw	r3,4(r16)
    3590:	80800c17 	ldw	r2,48(r16)
    3594:	30cdc83a 	sub	r6,r6,r3
    3598:	10000226 	beq	r2,zero,35a4 <_fflush_r+0x94>
    359c:	80800f17 	ldw	r2,60(r16)
    35a0:	308dc83a 	sub	r6,r6,r2
    35a4:	81400717 	ldw	r5,28(r16)
    35a8:	9809883a 	mov	r4,r19
    35ac:	000f883a 	mov	r7,zero
    35b0:	403ee83a 	callr	r8
    35b4:	00ffffc4 	movi	r3,-1
    35b8:	10c04526 	beq	r2,r3,36d0 <_fflush_r+0x1c0>
    35bc:	80c0030b 	ldhu	r3,12(r16)
    35c0:	81000417 	ldw	r4,16(r16)
    35c4:	80000115 	stw	zero,4(r16)
    35c8:	197dffcc 	andi	r5,r3,63487
    35cc:	8140030d 	sth	r5,12(r16)
    35d0:	81000015 	stw	r4,0(r16)
    35d4:	18c4000c 	andi	r3,r3,4096
    35d8:	18000126 	beq	r3,zero,35e0 <_fflush_r+0xd0>
    35dc:	80801415 	stw	r2,80(r16)
    35e0:	81400c17 	ldw	r5,48(r16)
    35e4:	9c400015 	stw	r17,0(r19)
    35e8:	28000526 	beq	r5,zero,3600 <_fflush_r+0xf0>
    35ec:	80801004 	addi	r2,r16,64
    35f0:	28800226 	beq	r5,r2,35fc <_fflush_r+0xec>
    35f4:	9809883a 	mov	r4,r19
    35f8:	00028d00 	call	28d0 <_free_r>
    35fc:	80000c15 	stw	zero,48(r16)
    3600:	0005883a 	mov	r2,zero
    3604:	dfc00417 	ldw	ra,16(sp)
    3608:	dcc00317 	ldw	r19,12(sp)
    360c:	dc800217 	ldw	r18,8(sp)
    3610:	dc400117 	ldw	r17,4(sp)
    3614:	dc000017 	ldw	r16,0(sp)
    3618:	dec00504 	addi	sp,sp,20
    361c:	f800283a 	ret
    3620:	84800417 	ldw	r18,16(r16)
    3624:	903ff626 	beq	r18,zero,3600 <_fflush_r+0xf0>
    3628:	84400017 	ldw	r17,0(r16)
    362c:	108000cc 	andi	r2,r2,3
    3630:	84800015 	stw	r18,0(r16)
    3634:	8ca3c83a 	sub	r17,r17,r18
    3638:	10001526 	beq	r2,zero,3690 <_fflush_r+0x180>
    363c:	0005883a 	mov	r2,zero
    3640:	80800215 	stw	r2,8(r16)
    3644:	04400316 	blt	zero,r17,3654 <_fflush_r+0x144>
    3648:	003fed06 	br	3600 <_fflush_r+0xf0>
    364c:	90a5883a 	add	r18,r18,r2
    3650:	047feb0e 	bge	zero,r17,3600 <_fflush_r+0xf0>
    3654:	80800917 	ldw	r2,36(r16)
    3658:	81400717 	ldw	r5,28(r16)
    365c:	880f883a 	mov	r7,r17
    3660:	900d883a 	mov	r6,r18
    3664:	9809883a 	mov	r4,r19
    3668:	103ee83a 	callr	r2
    366c:	88a3c83a 	sub	r17,r17,r2
    3670:	00bff616 	blt	zero,r2,364c <_fflush_r+0x13c>
    3674:	80c0030b 	ldhu	r3,12(r16)
    3678:	00bfffc4 	movi	r2,-1
    367c:	18c01014 	ori	r3,r3,64
    3680:	80c0030d 	sth	r3,12(r16)
    3684:	003fdf06 	br	3604 <_fflush_r+0xf4>
    3688:	0003ab80 	call	3ab8 <__sinit>
    368c:	003fab06 	br	353c <_fflush_r+0x2c>
    3690:	80800517 	ldw	r2,20(r16)
    3694:	003fea06 	br	3640 <_fflush_r+0x130>
    3698:	81400717 	ldw	r5,28(r16)
    369c:	000d883a 	mov	r6,zero
    36a0:	9809883a 	mov	r4,r19
    36a4:	01c00044 	movi	r7,1
    36a8:	403ee83a 	callr	r8
    36ac:	100d883a 	mov	r6,r2
    36b0:	00bfffc4 	movi	r2,-1
    36b4:	30801326 	beq	r6,r2,3704 <_fflush_r+0x1f4>
    36b8:	8080030b 	ldhu	r2,12(r16)
    36bc:	82000a17 	ldw	r8,40(r16)
    36c0:	003fb006 	br	3584 <_fflush_r+0x74>
    36c4:	80c00f17 	ldw	r3,60(r16)
    36c8:	00ffa716 	blt	zero,r3,3568 <_fflush_r+0x58>
    36cc:	003fcc06 	br	3600 <_fflush_r+0xf0>
    36d0:	98c00017 	ldw	r3,0(r19)
    36d4:	183fb926 	beq	r3,zero,35bc <_fflush_r+0xac>
    36d8:	01000744 	movi	r4,29
    36dc:	19000226 	beq	r3,r4,36e8 <_fflush_r+0x1d8>
    36e0:	01000584 	movi	r4,22
    36e4:	1900101e 	bne	r3,r4,3728 <_fflush_r+0x218>
    36e8:	8080030b 	ldhu	r2,12(r16)
    36ec:	80c00417 	ldw	r3,16(r16)
    36f0:	80000115 	stw	zero,4(r16)
    36f4:	10bdffcc 	andi	r2,r2,63487
    36f8:	8080030d 	sth	r2,12(r16)
    36fc:	80c00015 	stw	r3,0(r16)
    3700:	003fb706 	br	35e0 <_fflush_r+0xd0>
    3704:	98800017 	ldw	r2,0(r19)
    3708:	103feb26 	beq	r2,zero,36b8 <_fflush_r+0x1a8>
    370c:	00c00744 	movi	r3,29
    3710:	10c00226 	beq	r2,r3,371c <_fflush_r+0x20c>
    3714:	00c00584 	movi	r3,22
    3718:	10ffd61e 	bne	r2,r3,3674 <_fflush_r+0x164>
    371c:	9c400015 	stw	r17,0(r19)
    3720:	0005883a 	mov	r2,zero
    3724:	003fb706 	br	3604 <_fflush_r+0xf4>
    3728:	80c0030b 	ldhu	r3,12(r16)
    372c:	18c01014 	ori	r3,r3,64
    3730:	80c0030d 	sth	r3,12(r16)
    3734:	003fb306 	br	3604 <_fflush_r+0xf4>

00003738 <fflush>:
    3738:	20000526 	beq	r4,zero,3750 <fflush+0x18>
    373c:	00800074 	movhi	r2,1
    3740:	10a1a704 	addi	r2,r2,-31076
    3744:	200b883a 	mov	r5,r4
    3748:	11000017 	ldw	r4,0(r2)
    374c:	00035101 	jmpi	3510 <_fflush_r>
    3750:	00800074 	movhi	r2,1
    3754:	10a1a604 	addi	r2,r2,-31080
    3758:	11000017 	ldw	r4,0(r2)
    375c:	01400034 	movhi	r5,0
    3760:	294d4404 	addi	r5,r5,13584
    3764:	0003bc01 	jmpi	3bc0 <_fwalk_reent>

00003768 <__fp_lock>:
    3768:	0005883a 	mov	r2,zero
    376c:	f800283a 	ret

00003770 <__fp_unlock>:
    3770:	0005883a 	mov	r2,zero
    3774:	f800283a 	ret

00003778 <_cleanup_r>:
    3778:	01400034 	movhi	r5,0
    377c:	29509004 	addi	r5,r5,16960
    3780:	0003b081 	jmpi	3b08 <_fwalk>

00003784 <__sinit.part.1>:
    3784:	defff604 	addi	sp,sp,-40
    3788:	00c00034 	movhi	r3,0
    378c:	dfc00915 	stw	ra,36(sp)
    3790:	df000815 	stw	fp,32(sp)
    3794:	ddc00715 	stw	r23,28(sp)
    3798:	dd800615 	stw	r22,24(sp)
    379c:	dd400515 	stw	r21,20(sp)
    37a0:	dd000415 	stw	r20,16(sp)
    37a4:	dcc00315 	stw	r19,12(sp)
    37a8:	dc800215 	stw	r18,8(sp)
    37ac:	dc400115 	stw	r17,4(sp)
    37b0:	dc000015 	stw	r16,0(sp)
    37b4:	18cdde04 	addi	r3,r3,14200
    37b8:	24000117 	ldw	r16,4(r4)
    37bc:	20c00f15 	stw	r3,60(r4)
    37c0:	07000044 	movi	fp,1
    37c4:	00c000c4 	movi	r3,3
    37c8:	2080bb04 	addi	r2,r4,748
    37cc:	20c0b915 	stw	r3,740(r4)
    37d0:	27000e15 	stw	fp,56(r4)
    37d4:	2080ba15 	stw	r2,744(r4)
    37d8:	2000b815 	stw	zero,736(r4)
    37dc:	05c00204 	movi	r23,8
    37e0:	00800104 	movi	r2,4
    37e4:	2025883a 	mov	r18,r4
    37e8:	b80d883a 	mov	r6,r23
    37ec:	81001704 	addi	r4,r16,92
    37f0:	000b883a 	mov	r5,zero
    37f4:	80000015 	stw	zero,0(r16)
    37f8:	80000115 	stw	zero,4(r16)
    37fc:	80000215 	stw	zero,8(r16)
    3800:	8080030d 	sth	r2,12(r16)
    3804:	80001915 	stw	zero,100(r16)
    3808:	8000038d 	sth	zero,14(r16)
    380c:	80000415 	stw	zero,16(r16)
    3810:	80000515 	stw	zero,20(r16)
    3814:	80000615 	stw	zero,24(r16)
    3818:	0003e300 	call	3e30 <memset>
    381c:	05800034 	movhi	r22,0
    3820:	94400217 	ldw	r17,8(r18)
    3824:	05400034 	movhi	r21,0
    3828:	05000034 	movhi	r20,0
    382c:	04c00034 	movhi	r19,0
    3830:	b58fd504 	addi	r22,r22,16212
    3834:	ad4fec04 	addi	r21,r21,16304
    3838:	a5100b04 	addi	r20,r20,16428
    383c:	9cd02204 	addi	r19,r19,16520
    3840:	85800815 	stw	r22,32(r16)
    3844:	85400915 	stw	r21,36(r16)
    3848:	85000a15 	stw	r20,40(r16)
    384c:	84c00b15 	stw	r19,44(r16)
    3850:	84000715 	stw	r16,28(r16)
    3854:	00800284 	movi	r2,10
    3858:	89001704 	addi	r4,r17,92
    385c:	b80d883a 	mov	r6,r23
    3860:	000b883a 	mov	r5,zero
    3864:	88000015 	stw	zero,0(r17)
    3868:	88000115 	stw	zero,4(r17)
    386c:	88000215 	stw	zero,8(r17)
    3870:	8880030d 	sth	r2,12(r17)
    3874:	88001915 	stw	zero,100(r17)
    3878:	8f00038d 	sth	fp,14(r17)
    387c:	88000415 	stw	zero,16(r17)
    3880:	88000515 	stw	zero,20(r17)
    3884:	88000615 	stw	zero,24(r17)
    3888:	0003e300 	call	3e30 <memset>
    388c:	94000317 	ldw	r16,12(r18)
    3890:	00800484 	movi	r2,18
    3894:	8c400715 	stw	r17,28(r17)
    3898:	8d800815 	stw	r22,32(r17)
    389c:	8d400915 	stw	r21,36(r17)
    38a0:	8d000a15 	stw	r20,40(r17)
    38a4:	8cc00b15 	stw	r19,44(r17)
    38a8:	8080030d 	sth	r2,12(r16)
    38ac:	00800084 	movi	r2,2
    38b0:	80000015 	stw	zero,0(r16)
    38b4:	80000115 	stw	zero,4(r16)
    38b8:	80000215 	stw	zero,8(r16)
    38bc:	80001915 	stw	zero,100(r16)
    38c0:	8080038d 	sth	r2,14(r16)
    38c4:	80000415 	stw	zero,16(r16)
    38c8:	80000515 	stw	zero,20(r16)
    38cc:	80000615 	stw	zero,24(r16)
    38d0:	81001704 	addi	r4,r16,92
    38d4:	000b883a 	mov	r5,zero
    38d8:	b80d883a 	mov	r6,r23
    38dc:	0003e300 	call	3e30 <memset>
    38e0:	84000715 	stw	r16,28(r16)
    38e4:	85800815 	stw	r22,32(r16)
    38e8:	85400915 	stw	r21,36(r16)
    38ec:	85000a15 	stw	r20,40(r16)
    38f0:	84c00b15 	stw	r19,44(r16)
    38f4:	dfc00917 	ldw	ra,36(sp)
    38f8:	df000817 	ldw	fp,32(sp)
    38fc:	ddc00717 	ldw	r23,28(sp)
    3900:	dd800617 	ldw	r22,24(sp)
    3904:	dd400517 	ldw	r21,20(sp)
    3908:	dd000417 	ldw	r20,16(sp)
    390c:	dcc00317 	ldw	r19,12(sp)
    3910:	dc800217 	ldw	r18,8(sp)
    3914:	dc400117 	ldw	r17,4(sp)
    3918:	dc000017 	ldw	r16,0(sp)
    391c:	dec00a04 	addi	sp,sp,40
    3920:	f800283a 	ret

00003924 <__sfmoreglue>:
    3924:	defffc04 	addi	sp,sp,-16
    3928:	dc400115 	stw	r17,4(sp)
    392c:	2c401a24 	muli	r17,r5,104
    3930:	dc800215 	stw	r18,8(sp)
    3934:	2825883a 	mov	r18,r5
    3938:	89400304 	addi	r5,r17,12
    393c:	dc000015 	stw	r16,0(sp)
    3940:	dfc00315 	stw	ra,12(sp)
    3944:	00018900 	call	1890 <_malloc_r>
    3948:	1021883a 	mov	r16,r2
    394c:	10000726 	beq	r2,zero,396c <__sfmoreglue+0x48>
    3950:	11000304 	addi	r4,r2,12
    3954:	10000015 	stw	zero,0(r2)
    3958:	14800115 	stw	r18,4(r2)
    395c:	11000215 	stw	r4,8(r2)
    3960:	000b883a 	mov	r5,zero
    3964:	880d883a 	mov	r6,r17
    3968:	0003e300 	call	3e30 <memset>
    396c:	8005883a 	mov	r2,r16
    3970:	dfc00317 	ldw	ra,12(sp)
    3974:	dc800217 	ldw	r18,8(sp)
    3978:	dc400117 	ldw	r17,4(sp)
    397c:	dc000017 	ldw	r16,0(sp)
    3980:	dec00404 	addi	sp,sp,16
    3984:	f800283a 	ret

00003988 <__sfp>:
    3988:	00800074 	movhi	r2,1
    398c:	defffb04 	addi	sp,sp,-20
    3990:	10a1a604 	addi	r2,r2,-31080
    3994:	dc800215 	stw	r18,8(sp)
    3998:	14800017 	ldw	r18,0(r2)
    399c:	dcc00315 	stw	r19,12(sp)
    39a0:	dfc00415 	stw	ra,16(sp)
    39a4:	90800e17 	ldw	r2,56(r18)
    39a8:	dc400115 	stw	r17,4(sp)
    39ac:	dc000015 	stw	r16,0(sp)
    39b0:	2027883a 	mov	r19,r4
    39b4:	1000021e 	bne	r2,zero,39c0 <__sfp+0x38>
    39b8:	9009883a 	mov	r4,r18
    39bc:	00037840 	call	3784 <__sinit.part.1>
    39c0:	9480b804 	addi	r18,r18,736
    39c4:	047fffc4 	movi	r17,-1
    39c8:	91400117 	ldw	r5,4(r18)
    39cc:	94000217 	ldw	r16,8(r18)
    39d0:	297fffc4 	addi	r5,r5,-1
    39d4:	28000a16 	blt	r5,zero,3a00 <__sfp+0x78>
    39d8:	8080030f 	ldh	r2,12(r16)
    39dc:	10000c26 	beq	r2,zero,3a10 <__sfp+0x88>
    39e0:	80c01d04 	addi	r3,r16,116
    39e4:	00000206 	br	39f0 <__sfp+0x68>
    39e8:	18bfe60f 	ldh	r2,-104(r3)
    39ec:	10000826 	beq	r2,zero,3a10 <__sfp+0x88>
    39f0:	297fffc4 	addi	r5,r5,-1
    39f4:	1c3ffd04 	addi	r16,r3,-12
    39f8:	18c01a04 	addi	r3,r3,104
    39fc:	2c7ffa1e 	bne	r5,r17,39e8 <__sfp+0x60>
    3a00:	90800017 	ldw	r2,0(r18)
    3a04:	10001d26 	beq	r2,zero,3a7c <__sfp+0xf4>
    3a08:	1025883a 	mov	r18,r2
    3a0c:	003fee06 	br	39c8 <__sfp+0x40>
    3a10:	00bfffc4 	movi	r2,-1
    3a14:	8080038d 	sth	r2,14(r16)
    3a18:	00800044 	movi	r2,1
    3a1c:	8080030d 	sth	r2,12(r16)
    3a20:	80001915 	stw	zero,100(r16)
    3a24:	80000015 	stw	zero,0(r16)
    3a28:	80000215 	stw	zero,8(r16)
    3a2c:	80000115 	stw	zero,4(r16)
    3a30:	80000415 	stw	zero,16(r16)
    3a34:	80000515 	stw	zero,20(r16)
    3a38:	80000615 	stw	zero,24(r16)
    3a3c:	81001704 	addi	r4,r16,92
    3a40:	000b883a 	mov	r5,zero
    3a44:	01800204 	movi	r6,8
    3a48:	0003e300 	call	3e30 <memset>
    3a4c:	8005883a 	mov	r2,r16
    3a50:	80000c15 	stw	zero,48(r16)
    3a54:	80000d15 	stw	zero,52(r16)
    3a58:	80001115 	stw	zero,68(r16)
    3a5c:	80001215 	stw	zero,72(r16)
    3a60:	dfc00417 	ldw	ra,16(sp)
    3a64:	dcc00317 	ldw	r19,12(sp)
    3a68:	dc800217 	ldw	r18,8(sp)
    3a6c:	dc400117 	ldw	r17,4(sp)
    3a70:	dc000017 	ldw	r16,0(sp)
    3a74:	dec00504 	addi	sp,sp,20
    3a78:	f800283a 	ret
    3a7c:	9809883a 	mov	r4,r19
    3a80:	01400104 	movi	r5,4
    3a84:	00039240 	call	3924 <__sfmoreglue>
    3a88:	90800015 	stw	r2,0(r18)
    3a8c:	103fde1e 	bne	r2,zero,3a08 <__sfp+0x80>
    3a90:	00800304 	movi	r2,12
    3a94:	98800015 	stw	r2,0(r19)
    3a98:	0005883a 	mov	r2,zero
    3a9c:	003ff006 	br	3a60 <__sfp+0xd8>

00003aa0 <_cleanup>:
    3aa0:	00800074 	movhi	r2,1
    3aa4:	10a1a604 	addi	r2,r2,-31080
    3aa8:	11000017 	ldw	r4,0(r2)
    3aac:	01400034 	movhi	r5,0
    3ab0:	29509004 	addi	r5,r5,16960
    3ab4:	0003b081 	jmpi	3b08 <_fwalk>

00003ab8 <__sinit>:
    3ab8:	20800e17 	ldw	r2,56(r4)
    3abc:	10000126 	beq	r2,zero,3ac4 <__sinit+0xc>
    3ac0:	f800283a 	ret
    3ac4:	00037841 	jmpi	3784 <__sinit.part.1>

00003ac8 <__sfp_lock_acquire>:
    3ac8:	f800283a 	ret

00003acc <__sfp_lock_release>:
    3acc:	f800283a 	ret

00003ad0 <__sinit_lock_acquire>:
    3ad0:	f800283a 	ret

00003ad4 <__sinit_lock_release>:
    3ad4:	f800283a 	ret

00003ad8 <__fp_lock_all>:
    3ad8:	00800074 	movhi	r2,1
    3adc:	10a1a704 	addi	r2,r2,-31076
    3ae0:	11000017 	ldw	r4,0(r2)
    3ae4:	01400034 	movhi	r5,0
    3ae8:	294dda04 	addi	r5,r5,14184
    3aec:	0003b081 	jmpi	3b08 <_fwalk>

00003af0 <__fp_unlock_all>:
    3af0:	00800074 	movhi	r2,1
    3af4:	10a1a704 	addi	r2,r2,-31076
    3af8:	11000017 	ldw	r4,0(r2)
    3afc:	01400034 	movhi	r5,0
    3b00:	294ddc04 	addi	r5,r5,14192
    3b04:	0003b081 	jmpi	3b08 <_fwalk>

00003b08 <_fwalk>:
    3b08:	defff804 	addi	sp,sp,-32
    3b0c:	dd400515 	stw	r21,20(sp)
    3b10:	2540b804 	addi	r21,r4,736
    3b14:	dd800615 	stw	r22,24(sp)
    3b18:	dd000415 	stw	r20,16(sp)
    3b1c:	dfc00715 	stw	ra,28(sp)
    3b20:	dcc00315 	stw	r19,12(sp)
    3b24:	dc800215 	stw	r18,8(sp)
    3b28:	dc400115 	stw	r17,4(sp)
    3b2c:	dc000015 	stw	r16,0(sp)
    3b30:	2829883a 	mov	r20,r5
    3b34:	002d883a 	mov	r22,zero
    3b38:	0003ac80 	call	3ac8 <__sfp_lock_acquire>
    3b3c:	a8001426 	beq	r21,zero,3b90 <_fwalk+0x88>
    3b40:	04ffffc4 	movi	r19,-1
    3b44:	ac400117 	ldw	r17,4(r21)
    3b48:	ac800217 	ldw	r18,8(r21)
    3b4c:	8c7fffc4 	addi	r17,r17,-1
    3b50:	88000d16 	blt	r17,zero,3b88 <_fwalk+0x80>
    3b54:	94000304 	addi	r16,r18,12
    3b58:	94800384 	addi	r18,r18,14
    3b5c:	80c0000f 	ldh	r3,0(r16)
    3b60:	8c7fffc4 	addi	r17,r17,-1
    3b64:	813ffd04 	addi	r4,r16,-12
    3b68:	18000426 	beq	r3,zero,3b7c <_fwalk+0x74>
    3b6c:	90c0000f 	ldh	r3,0(r18)
    3b70:	1cc00226 	beq	r3,r19,3b7c <_fwalk+0x74>
    3b74:	a03ee83a 	callr	r20
    3b78:	b0acb03a 	or	r22,r22,r2
    3b7c:	84001a04 	addi	r16,r16,104
    3b80:	94801a04 	addi	r18,r18,104
    3b84:	8cfff51e 	bne	r17,r19,3b5c <_fwalk+0x54>
    3b88:	ad400017 	ldw	r21,0(r21)
    3b8c:	a83fed1e 	bne	r21,zero,3b44 <_fwalk+0x3c>
    3b90:	0003acc0 	call	3acc <__sfp_lock_release>
    3b94:	b005883a 	mov	r2,r22
    3b98:	dfc00717 	ldw	ra,28(sp)
    3b9c:	dd800617 	ldw	r22,24(sp)
    3ba0:	dd400517 	ldw	r21,20(sp)
    3ba4:	dd000417 	ldw	r20,16(sp)
    3ba8:	dcc00317 	ldw	r19,12(sp)
    3bac:	dc800217 	ldw	r18,8(sp)
    3bb0:	dc400117 	ldw	r17,4(sp)
    3bb4:	dc000017 	ldw	r16,0(sp)
    3bb8:	dec00804 	addi	sp,sp,32
    3bbc:	f800283a 	ret

00003bc0 <_fwalk_reent>:
    3bc0:	defff804 	addi	sp,sp,-32
    3bc4:	dd400515 	stw	r21,20(sp)
    3bc8:	2540b804 	addi	r21,r4,736
    3bcc:	dd800615 	stw	r22,24(sp)
    3bd0:	dd000415 	stw	r20,16(sp)
    3bd4:	dcc00315 	stw	r19,12(sp)
    3bd8:	dfc00715 	stw	ra,28(sp)
    3bdc:	dc800215 	stw	r18,8(sp)
    3be0:	dc400115 	stw	r17,4(sp)
    3be4:	dc000015 	stw	r16,0(sp)
    3be8:	2027883a 	mov	r19,r4
    3bec:	2829883a 	mov	r20,r5
    3bf0:	002d883a 	mov	r22,zero
    3bf4:	0003ac80 	call	3ac8 <__sfp_lock_acquire>
    3bf8:	a8001326 	beq	r21,zero,3c48 <_fwalk_reent+0x88>
    3bfc:	04bfffc4 	movi	r18,-1
    3c00:	ac400117 	ldw	r17,4(r21)
    3c04:	ac000217 	ldw	r16,8(r21)
    3c08:	8c7fffc4 	addi	r17,r17,-1
    3c0c:	88000c16 	blt	r17,zero,3c40 <_fwalk_reent+0x80>
    3c10:	84000304 	addi	r16,r16,12
    3c14:	80c0000f 	ldh	r3,0(r16)
    3c18:	8c7fffc4 	addi	r17,r17,-1
    3c1c:	817ffd04 	addi	r5,r16,-12
    3c20:	18000526 	beq	r3,zero,3c38 <_fwalk_reent+0x78>
    3c24:	80c0008f 	ldh	r3,2(r16)
    3c28:	9809883a 	mov	r4,r19
    3c2c:	1c800226 	beq	r3,r18,3c38 <_fwalk_reent+0x78>
    3c30:	a03ee83a 	callr	r20
    3c34:	b0acb03a 	or	r22,r22,r2
    3c38:	84001a04 	addi	r16,r16,104
    3c3c:	8cbff51e 	bne	r17,r18,3c14 <_fwalk_reent+0x54>
    3c40:	ad400017 	ldw	r21,0(r21)
    3c44:	a83fee1e 	bne	r21,zero,3c00 <_fwalk_reent+0x40>
    3c48:	0003acc0 	call	3acc <__sfp_lock_release>
    3c4c:	b005883a 	mov	r2,r22
    3c50:	dfc00717 	ldw	ra,28(sp)
    3c54:	dd800617 	ldw	r22,24(sp)
    3c58:	dd400517 	ldw	r21,20(sp)
    3c5c:	dd000417 	ldw	r20,16(sp)
    3c60:	dcc00317 	ldw	r19,12(sp)
    3c64:	dc800217 	ldw	r18,8(sp)
    3c68:	dc400117 	ldw	r17,4(sp)
    3c6c:	dc000017 	ldw	r16,0(sp)
    3c70:	dec00804 	addi	sp,sp,32
    3c74:	f800283a 	ret

00003c78 <__smakebuf_r>:
    3c78:	2880030b 	ldhu	r2,12(r5)
    3c7c:	10c0008c 	andi	r3,r2,2
    3c80:	1800401e 	bne	r3,zero,3d84 <__smakebuf_r+0x10c>
    3c84:	deffec04 	addi	sp,sp,-80
    3c88:	dc000f15 	stw	r16,60(sp)
    3c8c:	2821883a 	mov	r16,r5
    3c90:	2940038f 	ldh	r5,14(r5)
    3c94:	dc401015 	stw	r17,64(sp)
    3c98:	dfc01315 	stw	ra,76(sp)
    3c9c:	dcc01215 	stw	r19,72(sp)
    3ca0:	dc801115 	stw	r18,68(sp)
    3ca4:	2023883a 	mov	r17,r4
    3ca8:	28001b16 	blt	r5,zero,3d18 <__smakebuf_r+0xa0>
    3cac:	d80d883a 	mov	r6,sp
    3cb0:	00042540 	call	4254 <_fstat_r>
    3cb4:	10001716 	blt	r2,zero,3d14 <__smakebuf_r+0x9c>
    3cb8:	d8800117 	ldw	r2,4(sp)
    3cbc:	00e00014 	movui	r3,32768
    3cc0:	10bc000c 	andi	r2,r2,61440
    3cc4:	10c03726 	beq	r2,r3,3da4 <__smakebuf_r+0x12c>
    3cc8:	80c0030b 	ldhu	r3,12(r16)
    3ccc:	18c20014 	ori	r3,r3,2048
    3cd0:	80c0030d 	sth	r3,12(r16)
    3cd4:	00c80004 	movi	r3,8192
    3cd8:	10c03c1e 	bne	r2,r3,3dcc <__smakebuf_r+0x154>
    3cdc:	8140038f 	ldh	r5,14(r16)
    3ce0:	8809883a 	mov	r4,r17
    3ce4:	00042ac0 	call	42ac <_isatty_r>
    3ce8:	10004e26 	beq	r2,zero,3e24 <__smakebuf_r+0x1ac>
    3cec:	8080030b 	ldhu	r2,12(r16)
    3cf0:	04c00044 	movi	r19,1
    3cf4:	80c010c4 	addi	r3,r16,67
    3cf8:	14c4b03a 	or	r2,r2,r19
    3cfc:	8080030d 	sth	r2,12(r16)
    3d00:	80c00015 	stw	r3,0(r16)
    3d04:	80c00415 	stw	r3,16(r16)
    3d08:	84c00515 	stw	r19,20(r16)
    3d0c:	04810004 	movi	r18,1024
    3d10:	00000706 	br	3d30 <__smakebuf_r+0xb8>
    3d14:	8080030b 	ldhu	r2,12(r16)
    3d18:	10c0200c 	andi	r3,r2,128
    3d1c:	18001f1e 	bne	r3,zero,3d9c <__smakebuf_r+0x124>
    3d20:	04810004 	movi	r18,1024
    3d24:	10820014 	ori	r2,r2,2048
    3d28:	8080030d 	sth	r2,12(r16)
    3d2c:	0027883a 	mov	r19,zero
    3d30:	8809883a 	mov	r4,r17
    3d34:	900b883a 	mov	r5,r18
    3d38:	00018900 	call	1890 <_malloc_r>
    3d3c:	10002e26 	beq	r2,zero,3df8 <__smakebuf_r+0x180>
    3d40:	80c0030b 	ldhu	r3,12(r16)
    3d44:	01000034 	movhi	r4,0
    3d48:	210dde04 	addi	r4,r4,14200
    3d4c:	89000f15 	stw	r4,60(r17)
    3d50:	18c02014 	ori	r3,r3,128
    3d54:	80c0030d 	sth	r3,12(r16)
    3d58:	80800015 	stw	r2,0(r16)
    3d5c:	80800415 	stw	r2,16(r16)
    3d60:	84800515 	stw	r18,20(r16)
    3d64:	98001c1e 	bne	r19,zero,3dd8 <__smakebuf_r+0x160>
    3d68:	dfc01317 	ldw	ra,76(sp)
    3d6c:	dcc01217 	ldw	r19,72(sp)
    3d70:	dc801117 	ldw	r18,68(sp)
    3d74:	dc401017 	ldw	r17,64(sp)
    3d78:	dc000f17 	ldw	r16,60(sp)
    3d7c:	dec01404 	addi	sp,sp,80
    3d80:	f800283a 	ret
    3d84:	288010c4 	addi	r2,r5,67
    3d88:	28800015 	stw	r2,0(r5)
    3d8c:	28800415 	stw	r2,16(r5)
    3d90:	00800044 	movi	r2,1
    3d94:	28800515 	stw	r2,20(r5)
    3d98:	f800283a 	ret
    3d9c:	04801004 	movi	r18,64
    3da0:	003fe006 	br	3d24 <__smakebuf_r+0xac>
    3da4:	81000a17 	ldw	r4,40(r16)
    3da8:	00c00034 	movhi	r3,0
    3dac:	18d00b04 	addi	r3,r3,16428
    3db0:	20ffc51e 	bne	r4,r3,3cc8 <__smakebuf_r+0x50>
    3db4:	80c0030b 	ldhu	r3,12(r16)
    3db8:	01010004 	movi	r4,1024
    3dbc:	81001315 	stw	r4,76(r16)
    3dc0:	1906b03a 	or	r3,r3,r4
    3dc4:	80c0030d 	sth	r3,12(r16)
    3dc8:	003fc206 	br	3cd4 <__smakebuf_r+0x5c>
    3dcc:	0027883a 	mov	r19,zero
    3dd0:	04810004 	movi	r18,1024
    3dd4:	003fd606 	br	3d30 <__smakebuf_r+0xb8>
    3dd8:	8140038f 	ldh	r5,14(r16)
    3ddc:	8809883a 	mov	r4,r17
    3de0:	00042ac0 	call	42ac <_isatty_r>
    3de4:	103fe026 	beq	r2,zero,3d68 <__smakebuf_r+0xf0>
    3de8:	8080030b 	ldhu	r2,12(r16)
    3dec:	10800054 	ori	r2,r2,1
    3df0:	8080030d 	sth	r2,12(r16)
    3df4:	003fdc06 	br	3d68 <__smakebuf_r+0xf0>
    3df8:	8080030b 	ldhu	r2,12(r16)
    3dfc:	10c0800c 	andi	r3,r2,512
    3e00:	183fd91e 	bne	r3,zero,3d68 <__smakebuf_r+0xf0>
    3e04:	10800094 	ori	r2,r2,2
    3e08:	80c010c4 	addi	r3,r16,67
    3e0c:	8080030d 	sth	r2,12(r16)
    3e10:	00800044 	movi	r2,1
    3e14:	80c00015 	stw	r3,0(r16)
    3e18:	80c00415 	stw	r3,16(r16)
    3e1c:	80800515 	stw	r2,20(r16)
    3e20:	003fd106 	br	3d68 <__smakebuf_r+0xf0>
    3e24:	04c00044 	movi	r19,1
    3e28:	04810004 	movi	r18,1024
    3e2c:	003fc006 	br	3d30 <__smakebuf_r+0xb8>

00003e30 <memset>:
    3e30:	20c000cc 	andi	r3,r4,3
    3e34:	2005883a 	mov	r2,r4
    3e38:	18004326 	beq	r3,zero,3f48 <memset+0x118>
    3e3c:	31ffffc4 	addi	r7,r6,-1
    3e40:	30004026 	beq	r6,zero,3f44 <memset+0x114>
    3e44:	2813883a 	mov	r9,r5
    3e48:	200d883a 	mov	r6,r4
    3e4c:	2007883a 	mov	r3,r4
    3e50:	00000406 	br	3e64 <memset+0x34>
    3e54:	3a3fffc4 	addi	r8,r7,-1
    3e58:	31800044 	addi	r6,r6,1
    3e5c:	38003926 	beq	r7,zero,3f44 <memset+0x114>
    3e60:	400f883a 	mov	r7,r8
    3e64:	18c00044 	addi	r3,r3,1
    3e68:	32400005 	stb	r9,0(r6)
    3e6c:	1a0000cc 	andi	r8,r3,3
    3e70:	403ff81e 	bne	r8,zero,3e54 <memset+0x24>
    3e74:	010000c4 	movi	r4,3
    3e78:	21c02d2e 	bgeu	r4,r7,3f30 <memset+0x100>
    3e7c:	29803fcc 	andi	r6,r5,255
    3e80:	3008923a 	slli	r4,r6,8
    3e84:	218cb03a 	or	r6,r4,r6
    3e88:	3008943a 	slli	r4,r6,16
    3e8c:	218cb03a 	or	r6,r4,r6
    3e90:	010003c4 	movi	r4,15
    3e94:	21c0182e 	bgeu	r4,r7,3ef8 <memset+0xc8>
    3e98:	3b3ffc04 	addi	r12,r7,-16
    3e9c:	6018d13a 	srli	r12,r12,4
    3ea0:	1a000104 	addi	r8,r3,4
    3ea4:	1ac00204 	addi	r11,r3,8
    3ea8:	6008913a 	slli	r4,r12,4
    3eac:	1a800304 	addi	r10,r3,12
    3eb0:	1813883a 	mov	r9,r3
    3eb4:	21000504 	addi	r4,r4,20
    3eb8:	1909883a 	add	r4,r3,r4
    3ebc:	49800015 	stw	r6,0(r9)
    3ec0:	41800015 	stw	r6,0(r8)
    3ec4:	59800015 	stw	r6,0(r11)
    3ec8:	51800015 	stw	r6,0(r10)
    3ecc:	42000404 	addi	r8,r8,16
    3ed0:	4a400404 	addi	r9,r9,16
    3ed4:	5ac00404 	addi	r11,r11,16
    3ed8:	52800404 	addi	r10,r10,16
    3edc:	413ff71e 	bne	r8,r4,3ebc <memset+0x8c>
    3ee0:	63000044 	addi	r12,r12,1
    3ee4:	6018913a 	slli	r12,r12,4
    3ee8:	39c003cc 	andi	r7,r7,15
    3eec:	010000c4 	movi	r4,3
    3ef0:	1b07883a 	add	r3,r3,r12
    3ef4:	21c00e2e 	bgeu	r4,r7,3f30 <memset+0x100>
    3ef8:	1813883a 	mov	r9,r3
    3efc:	3811883a 	mov	r8,r7
    3f00:	010000c4 	movi	r4,3
    3f04:	49800015 	stw	r6,0(r9)
    3f08:	423fff04 	addi	r8,r8,-4
    3f0c:	4a400104 	addi	r9,r9,4
    3f10:	223ffc36 	bltu	r4,r8,3f04 <memset+0xd4>
    3f14:	393fff04 	addi	r4,r7,-4
    3f18:	2008d0ba 	srli	r4,r4,2
    3f1c:	39c000cc 	andi	r7,r7,3
    3f20:	21000044 	addi	r4,r4,1
    3f24:	2109883a 	add	r4,r4,r4
    3f28:	2109883a 	add	r4,r4,r4
    3f2c:	1907883a 	add	r3,r3,r4
    3f30:	38000426 	beq	r7,zero,3f44 <memset+0x114>
    3f34:	19cf883a 	add	r7,r3,r7
    3f38:	19400005 	stb	r5,0(r3)
    3f3c:	18c00044 	addi	r3,r3,1
    3f40:	19fffd1e 	bne	r3,r7,3f38 <memset+0x108>
    3f44:	f800283a 	ret
    3f48:	2007883a 	mov	r3,r4
    3f4c:	300f883a 	mov	r7,r6
    3f50:	003fc806 	br	3e74 <memset+0x44>

00003f54 <__sread>:
    3f54:	defffe04 	addi	sp,sp,-8
    3f58:	dc000015 	stw	r16,0(sp)
    3f5c:	2821883a 	mov	r16,r5
    3f60:	2940038f 	ldh	r5,14(r5)
    3f64:	dfc00115 	stw	ra,4(sp)
    3f68:	000435c0 	call	435c <_read_r>
    3f6c:	10000716 	blt	r2,zero,3f8c <__sread+0x38>
    3f70:	80c01417 	ldw	r3,80(r16)
    3f74:	1887883a 	add	r3,r3,r2
    3f78:	80c01415 	stw	r3,80(r16)
    3f7c:	dfc00117 	ldw	ra,4(sp)
    3f80:	dc000017 	ldw	r16,0(sp)
    3f84:	dec00204 	addi	sp,sp,8
    3f88:	f800283a 	ret
    3f8c:	80c0030b 	ldhu	r3,12(r16)
    3f90:	18fbffcc 	andi	r3,r3,61439
    3f94:	80c0030d 	sth	r3,12(r16)
    3f98:	dfc00117 	ldw	ra,4(sp)
    3f9c:	dc000017 	ldw	r16,0(sp)
    3fa0:	dec00204 	addi	sp,sp,8
    3fa4:	f800283a 	ret

00003fa8 <__seofread>:
    3fa8:	0005883a 	mov	r2,zero
    3fac:	f800283a 	ret

00003fb0 <__swrite>:
    3fb0:	2880030b 	ldhu	r2,12(r5)
    3fb4:	defffb04 	addi	sp,sp,-20
    3fb8:	dcc00315 	stw	r19,12(sp)
    3fbc:	dc800215 	stw	r18,8(sp)
    3fc0:	dc400115 	stw	r17,4(sp)
    3fc4:	dc000015 	stw	r16,0(sp)
    3fc8:	dfc00415 	stw	ra,16(sp)
    3fcc:	10c0400c 	andi	r3,r2,256
    3fd0:	2821883a 	mov	r16,r5
    3fd4:	2027883a 	mov	r19,r4
    3fd8:	3025883a 	mov	r18,r6
    3fdc:	3823883a 	mov	r17,r7
    3fe0:	18000526 	beq	r3,zero,3ff8 <__swrite+0x48>
    3fe4:	2940038f 	ldh	r5,14(r5)
    3fe8:	000d883a 	mov	r6,zero
    3fec:	01c00084 	movi	r7,2
    3ff0:	00043000 	call	4300 <_lseek_r>
    3ff4:	8080030b 	ldhu	r2,12(r16)
    3ff8:	8140038f 	ldh	r5,14(r16)
    3ffc:	10bbffcc 	andi	r2,r2,61439
    4000:	9809883a 	mov	r4,r19
    4004:	900d883a 	mov	r6,r18
    4008:	880f883a 	mov	r7,r17
    400c:	8080030d 	sth	r2,12(r16)
    4010:	dfc00417 	ldw	ra,16(sp)
    4014:	dcc00317 	ldw	r19,12(sp)
    4018:	dc800217 	ldw	r18,8(sp)
    401c:	dc400117 	ldw	r17,4(sp)
    4020:	dc000017 	ldw	r16,0(sp)
    4024:	dec00504 	addi	sp,sp,20
    4028:	00040901 	jmpi	4090 <_write_r>

0000402c <__sseek>:
    402c:	defffe04 	addi	sp,sp,-8
    4030:	dc000015 	stw	r16,0(sp)
    4034:	2821883a 	mov	r16,r5
    4038:	2940038f 	ldh	r5,14(r5)
    403c:	dfc00115 	stw	ra,4(sp)
    4040:	00043000 	call	4300 <_lseek_r>
    4044:	00ffffc4 	movi	r3,-1
    4048:	10c00826 	beq	r2,r3,406c <__sseek+0x40>
    404c:	80c0030b 	ldhu	r3,12(r16)
    4050:	80801415 	stw	r2,80(r16)
    4054:	18c40014 	ori	r3,r3,4096
    4058:	80c0030d 	sth	r3,12(r16)
    405c:	dfc00117 	ldw	ra,4(sp)
    4060:	dc000017 	ldw	r16,0(sp)
    4064:	dec00204 	addi	sp,sp,8
    4068:	f800283a 	ret
    406c:	80c0030b 	ldhu	r3,12(r16)
    4070:	18fbffcc 	andi	r3,r3,61439
    4074:	80c0030d 	sth	r3,12(r16)
    4078:	dfc00117 	ldw	ra,4(sp)
    407c:	dc000017 	ldw	r16,0(sp)
    4080:	dec00204 	addi	sp,sp,8
    4084:	f800283a 	ret

00004088 <__sclose>:
    4088:	2940038f 	ldh	r5,14(r5)
    408c:	00040ec1 	jmpi	40ec <_close_r>

00004090 <_write_r>:
    4090:	defffd04 	addi	sp,sp,-12
    4094:	dc000015 	stw	r16,0(sp)
    4098:	04000074 	movhi	r16,1
    409c:	dc400115 	stw	r17,4(sp)
    40a0:	84285004 	addi	r16,r16,-24256
    40a4:	2023883a 	mov	r17,r4
    40a8:	2809883a 	mov	r4,r5
    40ac:	300b883a 	mov	r5,r6
    40b0:	380d883a 	mov	r6,r7
    40b4:	dfc00215 	stw	ra,8(sp)
    40b8:	80000015 	stw	zero,0(r16)
    40bc:	0004c940 	call	4c94 <write>
    40c0:	00ffffc4 	movi	r3,-1
    40c4:	10c00526 	beq	r2,r3,40dc <_write_r+0x4c>
    40c8:	dfc00217 	ldw	ra,8(sp)
    40cc:	dc400117 	ldw	r17,4(sp)
    40d0:	dc000017 	ldw	r16,0(sp)
    40d4:	dec00304 	addi	sp,sp,12
    40d8:	f800283a 	ret
    40dc:	80c00017 	ldw	r3,0(r16)
    40e0:	183ff926 	beq	r3,zero,40c8 <_write_r+0x38>
    40e4:	88c00015 	stw	r3,0(r17)
    40e8:	003ff706 	br	40c8 <_write_r+0x38>

000040ec <_close_r>:
    40ec:	defffd04 	addi	sp,sp,-12
    40f0:	dc000015 	stw	r16,0(sp)
    40f4:	04000074 	movhi	r16,1
    40f8:	dc400115 	stw	r17,4(sp)
    40fc:	84285004 	addi	r16,r16,-24256
    4100:	2023883a 	mov	r17,r4
    4104:	2809883a 	mov	r4,r5
    4108:	dfc00215 	stw	ra,8(sp)
    410c:	80000015 	stw	zero,0(r16)
    4110:	00044080 	call	4408 <close>
    4114:	00ffffc4 	movi	r3,-1
    4118:	10c00526 	beq	r2,r3,4130 <_close_r+0x44>
    411c:	dfc00217 	ldw	ra,8(sp)
    4120:	dc400117 	ldw	r17,4(sp)
    4124:	dc000017 	ldw	r16,0(sp)
    4128:	dec00304 	addi	sp,sp,12
    412c:	f800283a 	ret
    4130:	80c00017 	ldw	r3,0(r16)
    4134:	183ff926 	beq	r3,zero,411c <_close_r+0x30>
    4138:	88c00015 	stw	r3,0(r17)
    413c:	003ff706 	br	411c <_close_r+0x30>

00004140 <_fclose_r>:
    4140:	28003226 	beq	r5,zero,420c <_fclose_r+0xcc>
    4144:	defffc04 	addi	sp,sp,-16
    4148:	dc400115 	stw	r17,4(sp)
    414c:	2023883a 	mov	r17,r4
    4150:	dc000015 	stw	r16,0(sp)
    4154:	dfc00315 	stw	ra,12(sp)
    4158:	dc800215 	stw	r18,8(sp)
    415c:	2821883a 	mov	r16,r5
    4160:	0003ac80 	call	3ac8 <__sfp_lock_acquire>
    4164:	88000226 	beq	r17,zero,4170 <_fclose_r+0x30>
    4168:	88800e17 	ldw	r2,56(r17)
    416c:	10002926 	beq	r2,zero,4214 <_fclose_r+0xd4>
    4170:	8080030f 	ldh	r2,12(r16)
    4174:	10002226 	beq	r2,zero,4200 <_fclose_r+0xc0>
    4178:	8809883a 	mov	r4,r17
    417c:	800b883a 	mov	r5,r16
    4180:	00035100 	call	3510 <_fflush_r>
    4184:	1025883a 	mov	r18,r2
    4188:	80800b17 	ldw	r2,44(r16)
    418c:	10000426 	beq	r2,zero,41a0 <_fclose_r+0x60>
    4190:	81400717 	ldw	r5,28(r16)
    4194:	8809883a 	mov	r4,r17
    4198:	103ee83a 	callr	r2
    419c:	10002616 	blt	r2,zero,4238 <_fclose_r+0xf8>
    41a0:	8080030b 	ldhu	r2,12(r16)
    41a4:	1080200c 	andi	r2,r2,128
    41a8:	10001f1e 	bne	r2,zero,4228 <_fclose_r+0xe8>
    41ac:	81400c17 	ldw	r5,48(r16)
    41b0:	28000526 	beq	r5,zero,41c8 <_fclose_r+0x88>
    41b4:	80801004 	addi	r2,r16,64
    41b8:	28800226 	beq	r5,r2,41c4 <_fclose_r+0x84>
    41bc:	8809883a 	mov	r4,r17
    41c0:	00028d00 	call	28d0 <_free_r>
    41c4:	80000c15 	stw	zero,48(r16)
    41c8:	81401117 	ldw	r5,68(r16)
    41cc:	28000326 	beq	r5,zero,41dc <_fclose_r+0x9c>
    41d0:	8809883a 	mov	r4,r17
    41d4:	00028d00 	call	28d0 <_free_r>
    41d8:	80001115 	stw	zero,68(r16)
    41dc:	8000030d 	sth	zero,12(r16)
    41e0:	0003acc0 	call	3acc <__sfp_lock_release>
    41e4:	9005883a 	mov	r2,r18
    41e8:	dfc00317 	ldw	ra,12(sp)
    41ec:	dc800217 	ldw	r18,8(sp)
    41f0:	dc400117 	ldw	r17,4(sp)
    41f4:	dc000017 	ldw	r16,0(sp)
    41f8:	dec00404 	addi	sp,sp,16
    41fc:	f800283a 	ret
    4200:	0003acc0 	call	3acc <__sfp_lock_release>
    4204:	0005883a 	mov	r2,zero
    4208:	003ff706 	br	41e8 <_fclose_r+0xa8>
    420c:	0005883a 	mov	r2,zero
    4210:	f800283a 	ret
    4214:	8809883a 	mov	r4,r17
    4218:	0003ab80 	call	3ab8 <__sinit>
    421c:	8080030f 	ldh	r2,12(r16)
    4220:	103fd51e 	bne	r2,zero,4178 <_fclose_r+0x38>
    4224:	003ff606 	br	4200 <_fclose_r+0xc0>
    4228:	81400417 	ldw	r5,16(r16)
    422c:	8809883a 	mov	r4,r17
    4230:	00028d00 	call	28d0 <_free_r>
    4234:	003fdd06 	br	41ac <_fclose_r+0x6c>
    4238:	04bfffc4 	movi	r18,-1
    423c:	003fd806 	br	41a0 <_fclose_r+0x60>

00004240 <fclose>:
    4240:	00800074 	movhi	r2,1
    4244:	10a1a704 	addi	r2,r2,-31076
    4248:	200b883a 	mov	r5,r4
    424c:	11000017 	ldw	r4,0(r2)
    4250:	00041401 	jmpi	4140 <_fclose_r>

00004254 <_fstat_r>:
    4254:	defffd04 	addi	sp,sp,-12
    4258:	dc000015 	stw	r16,0(sp)
    425c:	04000074 	movhi	r16,1
    4260:	dc400115 	stw	r17,4(sp)
    4264:	84285004 	addi	r16,r16,-24256
    4268:	2023883a 	mov	r17,r4
    426c:	2809883a 	mov	r4,r5
    4270:	300b883a 	mov	r5,r6
    4274:	dfc00215 	stw	ra,8(sp)
    4278:	80000015 	stw	zero,0(r16)
    427c:	00045540 	call	4554 <fstat>
    4280:	00ffffc4 	movi	r3,-1
    4284:	10c00526 	beq	r2,r3,429c <_fstat_r+0x48>
    4288:	dfc00217 	ldw	ra,8(sp)
    428c:	dc400117 	ldw	r17,4(sp)
    4290:	dc000017 	ldw	r16,0(sp)
    4294:	dec00304 	addi	sp,sp,12
    4298:	f800283a 	ret
    429c:	80c00017 	ldw	r3,0(r16)
    42a0:	183ff926 	beq	r3,zero,4288 <_fstat_r+0x34>
    42a4:	88c00015 	stw	r3,0(r17)
    42a8:	003ff706 	br	4288 <_fstat_r+0x34>

000042ac <_isatty_r>:
    42ac:	defffd04 	addi	sp,sp,-12
    42b0:	dc000015 	stw	r16,0(sp)
    42b4:	04000074 	movhi	r16,1
    42b8:	dc400115 	stw	r17,4(sp)
    42bc:	84285004 	addi	r16,r16,-24256
    42c0:	2023883a 	mov	r17,r4
    42c4:	2809883a 	mov	r4,r5
    42c8:	dfc00215 	stw	ra,8(sp)
    42cc:	80000015 	stw	zero,0(r16)
    42d0:	00046540 	call	4654 <isatty>
    42d4:	00ffffc4 	movi	r3,-1
    42d8:	10c00526 	beq	r2,r3,42f0 <_isatty_r+0x44>
    42dc:	dfc00217 	ldw	ra,8(sp)
    42e0:	dc400117 	ldw	r17,4(sp)
    42e4:	dc000017 	ldw	r16,0(sp)
    42e8:	dec00304 	addi	sp,sp,12
    42ec:	f800283a 	ret
    42f0:	80c00017 	ldw	r3,0(r16)
    42f4:	183ff926 	beq	r3,zero,42dc <_isatty_r+0x30>
    42f8:	88c00015 	stw	r3,0(r17)
    42fc:	003ff706 	br	42dc <_isatty_r+0x30>

00004300 <_lseek_r>:
    4300:	defffd04 	addi	sp,sp,-12
    4304:	dc000015 	stw	r16,0(sp)
    4308:	04000074 	movhi	r16,1
    430c:	dc400115 	stw	r17,4(sp)
    4310:	84285004 	addi	r16,r16,-24256
    4314:	2023883a 	mov	r17,r4
    4318:	2809883a 	mov	r4,r5
    431c:	300b883a 	mov	r5,r6
    4320:	380d883a 	mov	r6,r7
    4324:	dfc00215 	stw	ra,8(sp)
    4328:	80000015 	stw	zero,0(r16)
    432c:	000482c0 	call	482c <lseek>
    4330:	00ffffc4 	movi	r3,-1
    4334:	10c00526 	beq	r2,r3,434c <_lseek_r+0x4c>
    4338:	dfc00217 	ldw	ra,8(sp)
    433c:	dc400117 	ldw	r17,4(sp)
    4340:	dc000017 	ldw	r16,0(sp)
    4344:	dec00304 	addi	sp,sp,12
    4348:	f800283a 	ret
    434c:	80c00017 	ldw	r3,0(r16)
    4350:	183ff926 	beq	r3,zero,4338 <_lseek_r+0x38>
    4354:	88c00015 	stw	r3,0(r17)
    4358:	003ff706 	br	4338 <_lseek_r+0x38>

0000435c <_read_r>:
    435c:	defffd04 	addi	sp,sp,-12
    4360:	dc000015 	stw	r16,0(sp)
    4364:	04000074 	movhi	r16,1
    4368:	dc400115 	stw	r17,4(sp)
    436c:	84285004 	addi	r16,r16,-24256
    4370:	2023883a 	mov	r17,r4
    4374:	2809883a 	mov	r4,r5
    4378:	300b883a 	mov	r5,r6
    437c:	380d883a 	mov	r6,r7
    4380:	dfc00215 	stw	ra,8(sp)
    4384:	80000015 	stw	zero,0(r16)
    4388:	0004a080 	call	4a08 <read>
    438c:	00ffffc4 	movi	r3,-1
    4390:	10c00526 	beq	r2,r3,43a8 <_read_r+0x4c>
    4394:	dfc00217 	ldw	ra,8(sp)
    4398:	dc400117 	ldw	r17,4(sp)
    439c:	dc000017 	ldw	r16,0(sp)
    43a0:	dec00304 	addi	sp,sp,12
    43a4:	f800283a 	ret
    43a8:	80c00017 	ldw	r3,0(r16)
    43ac:	183ff926 	beq	r3,zero,4394 <_read_r+0x38>
    43b0:	88c00015 	stw	r3,0(r17)
    43b4:	003ff706 	br	4394 <_read_r+0x38>

000043b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    43b8:	defffe04 	addi	sp,sp,-8
    43bc:	dfc00115 	stw	ra,4(sp)
    43c0:	df000015 	stw	fp,0(sp)
    43c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    43c8:	00800074 	movhi	r2,1
    43cc:	10a1ad04 	addi	r2,r2,-31052
    43d0:	10800017 	ldw	r2,0(r2)
    43d4:	10000526 	beq	r2,zero,43ec <alt_get_errno+0x34>
    43d8:	00800074 	movhi	r2,1
    43dc:	10a1ad04 	addi	r2,r2,-31052
    43e0:	10800017 	ldw	r2,0(r2)
    43e4:	103ee83a 	callr	r2
    43e8:	00000206 	br	43f4 <alt_get_errno+0x3c>
    43ec:	00800074 	movhi	r2,1
    43f0:	10a85004 	addi	r2,r2,-24256
}
    43f4:	e037883a 	mov	sp,fp
    43f8:	dfc00117 	ldw	ra,4(sp)
    43fc:	df000017 	ldw	fp,0(sp)
    4400:	dec00204 	addi	sp,sp,8
    4404:	f800283a 	ret

00004408 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    4408:	defffb04 	addi	sp,sp,-20
    440c:	dfc00415 	stw	ra,16(sp)
    4410:	df000315 	stw	fp,12(sp)
    4414:	df000304 	addi	fp,sp,12
    4418:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    441c:	e0bfff17 	ldw	r2,-4(fp)
    4420:	10000616 	blt	r2,zero,443c <close+0x34>
    4424:	e0bfff17 	ldw	r2,-4(fp)
    4428:	10c00324 	muli	r3,r2,12
    442c:	00800034 	movhi	r2,0
    4430:	109d2c04 	addi	r2,r2,29872
    4434:	1885883a 	add	r2,r3,r2
    4438:	00000106 	br	4440 <close+0x38>
    443c:	0005883a 	mov	r2,zero
    4440:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    4444:	e0bffd17 	ldw	r2,-12(fp)
    4448:	10001926 	beq	r2,zero,44b0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    444c:	e0bffd17 	ldw	r2,-12(fp)
    4450:	10800017 	ldw	r2,0(r2)
    4454:	10800417 	ldw	r2,16(r2)
    4458:	10000626 	beq	r2,zero,4474 <close+0x6c>
    445c:	e0bffd17 	ldw	r2,-12(fp)
    4460:	10800017 	ldw	r2,0(r2)
    4464:	10800417 	ldw	r2,16(r2)
    4468:	e13ffd17 	ldw	r4,-12(fp)
    446c:	103ee83a 	callr	r2
    4470:	00000106 	br	4478 <close+0x70>
    4474:	0005883a 	mov	r2,zero
    4478:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    447c:	e13fff17 	ldw	r4,-4(fp)
    4480:	0004b040 	call	4b04 <alt_release_fd>
    if (rval < 0)
    4484:	e0bffe17 	ldw	r2,-8(fp)
    4488:	1000070e 	bge	r2,zero,44a8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    448c:	00043b80 	call	43b8 <alt_get_errno>
    4490:	1007883a 	mov	r3,r2
    4494:	e0bffe17 	ldw	r2,-8(fp)
    4498:	0085c83a 	sub	r2,zero,r2
    449c:	18800015 	stw	r2,0(r3)
      return -1;
    44a0:	00bfffc4 	movi	r2,-1
    44a4:	00000706 	br	44c4 <close+0xbc>
    }
    return 0;
    44a8:	0005883a 	mov	r2,zero
    44ac:	00000506 	br	44c4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    44b0:	00043b80 	call	43b8 <alt_get_errno>
    44b4:	1007883a 	mov	r3,r2
    44b8:	00801444 	movi	r2,81
    44bc:	18800015 	stw	r2,0(r3)
    return -1;
    44c0:	00bfffc4 	movi	r2,-1
  }
}
    44c4:	e037883a 	mov	sp,fp
    44c8:	dfc00117 	ldw	ra,4(sp)
    44cc:	df000017 	ldw	fp,0(sp)
    44d0:	dec00204 	addi	sp,sp,8
    44d4:	f800283a 	ret

000044d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    44d8:	defffc04 	addi	sp,sp,-16
    44dc:	df000315 	stw	fp,12(sp)
    44e0:	df000304 	addi	fp,sp,12
    44e4:	e13ffd15 	stw	r4,-12(fp)
    44e8:	e17ffe15 	stw	r5,-8(fp)
    44ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
    44f0:	e0bfff17 	ldw	r2,-4(fp)
}
    44f4:	e037883a 	mov	sp,fp
    44f8:	df000017 	ldw	fp,0(sp)
    44fc:	dec00104 	addi	sp,sp,4
    4500:	f800283a 	ret

00004504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4504:	defffe04 	addi	sp,sp,-8
    4508:	dfc00115 	stw	ra,4(sp)
    450c:	df000015 	stw	fp,0(sp)
    4510:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4514:	00800074 	movhi	r2,1
    4518:	10a1ad04 	addi	r2,r2,-31052
    451c:	10800017 	ldw	r2,0(r2)
    4520:	10000526 	beq	r2,zero,4538 <alt_get_errno+0x34>
    4524:	00800074 	movhi	r2,1
    4528:	10a1ad04 	addi	r2,r2,-31052
    452c:	10800017 	ldw	r2,0(r2)
    4530:	103ee83a 	callr	r2
    4534:	00000206 	br	4540 <alt_get_errno+0x3c>
    4538:	00800074 	movhi	r2,1
    453c:	10a85004 	addi	r2,r2,-24256
}
    4540:	e037883a 	mov	sp,fp
    4544:	dfc00117 	ldw	ra,4(sp)
    4548:	df000017 	ldw	fp,0(sp)
    454c:	dec00204 	addi	sp,sp,8
    4550:	f800283a 	ret

00004554 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    4554:	defffb04 	addi	sp,sp,-20
    4558:	dfc00415 	stw	ra,16(sp)
    455c:	df000315 	stw	fp,12(sp)
    4560:	df000304 	addi	fp,sp,12
    4564:	e13ffe15 	stw	r4,-8(fp)
    4568:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    456c:	e0bffe17 	ldw	r2,-8(fp)
    4570:	10000616 	blt	r2,zero,458c <fstat+0x38>
    4574:	e0bffe17 	ldw	r2,-8(fp)
    4578:	10c00324 	muli	r3,r2,12
    457c:	00800034 	movhi	r2,0
    4580:	109d2c04 	addi	r2,r2,29872
    4584:	1885883a 	add	r2,r3,r2
    4588:	00000106 	br	4590 <fstat+0x3c>
    458c:	0005883a 	mov	r2,zero
    4590:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    4594:	e0bffd17 	ldw	r2,-12(fp)
    4598:	10001026 	beq	r2,zero,45dc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    459c:	e0bffd17 	ldw	r2,-12(fp)
    45a0:	10800017 	ldw	r2,0(r2)
    45a4:	10800817 	ldw	r2,32(r2)
    45a8:	10000726 	beq	r2,zero,45c8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    45ac:	e0bffd17 	ldw	r2,-12(fp)
    45b0:	10800017 	ldw	r2,0(r2)
    45b4:	10800817 	ldw	r2,32(r2)
    45b8:	e13ffd17 	ldw	r4,-12(fp)
    45bc:	e17fff17 	ldw	r5,-4(fp)
    45c0:	103ee83a 	callr	r2
    45c4:	00000a06 	br	45f0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    45c8:	e0bfff17 	ldw	r2,-4(fp)
    45cc:	00c80004 	movi	r3,8192
    45d0:	10c00115 	stw	r3,4(r2)
      return 0;
    45d4:	0005883a 	mov	r2,zero
    45d8:	00000506 	br	45f0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    45dc:	00045040 	call	4504 <alt_get_errno>
    45e0:	1007883a 	mov	r3,r2
    45e4:	00801444 	movi	r2,81
    45e8:	18800015 	stw	r2,0(r3)
    return -1;
    45ec:	00bfffc4 	movi	r2,-1
  }
}
    45f0:	e037883a 	mov	sp,fp
    45f4:	dfc00117 	ldw	ra,4(sp)
    45f8:	df000017 	ldw	fp,0(sp)
    45fc:	dec00204 	addi	sp,sp,8
    4600:	f800283a 	ret

00004604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4604:	defffe04 	addi	sp,sp,-8
    4608:	dfc00115 	stw	ra,4(sp)
    460c:	df000015 	stw	fp,0(sp)
    4610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4614:	00800074 	movhi	r2,1
    4618:	10a1ad04 	addi	r2,r2,-31052
    461c:	10800017 	ldw	r2,0(r2)
    4620:	10000526 	beq	r2,zero,4638 <alt_get_errno+0x34>
    4624:	00800074 	movhi	r2,1
    4628:	10a1ad04 	addi	r2,r2,-31052
    462c:	10800017 	ldw	r2,0(r2)
    4630:	103ee83a 	callr	r2
    4634:	00000206 	br	4640 <alt_get_errno+0x3c>
    4638:	00800074 	movhi	r2,1
    463c:	10a85004 	addi	r2,r2,-24256
}
    4640:	e037883a 	mov	sp,fp
    4644:	dfc00117 	ldw	ra,4(sp)
    4648:	df000017 	ldw	fp,0(sp)
    464c:	dec00204 	addi	sp,sp,8
    4650:	f800283a 	ret

00004654 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    4654:	deffed04 	addi	sp,sp,-76
    4658:	dfc01215 	stw	ra,72(sp)
    465c:	df001115 	stw	fp,68(sp)
    4660:	df001104 	addi	fp,sp,68
    4664:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4668:	e0bfff17 	ldw	r2,-4(fp)
    466c:	10000616 	blt	r2,zero,4688 <isatty+0x34>
    4670:	e0bfff17 	ldw	r2,-4(fp)
    4674:	10c00324 	muli	r3,r2,12
    4678:	00800034 	movhi	r2,0
    467c:	109d2c04 	addi	r2,r2,29872
    4680:	1885883a 	add	r2,r3,r2
    4684:	00000106 	br	468c <isatty+0x38>
    4688:	0005883a 	mov	r2,zero
    468c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    4690:	e0bfef17 	ldw	r2,-68(fp)
    4694:	10000e26 	beq	r2,zero,46d0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    4698:	e0bfef17 	ldw	r2,-68(fp)
    469c:	10800017 	ldw	r2,0(r2)
    46a0:	10800817 	ldw	r2,32(r2)
    46a4:	1000021e 	bne	r2,zero,46b0 <isatty+0x5c>
    {
      return 1;
    46a8:	00800044 	movi	r2,1
    46ac:	00000d06 	br	46e4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    46b0:	e0bff004 	addi	r2,fp,-64
    46b4:	e13fff17 	ldw	r4,-4(fp)
    46b8:	100b883a 	mov	r5,r2
    46bc:	00045540 	call	4554 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    46c0:	e0bff117 	ldw	r2,-60(fp)
    46c4:	10880020 	cmpeqi	r2,r2,8192
    46c8:	10803fcc 	andi	r2,r2,255
    46cc:	00000506 	br	46e4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    46d0:	00046040 	call	4604 <alt_get_errno>
    46d4:	1007883a 	mov	r3,r2
    46d8:	00801444 	movi	r2,81
    46dc:	18800015 	stw	r2,0(r3)
    return 0;
    46e0:	0005883a 	mov	r2,zero
  }
}
    46e4:	e037883a 	mov	sp,fp
    46e8:	dfc00117 	ldw	ra,4(sp)
    46ec:	df000017 	ldw	fp,0(sp)
    46f0:	dec00204 	addi	sp,sp,8
    46f4:	f800283a 	ret

000046f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    46f8:	defffc04 	addi	sp,sp,-16
    46fc:	df000315 	stw	fp,12(sp)
    4700:	df000304 	addi	fp,sp,12
    4704:	e13ffd15 	stw	r4,-12(fp)
    4708:	e17ffe15 	stw	r5,-8(fp)
    470c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4710:	e0fffe17 	ldw	r3,-8(fp)
    4714:	e0bffd17 	ldw	r2,-12(fp)
    4718:	18800c26 	beq	r3,r2,474c <alt_load_section+0x54>
  {
    while( to != end )
    471c:	00000806 	br	4740 <alt_load_section+0x48>
    {
      *to++ = *from++;
    4720:	e0bffe17 	ldw	r2,-8(fp)
    4724:	10c00104 	addi	r3,r2,4
    4728:	e0fffe15 	stw	r3,-8(fp)
    472c:	e0fffd17 	ldw	r3,-12(fp)
    4730:	19000104 	addi	r4,r3,4
    4734:	e13ffd15 	stw	r4,-12(fp)
    4738:	18c00017 	ldw	r3,0(r3)
    473c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4740:	e0fffe17 	ldw	r3,-8(fp)
    4744:	e0bfff17 	ldw	r2,-4(fp)
    4748:	18bff51e 	bne	r3,r2,4720 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    474c:	e037883a 	mov	sp,fp
    4750:	df000017 	ldw	fp,0(sp)
    4754:	dec00104 	addi	sp,sp,4
    4758:	f800283a 	ret

0000475c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    475c:	defffe04 	addi	sp,sp,-8
    4760:	dfc00115 	stw	ra,4(sp)
    4764:	df000015 	stw	fp,0(sp)
    4768:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    476c:	01000074 	movhi	r4,1
    4770:	2121b204 	addi	r4,r4,-31032
    4774:	01400034 	movhi	r5,0
    4778:	295b1704 	addi	r5,r5,27740
    477c:	01800074 	movhi	r6,1
    4780:	31a1b204 	addi	r6,r6,-31032
    4784:	00046f80 	call	46f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4788:	01000034 	movhi	r4,0
    478c:	21000804 	addi	r4,r4,32
    4790:	01400034 	movhi	r5,0
    4794:	29400804 	addi	r5,r5,32
    4798:	01800034 	movhi	r6,0
    479c:	31806f04 	addi	r6,r6,444
    47a0:	00046f80 	call	46f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    47a4:	01000034 	movhi	r4,0
    47a8:	211af604 	addi	r4,r4,27608
    47ac:	01400034 	movhi	r5,0
    47b0:	295af604 	addi	r5,r5,27608
    47b4:	01800034 	movhi	r6,0
    47b8:	319b1704 	addi	r6,r6,27740
    47bc:	00046f80 	call	46f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    47c0:	0005b200 	call	5b20 <alt_dcache_flush_all>
  alt_icache_flush_all();
    47c4:	0005ce80 	call	5ce8 <alt_icache_flush_all>
}
    47c8:	e037883a 	mov	sp,fp
    47cc:	dfc00117 	ldw	ra,4(sp)
    47d0:	df000017 	ldw	fp,0(sp)
    47d4:	dec00204 	addi	sp,sp,8
    47d8:	f800283a 	ret

000047dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    47dc:	defffe04 	addi	sp,sp,-8
    47e0:	dfc00115 	stw	ra,4(sp)
    47e4:	df000015 	stw	fp,0(sp)
    47e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    47ec:	00800074 	movhi	r2,1
    47f0:	10a1ad04 	addi	r2,r2,-31052
    47f4:	10800017 	ldw	r2,0(r2)
    47f8:	10000526 	beq	r2,zero,4810 <alt_get_errno+0x34>
    47fc:	00800074 	movhi	r2,1
    4800:	10a1ad04 	addi	r2,r2,-31052
    4804:	10800017 	ldw	r2,0(r2)
    4808:	103ee83a 	callr	r2
    480c:	00000206 	br	4818 <alt_get_errno+0x3c>
    4810:	00800074 	movhi	r2,1
    4814:	10a85004 	addi	r2,r2,-24256
}
    4818:	e037883a 	mov	sp,fp
    481c:	dfc00117 	ldw	ra,4(sp)
    4820:	df000017 	ldw	fp,0(sp)
    4824:	dec00204 	addi	sp,sp,8
    4828:	f800283a 	ret

0000482c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    482c:	defff904 	addi	sp,sp,-28
    4830:	dfc00615 	stw	ra,24(sp)
    4834:	df000515 	stw	fp,20(sp)
    4838:	df000504 	addi	fp,sp,20
    483c:	e13ffd15 	stw	r4,-12(fp)
    4840:	e17ffe15 	stw	r5,-8(fp)
    4844:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    4848:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    484c:	e0bffd17 	ldw	r2,-12(fp)
    4850:	10000616 	blt	r2,zero,486c <lseek+0x40>
    4854:	e0bffd17 	ldw	r2,-12(fp)
    4858:	10c00324 	muli	r3,r2,12
    485c:	00800034 	movhi	r2,0
    4860:	109d2c04 	addi	r2,r2,29872
    4864:	1885883a 	add	r2,r3,r2
    4868:	00000106 	br	4870 <lseek+0x44>
    486c:	0005883a 	mov	r2,zero
    4870:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    4874:	e0bffc17 	ldw	r2,-16(fp)
    4878:	10001026 	beq	r2,zero,48bc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    487c:	e0bffc17 	ldw	r2,-16(fp)
    4880:	10800017 	ldw	r2,0(r2)
    4884:	10800717 	ldw	r2,28(r2)
    4888:	10000926 	beq	r2,zero,48b0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    488c:	e0bffc17 	ldw	r2,-16(fp)
    4890:	10800017 	ldw	r2,0(r2)
    4894:	10800717 	ldw	r2,28(r2)
    4898:	e13ffc17 	ldw	r4,-16(fp)
    489c:	e17ffe17 	ldw	r5,-8(fp)
    48a0:	e1bfff17 	ldw	r6,-4(fp)
    48a4:	103ee83a 	callr	r2
    48a8:	e0bffb15 	stw	r2,-20(fp)
    48ac:	00000506 	br	48c4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    48b0:	00bfde84 	movi	r2,-134
    48b4:	e0bffb15 	stw	r2,-20(fp)
    48b8:	00000206 	br	48c4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    48bc:	00bfebc4 	movi	r2,-81
    48c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    48c4:	e0bffb17 	ldw	r2,-20(fp)
    48c8:	1000070e 	bge	r2,zero,48e8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    48cc:	00047dc0 	call	47dc <alt_get_errno>
    48d0:	1007883a 	mov	r3,r2
    48d4:	e0bffb17 	ldw	r2,-20(fp)
    48d8:	0085c83a 	sub	r2,zero,r2
    48dc:	18800015 	stw	r2,0(r3)
    rc = -1;
    48e0:	00bfffc4 	movi	r2,-1
    48e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    48e8:	e0bffb17 	ldw	r2,-20(fp)
}
    48ec:	e037883a 	mov	sp,fp
    48f0:	dfc00117 	ldw	ra,4(sp)
    48f4:	df000017 	ldw	fp,0(sp)
    48f8:	dec00204 	addi	sp,sp,8
    48fc:	f800283a 	ret

00004900 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4900:	defffd04 	addi	sp,sp,-12
    4904:	dfc00215 	stw	ra,8(sp)
    4908:	df000115 	stw	fp,4(sp)
    490c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4910:	0009883a 	mov	r4,zero
    4914:	0004dc40 	call	4dc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4918:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    491c:	0004df80 	call	4df8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4920:	01000034 	movhi	r4,0
    4924:	211b0f04 	addi	r4,r4,27708
    4928:	01400034 	movhi	r5,0
    492c:	295b0f04 	addi	r5,r5,27708
    4930:	01800034 	movhi	r6,0
    4934:	319b0f04 	addi	r6,r6,27708
    4938:	00060a80 	call	60a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    493c:	0005c300 	call	5c30 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4940:	01000034 	movhi	r4,0
    4944:	21172304 	addi	r4,r4,23692
    4948:	00068340 	call	6834 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    494c:	d126ad17 	ldw	r4,-25932(gp)
    4950:	d0e6ae17 	ldw	r3,-25928(gp)
    4954:	d0a6af17 	ldw	r2,-25924(gp)
    4958:	180b883a 	mov	r5,r3
    495c:	100d883a 	mov	r6,r2
    4960:	0000e040 	call	e04 <main>
    4964:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4968:	01000044 	movi	r4,1
    496c:	00044080 	call	4408 <close>
  exit (result);
    4970:	e13fff17 	ldw	r4,-4(fp)
    4974:	00068480 	call	6848 <exit>

00004978 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    4978:	defffe04 	addi	sp,sp,-8
    497c:	df000115 	stw	fp,4(sp)
    4980:	df000104 	addi	fp,sp,4
    4984:	e13fff15 	stw	r4,-4(fp)
}
    4988:	e037883a 	mov	sp,fp
    498c:	df000017 	ldw	fp,0(sp)
    4990:	dec00104 	addi	sp,sp,4
    4994:	f800283a 	ret

00004998 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    4998:	defffe04 	addi	sp,sp,-8
    499c:	df000115 	stw	fp,4(sp)
    49a0:	df000104 	addi	fp,sp,4
    49a4:	e13fff15 	stw	r4,-4(fp)
}
    49a8:	e037883a 	mov	sp,fp
    49ac:	df000017 	ldw	fp,0(sp)
    49b0:	dec00104 	addi	sp,sp,4
    49b4:	f800283a 	ret

000049b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    49b8:	defffe04 	addi	sp,sp,-8
    49bc:	dfc00115 	stw	ra,4(sp)
    49c0:	df000015 	stw	fp,0(sp)
    49c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    49c8:	00800074 	movhi	r2,1
    49cc:	10a1ad04 	addi	r2,r2,-31052
    49d0:	10800017 	ldw	r2,0(r2)
    49d4:	10000526 	beq	r2,zero,49ec <alt_get_errno+0x34>
    49d8:	00800074 	movhi	r2,1
    49dc:	10a1ad04 	addi	r2,r2,-31052
    49e0:	10800017 	ldw	r2,0(r2)
    49e4:	103ee83a 	callr	r2
    49e8:	00000206 	br	49f4 <alt_get_errno+0x3c>
    49ec:	00800074 	movhi	r2,1
    49f0:	10a85004 	addi	r2,r2,-24256
}
    49f4:	e037883a 	mov	sp,fp
    49f8:	dfc00117 	ldw	ra,4(sp)
    49fc:	df000017 	ldw	fp,0(sp)
    4a00:	dec00204 	addi	sp,sp,8
    4a04:	f800283a 	ret

00004a08 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    4a08:	defff904 	addi	sp,sp,-28
    4a0c:	dfc00615 	stw	ra,24(sp)
    4a10:	df000515 	stw	fp,20(sp)
    4a14:	df000504 	addi	fp,sp,20
    4a18:	e13ffd15 	stw	r4,-12(fp)
    4a1c:	e17ffe15 	stw	r5,-8(fp)
    4a20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4a24:	e0bffd17 	ldw	r2,-12(fp)
    4a28:	10000616 	blt	r2,zero,4a44 <read+0x3c>
    4a2c:	e0bffd17 	ldw	r2,-12(fp)
    4a30:	10c00324 	muli	r3,r2,12
    4a34:	00800034 	movhi	r2,0
    4a38:	109d2c04 	addi	r2,r2,29872
    4a3c:	1885883a 	add	r2,r3,r2
    4a40:	00000106 	br	4a48 <read+0x40>
    4a44:	0005883a 	mov	r2,zero
    4a48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4a4c:	e0bffb17 	ldw	r2,-20(fp)
    4a50:	10002226 	beq	r2,zero,4adc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4a54:	e0bffb17 	ldw	r2,-20(fp)
    4a58:	10800217 	ldw	r2,8(r2)
    4a5c:	108000cc 	andi	r2,r2,3
    4a60:	10800060 	cmpeqi	r2,r2,1
    4a64:	1000181e 	bne	r2,zero,4ac8 <read+0xc0>
        (fd->dev->read))
    4a68:	e0bffb17 	ldw	r2,-20(fp)
    4a6c:	10800017 	ldw	r2,0(r2)
    4a70:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    4a74:	10001426 	beq	r2,zero,4ac8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    4a78:	e0bffb17 	ldw	r2,-20(fp)
    4a7c:	10800017 	ldw	r2,0(r2)
    4a80:	10800517 	ldw	r2,20(r2)
    4a84:	e0ffff17 	ldw	r3,-4(fp)
    4a88:	e13ffb17 	ldw	r4,-20(fp)
    4a8c:	e17ffe17 	ldw	r5,-8(fp)
    4a90:	180d883a 	mov	r6,r3
    4a94:	103ee83a 	callr	r2
    4a98:	e0bffc15 	stw	r2,-16(fp)
    4a9c:	e0bffc17 	ldw	r2,-16(fp)
    4aa0:	1000070e 	bge	r2,zero,4ac0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    4aa4:	00049b80 	call	49b8 <alt_get_errno>
    4aa8:	1007883a 	mov	r3,r2
    4aac:	e0bffc17 	ldw	r2,-16(fp)
    4ab0:	0085c83a 	sub	r2,zero,r2
    4ab4:	18800015 	stw	r2,0(r3)
          return -1;
    4ab8:	00bfffc4 	movi	r2,-1
    4abc:	00000c06 	br	4af0 <read+0xe8>
        }
        return rval;
    4ac0:	e0bffc17 	ldw	r2,-16(fp)
    4ac4:	00000a06 	br	4af0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    4ac8:	00049b80 	call	49b8 <alt_get_errno>
    4acc:	1007883a 	mov	r3,r2
    4ad0:	00800344 	movi	r2,13
    4ad4:	18800015 	stw	r2,0(r3)
    4ad8:	00000406 	br	4aec <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    4adc:	00049b80 	call	49b8 <alt_get_errno>
    4ae0:	1007883a 	mov	r3,r2
    4ae4:	00801444 	movi	r2,81
    4ae8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4aec:	00bfffc4 	movi	r2,-1
}
    4af0:	e037883a 	mov	sp,fp
    4af4:	dfc00117 	ldw	ra,4(sp)
    4af8:	df000017 	ldw	fp,0(sp)
    4afc:	dec00204 	addi	sp,sp,8
    4b00:	f800283a 	ret

00004b04 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4b04:	defffe04 	addi	sp,sp,-8
    4b08:	df000115 	stw	fp,4(sp)
    4b0c:	df000104 	addi	fp,sp,4
    4b10:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    4b14:	e0bfff17 	ldw	r2,-4(fp)
    4b18:	108000d0 	cmplti	r2,r2,3
    4b1c:	10000d1e 	bne	r2,zero,4b54 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    4b20:	00800034 	movhi	r2,0
    4b24:	109d2c04 	addi	r2,r2,29872
    4b28:	e0ffff17 	ldw	r3,-4(fp)
    4b2c:	18c00324 	muli	r3,r3,12
    4b30:	10c5883a 	add	r2,r2,r3
    4b34:	10800204 	addi	r2,r2,8
    4b38:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4b3c:	00800034 	movhi	r2,0
    4b40:	109d2c04 	addi	r2,r2,29872
    4b44:	e0ffff17 	ldw	r3,-4(fp)
    4b48:	18c00324 	muli	r3,r3,12
    4b4c:	10c5883a 	add	r2,r2,r3
    4b50:	10000015 	stw	zero,0(r2)
  }
}
    4b54:	e037883a 	mov	sp,fp
    4b58:	df000017 	ldw	fp,0(sp)
    4b5c:	dec00104 	addi	sp,sp,4
    4b60:	f800283a 	ret

00004b64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    4b64:	defff904 	addi	sp,sp,-28
    4b68:	df000615 	stw	fp,24(sp)
    4b6c:	df000604 	addi	fp,sp,24
    4b70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b74:	0005303a 	rdctl	r2,status
    4b78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b7c:	e0fffc17 	ldw	r3,-16(fp)
    4b80:	00bfff84 	movi	r2,-2
    4b84:	1884703a 	and	r2,r3,r2
    4b88:	1001703a 	wrctl	status,r2
  
  return context;
    4b8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    4b90:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    4b94:	d0a00a17 	ldw	r2,-32728(gp)
    4b98:	10c000c4 	addi	r3,r2,3
    4b9c:	00bfff04 	movi	r2,-4
    4ba0:	1884703a 	and	r2,r3,r2
    4ba4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    4ba8:	d0e00a17 	ldw	r3,-32728(gp)
    4bac:	e0bfff17 	ldw	r2,-4(fp)
    4bb0:	1887883a 	add	r3,r3,r2
    4bb4:	00808034 	movhi	r2,512
    4bb8:	10800004 	addi	r2,r2,0
    4bbc:	10c0062e 	bgeu	r2,r3,4bd8 <sbrk+0x74>
    4bc0:	e0bffa17 	ldw	r2,-24(fp)
    4bc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4bc8:	e0bffd17 	ldw	r2,-12(fp)
    4bcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    4bd0:	00bfffc4 	movi	r2,-1
    4bd4:	00000b06 	br	4c04 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    4bd8:	d0a00a17 	ldw	r2,-32728(gp)
    4bdc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    4be0:	d0e00a17 	ldw	r3,-32728(gp)
    4be4:	e0bfff17 	ldw	r2,-4(fp)
    4be8:	1885883a 	add	r2,r3,r2
    4bec:	d0a00a15 	stw	r2,-32728(gp)
    4bf0:	e0bffa17 	ldw	r2,-24(fp)
    4bf4:	e0bffe15 	stw	r2,-8(fp)
    4bf8:	e0bffe17 	ldw	r2,-8(fp)
    4bfc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    4c00:	e0bffb17 	ldw	r2,-20(fp)
} 
    4c04:	e037883a 	mov	sp,fp
    4c08:	df000017 	ldw	fp,0(sp)
    4c0c:	dec00104 	addi	sp,sp,4
    4c10:	f800283a 	ret

00004c14 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    4c14:	defffd04 	addi	sp,sp,-12
    4c18:	dfc00215 	stw	ra,8(sp)
    4c1c:	df000115 	stw	fp,4(sp)
    4c20:	df000104 	addi	fp,sp,4
    4c24:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    4c28:	e13fff17 	ldw	r4,-4(fp)
    4c2c:	00059c80 	call	59c8 <alt_busy_sleep>
}
    4c30:	e037883a 	mov	sp,fp
    4c34:	dfc00117 	ldw	ra,4(sp)
    4c38:	df000017 	ldw	fp,0(sp)
    4c3c:	dec00204 	addi	sp,sp,8
    4c40:	f800283a 	ret

00004c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4c44:	defffe04 	addi	sp,sp,-8
    4c48:	dfc00115 	stw	ra,4(sp)
    4c4c:	df000015 	stw	fp,0(sp)
    4c50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4c54:	00800074 	movhi	r2,1
    4c58:	10a1ad04 	addi	r2,r2,-31052
    4c5c:	10800017 	ldw	r2,0(r2)
    4c60:	10000526 	beq	r2,zero,4c78 <alt_get_errno+0x34>
    4c64:	00800074 	movhi	r2,1
    4c68:	10a1ad04 	addi	r2,r2,-31052
    4c6c:	10800017 	ldw	r2,0(r2)
    4c70:	103ee83a 	callr	r2
    4c74:	00000206 	br	4c80 <alt_get_errno+0x3c>
    4c78:	00800074 	movhi	r2,1
    4c7c:	10a85004 	addi	r2,r2,-24256
}
    4c80:	e037883a 	mov	sp,fp
    4c84:	dfc00117 	ldw	ra,4(sp)
    4c88:	df000017 	ldw	fp,0(sp)
    4c8c:	dec00204 	addi	sp,sp,8
    4c90:	f800283a 	ret

00004c94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4c94:	defff904 	addi	sp,sp,-28
    4c98:	dfc00615 	stw	ra,24(sp)
    4c9c:	df000515 	stw	fp,20(sp)
    4ca0:	df000504 	addi	fp,sp,20
    4ca4:	e13ffd15 	stw	r4,-12(fp)
    4ca8:	e17ffe15 	stw	r5,-8(fp)
    4cac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4cb0:	e0bffd17 	ldw	r2,-12(fp)
    4cb4:	10000616 	blt	r2,zero,4cd0 <write+0x3c>
    4cb8:	e0bffd17 	ldw	r2,-12(fp)
    4cbc:	10c00324 	muli	r3,r2,12
    4cc0:	00800034 	movhi	r2,0
    4cc4:	109d2c04 	addi	r2,r2,29872
    4cc8:	1885883a 	add	r2,r3,r2
    4ccc:	00000106 	br	4cd4 <write+0x40>
    4cd0:	0005883a 	mov	r2,zero
    4cd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4cd8:	e0bffb17 	ldw	r2,-20(fp)
    4cdc:	10002126 	beq	r2,zero,4d64 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4ce0:	e0bffb17 	ldw	r2,-20(fp)
    4ce4:	10800217 	ldw	r2,8(r2)
    4ce8:	108000cc 	andi	r2,r2,3
    4cec:	10001826 	beq	r2,zero,4d50 <write+0xbc>
    4cf0:	e0bffb17 	ldw	r2,-20(fp)
    4cf4:	10800017 	ldw	r2,0(r2)
    4cf8:	10800617 	ldw	r2,24(r2)
    4cfc:	10001426 	beq	r2,zero,4d50 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4d00:	e0bffb17 	ldw	r2,-20(fp)
    4d04:	10800017 	ldw	r2,0(r2)
    4d08:	10800617 	ldw	r2,24(r2)
    4d0c:	e0ffff17 	ldw	r3,-4(fp)
    4d10:	e13ffb17 	ldw	r4,-20(fp)
    4d14:	e17ffe17 	ldw	r5,-8(fp)
    4d18:	180d883a 	mov	r6,r3
    4d1c:	103ee83a 	callr	r2
    4d20:	e0bffc15 	stw	r2,-16(fp)
    4d24:	e0bffc17 	ldw	r2,-16(fp)
    4d28:	1000070e 	bge	r2,zero,4d48 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    4d2c:	0004c440 	call	4c44 <alt_get_errno>
    4d30:	1007883a 	mov	r3,r2
    4d34:	e0bffc17 	ldw	r2,-16(fp)
    4d38:	0085c83a 	sub	r2,zero,r2
    4d3c:	18800015 	stw	r2,0(r3)
        return -1;
    4d40:	00bfffc4 	movi	r2,-1
    4d44:	00000c06 	br	4d78 <write+0xe4>
      }
      return rval;
    4d48:	e0bffc17 	ldw	r2,-16(fp)
    4d4c:	00000a06 	br	4d78 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    4d50:	0004c440 	call	4c44 <alt_get_errno>
    4d54:	1007883a 	mov	r3,r2
    4d58:	00800344 	movi	r2,13
    4d5c:	18800015 	stw	r2,0(r3)
    4d60:	00000406 	br	4d74 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    4d64:	0004c440 	call	4c44 <alt_get_errno>
    4d68:	1007883a 	mov	r3,r2
    4d6c:	00801444 	movi	r2,81
    4d70:	18800015 	stw	r2,0(r3)
  }
  return -1;
    4d74:	00bfffc4 	movi	r2,-1
}
    4d78:	e037883a 	mov	sp,fp
    4d7c:	dfc00117 	ldw	ra,4(sp)
    4d80:	df000017 	ldw	fp,0(sp)
    4d84:	dec00204 	addi	sp,sp,8
    4d88:	f800283a 	ret

00004d8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4d8c:	defffd04 	addi	sp,sp,-12
    4d90:	dfc00215 	stw	ra,8(sp)
    4d94:	df000115 	stw	fp,4(sp)
    4d98:	df000104 	addi	fp,sp,4
    4d9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4da0:	e13fff17 	ldw	r4,-4(fp)
    4da4:	01400074 	movhi	r5,1
    4da8:	2961aa04 	addi	r5,r5,-31064
    4dac:	0005b8c0 	call	5b8c <alt_dev_llist_insert>
}
    4db0:	e037883a 	mov	sp,fp
    4db4:	dfc00117 	ldw	ra,4(sp)
    4db8:	df000017 	ldw	fp,0(sp)
    4dbc:	dec00204 	addi	sp,sp,8
    4dc0:	f800283a 	ret

00004dc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4dc4:	defffd04 	addi	sp,sp,-12
    4dc8:	dfc00215 	stw	ra,8(sp)
    4dcc:	df000115 	stw	fp,4(sp)
    4dd0:	df000104 	addi	fp,sp,4
    4dd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
    4dd8:	00065300 	call	6530 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4ddc:	00800044 	movi	r2,1
    4de0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4de4:	e037883a 	mov	sp,fp
    4de8:	dfc00117 	ldw	ra,4(sp)
    4dec:	df000017 	ldw	fp,0(sp)
    4df0:	dec00204 	addi	sp,sp,8
    4df4:	f800283a 	ret

00004df8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4df8:	defffe04 	addi	sp,sp,-8
    4dfc:	dfc00115 	stw	ra,4(sp)
    4e00:	df000015 	stw	fp,0(sp)
    4e04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    4e08:	01000034 	movhi	r4,0
    4e0c:	211d9604 	addi	r4,r4,30296
    4e10:	000b883a 	mov	r5,zero
    4e14:	000d883a 	mov	r6,zero
    4e18:	0004fa00 	call	4fa0 <altera_avalon_jtag_uart_init>
    4e1c:	01000034 	movhi	r4,0
    4e20:	211d8c04 	addi	r4,r4,30256
    4e24:	0004d8c0 	call	4d8c <alt_dev_reg>
}
    4e28:	e037883a 	mov	sp,fp
    4e2c:	dfc00117 	ldw	ra,4(sp)
    4e30:	df000017 	ldw	fp,0(sp)
    4e34:	dec00204 	addi	sp,sp,8
    4e38:	f800283a 	ret

00004e3c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4e3c:	defffa04 	addi	sp,sp,-24
    4e40:	dfc00515 	stw	ra,20(sp)
    4e44:	df000415 	stw	fp,16(sp)
    4e48:	df000404 	addi	fp,sp,16
    4e4c:	e13ffd15 	stw	r4,-12(fp)
    4e50:	e17ffe15 	stw	r5,-8(fp)
    4e54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4e58:	e0bffd17 	ldw	r2,-12(fp)
    4e5c:	10800017 	ldw	r2,0(r2)
    4e60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4e64:	e0bffc17 	ldw	r2,-16(fp)
    4e68:	10c00a04 	addi	r3,r2,40
    4e6c:	e0bffd17 	ldw	r2,-12(fp)
    4e70:	10800217 	ldw	r2,8(r2)
    4e74:	1809883a 	mov	r4,r3
    4e78:	e17ffe17 	ldw	r5,-8(fp)
    4e7c:	e1bfff17 	ldw	r6,-4(fp)
    4e80:	100f883a 	mov	r7,r2
    4e84:	00054640 	call	5464 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4e88:	e037883a 	mov	sp,fp
    4e8c:	dfc00117 	ldw	ra,4(sp)
    4e90:	df000017 	ldw	fp,0(sp)
    4e94:	dec00204 	addi	sp,sp,8
    4e98:	f800283a 	ret

00004e9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4e9c:	defffa04 	addi	sp,sp,-24
    4ea0:	dfc00515 	stw	ra,20(sp)
    4ea4:	df000415 	stw	fp,16(sp)
    4ea8:	df000404 	addi	fp,sp,16
    4eac:	e13ffd15 	stw	r4,-12(fp)
    4eb0:	e17ffe15 	stw	r5,-8(fp)
    4eb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4eb8:	e0bffd17 	ldw	r2,-12(fp)
    4ebc:	10800017 	ldw	r2,0(r2)
    4ec0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4ec4:	e0bffc17 	ldw	r2,-16(fp)
    4ec8:	10c00a04 	addi	r3,r2,40
    4ecc:	e0bffd17 	ldw	r2,-12(fp)
    4ed0:	10800217 	ldw	r2,8(r2)
    4ed4:	1809883a 	mov	r4,r3
    4ed8:	e17ffe17 	ldw	r5,-8(fp)
    4edc:	e1bfff17 	ldw	r6,-4(fp)
    4ee0:	100f883a 	mov	r7,r2
    4ee4:	00056700 	call	5670 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4ee8:	e037883a 	mov	sp,fp
    4eec:	dfc00117 	ldw	ra,4(sp)
    4ef0:	df000017 	ldw	fp,0(sp)
    4ef4:	dec00204 	addi	sp,sp,8
    4ef8:	f800283a 	ret

00004efc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    4efc:	defffc04 	addi	sp,sp,-16
    4f00:	dfc00315 	stw	ra,12(sp)
    4f04:	df000215 	stw	fp,8(sp)
    4f08:	df000204 	addi	fp,sp,8
    4f0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4f10:	e0bfff17 	ldw	r2,-4(fp)
    4f14:	10800017 	ldw	r2,0(r2)
    4f18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    4f1c:	e0bffe17 	ldw	r2,-8(fp)
    4f20:	10c00a04 	addi	r3,r2,40
    4f24:	e0bfff17 	ldw	r2,-4(fp)
    4f28:	10800217 	ldw	r2,8(r2)
    4f2c:	1809883a 	mov	r4,r3
    4f30:	100b883a 	mov	r5,r2
    4f34:	00053100 	call	5310 <altera_avalon_jtag_uart_close>
}
    4f38:	e037883a 	mov	sp,fp
    4f3c:	dfc00117 	ldw	ra,4(sp)
    4f40:	df000017 	ldw	fp,0(sp)
    4f44:	dec00204 	addi	sp,sp,8
    4f48:	f800283a 	ret

00004f4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4f4c:	defffa04 	addi	sp,sp,-24
    4f50:	dfc00515 	stw	ra,20(sp)
    4f54:	df000415 	stw	fp,16(sp)
    4f58:	df000404 	addi	fp,sp,16
    4f5c:	e13ffd15 	stw	r4,-12(fp)
    4f60:	e17ffe15 	stw	r5,-8(fp)
    4f64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    4f68:	e0bffd17 	ldw	r2,-12(fp)
    4f6c:	10800017 	ldw	r2,0(r2)
    4f70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4f74:	e0bffc17 	ldw	r2,-16(fp)
    4f78:	10800a04 	addi	r2,r2,40
    4f7c:	1009883a 	mov	r4,r2
    4f80:	e17ffe17 	ldw	r5,-8(fp)
    4f84:	e1bfff17 	ldw	r6,-4(fp)
    4f88:	00053780 	call	5378 <altera_avalon_jtag_uart_ioctl>
}
    4f8c:	e037883a 	mov	sp,fp
    4f90:	dfc00117 	ldw	ra,4(sp)
    4f94:	df000017 	ldw	fp,0(sp)
    4f98:	dec00204 	addi	sp,sp,8
    4f9c:	f800283a 	ret

00004fa0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4fa0:	defffa04 	addi	sp,sp,-24
    4fa4:	dfc00515 	stw	ra,20(sp)
    4fa8:	df000415 	stw	fp,16(sp)
    4fac:	df000404 	addi	fp,sp,16
    4fb0:	e13ffd15 	stw	r4,-12(fp)
    4fb4:	e17ffe15 	stw	r5,-8(fp)
    4fb8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4fbc:	e0bffd17 	ldw	r2,-12(fp)
    4fc0:	00c00044 	movi	r3,1
    4fc4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4fc8:	e0bffd17 	ldw	r2,-12(fp)
    4fcc:	10800017 	ldw	r2,0(r2)
    4fd0:	10800104 	addi	r2,r2,4
    4fd4:	1007883a 	mov	r3,r2
    4fd8:	e0bffd17 	ldw	r2,-12(fp)
    4fdc:	10800817 	ldw	r2,32(r2)
    4fe0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    4fe4:	e0fffe17 	ldw	r3,-8(fp)
    4fe8:	e0bfff17 	ldw	r2,-4(fp)
    4fec:	d8000015 	stw	zero,0(sp)
    4ff0:	1809883a 	mov	r4,r3
    4ff4:	100b883a 	mov	r5,r2
    4ff8:	01800034 	movhi	r6,0
    4ffc:	31941904 	addi	r6,r6,20580
    5000:	e1fffd17 	ldw	r7,-12(fp)
    5004:	0005d180 	call	5d18 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    5008:	e0bffd17 	ldw	r2,-12(fp)
    500c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    5010:	e0bffd17 	ldw	r2,-12(fp)
    5014:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    5018:	00800074 	movhi	r2,1
    501c:	10a85504 	addi	r2,r2,-24236
    5020:	10800017 	ldw	r2,0(r2)
    5024:	1809883a 	mov	r4,r3
    5028:	100b883a 	mov	r5,r2
    502c:	01800034 	movhi	r6,0
    5030:	31949a04 	addi	r6,r6,21096
    5034:	e1fffd17 	ldw	r7,-12(fp)
    5038:	00058880 	call	5888 <alt_alarm_start>
    503c:	1000040e 	bge	r2,zero,5050 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    5040:	e0fffd17 	ldw	r3,-12(fp)
    5044:	00a00034 	movhi	r2,32768
    5048:	10bfffc4 	addi	r2,r2,-1
    504c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    5050:	e037883a 	mov	sp,fp
    5054:	dfc00117 	ldw	ra,4(sp)
    5058:	df000017 	ldw	fp,0(sp)
    505c:	dec00204 	addi	sp,sp,8
    5060:	f800283a 	ret

00005064 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    5064:	defff804 	addi	sp,sp,-32
    5068:	df000715 	stw	fp,28(sp)
    506c:	df000704 	addi	fp,sp,28
    5070:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    5074:	e0bfff17 	ldw	r2,-4(fp)
    5078:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    507c:	e0bffb17 	ldw	r2,-20(fp)
    5080:	10800017 	ldw	r2,0(r2)
    5084:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5088:	e0bffc17 	ldw	r2,-16(fp)
    508c:	10800104 	addi	r2,r2,4
    5090:	10800037 	ldwio	r2,0(r2)
    5094:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    5098:	e0bffd17 	ldw	r2,-12(fp)
    509c:	1080c00c 	andi	r2,r2,768
    50a0:	1000011e 	bne	r2,zero,50a8 <altera_avalon_jtag_uart_irq+0x44>
      break;
    50a4:	00006c06 	br	5258 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    50a8:	e0bffd17 	ldw	r2,-12(fp)
    50ac:	1080400c 	andi	r2,r2,256
    50b0:	10003426 	beq	r2,zero,5184 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    50b4:	00800074 	movhi	r2,1
    50b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    50bc:	e0bffb17 	ldw	r2,-20(fp)
    50c0:	10800a17 	ldw	r2,40(r2)
    50c4:	10800044 	addi	r2,r2,1
    50c8:	1081ffcc 	andi	r2,r2,2047
    50cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    50d0:	e0bffb17 	ldw	r2,-20(fp)
    50d4:	10c00b17 	ldw	r3,44(r2)
    50d8:	e0bffe17 	ldw	r2,-8(fp)
    50dc:	1880011e 	bne	r3,r2,50e4 <altera_avalon_jtag_uart_irq+0x80>
          break;
    50e0:	00001606 	br	513c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    50e4:	e0bffc17 	ldw	r2,-16(fp)
    50e8:	10800037 	ldwio	r2,0(r2)
    50ec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    50f0:	e0bff917 	ldw	r2,-28(fp)
    50f4:	10a0000c 	andi	r2,r2,32768
    50f8:	1000011e 	bne	r2,zero,5100 <altera_avalon_jtag_uart_irq+0x9c>
          break;
    50fc:	00000f06 	br	513c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5100:	e0bffb17 	ldw	r2,-20(fp)
    5104:	10800a17 	ldw	r2,40(r2)
    5108:	e0fff917 	ldw	r3,-28(fp)
    510c:	1809883a 	mov	r4,r3
    5110:	e0fffb17 	ldw	r3,-20(fp)
    5114:	1885883a 	add	r2,r3,r2
    5118:	10800e04 	addi	r2,r2,56
    511c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5120:	e0bffb17 	ldw	r2,-20(fp)
    5124:	10800a17 	ldw	r2,40(r2)
    5128:	10800044 	addi	r2,r2,1
    512c:	10c1ffcc 	andi	r3,r2,2047
    5130:	e0bffb17 	ldw	r2,-20(fp)
    5134:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    5138:	003fe006 	br	50bc <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    513c:	e0bff917 	ldw	r2,-28(fp)
    5140:	10bfffec 	andhi	r2,r2,65535
    5144:	10000f26 	beq	r2,zero,5184 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    5148:	e0bffb17 	ldw	r2,-20(fp)
    514c:	10c00817 	ldw	r3,32(r2)
    5150:	00bfff84 	movi	r2,-2
    5154:	1886703a 	and	r3,r3,r2
    5158:	e0bffb17 	ldw	r2,-20(fp)
    515c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    5160:	e0bffc17 	ldw	r2,-16(fp)
    5164:	10800104 	addi	r2,r2,4
    5168:	1007883a 	mov	r3,r2
    516c:	e0bffb17 	ldw	r2,-20(fp)
    5170:	10800817 	ldw	r2,32(r2)
    5174:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5178:	e0bffc17 	ldw	r2,-16(fp)
    517c:	10800104 	addi	r2,r2,4
    5180:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    5184:	e0bffd17 	ldw	r2,-12(fp)
    5188:	1080800c 	andi	r2,r2,512
    518c:	10003126 	beq	r2,zero,5254 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    5190:	e0bffd17 	ldw	r2,-12(fp)
    5194:	1004d43a 	srli	r2,r2,16
    5198:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    519c:	00001406 	br	51f0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    51a0:	e0bffc17 	ldw	r2,-16(fp)
    51a4:	e0fffb17 	ldw	r3,-20(fp)
    51a8:	18c00d17 	ldw	r3,52(r3)
    51ac:	e13ffb17 	ldw	r4,-20(fp)
    51b0:	20c7883a 	add	r3,r4,r3
    51b4:	18c20e04 	addi	r3,r3,2104
    51b8:	18c00003 	ldbu	r3,0(r3)
    51bc:	18c03fcc 	andi	r3,r3,255
    51c0:	18c0201c 	xori	r3,r3,128
    51c4:	18ffe004 	addi	r3,r3,-128
    51c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    51cc:	e0bffb17 	ldw	r2,-20(fp)
    51d0:	10800d17 	ldw	r2,52(r2)
    51d4:	10800044 	addi	r2,r2,1
    51d8:	10c1ffcc 	andi	r3,r2,2047
    51dc:	e0bffb17 	ldw	r2,-20(fp)
    51e0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    51e4:	e0bffa17 	ldw	r2,-24(fp)
    51e8:	10bfffc4 	addi	r2,r2,-1
    51ec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    51f0:	e0bffa17 	ldw	r2,-24(fp)
    51f4:	10000526 	beq	r2,zero,520c <altera_avalon_jtag_uart_irq+0x1a8>
    51f8:	e0bffb17 	ldw	r2,-20(fp)
    51fc:	10c00d17 	ldw	r3,52(r2)
    5200:	e0bffb17 	ldw	r2,-20(fp)
    5204:	10800c17 	ldw	r2,48(r2)
    5208:	18bfe51e 	bne	r3,r2,51a0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    520c:	e0bffa17 	ldw	r2,-24(fp)
    5210:	10001026 	beq	r2,zero,5254 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    5214:	e0bffb17 	ldw	r2,-20(fp)
    5218:	10c00817 	ldw	r3,32(r2)
    521c:	00bfff44 	movi	r2,-3
    5220:	1886703a 	and	r3,r3,r2
    5224:	e0bffb17 	ldw	r2,-20(fp)
    5228:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    522c:	e0bffb17 	ldw	r2,-20(fp)
    5230:	10800017 	ldw	r2,0(r2)
    5234:	10800104 	addi	r2,r2,4
    5238:	1007883a 	mov	r3,r2
    523c:	e0bffb17 	ldw	r2,-20(fp)
    5240:	10800817 	ldw	r2,32(r2)
    5244:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    5248:	e0bffc17 	ldw	r2,-16(fp)
    524c:	10800104 	addi	r2,r2,4
    5250:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    5254:	003f8c06 	br	5088 <altera_avalon_jtag_uart_irq+0x24>
}
    5258:	e037883a 	mov	sp,fp
    525c:	df000017 	ldw	fp,0(sp)
    5260:	dec00104 	addi	sp,sp,4
    5264:	f800283a 	ret

00005268 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    5268:	defff804 	addi	sp,sp,-32
    526c:	df000715 	stw	fp,28(sp)
    5270:	df000704 	addi	fp,sp,28
    5274:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    5278:	e0bffb17 	ldw	r2,-20(fp)
    527c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    5280:	e0bff917 	ldw	r2,-28(fp)
    5284:	10800017 	ldw	r2,0(r2)
    5288:	10800104 	addi	r2,r2,4
    528c:	10800037 	ldwio	r2,0(r2)
    5290:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    5294:	e0bffa17 	ldw	r2,-24(fp)
    5298:	1081000c 	andi	r2,r2,1024
    529c:	10000b26 	beq	r2,zero,52cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    52a0:	e0bff917 	ldw	r2,-28(fp)
    52a4:	10800017 	ldw	r2,0(r2)
    52a8:	10800104 	addi	r2,r2,4
    52ac:	1007883a 	mov	r3,r2
    52b0:	e0bff917 	ldw	r2,-28(fp)
    52b4:	10800817 	ldw	r2,32(r2)
    52b8:	10810014 	ori	r2,r2,1024
    52bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    52c0:	e0bff917 	ldw	r2,-28(fp)
    52c4:	10000915 	stw	zero,36(r2)
    52c8:	00000a06 	br	52f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    52cc:	e0bff917 	ldw	r2,-28(fp)
    52d0:	10c00917 	ldw	r3,36(r2)
    52d4:	00a00034 	movhi	r2,32768
    52d8:	10bfff04 	addi	r2,r2,-4
    52dc:	10c00536 	bltu	r2,r3,52f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    52e0:	e0bff917 	ldw	r2,-28(fp)
    52e4:	10800917 	ldw	r2,36(r2)
    52e8:	10c00044 	addi	r3,r2,1
    52ec:	e0bff917 	ldw	r2,-28(fp)
    52f0:	10c00915 	stw	r3,36(r2)
    52f4:	00800074 	movhi	r2,1
    52f8:	10a85504 	addi	r2,r2,-24236
    52fc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    5300:	e037883a 	mov	sp,fp
    5304:	df000017 	ldw	fp,0(sp)
    5308:	dec00104 	addi	sp,sp,4
    530c:	f800283a 	ret

00005310 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    5310:	defffd04 	addi	sp,sp,-12
    5314:	df000215 	stw	fp,8(sp)
    5318:	df000204 	addi	fp,sp,8
    531c:	e13ffe15 	stw	r4,-8(fp)
    5320:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    5324:	00000506 	br	533c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    5328:	e0bfff17 	ldw	r2,-4(fp)
    532c:	1090000c 	andi	r2,r2,16384
    5330:	10000226 	beq	r2,zero,533c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    5334:	00bffd44 	movi	r2,-11
    5338:	00000b06 	br	5368 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    533c:	e0bffe17 	ldw	r2,-8(fp)
    5340:	10c00d17 	ldw	r3,52(r2)
    5344:	e0bffe17 	ldw	r2,-8(fp)
    5348:	10800c17 	ldw	r2,48(r2)
    534c:	18800526 	beq	r3,r2,5364 <altera_avalon_jtag_uart_close+0x54>
    5350:	e0bffe17 	ldw	r2,-8(fp)
    5354:	10c00917 	ldw	r3,36(r2)
    5358:	e0bffe17 	ldw	r2,-8(fp)
    535c:	10800117 	ldw	r2,4(r2)
    5360:	18bff136 	bltu	r3,r2,5328 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    5364:	0005883a 	mov	r2,zero
}
    5368:	e037883a 	mov	sp,fp
    536c:	df000017 	ldw	fp,0(sp)
    5370:	dec00104 	addi	sp,sp,4
    5374:	f800283a 	ret

00005378 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    5378:	defffa04 	addi	sp,sp,-24
    537c:	df000515 	stw	fp,20(sp)
    5380:	df000504 	addi	fp,sp,20
    5384:	e13ffd15 	stw	r4,-12(fp)
    5388:	e17ffe15 	stw	r5,-8(fp)
    538c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    5390:	00bff9c4 	movi	r2,-25
    5394:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    5398:	e0bffe17 	ldw	r2,-8(fp)
    539c:	10da8060 	cmpeqi	r3,r2,27137
    53a0:	1800031e 	bne	r3,zero,53b0 <altera_avalon_jtag_uart_ioctl+0x38>
    53a4:	109a80a0 	cmpeqi	r2,r2,27138
    53a8:	1000191e 	bne	r2,zero,5410 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    53ac:	00002806 	br	5450 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    53b0:	e0bffd17 	ldw	r2,-12(fp)
    53b4:	10c00117 	ldw	r3,4(r2)
    53b8:	00a00034 	movhi	r2,32768
    53bc:	10bfffc4 	addi	r2,r2,-1
    53c0:	18801226 	beq	r3,r2,540c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    53c4:	e0bfff17 	ldw	r2,-4(fp)
    53c8:	10800017 	ldw	r2,0(r2)
    53cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    53d0:	e0bffc17 	ldw	r2,-16(fp)
    53d4:	10800090 	cmplti	r2,r2,2
    53d8:	1000061e 	bne	r2,zero,53f4 <altera_avalon_jtag_uart_ioctl+0x7c>
    53dc:	e0fffc17 	ldw	r3,-16(fp)
    53e0:	00a00034 	movhi	r2,32768
    53e4:	10bfffc4 	addi	r2,r2,-1
    53e8:	18800226 	beq	r3,r2,53f4 <altera_avalon_jtag_uart_ioctl+0x7c>
    53ec:	e0bffc17 	ldw	r2,-16(fp)
    53f0:	00000206 	br	53fc <altera_avalon_jtag_uart_ioctl+0x84>
    53f4:	00a00034 	movhi	r2,32768
    53f8:	10bfff84 	addi	r2,r2,-2
    53fc:	e0fffd17 	ldw	r3,-12(fp)
    5400:	18800115 	stw	r2,4(r3)
      rc = 0;
    5404:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    5408:	00001106 	br	5450 <altera_avalon_jtag_uart_ioctl+0xd8>
    540c:	00001006 	br	5450 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    5410:	e0bffd17 	ldw	r2,-12(fp)
    5414:	10c00117 	ldw	r3,4(r2)
    5418:	00a00034 	movhi	r2,32768
    541c:	10bfffc4 	addi	r2,r2,-1
    5420:	18800a26 	beq	r3,r2,544c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    5424:	e0bffd17 	ldw	r2,-12(fp)
    5428:	10c00917 	ldw	r3,36(r2)
    542c:	e0bffd17 	ldw	r2,-12(fp)
    5430:	10800117 	ldw	r2,4(r2)
    5434:	1885803a 	cmpltu	r2,r3,r2
    5438:	10c03fcc 	andi	r3,r2,255
    543c:	e0bfff17 	ldw	r2,-4(fp)
    5440:	10c00015 	stw	r3,0(r2)
      rc = 0;
    5444:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    5448:	00000006 	br	544c <altera_avalon_jtag_uart_ioctl+0xd4>
    544c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    5450:	e0bffb17 	ldw	r2,-20(fp)
}
    5454:	e037883a 	mov	sp,fp
    5458:	df000017 	ldw	fp,0(sp)
    545c:	dec00104 	addi	sp,sp,4
    5460:	f800283a 	ret

00005464 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    5464:	defff304 	addi	sp,sp,-52
    5468:	dfc00c15 	stw	ra,48(sp)
    546c:	df000b15 	stw	fp,44(sp)
    5470:	df000b04 	addi	fp,sp,44
    5474:	e13ffc15 	stw	r4,-16(fp)
    5478:	e17ffd15 	stw	r5,-12(fp)
    547c:	e1bffe15 	stw	r6,-8(fp)
    5480:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    5484:	e0bffd17 	ldw	r2,-12(fp)
    5488:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    548c:	00004906 	br	55b4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    5490:	e0bffc17 	ldw	r2,-16(fp)
    5494:	10800a17 	ldw	r2,40(r2)
    5498:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    549c:	e0bffc17 	ldw	r2,-16(fp)
    54a0:	10800b17 	ldw	r2,44(r2)
    54a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    54a8:	e0fff717 	ldw	r3,-36(fp)
    54ac:	e0bff817 	ldw	r2,-32(fp)
    54b0:	18800536 	bltu	r3,r2,54c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    54b4:	e0fff717 	ldw	r3,-36(fp)
    54b8:	e0bff817 	ldw	r2,-32(fp)
    54bc:	1885c83a 	sub	r2,r3,r2
    54c0:	e0bff615 	stw	r2,-40(fp)
    54c4:	00000406 	br	54d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    54c8:	00c20004 	movi	r3,2048
    54cc:	e0bff817 	ldw	r2,-32(fp)
    54d0:	1885c83a 	sub	r2,r3,r2
    54d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    54d8:	e0bff617 	ldw	r2,-40(fp)
    54dc:	1000011e 	bne	r2,zero,54e4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    54e0:	00001d06 	br	5558 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    54e4:	e0fffe17 	ldw	r3,-8(fp)
    54e8:	e0bff617 	ldw	r2,-40(fp)
    54ec:	1880022e 	bgeu	r3,r2,54f8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    54f0:	e0bffe17 	ldw	r2,-8(fp)
    54f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    54f8:	e0bff817 	ldw	r2,-32(fp)
    54fc:	10800e04 	addi	r2,r2,56
    5500:	e0fffc17 	ldw	r3,-16(fp)
    5504:	1885883a 	add	r2,r3,r2
    5508:	e13ff517 	ldw	r4,-44(fp)
    550c:	100b883a 	mov	r5,r2
    5510:	e1bff617 	ldw	r6,-40(fp)
    5514:	000314c0 	call	314c <memcpy>
      ptr   += n;
    5518:	e0fff517 	ldw	r3,-44(fp)
    551c:	e0bff617 	ldw	r2,-40(fp)
    5520:	1885883a 	add	r2,r3,r2
    5524:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    5528:	e0fffe17 	ldw	r3,-8(fp)
    552c:	e0bff617 	ldw	r2,-40(fp)
    5530:	1885c83a 	sub	r2,r3,r2
    5534:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5538:	e0fff817 	ldw	r3,-32(fp)
    553c:	e0bff617 	ldw	r2,-40(fp)
    5540:	1885883a 	add	r2,r3,r2
    5544:	10c1ffcc 	andi	r3,r2,2047
    5548:	e0bffc17 	ldw	r2,-16(fp)
    554c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    5550:	e0bffe17 	ldw	r2,-8(fp)
    5554:	00bfce16 	blt	zero,r2,5490 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    5558:	e0fff517 	ldw	r3,-44(fp)
    555c:	e0bffd17 	ldw	r2,-12(fp)
    5560:	18800126 	beq	r3,r2,5568 <altera_avalon_jtag_uart_read+0x104>
      break;
    5564:	00001506 	br	55bc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    5568:	e0bfff17 	ldw	r2,-4(fp)
    556c:	1090000c 	andi	r2,r2,16384
    5570:	10000126 	beq	r2,zero,5578 <altera_avalon_jtag_uart_read+0x114>
      break;
    5574:	00001106 	br	55bc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    5578:	0001883a 	nop
    557c:	e0bffc17 	ldw	r2,-16(fp)
    5580:	10c00a17 	ldw	r3,40(r2)
    5584:	e0bff717 	ldw	r2,-36(fp)
    5588:	1880051e 	bne	r3,r2,55a0 <altera_avalon_jtag_uart_read+0x13c>
    558c:	e0bffc17 	ldw	r2,-16(fp)
    5590:	10c00917 	ldw	r3,36(r2)
    5594:	e0bffc17 	ldw	r2,-16(fp)
    5598:	10800117 	ldw	r2,4(r2)
    559c:	18bff736 	bltu	r3,r2,557c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    55a0:	e0bffc17 	ldw	r2,-16(fp)
    55a4:	10c00a17 	ldw	r3,40(r2)
    55a8:	e0bff717 	ldw	r2,-36(fp)
    55ac:	1880011e 	bne	r3,r2,55b4 <altera_avalon_jtag_uart_read+0x150>
      break;
    55b0:	00000206 	br	55bc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    55b4:	e0bffe17 	ldw	r2,-8(fp)
    55b8:	00bfb516 	blt	zero,r2,5490 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    55bc:	e0fff517 	ldw	r3,-44(fp)
    55c0:	e0bffd17 	ldw	r2,-12(fp)
    55c4:	18801826 	beq	r3,r2,5628 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55c8:	0005303a 	rdctl	r2,status
    55cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    55d0:	e0fffa17 	ldw	r3,-24(fp)
    55d4:	00bfff84 	movi	r2,-2
    55d8:	1884703a 	and	r2,r3,r2
    55dc:	1001703a 	wrctl	status,r2
  
  return context;
    55e0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    55e4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    55e8:	e0bffc17 	ldw	r2,-16(fp)
    55ec:	10800817 	ldw	r2,32(r2)
    55f0:	10c00054 	ori	r3,r2,1
    55f4:	e0bffc17 	ldw	r2,-16(fp)
    55f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    55fc:	e0bffc17 	ldw	r2,-16(fp)
    5600:	10800017 	ldw	r2,0(r2)
    5604:	10800104 	addi	r2,r2,4
    5608:	1007883a 	mov	r3,r2
    560c:	e0bffc17 	ldw	r2,-16(fp)
    5610:	10800817 	ldw	r2,32(r2)
    5614:	18800035 	stwio	r2,0(r3)
    5618:	e0bff917 	ldw	r2,-28(fp)
    561c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5620:	e0bffb17 	ldw	r2,-20(fp)
    5624:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    5628:	e0fff517 	ldw	r3,-44(fp)
    562c:	e0bffd17 	ldw	r2,-12(fp)
    5630:	18800426 	beq	r3,r2,5644 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    5634:	e0fff517 	ldw	r3,-44(fp)
    5638:	e0bffd17 	ldw	r2,-12(fp)
    563c:	1885c83a 	sub	r2,r3,r2
    5640:	00000606 	br	565c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    5644:	e0bfff17 	ldw	r2,-4(fp)
    5648:	1090000c 	andi	r2,r2,16384
    564c:	10000226 	beq	r2,zero,5658 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    5650:	00bffd44 	movi	r2,-11
    5654:	00000106 	br	565c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    5658:	00bffec4 	movi	r2,-5
}
    565c:	e037883a 	mov	sp,fp
    5660:	dfc00117 	ldw	ra,4(sp)
    5664:	df000017 	ldw	fp,0(sp)
    5668:	dec00204 	addi	sp,sp,8
    566c:	f800283a 	ret

00005670 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5670:	defff304 	addi	sp,sp,-52
    5674:	dfc00c15 	stw	ra,48(sp)
    5678:	df000b15 	stw	fp,44(sp)
    567c:	df000b04 	addi	fp,sp,44
    5680:	e13ffc15 	stw	r4,-16(fp)
    5684:	e17ffd15 	stw	r5,-12(fp)
    5688:	e1bffe15 	stw	r6,-8(fp)
    568c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    5690:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    5694:	e0bffd17 	ldw	r2,-12(fp)
    5698:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    569c:	00003806 	br	5780 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    56a0:	e0bffc17 	ldw	r2,-16(fp)
    56a4:	10800c17 	ldw	r2,48(r2)
    56a8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    56ac:	e0bffc17 	ldw	r2,-16(fp)
    56b0:	10800d17 	ldw	r2,52(r2)
    56b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    56b8:	e0fff817 	ldw	r3,-32(fp)
    56bc:	e0bff517 	ldw	r2,-44(fp)
    56c0:	1880062e 	bgeu	r3,r2,56dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    56c4:	e0fff517 	ldw	r3,-44(fp)
    56c8:	e0bff817 	ldw	r2,-32(fp)
    56cc:	1885c83a 	sub	r2,r3,r2
    56d0:	10bfffc4 	addi	r2,r2,-1
    56d4:	e0bff615 	stw	r2,-40(fp)
    56d8:	00000b06 	br	5708 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    56dc:	e0bff517 	ldw	r2,-44(fp)
    56e0:	10000526 	beq	r2,zero,56f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    56e4:	00c20004 	movi	r3,2048
    56e8:	e0bff817 	ldw	r2,-32(fp)
    56ec:	1885c83a 	sub	r2,r3,r2
    56f0:	e0bff615 	stw	r2,-40(fp)
    56f4:	00000406 	br	5708 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    56f8:	00c1ffc4 	movi	r3,2047
    56fc:	e0bff817 	ldw	r2,-32(fp)
    5700:	1885c83a 	sub	r2,r3,r2
    5704:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    5708:	e0bff617 	ldw	r2,-40(fp)
    570c:	1000011e 	bne	r2,zero,5714 <altera_avalon_jtag_uart_write+0xa4>
        break;
    5710:	00001d06 	br	5788 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    5714:	e0fffe17 	ldw	r3,-8(fp)
    5718:	e0bff617 	ldw	r2,-40(fp)
    571c:	1880022e 	bgeu	r3,r2,5728 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    5720:	e0bffe17 	ldw	r2,-8(fp)
    5724:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    5728:	e0bff817 	ldw	r2,-32(fp)
    572c:	10820e04 	addi	r2,r2,2104
    5730:	e0fffc17 	ldw	r3,-16(fp)
    5734:	1885883a 	add	r2,r3,r2
    5738:	1009883a 	mov	r4,r2
    573c:	e17ffd17 	ldw	r5,-12(fp)
    5740:	e1bff617 	ldw	r6,-40(fp)
    5744:	000314c0 	call	314c <memcpy>
      ptr   += n;
    5748:	e0fffd17 	ldw	r3,-12(fp)
    574c:	e0bff617 	ldw	r2,-40(fp)
    5750:	1885883a 	add	r2,r3,r2
    5754:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    5758:	e0fffe17 	ldw	r3,-8(fp)
    575c:	e0bff617 	ldw	r2,-40(fp)
    5760:	1885c83a 	sub	r2,r3,r2
    5764:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5768:	e0fff817 	ldw	r3,-32(fp)
    576c:	e0bff617 	ldw	r2,-40(fp)
    5770:	1885883a 	add	r2,r3,r2
    5774:	10c1ffcc 	andi	r3,r2,2047
    5778:	e0bffc17 	ldw	r2,-16(fp)
    577c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    5780:	e0bffe17 	ldw	r2,-8(fp)
    5784:	00bfc616 	blt	zero,r2,56a0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5788:	0005303a 	rdctl	r2,status
    578c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5790:	e0fffa17 	ldw	r3,-24(fp)
    5794:	00bfff84 	movi	r2,-2
    5798:	1884703a 	and	r2,r3,r2
    579c:	1001703a 	wrctl	status,r2
  
  return context;
    57a0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    57a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    57a8:	e0bffc17 	ldw	r2,-16(fp)
    57ac:	10800817 	ldw	r2,32(r2)
    57b0:	10c00094 	ori	r3,r2,2
    57b4:	e0bffc17 	ldw	r2,-16(fp)
    57b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    57bc:	e0bffc17 	ldw	r2,-16(fp)
    57c0:	10800017 	ldw	r2,0(r2)
    57c4:	10800104 	addi	r2,r2,4
    57c8:	1007883a 	mov	r3,r2
    57cc:	e0bffc17 	ldw	r2,-16(fp)
    57d0:	10800817 	ldw	r2,32(r2)
    57d4:	18800035 	stwio	r2,0(r3)
    57d8:	e0bff917 	ldw	r2,-28(fp)
    57dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57e0:	e0bffb17 	ldw	r2,-20(fp)
    57e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    57e8:	e0bffe17 	ldw	r2,-8(fp)
    57ec:	0080120e 	bge	zero,r2,5838 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    57f0:	e0bfff17 	ldw	r2,-4(fp)
    57f4:	1090000c 	andi	r2,r2,16384
    57f8:	10000126 	beq	r2,zero,5800 <altera_avalon_jtag_uart_write+0x190>
        break;
    57fc:	00001006 	br	5840 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    5800:	0001883a 	nop
    5804:	e0bffc17 	ldw	r2,-16(fp)
    5808:	10c00d17 	ldw	r3,52(r2)
    580c:	e0bff517 	ldw	r2,-44(fp)
    5810:	1880051e 	bne	r3,r2,5828 <altera_avalon_jtag_uart_write+0x1b8>
    5814:	e0bffc17 	ldw	r2,-16(fp)
    5818:	10c00917 	ldw	r3,36(r2)
    581c:	e0bffc17 	ldw	r2,-16(fp)
    5820:	10800117 	ldw	r2,4(r2)
    5824:	18bff736 	bltu	r3,r2,5804 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    5828:	e0bffc17 	ldw	r2,-16(fp)
    582c:	10800917 	ldw	r2,36(r2)
    5830:	10000126 	beq	r2,zero,5838 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    5834:	00000206 	br	5840 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    5838:	e0bffe17 	ldw	r2,-8(fp)
    583c:	00bf9716 	blt	zero,r2,569c <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    5840:	e0fffd17 	ldw	r3,-12(fp)
    5844:	e0bff717 	ldw	r2,-36(fp)
    5848:	18800426 	beq	r3,r2,585c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    584c:	e0fffd17 	ldw	r3,-12(fp)
    5850:	e0bff717 	ldw	r2,-36(fp)
    5854:	1885c83a 	sub	r2,r3,r2
    5858:	00000606 	br	5874 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    585c:	e0bfff17 	ldw	r2,-4(fp)
    5860:	1090000c 	andi	r2,r2,16384
    5864:	10000226 	beq	r2,zero,5870 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    5868:	00bffd44 	movi	r2,-11
    586c:	00000106 	br	5874 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    5870:	00bffec4 	movi	r2,-5
}
    5874:	e037883a 	mov	sp,fp
    5878:	dfc00117 	ldw	ra,4(sp)
    587c:	df000017 	ldw	fp,0(sp)
    5880:	dec00204 	addi	sp,sp,8
    5884:	f800283a 	ret

00005888 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    5888:	defff504 	addi	sp,sp,-44
    588c:	df000a15 	stw	fp,40(sp)
    5890:	df000a04 	addi	fp,sp,40
    5894:	e13ffc15 	stw	r4,-16(fp)
    5898:	e17ffd15 	stw	r5,-12(fp)
    589c:	e1bffe15 	stw	r6,-8(fp)
    58a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    58a4:	e03ff615 	stw	zero,-40(fp)
    58a8:	00800074 	movhi	r2,1
    58ac:	10a85504 	addi	r2,r2,-24236
    58b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    58b4:	10003f26 	beq	r2,zero,59b4 <alt_alarm_start+0x12c>
  {
    if (alarm)
    58b8:	e0bffc17 	ldw	r2,-16(fp)
    58bc:	10003b26 	beq	r2,zero,59ac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    58c0:	e0bffc17 	ldw	r2,-16(fp)
    58c4:	e0fffe17 	ldw	r3,-8(fp)
    58c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    58cc:	e0bffc17 	ldw	r2,-16(fp)
    58d0:	e0ffff17 	ldw	r3,-4(fp)
    58d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    58d8:	0005303a 	rdctl	r2,status
    58dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    58e0:	e0fff817 	ldw	r3,-32(fp)
    58e4:	00bfff84 	movi	r2,-2
    58e8:	1884703a 	and	r2,r3,r2
    58ec:	1001703a 	wrctl	status,r2
  
  return context;
    58f0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    58f4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    58f8:	00800074 	movhi	r2,1
    58fc:	10a85604 	addi	r2,r2,-24232
    5900:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    5904:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    5908:	e0fffd17 	ldw	r3,-12(fp)
    590c:	e0bff617 	ldw	r2,-40(fp)
    5910:	1885883a 	add	r2,r3,r2
    5914:	10c00044 	addi	r3,r2,1
    5918:	e0bffc17 	ldw	r2,-16(fp)
    591c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    5920:	e0bffc17 	ldw	r2,-16(fp)
    5924:	10c00217 	ldw	r3,8(r2)
    5928:	e0bff617 	ldw	r2,-40(fp)
    592c:	1880042e 	bgeu	r3,r2,5940 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    5930:	e0bffc17 	ldw	r2,-16(fp)
    5934:	00c00044 	movi	r3,1
    5938:	10c00405 	stb	r3,16(r2)
    593c:	00000206 	br	5948 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    5940:	e0bffc17 	ldw	r2,-16(fp)
    5944:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    5948:	e0fffc17 	ldw	r3,-16(fp)
    594c:	00800074 	movhi	r2,1
    5950:	10a1b004 	addi	r2,r2,-31040
    5954:	e0bff915 	stw	r2,-28(fp)
    5958:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    595c:	e0bffa17 	ldw	r2,-24(fp)
    5960:	e0fff917 	ldw	r3,-28(fp)
    5964:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5968:	e0bff917 	ldw	r2,-28(fp)
    596c:	10c00017 	ldw	r3,0(r2)
    5970:	e0bffa17 	ldw	r2,-24(fp)
    5974:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5978:	e0bff917 	ldw	r2,-28(fp)
    597c:	10800017 	ldw	r2,0(r2)
    5980:	e0fffa17 	ldw	r3,-24(fp)
    5984:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5988:	e0bff917 	ldw	r2,-28(fp)
    598c:	e0fffa17 	ldw	r3,-24(fp)
    5990:	10c00015 	stw	r3,0(r2)
    5994:	e0bff717 	ldw	r2,-36(fp)
    5998:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    599c:	e0bffb17 	ldw	r2,-20(fp)
    59a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    59a4:	0005883a 	mov	r2,zero
    59a8:	00000306 	br	59b8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    59ac:	00bffa84 	movi	r2,-22
    59b0:	00000106 	br	59b8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    59b4:	00bfde84 	movi	r2,-134
  }
}
    59b8:	e037883a 	mov	sp,fp
    59bc:	df000017 	ldw	fp,0(sp)
    59c0:	dec00104 	addi	sp,sp,4
    59c4:	f800283a 	ret

000059c8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    59c8:	defffa04 	addi	sp,sp,-24
    59cc:	dfc00515 	stw	ra,20(sp)
    59d0:	df000415 	stw	fp,16(sp)
    59d4:	df000404 	addi	fp,sp,16
    59d8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    59dc:	008000c4 	movi	r2,3
    59e0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    59e4:	e0fffd17 	ldw	r3,-12(fp)
    59e8:	008003f4 	movhi	r2,15
    59ec:	10909004 	addi	r2,r2,16960
    59f0:	1885383a 	mul	r2,r3,r2
    59f4:	0100bef4 	movhi	r4,763
    59f8:	213c2004 	addi	r4,r4,-3968
    59fc:	100b883a 	mov	r5,r2
    5a00:	00018580 	call	1858 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    5a04:	01200034 	movhi	r4,32768
    5a08:	213fffc4 	addi	r4,r4,-1
    5a0c:	100b883a 	mov	r5,r2
    5a10:	00018580 	call	1858 <__udivsi3>
    5a14:	e13fff17 	ldw	r4,-4(fp)
    5a18:	100b883a 	mov	r5,r2
    5a1c:	00018580 	call	1858 <__udivsi3>
    5a20:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    5a24:	e0bffe17 	ldw	r2,-8(fp)
    5a28:	10002a26 	beq	r2,zero,5ad4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    5a2c:	e03ffc15 	stw	zero,-16(fp)
    5a30:	00001706 	br	5a90 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5a34:	00a00034 	movhi	r2,32768
    5a38:	10bfffc4 	addi	r2,r2,-1
    5a3c:	10bfffc4 	addi	r2,r2,-1
    5a40:	103ffe1e 	bne	r2,zero,5a3c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    5a44:	e0fffd17 	ldw	r3,-12(fp)
    5a48:	008003f4 	movhi	r2,15
    5a4c:	10909004 	addi	r2,r2,16960
    5a50:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5a54:	0100bef4 	movhi	r4,763
    5a58:	213c2004 	addi	r4,r4,-3968
    5a5c:	100b883a 	mov	r5,r2
    5a60:	00018580 	call	1858 <__udivsi3>
    5a64:	01200034 	movhi	r4,32768
    5a68:	213fffc4 	addi	r4,r4,-1
    5a6c:	100b883a 	mov	r5,r2
    5a70:	00018580 	call	1858 <__udivsi3>
    5a74:	1007883a 	mov	r3,r2
    5a78:	e0bfff17 	ldw	r2,-4(fp)
    5a7c:	10c5c83a 	sub	r2,r2,r3
    5a80:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5a84:	e0bffc17 	ldw	r2,-16(fp)
    5a88:	10800044 	addi	r2,r2,1
    5a8c:	e0bffc15 	stw	r2,-16(fp)
    5a90:	e0fffc17 	ldw	r3,-16(fp)
    5a94:	e0bffe17 	ldw	r2,-8(fp)
    5a98:	18bfe616 	blt	r3,r2,5a34 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5a9c:	e0fffd17 	ldw	r3,-12(fp)
    5aa0:	008003f4 	movhi	r2,15
    5aa4:	10909004 	addi	r2,r2,16960
    5aa8:	1885383a 	mul	r2,r3,r2
    5aac:	0100bef4 	movhi	r4,763
    5ab0:	213c2004 	addi	r4,r4,-3968
    5ab4:	100b883a 	mov	r5,r2
    5ab8:	00018580 	call	1858 <__udivsi3>
    5abc:	1007883a 	mov	r3,r2
    5ac0:	e0bfff17 	ldw	r2,-4(fp)
    5ac4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    5ac8:	10bfffc4 	addi	r2,r2,-1
    5acc:	103ffe1e 	bne	r2,zero,5ac8 <alt_busy_sleep+0x100>
    5ad0:	00000d06 	br	5b08 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    5ad4:	e0fffd17 	ldw	r3,-12(fp)
    5ad8:	008003f4 	movhi	r2,15
    5adc:	10909004 	addi	r2,r2,16960
    5ae0:	1885383a 	mul	r2,r3,r2
    5ae4:	0100bef4 	movhi	r4,763
    5ae8:	213c2004 	addi	r4,r4,-3968
    5aec:	100b883a 	mov	r5,r2
    5af0:	00018580 	call	1858 <__udivsi3>
    5af4:	1007883a 	mov	r3,r2
    5af8:	e0bfff17 	ldw	r2,-4(fp)
    5afc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    5b00:	10bfffc4 	addi	r2,r2,-1
    5b04:	00bffe16 	blt	zero,r2,5b00 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    5b08:	0005883a 	mov	r2,zero
}
    5b0c:	e037883a 	mov	sp,fp
    5b10:	dfc00117 	ldw	ra,4(sp)
    5b14:	df000017 	ldw	fp,0(sp)
    5b18:	dec00204 	addi	sp,sp,8
    5b1c:	f800283a 	ret

00005b20 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5b20:	deffff04 	addi	sp,sp,-4
    5b24:	df000015 	stw	fp,0(sp)
    5b28:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5b2c:	e037883a 	mov	sp,fp
    5b30:	df000017 	ldw	fp,0(sp)
    5b34:	dec00104 	addi	sp,sp,4
    5b38:	f800283a 	ret

00005b3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5b3c:	defffe04 	addi	sp,sp,-8
    5b40:	dfc00115 	stw	ra,4(sp)
    5b44:	df000015 	stw	fp,0(sp)
    5b48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5b4c:	00800074 	movhi	r2,1
    5b50:	10a1ad04 	addi	r2,r2,-31052
    5b54:	10800017 	ldw	r2,0(r2)
    5b58:	10000526 	beq	r2,zero,5b70 <alt_get_errno+0x34>
    5b5c:	00800074 	movhi	r2,1
    5b60:	10a1ad04 	addi	r2,r2,-31052
    5b64:	10800017 	ldw	r2,0(r2)
    5b68:	103ee83a 	callr	r2
    5b6c:	00000206 	br	5b78 <alt_get_errno+0x3c>
    5b70:	00800074 	movhi	r2,1
    5b74:	10a85004 	addi	r2,r2,-24256
}
    5b78:	e037883a 	mov	sp,fp
    5b7c:	dfc00117 	ldw	ra,4(sp)
    5b80:	df000017 	ldw	fp,0(sp)
    5b84:	dec00204 	addi	sp,sp,8
    5b88:	f800283a 	ret

00005b8c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5b8c:	defffa04 	addi	sp,sp,-24
    5b90:	dfc00515 	stw	ra,20(sp)
    5b94:	df000415 	stw	fp,16(sp)
    5b98:	df000404 	addi	fp,sp,16
    5b9c:	e13ffe15 	stw	r4,-8(fp)
    5ba0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5ba4:	e0bffe17 	ldw	r2,-8(fp)
    5ba8:	10000326 	beq	r2,zero,5bb8 <alt_dev_llist_insert+0x2c>
    5bac:	e0bffe17 	ldw	r2,-8(fp)
    5bb0:	10800217 	ldw	r2,8(r2)
    5bb4:	1000061e 	bne	r2,zero,5bd0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    5bb8:	0005b3c0 	call	5b3c <alt_get_errno>
    5bbc:	1007883a 	mov	r3,r2
    5bc0:	00800584 	movi	r2,22
    5bc4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5bc8:	00bffa84 	movi	r2,-22
    5bcc:	00001306 	br	5c1c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5bd0:	e0bffe17 	ldw	r2,-8(fp)
    5bd4:	e0ffff17 	ldw	r3,-4(fp)
    5bd8:	e0fffc15 	stw	r3,-16(fp)
    5bdc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5be0:	e0bffd17 	ldw	r2,-12(fp)
    5be4:	e0fffc17 	ldw	r3,-16(fp)
    5be8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5bec:	e0bffc17 	ldw	r2,-16(fp)
    5bf0:	10c00017 	ldw	r3,0(r2)
    5bf4:	e0bffd17 	ldw	r2,-12(fp)
    5bf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5bfc:	e0bffc17 	ldw	r2,-16(fp)
    5c00:	10800017 	ldw	r2,0(r2)
    5c04:	e0fffd17 	ldw	r3,-12(fp)
    5c08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5c0c:	e0bffc17 	ldw	r2,-16(fp)
    5c10:	e0fffd17 	ldw	r3,-12(fp)
    5c14:	10c00015 	stw	r3,0(r2)

  return 0;  
    5c18:	0005883a 	mov	r2,zero
}
    5c1c:	e037883a 	mov	sp,fp
    5c20:	dfc00117 	ldw	ra,4(sp)
    5c24:	df000017 	ldw	fp,0(sp)
    5c28:	dec00204 	addi	sp,sp,8
    5c2c:	f800283a 	ret

00005c30 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5c30:	defffd04 	addi	sp,sp,-12
    5c34:	dfc00215 	stw	ra,8(sp)
    5c38:	df000115 	stw	fp,4(sp)
    5c3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5c40:	00800034 	movhi	r2,0
    5c44:	109af504 	addi	r2,r2,27604
    5c48:	e0bfff15 	stw	r2,-4(fp)
    5c4c:	00000606 	br	5c68 <_do_ctors+0x38>
        (*ctor) (); 
    5c50:	e0bfff17 	ldw	r2,-4(fp)
    5c54:	10800017 	ldw	r2,0(r2)
    5c58:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5c5c:	e0bfff17 	ldw	r2,-4(fp)
    5c60:	10bfff04 	addi	r2,r2,-4
    5c64:	e0bfff15 	stw	r2,-4(fp)
    5c68:	e0ffff17 	ldw	r3,-4(fp)
    5c6c:	00800034 	movhi	r2,0
    5c70:	109af604 	addi	r2,r2,27608
    5c74:	18bff62e 	bgeu	r3,r2,5c50 <_do_ctors+0x20>
        (*ctor) (); 
}
    5c78:	e037883a 	mov	sp,fp
    5c7c:	dfc00117 	ldw	ra,4(sp)
    5c80:	df000017 	ldw	fp,0(sp)
    5c84:	dec00204 	addi	sp,sp,8
    5c88:	f800283a 	ret

00005c8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5c8c:	defffd04 	addi	sp,sp,-12
    5c90:	dfc00215 	stw	ra,8(sp)
    5c94:	df000115 	stw	fp,4(sp)
    5c98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5c9c:	00800034 	movhi	r2,0
    5ca0:	109af504 	addi	r2,r2,27604
    5ca4:	e0bfff15 	stw	r2,-4(fp)
    5ca8:	00000606 	br	5cc4 <_do_dtors+0x38>
        (*dtor) (); 
    5cac:	e0bfff17 	ldw	r2,-4(fp)
    5cb0:	10800017 	ldw	r2,0(r2)
    5cb4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5cb8:	e0bfff17 	ldw	r2,-4(fp)
    5cbc:	10bfff04 	addi	r2,r2,-4
    5cc0:	e0bfff15 	stw	r2,-4(fp)
    5cc4:	e0ffff17 	ldw	r3,-4(fp)
    5cc8:	00800034 	movhi	r2,0
    5ccc:	109af604 	addi	r2,r2,27608
    5cd0:	18bff62e 	bgeu	r3,r2,5cac <_do_dtors+0x20>
        (*dtor) (); 
}
    5cd4:	e037883a 	mov	sp,fp
    5cd8:	dfc00117 	ldw	ra,4(sp)
    5cdc:	df000017 	ldw	fp,0(sp)
    5ce0:	dec00204 	addi	sp,sp,8
    5ce4:	f800283a 	ret

00005ce8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5ce8:	defffe04 	addi	sp,sp,-8
    5cec:	dfc00115 	stw	ra,4(sp)
    5cf0:	df000015 	stw	fp,0(sp)
    5cf4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    5cf8:	0009883a 	mov	r4,zero
    5cfc:	01440004 	movi	r5,4096
    5d00:	00067a80 	call	67a8 <alt_icache_flush>
#endif
}
    5d04:	e037883a 	mov	sp,fp
    5d08:	dfc00117 	ldw	ra,4(sp)
    5d0c:	df000017 	ldw	fp,0(sp)
    5d10:	dec00204 	addi	sp,sp,8
    5d14:	f800283a 	ret

00005d18 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5d18:	defff904 	addi	sp,sp,-28
    5d1c:	dfc00615 	stw	ra,24(sp)
    5d20:	df000515 	stw	fp,20(sp)
    5d24:	df000504 	addi	fp,sp,20
    5d28:	e13ffc15 	stw	r4,-16(fp)
    5d2c:	e17ffd15 	stw	r5,-12(fp)
    5d30:	e1bffe15 	stw	r6,-8(fp)
    5d34:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5d38:	e0800217 	ldw	r2,8(fp)
    5d3c:	d8800015 	stw	r2,0(sp)
    5d40:	e13ffc17 	ldw	r4,-16(fp)
    5d44:	e17ffd17 	ldw	r5,-12(fp)
    5d48:	e1bffe17 	ldw	r6,-8(fp)
    5d4c:	e1ffff17 	ldw	r7,-4(fp)
    5d50:	0005ef80 	call	5ef8 <alt_iic_isr_register>
}  
    5d54:	e037883a 	mov	sp,fp
    5d58:	dfc00117 	ldw	ra,4(sp)
    5d5c:	df000017 	ldw	fp,0(sp)
    5d60:	dec00204 	addi	sp,sp,8
    5d64:	f800283a 	ret

00005d68 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5d68:	defff904 	addi	sp,sp,-28
    5d6c:	df000615 	stw	fp,24(sp)
    5d70:	df000604 	addi	fp,sp,24
    5d74:	e13ffe15 	stw	r4,-8(fp)
    5d78:	e17fff15 	stw	r5,-4(fp)
    5d7c:	e0bfff17 	ldw	r2,-4(fp)
    5d80:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d84:	0005303a 	rdctl	r2,status
    5d88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d8c:	e0fffb17 	ldw	r3,-20(fp)
    5d90:	00bfff84 	movi	r2,-2
    5d94:	1884703a 	and	r2,r3,r2
    5d98:	1001703a 	wrctl	status,r2
  
  return context;
    5d9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5da0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    5da4:	e0bffa17 	ldw	r2,-24(fp)
    5da8:	00c00044 	movi	r3,1
    5dac:	1884983a 	sll	r2,r3,r2
    5db0:	1007883a 	mov	r3,r2
    5db4:	00800074 	movhi	r2,1
    5db8:	10a85404 	addi	r2,r2,-24240
    5dbc:	10800017 	ldw	r2,0(r2)
    5dc0:	1886b03a 	or	r3,r3,r2
    5dc4:	00800074 	movhi	r2,1
    5dc8:	10a85404 	addi	r2,r2,-24240
    5dcc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5dd0:	00800074 	movhi	r2,1
    5dd4:	10a85404 	addi	r2,r2,-24240
    5dd8:	10800017 	ldw	r2,0(r2)
    5ddc:	100170fa 	wrctl	ienable,r2
    5de0:	e0bffc17 	ldw	r2,-16(fp)
    5de4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5de8:	e0bffd17 	ldw	r2,-12(fp)
    5dec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5df0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    5df4:	0001883a 	nop
}
    5df8:	e037883a 	mov	sp,fp
    5dfc:	df000017 	ldw	fp,0(sp)
    5e00:	dec00104 	addi	sp,sp,4
    5e04:	f800283a 	ret

00005e08 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5e08:	defff904 	addi	sp,sp,-28
    5e0c:	df000615 	stw	fp,24(sp)
    5e10:	df000604 	addi	fp,sp,24
    5e14:	e13ffe15 	stw	r4,-8(fp)
    5e18:	e17fff15 	stw	r5,-4(fp)
    5e1c:	e0bfff17 	ldw	r2,-4(fp)
    5e20:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e24:	0005303a 	rdctl	r2,status
    5e28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e2c:	e0fffb17 	ldw	r3,-20(fp)
    5e30:	00bfff84 	movi	r2,-2
    5e34:	1884703a 	and	r2,r3,r2
    5e38:	1001703a 	wrctl	status,r2
  
  return context;
    5e3c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5e40:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    5e44:	e0bffa17 	ldw	r2,-24(fp)
    5e48:	00c00044 	movi	r3,1
    5e4c:	1884983a 	sll	r2,r3,r2
    5e50:	0084303a 	nor	r2,zero,r2
    5e54:	1007883a 	mov	r3,r2
    5e58:	00800074 	movhi	r2,1
    5e5c:	10a85404 	addi	r2,r2,-24240
    5e60:	10800017 	ldw	r2,0(r2)
    5e64:	1886703a 	and	r3,r3,r2
    5e68:	00800074 	movhi	r2,1
    5e6c:	10a85404 	addi	r2,r2,-24240
    5e70:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5e74:	00800074 	movhi	r2,1
    5e78:	10a85404 	addi	r2,r2,-24240
    5e7c:	10800017 	ldw	r2,0(r2)
    5e80:	100170fa 	wrctl	ienable,r2
    5e84:	e0bffc17 	ldw	r2,-16(fp)
    5e88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e8c:	e0bffd17 	ldw	r2,-12(fp)
    5e90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5e94:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    5e98:	0001883a 	nop
}
    5e9c:	e037883a 	mov	sp,fp
    5ea0:	df000017 	ldw	fp,0(sp)
    5ea4:	dec00104 	addi	sp,sp,4
    5ea8:	f800283a 	ret

00005eac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5eac:	defffc04 	addi	sp,sp,-16
    5eb0:	df000315 	stw	fp,12(sp)
    5eb4:	df000304 	addi	fp,sp,12
    5eb8:	e13ffe15 	stw	r4,-8(fp)
    5ebc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5ec0:	000530fa 	rdctl	r2,ienable
    5ec4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5ec8:	e0bfff17 	ldw	r2,-4(fp)
    5ecc:	00c00044 	movi	r3,1
    5ed0:	1884983a 	sll	r2,r3,r2
    5ed4:	1007883a 	mov	r3,r2
    5ed8:	e0bffd17 	ldw	r2,-12(fp)
    5edc:	1884703a 	and	r2,r3,r2
    5ee0:	1004c03a 	cmpne	r2,r2,zero
    5ee4:	10803fcc 	andi	r2,r2,255
}
    5ee8:	e037883a 	mov	sp,fp
    5eec:	df000017 	ldw	fp,0(sp)
    5ef0:	dec00104 	addi	sp,sp,4
    5ef4:	f800283a 	ret

00005ef8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5ef8:	defff504 	addi	sp,sp,-44
    5efc:	dfc00a15 	stw	ra,40(sp)
    5f00:	df000915 	stw	fp,36(sp)
    5f04:	df000904 	addi	fp,sp,36
    5f08:	e13ffc15 	stw	r4,-16(fp)
    5f0c:	e17ffd15 	stw	r5,-12(fp)
    5f10:	e1bffe15 	stw	r6,-8(fp)
    5f14:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    5f18:	00bffa84 	movi	r2,-22
    5f1c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5f20:	e0bffd17 	ldw	r2,-12(fp)
    5f24:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5f28:	e0bff817 	ldw	r2,-32(fp)
    5f2c:	10800808 	cmpgei	r2,r2,32
    5f30:	1000271e 	bne	r2,zero,5fd0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f34:	0005303a 	rdctl	r2,status
    5f38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f3c:	e0fffa17 	ldw	r3,-24(fp)
    5f40:	00bfff84 	movi	r2,-2
    5f44:	1884703a 	and	r2,r3,r2
    5f48:	1001703a 	wrctl	status,r2
  
  return context;
    5f4c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5f50:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    5f54:	00800074 	movhi	r2,1
    5f58:	10a86104 	addi	r2,r2,-24188
    5f5c:	e0fff817 	ldw	r3,-32(fp)
    5f60:	180690fa 	slli	r3,r3,3
    5f64:	10c5883a 	add	r2,r2,r3
    5f68:	e0fffe17 	ldw	r3,-8(fp)
    5f6c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    5f70:	00800074 	movhi	r2,1
    5f74:	10a86104 	addi	r2,r2,-24188
    5f78:	e0fff817 	ldw	r3,-32(fp)
    5f7c:	180690fa 	slli	r3,r3,3
    5f80:	10c5883a 	add	r2,r2,r3
    5f84:	10800104 	addi	r2,r2,4
    5f88:	e0ffff17 	ldw	r3,-4(fp)
    5f8c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5f90:	e0bffe17 	ldw	r2,-8(fp)
    5f94:	10000526 	beq	r2,zero,5fac <alt_iic_isr_register+0xb4>
    5f98:	e0bff817 	ldw	r2,-32(fp)
    5f9c:	e13ffc17 	ldw	r4,-16(fp)
    5fa0:	100b883a 	mov	r5,r2
    5fa4:	0005d680 	call	5d68 <alt_ic_irq_enable>
    5fa8:	00000406 	br	5fbc <alt_iic_isr_register+0xc4>
    5fac:	e0bff817 	ldw	r2,-32(fp)
    5fb0:	e13ffc17 	ldw	r4,-16(fp)
    5fb4:	100b883a 	mov	r5,r2
    5fb8:	0005e080 	call	5e08 <alt_ic_irq_disable>
    5fbc:	e0bff715 	stw	r2,-36(fp)
    5fc0:	e0bff917 	ldw	r2,-28(fp)
    5fc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5fc8:	e0bffb17 	ldw	r2,-20(fp)
    5fcc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5fd0:	e0bff717 	ldw	r2,-36(fp)
}
    5fd4:	e037883a 	mov	sp,fp
    5fd8:	dfc00117 	ldw	ra,4(sp)
    5fdc:	df000017 	ldw	fp,0(sp)
    5fe0:	dec00204 	addi	sp,sp,8
    5fe4:	f800283a 	ret

00005fe8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5fe8:	defff904 	addi	sp,sp,-28
    5fec:	dfc00615 	stw	ra,24(sp)
    5ff0:	df000515 	stw	fp,20(sp)
    5ff4:	df000504 	addi	fp,sp,20
    5ff8:	e13ffc15 	stw	r4,-16(fp)
    5ffc:	e17ffd15 	stw	r5,-12(fp)
    6000:	e1bffe15 	stw	r6,-8(fp)
    6004:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    6008:	e13ffd17 	ldw	r4,-12(fp)
    600c:	e17ffe17 	ldw	r5,-8(fp)
    6010:	e1bfff17 	ldw	r6,-4(fp)
    6014:	000623c0 	call	623c <open>
    6018:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    601c:	e0bffb17 	ldw	r2,-20(fp)
    6020:	10001c16 	blt	r2,zero,6094 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    6024:	00800034 	movhi	r2,0
    6028:	109d2c04 	addi	r2,r2,29872
    602c:	e0fffb17 	ldw	r3,-20(fp)
    6030:	18c00324 	muli	r3,r3,12
    6034:	10c5883a 	add	r2,r2,r3
    6038:	10c00017 	ldw	r3,0(r2)
    603c:	e0bffc17 	ldw	r2,-16(fp)
    6040:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    6044:	00800034 	movhi	r2,0
    6048:	109d2c04 	addi	r2,r2,29872
    604c:	e0fffb17 	ldw	r3,-20(fp)
    6050:	18c00324 	muli	r3,r3,12
    6054:	10c5883a 	add	r2,r2,r3
    6058:	10800104 	addi	r2,r2,4
    605c:	10c00017 	ldw	r3,0(r2)
    6060:	e0bffc17 	ldw	r2,-16(fp)
    6064:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    6068:	00800034 	movhi	r2,0
    606c:	109d2c04 	addi	r2,r2,29872
    6070:	e0fffb17 	ldw	r3,-20(fp)
    6074:	18c00324 	muli	r3,r3,12
    6078:	10c5883a 	add	r2,r2,r3
    607c:	10800204 	addi	r2,r2,8
    6080:	10c00017 	ldw	r3,0(r2)
    6084:	e0bffc17 	ldw	r2,-16(fp)
    6088:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    608c:	e13ffb17 	ldw	r4,-20(fp)
    6090:	0004b040 	call	4b04 <alt_release_fd>
  }
} 
    6094:	e037883a 	mov	sp,fp
    6098:	dfc00117 	ldw	ra,4(sp)
    609c:	df000017 	ldw	fp,0(sp)
    60a0:	dec00204 	addi	sp,sp,8
    60a4:	f800283a 	ret

000060a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    60a8:	defffb04 	addi	sp,sp,-20
    60ac:	dfc00415 	stw	ra,16(sp)
    60b0:	df000315 	stw	fp,12(sp)
    60b4:	df000304 	addi	fp,sp,12
    60b8:	e13ffd15 	stw	r4,-12(fp)
    60bc:	e17ffe15 	stw	r5,-8(fp)
    60c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    60c4:	01000034 	movhi	r4,0
    60c8:	211d2f04 	addi	r4,r4,29884
    60cc:	e17ffd17 	ldw	r5,-12(fp)
    60d0:	01800044 	movi	r6,1
    60d4:	01c07fc4 	movi	r7,511
    60d8:	0005fe80 	call	5fe8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    60dc:	01000034 	movhi	r4,0
    60e0:	211d2c04 	addi	r4,r4,29872
    60e4:	e17ffe17 	ldw	r5,-8(fp)
    60e8:	000d883a 	mov	r6,zero
    60ec:	01c07fc4 	movi	r7,511
    60f0:	0005fe80 	call	5fe8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    60f4:	01000034 	movhi	r4,0
    60f8:	211d3204 	addi	r4,r4,29896
    60fc:	e17fff17 	ldw	r5,-4(fp)
    6100:	01800044 	movi	r6,1
    6104:	01c07fc4 	movi	r7,511
    6108:	0005fe80 	call	5fe8 <alt_open_fd>
}  
    610c:	e037883a 	mov	sp,fp
    6110:	dfc00117 	ldw	ra,4(sp)
    6114:	df000017 	ldw	fp,0(sp)
    6118:	dec00204 	addi	sp,sp,8
    611c:	f800283a 	ret

00006120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    6120:	defffe04 	addi	sp,sp,-8
    6124:	dfc00115 	stw	ra,4(sp)
    6128:	df000015 	stw	fp,0(sp)
    612c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    6130:	00800074 	movhi	r2,1
    6134:	10a1ad04 	addi	r2,r2,-31052
    6138:	10800017 	ldw	r2,0(r2)
    613c:	10000526 	beq	r2,zero,6154 <alt_get_errno+0x34>
    6140:	00800074 	movhi	r2,1
    6144:	10a1ad04 	addi	r2,r2,-31052
    6148:	10800017 	ldw	r2,0(r2)
    614c:	103ee83a 	callr	r2
    6150:	00000206 	br	615c <alt_get_errno+0x3c>
    6154:	00800074 	movhi	r2,1
    6158:	10a85004 	addi	r2,r2,-24256
}
    615c:	e037883a 	mov	sp,fp
    6160:	dfc00117 	ldw	ra,4(sp)
    6164:	df000017 	ldw	fp,0(sp)
    6168:	dec00204 	addi	sp,sp,8
    616c:	f800283a 	ret

00006170 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6170:	defffd04 	addi	sp,sp,-12
    6174:	df000215 	stw	fp,8(sp)
    6178:	df000204 	addi	fp,sp,8
    617c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6180:	e0bfff17 	ldw	r2,-4(fp)
    6184:	10800217 	ldw	r2,8(r2)
    6188:	10d00034 	orhi	r3,r2,16384
    618c:	e0bfff17 	ldw	r2,-4(fp)
    6190:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6194:	e03ffe15 	stw	zero,-8(fp)
    6198:	00001d06 	br	6210 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    619c:	00800034 	movhi	r2,0
    61a0:	109d2c04 	addi	r2,r2,29872
    61a4:	e0fffe17 	ldw	r3,-8(fp)
    61a8:	18c00324 	muli	r3,r3,12
    61ac:	10c5883a 	add	r2,r2,r3
    61b0:	10c00017 	ldw	r3,0(r2)
    61b4:	e0bfff17 	ldw	r2,-4(fp)
    61b8:	10800017 	ldw	r2,0(r2)
    61bc:	1880111e 	bne	r3,r2,6204 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    61c0:	00800034 	movhi	r2,0
    61c4:	109d2c04 	addi	r2,r2,29872
    61c8:	e0fffe17 	ldw	r3,-8(fp)
    61cc:	18c00324 	muli	r3,r3,12
    61d0:	10c5883a 	add	r2,r2,r3
    61d4:	10800204 	addi	r2,r2,8
    61d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    61dc:	1000090e 	bge	r2,zero,6204 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    61e0:	e0bffe17 	ldw	r2,-8(fp)
    61e4:	10c00324 	muli	r3,r2,12
    61e8:	00800034 	movhi	r2,0
    61ec:	109d2c04 	addi	r2,r2,29872
    61f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    61f4:	e0bfff17 	ldw	r2,-4(fp)
    61f8:	18800226 	beq	r3,r2,6204 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    61fc:	00bffcc4 	movi	r2,-13
    6200:	00000a06 	br	622c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6204:	e0bffe17 	ldw	r2,-8(fp)
    6208:	10800044 	addi	r2,r2,1
    620c:	e0bffe15 	stw	r2,-8(fp)
    6210:	00800074 	movhi	r2,1
    6214:	10a1ac04 	addi	r2,r2,-31056
    6218:	10800017 	ldw	r2,0(r2)
    621c:	1007883a 	mov	r3,r2
    6220:	e0bffe17 	ldw	r2,-8(fp)
    6224:	18bfdd2e 	bgeu	r3,r2,619c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6228:	0005883a 	mov	r2,zero
}
    622c:	e037883a 	mov	sp,fp
    6230:	df000017 	ldw	fp,0(sp)
    6234:	dec00104 	addi	sp,sp,4
    6238:	f800283a 	ret

0000623c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    623c:	defff604 	addi	sp,sp,-40
    6240:	dfc00915 	stw	ra,36(sp)
    6244:	df000815 	stw	fp,32(sp)
    6248:	df000804 	addi	fp,sp,32
    624c:	e13ffd15 	stw	r4,-12(fp)
    6250:	e17ffe15 	stw	r5,-8(fp)
    6254:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6258:	00bfffc4 	movi	r2,-1
    625c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    6260:	00bffb44 	movi	r2,-19
    6264:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    6268:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    626c:	e13ffd17 	ldw	r4,-12(fp)
    6270:	01400074 	movhi	r5,1
    6274:	2961aa04 	addi	r5,r5,-31064
    6278:	00065500 	call	6550 <alt_find_dev>
    627c:	e0bff815 	stw	r2,-32(fp)
    6280:	e0bff817 	ldw	r2,-32(fp)
    6284:	1000051e 	bne	r2,zero,629c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6288:	e13ffd17 	ldw	r4,-12(fp)
    628c:	00065e00 	call	65e0 <alt_find_file>
    6290:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    6294:	00800044 	movi	r2,1
    6298:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    629c:	e0bff817 	ldw	r2,-32(fp)
    62a0:	10002926 	beq	r2,zero,6348 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    62a4:	e13ff817 	ldw	r4,-32(fp)
    62a8:	00066f40 	call	66f4 <alt_get_fd>
    62ac:	e0bff915 	stw	r2,-28(fp)
    62b0:	e0bff917 	ldw	r2,-28(fp)
    62b4:	1000030e 	bge	r2,zero,62c4 <open+0x88>
    {
      status = index;
    62b8:	e0bff917 	ldw	r2,-28(fp)
    62bc:	e0bffa15 	stw	r2,-24(fp)
    62c0:	00002306 	br	6350 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    62c4:	e0bff917 	ldw	r2,-28(fp)
    62c8:	10c00324 	muli	r3,r2,12
    62cc:	00800034 	movhi	r2,0
    62d0:	109d2c04 	addi	r2,r2,29872
    62d4:	1885883a 	add	r2,r3,r2
    62d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    62dc:	e0fffe17 	ldw	r3,-8(fp)
    62e0:	00900034 	movhi	r2,16384
    62e4:	10bfffc4 	addi	r2,r2,-1
    62e8:	1886703a 	and	r3,r3,r2
    62ec:	e0bffc17 	ldw	r2,-16(fp)
    62f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    62f4:	e0bffb17 	ldw	r2,-20(fp)
    62f8:	1000051e 	bne	r2,zero,6310 <open+0xd4>
    62fc:	e13ffc17 	ldw	r4,-16(fp)
    6300:	00061700 	call	6170 <alt_file_locked>
    6304:	e0bffa15 	stw	r2,-24(fp)
    6308:	e0bffa17 	ldw	r2,-24(fp)
    630c:	10001016 	blt	r2,zero,6350 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6310:	e0bff817 	ldw	r2,-32(fp)
    6314:	10800317 	ldw	r2,12(r2)
    6318:	10000826 	beq	r2,zero,633c <open+0x100>
    631c:	e0bff817 	ldw	r2,-32(fp)
    6320:	10800317 	ldw	r2,12(r2)
    6324:	e13ffc17 	ldw	r4,-16(fp)
    6328:	e17ffd17 	ldw	r5,-12(fp)
    632c:	e1bffe17 	ldw	r6,-8(fp)
    6330:	e1ffff17 	ldw	r7,-4(fp)
    6334:	103ee83a 	callr	r2
    6338:	00000106 	br	6340 <open+0x104>
    633c:	0005883a 	mov	r2,zero
    6340:	e0bffa15 	stw	r2,-24(fp)
    6344:	00000206 	br	6350 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6348:	00bffb44 	movi	r2,-19
    634c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6350:	e0bffa17 	ldw	r2,-24(fp)
    6354:	1000090e 	bge	r2,zero,637c <open+0x140>
  {
    alt_release_fd (index);  
    6358:	e13ff917 	ldw	r4,-28(fp)
    635c:	0004b040 	call	4b04 <alt_release_fd>
    ALT_ERRNO = -status;
    6360:	00061200 	call	6120 <alt_get_errno>
    6364:	1007883a 	mov	r3,r2
    6368:	e0bffa17 	ldw	r2,-24(fp)
    636c:	0085c83a 	sub	r2,zero,r2
    6370:	18800015 	stw	r2,0(r3)
    return -1;
    6374:	00bfffc4 	movi	r2,-1
    6378:	00000106 	br	6380 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    637c:	e0bff917 	ldw	r2,-28(fp)
}
    6380:	e037883a 	mov	sp,fp
    6384:	dfc00117 	ldw	ra,4(sp)
    6388:	df000017 	ldw	fp,0(sp)
    638c:	dec00204 	addi	sp,sp,8
    6390:	f800283a 	ret

00006394 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    6394:	defffa04 	addi	sp,sp,-24
    6398:	df000515 	stw	fp,20(sp)
    639c:	df000504 	addi	fp,sp,20
    63a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    63a4:	0005303a 	rdctl	r2,status
    63a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    63ac:	e0fffc17 	ldw	r3,-16(fp)
    63b0:	00bfff84 	movi	r2,-2
    63b4:	1884703a 	and	r2,r3,r2
    63b8:	1001703a 	wrctl	status,r2
  
  return context;
    63bc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    63c0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    63c4:	e0bfff17 	ldw	r2,-4(fp)
    63c8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    63cc:	e0bffd17 	ldw	r2,-12(fp)
    63d0:	10800017 	ldw	r2,0(r2)
    63d4:	e0fffd17 	ldw	r3,-12(fp)
    63d8:	18c00117 	ldw	r3,4(r3)
    63dc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    63e0:	e0bffd17 	ldw	r2,-12(fp)
    63e4:	10800117 	ldw	r2,4(r2)
    63e8:	e0fffd17 	ldw	r3,-12(fp)
    63ec:	18c00017 	ldw	r3,0(r3)
    63f0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    63f4:	e0bffd17 	ldw	r2,-12(fp)
    63f8:	e0fffd17 	ldw	r3,-12(fp)
    63fc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    6400:	e0bffd17 	ldw	r2,-12(fp)
    6404:	e0fffd17 	ldw	r3,-12(fp)
    6408:	10c00015 	stw	r3,0(r2)
    640c:	e0bffb17 	ldw	r2,-20(fp)
    6410:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6414:	e0bffe17 	ldw	r2,-8(fp)
    6418:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    641c:	e037883a 	mov	sp,fp
    6420:	df000017 	ldw	fp,0(sp)
    6424:	dec00104 	addi	sp,sp,4
    6428:	f800283a 	ret

0000642c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    642c:	defffb04 	addi	sp,sp,-20
    6430:	dfc00415 	stw	ra,16(sp)
    6434:	df000315 	stw	fp,12(sp)
    6438:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    643c:	d0a00c17 	ldw	r2,-32720(gp)
    6440:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    6444:	d0a6b217 	ldw	r2,-25912(gp)
    6448:	10800044 	addi	r2,r2,1
    644c:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    6450:	00002e06 	br	650c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    6454:	e0bffd17 	ldw	r2,-12(fp)
    6458:	10800017 	ldw	r2,0(r2)
    645c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    6460:	e0bffd17 	ldw	r2,-12(fp)
    6464:	10800403 	ldbu	r2,16(r2)
    6468:	10803fcc 	andi	r2,r2,255
    646c:	10000426 	beq	r2,zero,6480 <alt_tick+0x54>
    6470:	d0a6b217 	ldw	r2,-25912(gp)
    6474:	1000021e 	bne	r2,zero,6480 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    6478:	e0bffd17 	ldw	r2,-12(fp)
    647c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    6480:	e0bffd17 	ldw	r2,-12(fp)
    6484:	10800217 	ldw	r2,8(r2)
    6488:	d0e6b217 	ldw	r3,-25912(gp)
    648c:	18801d36 	bltu	r3,r2,6504 <alt_tick+0xd8>
    6490:	e0bffd17 	ldw	r2,-12(fp)
    6494:	10800403 	ldbu	r2,16(r2)
    6498:	10803fcc 	andi	r2,r2,255
    649c:	1000191e 	bne	r2,zero,6504 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    64a0:	e0bffd17 	ldw	r2,-12(fp)
    64a4:	10800317 	ldw	r2,12(r2)
    64a8:	e0fffd17 	ldw	r3,-12(fp)
    64ac:	18c00517 	ldw	r3,20(r3)
    64b0:	1809883a 	mov	r4,r3
    64b4:	103ee83a 	callr	r2
    64b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    64bc:	e0bfff17 	ldw	r2,-4(fp)
    64c0:	1000031e 	bne	r2,zero,64d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    64c4:	e13ffd17 	ldw	r4,-12(fp)
    64c8:	00063940 	call	6394 <alt_alarm_stop>
    64cc:	00000d06 	br	6504 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    64d0:	e0bffd17 	ldw	r2,-12(fp)
    64d4:	10c00217 	ldw	r3,8(r2)
    64d8:	e0bfff17 	ldw	r2,-4(fp)
    64dc:	1887883a 	add	r3,r3,r2
    64e0:	e0bffd17 	ldw	r2,-12(fp)
    64e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    64e8:	e0bffd17 	ldw	r2,-12(fp)
    64ec:	10c00217 	ldw	r3,8(r2)
    64f0:	d0a6b217 	ldw	r2,-25912(gp)
    64f4:	1880032e 	bgeu	r3,r2,6504 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    64f8:	e0bffd17 	ldw	r2,-12(fp)
    64fc:	00c00044 	movi	r3,1
    6500:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    6504:	e0bffe17 	ldw	r2,-8(fp)
    6508:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    650c:	e0fffd17 	ldw	r3,-12(fp)
    6510:	d0a00c04 	addi	r2,gp,-32720
    6514:	18bfcf1e 	bne	r3,r2,6454 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    6518:	0001883a 	nop
}
    651c:	e037883a 	mov	sp,fp
    6520:	dfc00117 	ldw	ra,4(sp)
    6524:	df000017 	ldw	fp,0(sp)
    6528:	dec00204 	addi	sp,sp,8
    652c:	f800283a 	ret

00006530 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    6530:	deffff04 	addi	sp,sp,-4
    6534:	df000015 	stw	fp,0(sp)
    6538:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    653c:	000170fa 	wrctl	ienable,zero
}
    6540:	e037883a 	mov	sp,fp
    6544:	df000017 	ldw	fp,0(sp)
    6548:	dec00104 	addi	sp,sp,4
    654c:	f800283a 	ret

00006550 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    6550:	defffa04 	addi	sp,sp,-24
    6554:	dfc00515 	stw	ra,20(sp)
    6558:	df000415 	stw	fp,16(sp)
    655c:	df000404 	addi	fp,sp,16
    6560:	e13ffe15 	stw	r4,-8(fp)
    6564:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    6568:	e0bfff17 	ldw	r2,-4(fp)
    656c:	10800017 	ldw	r2,0(r2)
    6570:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    6574:	e13ffe17 	ldw	r4,-8(fp)
    6578:	00027140 	call	2714 <strlen>
    657c:	10800044 	addi	r2,r2,1
    6580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6584:	00000d06 	br	65bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    6588:	e0bffc17 	ldw	r2,-16(fp)
    658c:	10c00217 	ldw	r3,8(r2)
    6590:	e0bffd17 	ldw	r2,-12(fp)
    6594:	1809883a 	mov	r4,r3
    6598:	e17ffe17 	ldw	r5,-8(fp)
    659c:	100d883a 	mov	r6,r2
    65a0:	00068800 	call	6880 <memcmp>
    65a4:	1000021e 	bne	r2,zero,65b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    65a8:	e0bffc17 	ldw	r2,-16(fp)
    65ac:	00000706 	br	65cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    65b0:	e0bffc17 	ldw	r2,-16(fp)
    65b4:	10800017 	ldw	r2,0(r2)
    65b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    65bc:	e0fffc17 	ldw	r3,-16(fp)
    65c0:	e0bfff17 	ldw	r2,-4(fp)
    65c4:	18bff01e 	bne	r3,r2,6588 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    65c8:	0005883a 	mov	r2,zero
}
    65cc:	e037883a 	mov	sp,fp
    65d0:	dfc00117 	ldw	ra,4(sp)
    65d4:	df000017 	ldw	fp,0(sp)
    65d8:	dec00204 	addi	sp,sp,8
    65dc:	f800283a 	ret

000065e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    65e0:	defffb04 	addi	sp,sp,-20
    65e4:	dfc00415 	stw	ra,16(sp)
    65e8:	df000315 	stw	fp,12(sp)
    65ec:	df000304 	addi	fp,sp,12
    65f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    65f4:	00800074 	movhi	r2,1
    65f8:	10a1a804 	addi	r2,r2,-31072
    65fc:	10800017 	ldw	r2,0(r2)
    6600:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6604:	00003106 	br	66cc <alt_find_file+0xec>
  {
    len = strlen(next->name);
    6608:	e0bffd17 	ldw	r2,-12(fp)
    660c:	10800217 	ldw	r2,8(r2)
    6610:	1009883a 	mov	r4,r2
    6614:	00027140 	call	2714 <strlen>
    6618:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    661c:	e0bffd17 	ldw	r2,-12(fp)
    6620:	10c00217 	ldw	r3,8(r2)
    6624:	e0bffe17 	ldw	r2,-8(fp)
    6628:	10bfffc4 	addi	r2,r2,-1
    662c:	1885883a 	add	r2,r3,r2
    6630:	10800003 	ldbu	r2,0(r2)
    6634:	10803fcc 	andi	r2,r2,255
    6638:	1080201c 	xori	r2,r2,128
    663c:	10bfe004 	addi	r2,r2,-128
    6640:	10800bd8 	cmpnei	r2,r2,47
    6644:	1000031e 	bne	r2,zero,6654 <alt_find_file+0x74>
    {
      len -= 1;
    6648:	e0bffe17 	ldw	r2,-8(fp)
    664c:	10bfffc4 	addi	r2,r2,-1
    6650:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6654:	e0bffe17 	ldw	r2,-8(fp)
    6658:	e0ffff17 	ldw	r3,-4(fp)
    665c:	1885883a 	add	r2,r3,r2
    6660:	10800003 	ldbu	r2,0(r2)
    6664:	10803fcc 	andi	r2,r2,255
    6668:	1080201c 	xori	r2,r2,128
    666c:	10bfe004 	addi	r2,r2,-128
    6670:	10800be0 	cmpeqi	r2,r2,47
    6674:	1000081e 	bne	r2,zero,6698 <alt_find_file+0xb8>
    6678:	e0bffe17 	ldw	r2,-8(fp)
    667c:	e0ffff17 	ldw	r3,-4(fp)
    6680:	1885883a 	add	r2,r3,r2
    6684:	10800003 	ldbu	r2,0(r2)
    6688:	10803fcc 	andi	r2,r2,255
    668c:	1080201c 	xori	r2,r2,128
    6690:	10bfe004 	addi	r2,r2,-128
    6694:	10000a1e 	bne	r2,zero,66c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    6698:	e0bffd17 	ldw	r2,-12(fp)
    669c:	10c00217 	ldw	r3,8(r2)
    66a0:	e0bffe17 	ldw	r2,-8(fp)
    66a4:	1809883a 	mov	r4,r3
    66a8:	e17fff17 	ldw	r5,-4(fp)
    66ac:	100d883a 	mov	r6,r2
    66b0:	00068800 	call	6880 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    66b4:	1000021e 	bne	r2,zero,66c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    66b8:	e0bffd17 	ldw	r2,-12(fp)
    66bc:	00000806 	br	66e0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    66c0:	e0bffd17 	ldw	r2,-12(fp)
    66c4:	10800017 	ldw	r2,0(r2)
    66c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    66cc:	e0fffd17 	ldw	r3,-12(fp)
    66d0:	00800074 	movhi	r2,1
    66d4:	10a1a804 	addi	r2,r2,-31072
    66d8:	18bfcb1e 	bne	r3,r2,6608 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    66dc:	0005883a 	mov	r2,zero
}
    66e0:	e037883a 	mov	sp,fp
    66e4:	dfc00117 	ldw	ra,4(sp)
    66e8:	df000017 	ldw	fp,0(sp)
    66ec:	dec00204 	addi	sp,sp,8
    66f0:	f800283a 	ret

000066f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    66f4:	defffc04 	addi	sp,sp,-16
    66f8:	df000315 	stw	fp,12(sp)
    66fc:	df000304 	addi	fp,sp,12
    6700:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    6704:	00bffa04 	movi	r2,-24
    6708:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    670c:	e03ffd15 	stw	zero,-12(fp)
    6710:	00001d06 	br	6788 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    6714:	00800034 	movhi	r2,0
    6718:	109d2c04 	addi	r2,r2,29872
    671c:	e0fffd17 	ldw	r3,-12(fp)
    6720:	18c00324 	muli	r3,r3,12
    6724:	10c5883a 	add	r2,r2,r3
    6728:	10800017 	ldw	r2,0(r2)
    672c:	1000131e 	bne	r2,zero,677c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    6730:	00800034 	movhi	r2,0
    6734:	109d2c04 	addi	r2,r2,29872
    6738:	e0fffd17 	ldw	r3,-12(fp)
    673c:	18c00324 	muli	r3,r3,12
    6740:	10c5883a 	add	r2,r2,r3
    6744:	e0ffff17 	ldw	r3,-4(fp)
    6748:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    674c:	00800074 	movhi	r2,1
    6750:	10a1ac04 	addi	r2,r2,-31056
    6754:	10c00017 	ldw	r3,0(r2)
    6758:	e0bffd17 	ldw	r2,-12(fp)
    675c:	1880040e 	bge	r3,r2,6770 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    6760:	00800074 	movhi	r2,1
    6764:	10a1ac04 	addi	r2,r2,-31056
    6768:	e0fffd17 	ldw	r3,-12(fp)
    676c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    6770:	e0bffd17 	ldw	r2,-12(fp)
    6774:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    6778:	00000606 	br	6794 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    677c:	e0bffd17 	ldw	r2,-12(fp)
    6780:	10800044 	addi	r2,r2,1
    6784:	e0bffd15 	stw	r2,-12(fp)
    6788:	e0bffd17 	ldw	r2,-12(fp)
    678c:	10800810 	cmplti	r2,r2,32
    6790:	103fe01e 	bne	r2,zero,6714 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6794:	e0bffe17 	ldw	r2,-8(fp)
}
    6798:	e037883a 	mov	sp,fp
    679c:	df000017 	ldw	fp,0(sp)
    67a0:	dec00104 	addi	sp,sp,4
    67a4:	f800283a 	ret

000067a8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    67a8:	defffb04 	addi	sp,sp,-20
    67ac:	df000415 	stw	fp,16(sp)
    67b0:	df000404 	addi	fp,sp,16
    67b4:	e13ffe15 	stw	r4,-8(fp)
    67b8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    67bc:	e0bfff17 	ldw	r2,-4(fp)
    67c0:	10840070 	cmpltui	r2,r2,4097
    67c4:	1000021e 	bne	r2,zero,67d0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    67c8:	00840004 	movi	r2,4096
    67cc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    67d0:	e0fffe17 	ldw	r3,-8(fp)
    67d4:	e0bfff17 	ldw	r2,-4(fp)
    67d8:	1885883a 	add	r2,r3,r2
    67dc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    67e0:	e0bffe17 	ldw	r2,-8(fp)
    67e4:	e0bffc15 	stw	r2,-16(fp)
    67e8:	00000506 	br	6800 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    67ec:	e0bffc17 	ldw	r2,-16(fp)
    67f0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    67f4:	e0bffc17 	ldw	r2,-16(fp)
    67f8:	10800804 	addi	r2,r2,32
    67fc:	e0bffc15 	stw	r2,-16(fp)
    6800:	e0fffc17 	ldw	r3,-16(fp)
    6804:	e0bffd17 	ldw	r2,-12(fp)
    6808:	18bff836 	bltu	r3,r2,67ec <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    680c:	e0bffe17 	ldw	r2,-8(fp)
    6810:	108007cc 	andi	r2,r2,31
    6814:	10000226 	beq	r2,zero,6820 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    6818:	e0bffc17 	ldw	r2,-16(fp)
    681c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    6820:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    6824:	e037883a 	mov	sp,fp
    6828:	df000017 	ldw	fp,0(sp)
    682c:	dec00104 	addi	sp,sp,4
    6830:	f800283a 	ret

00006834 <atexit>:
    6834:	200b883a 	mov	r5,r4
    6838:	000d883a 	mov	r6,zero
    683c:	0009883a 	mov	r4,zero
    6840:	000f883a 	mov	r7,zero
    6844:	00068fc1 	jmpi	68fc <__register_exitproc>

00006848 <exit>:
    6848:	defffe04 	addi	sp,sp,-8
    684c:	000b883a 	mov	r5,zero
    6850:	dc000015 	stw	r16,0(sp)
    6854:	dfc00115 	stw	ra,4(sp)
    6858:	2021883a 	mov	r16,r4
    685c:	0006a100 	call	6a10 <__call_exitprocs>
    6860:	00800074 	movhi	r2,1
    6864:	10a1a604 	addi	r2,r2,-31080
    6868:	11000017 	ldw	r4,0(r2)
    686c:	20800f17 	ldw	r2,60(r4)
    6870:	10000126 	beq	r2,zero,6878 <exit+0x30>
    6874:	103ee83a 	callr	r2
    6878:	8009883a 	mov	r4,r16
    687c:	0006ba40 	call	6ba4 <_exit>

00006880 <memcmp>:
    6880:	01c000c4 	movi	r7,3
    6884:	3980192e 	bgeu	r7,r6,68ec <memcmp+0x6c>
    6888:	2144b03a 	or	r2,r4,r5
    688c:	11c4703a 	and	r2,r2,r7
    6890:	10000f26 	beq	r2,zero,68d0 <memcmp+0x50>
    6894:	20800003 	ldbu	r2,0(r4)
    6898:	28c00003 	ldbu	r3,0(r5)
    689c:	10c0151e 	bne	r2,r3,68f4 <memcmp+0x74>
    68a0:	31bfff84 	addi	r6,r6,-2
    68a4:	01ffffc4 	movi	r7,-1
    68a8:	00000406 	br	68bc <memcmp+0x3c>
    68ac:	20800003 	ldbu	r2,0(r4)
    68b0:	28c00003 	ldbu	r3,0(r5)
    68b4:	31bfffc4 	addi	r6,r6,-1
    68b8:	10c00e1e 	bne	r2,r3,68f4 <memcmp+0x74>
    68bc:	21000044 	addi	r4,r4,1
    68c0:	29400044 	addi	r5,r5,1
    68c4:	31fff91e 	bne	r6,r7,68ac <memcmp+0x2c>
    68c8:	0005883a 	mov	r2,zero
    68cc:	f800283a 	ret
    68d0:	20c00017 	ldw	r3,0(r4)
    68d4:	28800017 	ldw	r2,0(r5)
    68d8:	1880041e 	bne	r3,r2,68ec <memcmp+0x6c>
    68dc:	31bfff04 	addi	r6,r6,-4
    68e0:	21000104 	addi	r4,r4,4
    68e4:	29400104 	addi	r5,r5,4
    68e8:	39bff936 	bltu	r7,r6,68d0 <memcmp+0x50>
    68ec:	303fe91e 	bne	r6,zero,6894 <memcmp+0x14>
    68f0:	003ff506 	br	68c8 <memcmp+0x48>
    68f4:	10c5c83a 	sub	r2,r2,r3
    68f8:	f800283a 	ret

000068fc <__register_exitproc>:
    68fc:	00800074 	movhi	r2,1
    6900:	defffa04 	addi	sp,sp,-24
    6904:	10a1a604 	addi	r2,r2,-31080
    6908:	dc000315 	stw	r16,12(sp)
    690c:	14000017 	ldw	r16,0(r2)
    6910:	dc400415 	stw	r17,16(sp)
    6914:	dfc00515 	stw	ra,20(sp)
    6918:	80805217 	ldw	r2,328(r16)
    691c:	2023883a 	mov	r17,r4
    6920:	10003626 	beq	r2,zero,69fc <__register_exitproc+0x100>
    6924:	10c00117 	ldw	r3,4(r2)
    6928:	010007c4 	movi	r4,31
    692c:	20c00e16 	blt	r4,r3,6968 <__register_exitproc+0x6c>
    6930:	1a400044 	addi	r9,r3,1
    6934:	8800211e 	bne	r17,zero,69bc <__register_exitproc+0xc0>
    6938:	18c00084 	addi	r3,r3,2
    693c:	18c7883a 	add	r3,r3,r3
    6940:	18c7883a 	add	r3,r3,r3
    6944:	12400115 	stw	r9,4(r2)
    6948:	10c7883a 	add	r3,r2,r3
    694c:	19400015 	stw	r5,0(r3)
    6950:	0005883a 	mov	r2,zero
    6954:	dfc00517 	ldw	ra,20(sp)
    6958:	dc400417 	ldw	r17,16(sp)
    695c:	dc000317 	ldw	r16,12(sp)
    6960:	dec00604 	addi	sp,sp,24
    6964:	f800283a 	ret
    6968:	00800034 	movhi	r2,0
    696c:	10861a04 	addi	r2,r2,6248
    6970:	10002526 	beq	r2,zero,6a08 <__register_exitproc+0x10c>
    6974:	01006404 	movi	r4,400
    6978:	d9400015 	stw	r5,0(sp)
    697c:	d9800115 	stw	r6,4(sp)
    6980:	d9c00215 	stw	r7,8(sp)
    6984:	00018680 	call	1868 <malloc>
    6988:	d9400017 	ldw	r5,0(sp)
    698c:	d9800117 	ldw	r6,4(sp)
    6990:	d9c00217 	ldw	r7,8(sp)
    6994:	10001c26 	beq	r2,zero,6a08 <__register_exitproc+0x10c>
    6998:	80c05217 	ldw	r3,328(r16)
    699c:	10000115 	stw	zero,4(r2)
    69a0:	02400044 	movi	r9,1
    69a4:	10c00015 	stw	r3,0(r2)
    69a8:	80805215 	stw	r2,328(r16)
    69ac:	10006215 	stw	zero,392(r2)
    69b0:	10006315 	stw	zero,396(r2)
    69b4:	0007883a 	mov	r3,zero
    69b8:	883fdf26 	beq	r17,zero,6938 <__register_exitproc+0x3c>
    69bc:	18d1883a 	add	r8,r3,r3
    69c0:	4211883a 	add	r8,r8,r8
    69c4:	1211883a 	add	r8,r2,r8
    69c8:	41802215 	stw	r6,136(r8)
    69cc:	01000044 	movi	r4,1
    69d0:	11806217 	ldw	r6,392(r2)
    69d4:	20c8983a 	sll	r4,r4,r3
    69d8:	310cb03a 	or	r6,r6,r4
    69dc:	11806215 	stw	r6,392(r2)
    69e0:	41c04215 	stw	r7,264(r8)
    69e4:	01800084 	movi	r6,2
    69e8:	89bfd31e 	bne	r17,r6,6938 <__register_exitproc+0x3c>
    69ec:	11806317 	ldw	r6,396(r2)
    69f0:	3108b03a 	or	r4,r6,r4
    69f4:	11006315 	stw	r4,396(r2)
    69f8:	003fcf06 	br	6938 <__register_exitproc+0x3c>
    69fc:	80805304 	addi	r2,r16,332
    6a00:	80805215 	stw	r2,328(r16)
    6a04:	003fc706 	br	6924 <__register_exitproc+0x28>
    6a08:	00bfffc4 	movi	r2,-1
    6a0c:	003fd106 	br	6954 <__register_exitproc+0x58>

00006a10 <__call_exitprocs>:
    6a10:	00800074 	movhi	r2,1
    6a14:	10a1a604 	addi	r2,r2,-31080
    6a18:	10800017 	ldw	r2,0(r2)
    6a1c:	defff404 	addi	sp,sp,-48
    6a20:	dd800815 	stw	r22,32(sp)
    6a24:	d8800015 	stw	r2,0(sp)
    6a28:	10805204 	addi	r2,r2,328
    6a2c:	dd000615 	stw	r20,24(sp)
    6a30:	dc800415 	stw	r18,16(sp)
    6a34:	dfc00b15 	stw	ra,44(sp)
    6a38:	df000a15 	stw	fp,40(sp)
    6a3c:	ddc00915 	stw	r23,36(sp)
    6a40:	dd400715 	stw	r21,28(sp)
    6a44:	dcc00515 	stw	r19,20(sp)
    6a48:	dc400315 	stw	r17,12(sp)
    6a4c:	dc000215 	stw	r16,8(sp)
    6a50:	2025883a 	mov	r18,r4
    6a54:	2829883a 	mov	r20,r5
    6a58:	d8800115 	stw	r2,4(sp)
    6a5c:	05bfffc4 	movi	r22,-1
    6a60:	d8800017 	ldw	r2,0(sp)
    6a64:	14c05217 	ldw	r19,328(r2)
    6a68:	98001d26 	beq	r19,zero,6ae0 <__call_exitprocs+0xd0>
    6a6c:	dd400117 	ldw	r21,4(sp)
    6a70:	98800117 	ldw	r2,4(r19)
    6a74:	173fffc4 	addi	fp,r2,-1
    6a78:	e0000d16 	blt	fp,zero,6ab0 <__call_exitprocs+0xa0>
    6a7c:	14000044 	addi	r16,r2,1
    6a80:	8421883a 	add	r16,r16,r16
    6a84:	8421883a 	add	r16,r16,r16
    6a88:	84402004 	addi	r17,r16,128
    6a8c:	9c63883a 	add	r17,r19,r17
    6a90:	9c21883a 	add	r16,r19,r16
    6a94:	a0001e26 	beq	r20,zero,6b10 <__call_exitprocs+0x100>
    6a98:	80804017 	ldw	r2,256(r16)
    6a9c:	15001c26 	beq	r2,r20,6b10 <__call_exitprocs+0x100>
    6aa0:	e73fffc4 	addi	fp,fp,-1
    6aa4:	843fff04 	addi	r16,r16,-4
    6aa8:	8c7fff04 	addi	r17,r17,-4
    6aac:	e5bff91e 	bne	fp,r22,6a94 <__call_exitprocs+0x84>
    6ab0:	00800034 	movhi	r2,0
    6ab4:	10861f04 	addi	r2,r2,6268
    6ab8:	10000926 	beq	r2,zero,6ae0 <__call_exitprocs+0xd0>
    6abc:	98800117 	ldw	r2,4(r19)
    6ac0:	1000311e 	bne	r2,zero,6b88 <__call_exitprocs+0x178>
    6ac4:	98800017 	ldw	r2,0(r19)
    6ac8:	10003426 	beq	r2,zero,6b9c <__call_exitprocs+0x18c>
    6acc:	9809883a 	mov	r4,r19
    6ad0:	a8800015 	stw	r2,0(r21)
    6ad4:	000187c0 	call	187c <free>
    6ad8:	acc00017 	ldw	r19,0(r21)
    6adc:	983fe41e 	bne	r19,zero,6a70 <__call_exitprocs+0x60>
    6ae0:	dfc00b17 	ldw	ra,44(sp)
    6ae4:	df000a17 	ldw	fp,40(sp)
    6ae8:	ddc00917 	ldw	r23,36(sp)
    6aec:	dd800817 	ldw	r22,32(sp)
    6af0:	dd400717 	ldw	r21,28(sp)
    6af4:	dd000617 	ldw	r20,24(sp)
    6af8:	dcc00517 	ldw	r19,20(sp)
    6afc:	dc800417 	ldw	r18,16(sp)
    6b00:	dc400317 	ldw	r17,12(sp)
    6b04:	dc000217 	ldw	r16,8(sp)
    6b08:	dec00c04 	addi	sp,sp,48
    6b0c:	f800283a 	ret
    6b10:	98800117 	ldw	r2,4(r19)
    6b14:	80c00017 	ldw	r3,0(r16)
    6b18:	10bfffc4 	addi	r2,r2,-1
    6b1c:	17001526 	beq	r2,fp,6b74 <__call_exitprocs+0x164>
    6b20:	80000015 	stw	zero,0(r16)
    6b24:	183fde26 	beq	r3,zero,6aa0 <__call_exitprocs+0x90>
    6b28:	00800044 	movi	r2,1
    6b2c:	1708983a 	sll	r4,r2,fp
    6b30:	98806217 	ldw	r2,392(r19)
    6b34:	9dc00117 	ldw	r23,4(r19)
    6b38:	2084703a 	and	r2,r4,r2
    6b3c:	1000061e 	bne	r2,zero,6b58 <__call_exitprocs+0x148>
    6b40:	183ee83a 	callr	r3
    6b44:	98800117 	ldw	r2,4(r19)
    6b48:	15ffc51e 	bne	r2,r23,6a60 <__call_exitprocs+0x50>
    6b4c:	a8800017 	ldw	r2,0(r21)
    6b50:	14ffd326 	beq	r2,r19,6aa0 <__call_exitprocs+0x90>
    6b54:	003fc206 	br	6a60 <__call_exitprocs+0x50>
    6b58:	98806317 	ldw	r2,396(r19)
    6b5c:	2084703a 	and	r2,r4,r2
    6b60:	1000061e 	bne	r2,zero,6b7c <__call_exitprocs+0x16c>
    6b64:	89400017 	ldw	r5,0(r17)
    6b68:	9009883a 	mov	r4,r18
    6b6c:	183ee83a 	callr	r3
    6b70:	003ff406 	br	6b44 <__call_exitprocs+0x134>
    6b74:	9f000115 	stw	fp,4(r19)
    6b78:	003fea06 	br	6b24 <__call_exitprocs+0x114>
    6b7c:	89000017 	ldw	r4,0(r17)
    6b80:	183ee83a 	callr	r3
    6b84:	003fef06 	br	6b44 <__call_exitprocs+0x134>
    6b88:	98800017 	ldw	r2,0(r19)
    6b8c:	982b883a 	mov	r21,r19
    6b90:	1027883a 	mov	r19,r2
    6b94:	983fb61e 	bne	r19,zero,6a70 <__call_exitprocs+0x60>
    6b98:	003fd106 	br	6ae0 <__call_exitprocs+0xd0>
    6b9c:	0005883a 	mov	r2,zero
    6ba0:	003ffa06 	br	6b8c <__call_exitprocs+0x17c>

00006ba4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6ba4:	defffd04 	addi	sp,sp,-12
    6ba8:	df000215 	stw	fp,8(sp)
    6bac:	df000204 	addi	fp,sp,8
    6bb0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6bb4:	0001883a 	nop
    6bb8:	e0bfff17 	ldw	r2,-4(fp)
    6bbc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    6bc0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    6bc4:	10000226 	beq	r2,zero,6bd0 <_exit+0x2c>
    ALT_SIM_FAIL();
    6bc8:	002af070 	cmpltui	zero,zero,43969
    6bcc:	00000106 	br	6bd4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    6bd0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    6bd4:	003fff06 	br	6bd4 <_exit+0x30>
