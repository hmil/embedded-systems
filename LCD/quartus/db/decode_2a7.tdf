--lpm_decode DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 14.1 cbx_cycloneii 2014:12:03:18:04:04:SJ cbx_lpm_add_sub 2014:12:03:18:04:04:SJ cbx_lpm_compare 2014:12:03:18:04:04:SJ cbx_lpm_decode 2014:12:03:18:04:04:SJ cbx_mgl 2014:12:03:18:06:09:SJ cbx_stratix 2014:12:03:18:04:04:SJ cbx_stratixii 2014:12:03:18:04:04:SJ  VERSION_END


-- Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_2a7
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2724w[1..0]	: WIRE;
	w_anode2733w[3..0]	: WIRE;
	w_anode2750w[3..0]	: WIRE;
	w_anode2760w[3..0]	: WIRE;
	w_anode2770w[3..0]	: WIRE;
	w_anode2780w[3..0]	: WIRE;
	w_anode2790w[3..0]	: WIRE;
	w_anode2800w[3..0]	: WIRE;
	w_anode2810w[3..0]	: WIRE;
	w_anode2822w[1..0]	: WIRE;
	w_anode2829w[3..0]	: WIRE;
	w_anode2840w[3..0]	: WIRE;
	w_anode2850w[3..0]	: WIRE;
	w_anode2860w[3..0]	: WIRE;
	w_anode2870w[3..0]	: WIRE;
	w_anode2880w[3..0]	: WIRE;
	w_anode2890w[3..0]	: WIRE;
	w_anode2900w[3..0]	: WIRE;
	w_data2722w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode2900w[3..3], w_anode2890w[3..3], w_anode2880w[3..3], w_anode2870w[3..3], w_anode2860w[3..3], w_anode2850w[3..3], w_anode2840w[3..3], w_anode2829w[3..3]), ( w_anode2810w[3..3], w_anode2800w[3..3], w_anode2790w[3..3], w_anode2780w[3..3], w_anode2770w[3..3], w_anode2760w[3..3], w_anode2750w[3..3], w_anode2733w[3..3]));
	w_anode2724w[] = ( (w_anode2724w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2733w[] = ( (w_anode2733w[2..2] & (! w_data2722w[2..2])), (w_anode2733w[1..1] & (! w_data2722w[1..1])), (w_anode2733w[0..0] & (! w_data2722w[0..0])), w_anode2724w[1..1]);
	w_anode2750w[] = ( (w_anode2750w[2..2] & (! w_data2722w[2..2])), (w_anode2750w[1..1] & (! w_data2722w[1..1])), (w_anode2750w[0..0] & w_data2722w[0..0]), w_anode2724w[1..1]);
	w_anode2760w[] = ( (w_anode2760w[2..2] & (! w_data2722w[2..2])), (w_anode2760w[1..1] & w_data2722w[1..1]), (w_anode2760w[0..0] & (! w_data2722w[0..0])), w_anode2724w[1..1]);
	w_anode2770w[] = ( (w_anode2770w[2..2] & (! w_data2722w[2..2])), (w_anode2770w[1..1] & w_data2722w[1..1]), (w_anode2770w[0..0] & w_data2722w[0..0]), w_anode2724w[1..1]);
	w_anode2780w[] = ( (w_anode2780w[2..2] & w_data2722w[2..2]), (w_anode2780w[1..1] & (! w_data2722w[1..1])), (w_anode2780w[0..0] & (! w_data2722w[0..0])), w_anode2724w[1..1]);
	w_anode2790w[] = ( (w_anode2790w[2..2] & w_data2722w[2..2]), (w_anode2790w[1..1] & (! w_data2722w[1..1])), (w_anode2790w[0..0] & w_data2722w[0..0]), w_anode2724w[1..1]);
	w_anode2800w[] = ( (w_anode2800w[2..2] & w_data2722w[2..2]), (w_anode2800w[1..1] & w_data2722w[1..1]), (w_anode2800w[0..0] & (! w_data2722w[0..0])), w_anode2724w[1..1]);
	w_anode2810w[] = ( (w_anode2810w[2..2] & w_data2722w[2..2]), (w_anode2810w[1..1] & w_data2722w[1..1]), (w_anode2810w[0..0] & w_data2722w[0..0]), w_anode2724w[1..1]);
	w_anode2822w[] = ( (w_anode2822w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2829w[] = ( (w_anode2829w[2..2] & (! w_data2722w[2..2])), (w_anode2829w[1..1] & (! w_data2722w[1..1])), (w_anode2829w[0..0] & (! w_data2722w[0..0])), w_anode2822w[1..1]);
	w_anode2840w[] = ( (w_anode2840w[2..2] & (! w_data2722w[2..2])), (w_anode2840w[1..1] & (! w_data2722w[1..1])), (w_anode2840w[0..0] & w_data2722w[0..0]), w_anode2822w[1..1]);
	w_anode2850w[] = ( (w_anode2850w[2..2] & (! w_data2722w[2..2])), (w_anode2850w[1..1] & w_data2722w[1..1]), (w_anode2850w[0..0] & (! w_data2722w[0..0])), w_anode2822w[1..1]);
	w_anode2860w[] = ( (w_anode2860w[2..2] & (! w_data2722w[2..2])), (w_anode2860w[1..1] & w_data2722w[1..1]), (w_anode2860w[0..0] & w_data2722w[0..0]), w_anode2822w[1..1]);
	w_anode2870w[] = ( (w_anode2870w[2..2] & w_data2722w[2..2]), (w_anode2870w[1..1] & (! w_data2722w[1..1])), (w_anode2870w[0..0] & (! w_data2722w[0..0])), w_anode2822w[1..1]);
	w_anode2880w[] = ( (w_anode2880w[2..2] & w_data2722w[2..2]), (w_anode2880w[1..1] & (! w_data2722w[1..1])), (w_anode2880w[0..0] & w_data2722w[0..0]), w_anode2822w[1..1]);
	w_anode2890w[] = ( (w_anode2890w[2..2] & w_data2722w[2..2]), (w_anode2890w[1..1] & w_data2722w[1..1]), (w_anode2890w[0..0] & (! w_data2722w[0..0])), w_anode2822w[1..1]);
	w_anode2900w[] = ( (w_anode2900w[2..2] & w_data2722w[2..2]), (w_anode2900w[1..1] & w_data2722w[1..1]), (w_anode2900w[0..0] & w_data2722w[0..0]), w_anode2822w[1..1]);
	w_data2722w[2..0] = data_wire[2..0];
END;
--VALID FILE
